
LICENTA FULL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015958  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  08015c08  08015c08  00025c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080161cc  080161cc  000261cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080161d4  080161d4  000261d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080161d8  080161d8  000261d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000097c  24000000  080161dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000056ac  2400097c  08016b58  0003097c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006028  08016b58  00036028  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003097c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b60e  00000000  00000000  000309aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000051be  00000000  00000000  0005bfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020c0  00000000  00000000  00061178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001f30  00000000  00000000  00063238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036e08  00000000  00000000  00065168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000296ce  00000000  00000000  0009bf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00161199  00000000  00000000  000c563e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002267d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009f10  00000000  00000000  00226828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400097c 	.word	0x2400097c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08015bf0 	.word	0x08015bf0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000980 	.word	0x24000980
 80002ec:	08015bf0 	.word	0x08015bf0

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9ac 	b.w	8000a88 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	4604      	mov	r4, r0
 80007c0:	468e      	mov	lr, r1
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d14d      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c6:	428a      	cmp	r2, r1
 80007c8:	4694      	mov	ip, r2
 80007ca:	d969      	bls.n	80008a0 <__udivmoddi4+0xe8>
 80007cc:	fab2 f282 	clz	r2, r2
 80007d0:	b152      	cbz	r2, 80007e8 <__udivmoddi4+0x30>
 80007d2:	fa01 f302 	lsl.w	r3, r1, r2
 80007d6:	f1c2 0120 	rsb	r1, r2, #32
 80007da:	fa20 f101 	lsr.w	r1, r0, r1
 80007de:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e2:	ea41 0e03 	orr.w	lr, r1, r3
 80007e6:	4094      	lsls	r4, r2
 80007e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007ec:	0c21      	lsrs	r1, r4, #16
 80007ee:	fbbe f6f8 	udiv	r6, lr, r8
 80007f2:	fa1f f78c 	uxth.w	r7, ip
 80007f6:	fb08 e316 	mls	r3, r8, r6, lr
 80007fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007fe:	fb06 f107 	mul.w	r1, r6, r7
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f106 30ff 	add.w	r0, r6, #4294967295
 800080e:	f080 811f 	bcs.w	8000a50 <__udivmoddi4+0x298>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 811c 	bls.w	8000a50 <__udivmoddi4+0x298>
 8000818:	3e02      	subs	r6, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a5b      	subs	r3, r3, r1
 800081e:	b2a4      	uxth	r4, r4
 8000820:	fbb3 f0f8 	udiv	r0, r3, r8
 8000824:	fb08 3310 	mls	r3, r8, r0, r3
 8000828:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800082c:	fb00 f707 	mul.w	r7, r0, r7
 8000830:	42a7      	cmp	r7, r4
 8000832:	d90a      	bls.n	800084a <__udivmoddi4+0x92>
 8000834:	eb1c 0404 	adds.w	r4, ip, r4
 8000838:	f100 33ff 	add.w	r3, r0, #4294967295
 800083c:	f080 810a 	bcs.w	8000a54 <__udivmoddi4+0x29c>
 8000840:	42a7      	cmp	r7, r4
 8000842:	f240 8107 	bls.w	8000a54 <__udivmoddi4+0x29c>
 8000846:	4464      	add	r4, ip
 8000848:	3802      	subs	r0, #2
 800084a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800084e:	1be4      	subs	r4, r4, r7
 8000850:	2600      	movs	r6, #0
 8000852:	b11d      	cbz	r5, 800085c <__udivmoddi4+0xa4>
 8000854:	40d4      	lsrs	r4, r2
 8000856:	2300      	movs	r3, #0
 8000858:	e9c5 4300 	strd	r4, r3, [r5]
 800085c:	4631      	mov	r1, r6
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d909      	bls.n	800087a <__udivmoddi4+0xc2>
 8000866:	2d00      	cmp	r5, #0
 8000868:	f000 80ef 	beq.w	8000a4a <__udivmoddi4+0x292>
 800086c:	2600      	movs	r6, #0
 800086e:	e9c5 0100 	strd	r0, r1, [r5]
 8000872:	4630      	mov	r0, r6
 8000874:	4631      	mov	r1, r6
 8000876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087a:	fab3 f683 	clz	r6, r3
 800087e:	2e00      	cmp	r6, #0
 8000880:	d14a      	bne.n	8000918 <__udivmoddi4+0x160>
 8000882:	428b      	cmp	r3, r1
 8000884:	d302      	bcc.n	800088c <__udivmoddi4+0xd4>
 8000886:	4282      	cmp	r2, r0
 8000888:	f200 80f9 	bhi.w	8000a7e <__udivmoddi4+0x2c6>
 800088c:	1a84      	subs	r4, r0, r2
 800088e:	eb61 0303 	sbc.w	r3, r1, r3
 8000892:	2001      	movs	r0, #1
 8000894:	469e      	mov	lr, r3
 8000896:	2d00      	cmp	r5, #0
 8000898:	d0e0      	beq.n	800085c <__udivmoddi4+0xa4>
 800089a:	e9c5 4e00 	strd	r4, lr, [r5]
 800089e:	e7dd      	b.n	800085c <__udivmoddi4+0xa4>
 80008a0:	b902      	cbnz	r2, 80008a4 <__udivmoddi4+0xec>
 80008a2:	deff      	udf	#255	; 0xff
 80008a4:	fab2 f282 	clz	r2, r2
 80008a8:	2a00      	cmp	r2, #0
 80008aa:	f040 8092 	bne.w	80009d2 <__udivmoddi4+0x21a>
 80008ae:	eba1 010c 	sub.w	r1, r1, ip
 80008b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b6:	fa1f fe8c 	uxth.w	lr, ip
 80008ba:	2601      	movs	r6, #1
 80008bc:	0c20      	lsrs	r0, r4, #16
 80008be:	fbb1 f3f7 	udiv	r3, r1, r7
 80008c2:	fb07 1113 	mls	r1, r7, r3, r1
 80008c6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ca:	fb0e f003 	mul.w	r0, lr, r3
 80008ce:	4288      	cmp	r0, r1
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x12c>
 80008d2:	eb1c 0101 	adds.w	r1, ip, r1
 80008d6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008da:	d202      	bcs.n	80008e2 <__udivmoddi4+0x12a>
 80008dc:	4288      	cmp	r0, r1
 80008de:	f200 80cb 	bhi.w	8000a78 <__udivmoddi4+0x2c0>
 80008e2:	4643      	mov	r3, r8
 80008e4:	1a09      	subs	r1, r1, r0
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ec:	fb07 1110 	mls	r1, r7, r0, r1
 80008f0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008f4:	fb0e fe00 	mul.w	lr, lr, r0
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d908      	bls.n	800090e <__udivmoddi4+0x156>
 80008fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000900:	f100 31ff 	add.w	r1, r0, #4294967295
 8000904:	d202      	bcs.n	800090c <__udivmoddi4+0x154>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f200 80bb 	bhi.w	8000a82 <__udivmoddi4+0x2ca>
 800090c:	4608      	mov	r0, r1
 800090e:	eba4 040e 	sub.w	r4, r4, lr
 8000912:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000916:	e79c      	b.n	8000852 <__udivmoddi4+0x9a>
 8000918:	f1c6 0720 	rsb	r7, r6, #32
 800091c:	40b3      	lsls	r3, r6
 800091e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000922:	ea4c 0c03 	orr.w	ip, ip, r3
 8000926:	fa20 f407 	lsr.w	r4, r0, r7
 800092a:	fa01 f306 	lsl.w	r3, r1, r6
 800092e:	431c      	orrs	r4, r3
 8000930:	40f9      	lsrs	r1, r7
 8000932:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000936:	fa00 f306 	lsl.w	r3, r0, r6
 800093a:	fbb1 f8f9 	udiv	r8, r1, r9
 800093e:	0c20      	lsrs	r0, r4, #16
 8000940:	fa1f fe8c 	uxth.w	lr, ip
 8000944:	fb09 1118 	mls	r1, r9, r8, r1
 8000948:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800094c:	fb08 f00e 	mul.w	r0, r8, lr
 8000950:	4288      	cmp	r0, r1
 8000952:	fa02 f206 	lsl.w	r2, r2, r6
 8000956:	d90b      	bls.n	8000970 <__udivmoddi4+0x1b8>
 8000958:	eb1c 0101 	adds.w	r1, ip, r1
 800095c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000960:	f080 8088 	bcs.w	8000a74 <__udivmoddi4+0x2bc>
 8000964:	4288      	cmp	r0, r1
 8000966:	f240 8085 	bls.w	8000a74 <__udivmoddi4+0x2bc>
 800096a:	f1a8 0802 	sub.w	r8, r8, #2
 800096e:	4461      	add	r1, ip
 8000970:	1a09      	subs	r1, r1, r0
 8000972:	b2a4      	uxth	r4, r4
 8000974:	fbb1 f0f9 	udiv	r0, r1, r9
 8000978:	fb09 1110 	mls	r1, r9, r0, r1
 800097c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000980:	fb00 fe0e 	mul.w	lr, r0, lr
 8000984:	458e      	cmp	lr, r1
 8000986:	d908      	bls.n	800099a <__udivmoddi4+0x1e2>
 8000988:	eb1c 0101 	adds.w	r1, ip, r1
 800098c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000990:	d26c      	bcs.n	8000a6c <__udivmoddi4+0x2b4>
 8000992:	458e      	cmp	lr, r1
 8000994:	d96a      	bls.n	8000a6c <__udivmoddi4+0x2b4>
 8000996:	3802      	subs	r0, #2
 8000998:	4461      	add	r1, ip
 800099a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800099e:	fba0 9402 	umull	r9, r4, r0, r2
 80009a2:	eba1 010e 	sub.w	r1, r1, lr
 80009a6:	42a1      	cmp	r1, r4
 80009a8:	46c8      	mov	r8, r9
 80009aa:	46a6      	mov	lr, r4
 80009ac:	d356      	bcc.n	8000a5c <__udivmoddi4+0x2a4>
 80009ae:	d053      	beq.n	8000a58 <__udivmoddi4+0x2a0>
 80009b0:	b15d      	cbz	r5, 80009ca <__udivmoddi4+0x212>
 80009b2:	ebb3 0208 	subs.w	r2, r3, r8
 80009b6:	eb61 010e 	sbc.w	r1, r1, lr
 80009ba:	fa01 f707 	lsl.w	r7, r1, r7
 80009be:	fa22 f306 	lsr.w	r3, r2, r6
 80009c2:	40f1      	lsrs	r1, r6
 80009c4:	431f      	orrs	r7, r3
 80009c6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ca:	2600      	movs	r6, #0
 80009cc:	4631      	mov	r1, r6
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	f1c2 0320 	rsb	r3, r2, #32
 80009d6:	40d8      	lsrs	r0, r3
 80009d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009dc:	fa21 f303 	lsr.w	r3, r1, r3
 80009e0:	4091      	lsls	r1, r2
 80009e2:	4301      	orrs	r1, r0
 80009e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009e8:	fa1f fe8c 	uxth.w	lr, ip
 80009ec:	fbb3 f0f7 	udiv	r0, r3, r7
 80009f0:	fb07 3610 	mls	r6, r7, r0, r3
 80009f4:	0c0b      	lsrs	r3, r1, #16
 80009f6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009fa:	fb00 f60e 	mul.w	r6, r0, lr
 80009fe:	429e      	cmp	r6, r3
 8000a00:	fa04 f402 	lsl.w	r4, r4, r2
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x260>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a0e:	d22f      	bcs.n	8000a70 <__udivmoddi4+0x2b8>
 8000a10:	429e      	cmp	r6, r3
 8000a12:	d92d      	bls.n	8000a70 <__udivmoddi4+0x2b8>
 8000a14:	3802      	subs	r0, #2
 8000a16:	4463      	add	r3, ip
 8000a18:	1b9b      	subs	r3, r3, r6
 8000a1a:	b289      	uxth	r1, r1
 8000a1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a20:	fb07 3316 	mls	r3, r7, r6, r3
 8000a24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a28:	fb06 f30e 	mul.w	r3, r6, lr
 8000a2c:	428b      	cmp	r3, r1
 8000a2e:	d908      	bls.n	8000a42 <__udivmoddi4+0x28a>
 8000a30:	eb1c 0101 	adds.w	r1, ip, r1
 8000a34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a38:	d216      	bcs.n	8000a68 <__udivmoddi4+0x2b0>
 8000a3a:	428b      	cmp	r3, r1
 8000a3c:	d914      	bls.n	8000a68 <__udivmoddi4+0x2b0>
 8000a3e:	3e02      	subs	r6, #2
 8000a40:	4461      	add	r1, ip
 8000a42:	1ac9      	subs	r1, r1, r3
 8000a44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a48:	e738      	b.n	80008bc <__udivmoddi4+0x104>
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e705      	b.n	800085c <__udivmoddi4+0xa4>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e3      	b.n	800081c <__udivmoddi4+0x64>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6f8      	b.n	800084a <__udivmoddi4+0x92>
 8000a58:	454b      	cmp	r3, r9
 8000a5a:	d2a9      	bcs.n	80009b0 <__udivmoddi4+0x1f8>
 8000a5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7a3      	b.n	80009b0 <__udivmoddi4+0x1f8>
 8000a68:	4646      	mov	r6, r8
 8000a6a:	e7ea      	b.n	8000a42 <__udivmoddi4+0x28a>
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	e794      	b.n	800099a <__udivmoddi4+0x1e2>
 8000a70:	4640      	mov	r0, r8
 8000a72:	e7d1      	b.n	8000a18 <__udivmoddi4+0x260>
 8000a74:	46d0      	mov	r8, sl
 8000a76:	e77b      	b.n	8000970 <__udivmoddi4+0x1b8>
 8000a78:	3b02      	subs	r3, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	e732      	b.n	80008e4 <__udivmoddi4+0x12c>
 8000a7e:	4630      	mov	r0, r6
 8000a80:	e709      	b.n	8000896 <__udivmoddi4+0xde>
 8000a82:	4464      	add	r4, ip
 8000a84:	3802      	subs	r0, #2
 8000a86:	e742      	b.n	800090e <__udivmoddi4+0x156>

08000a88 <__aeabi_idiv0>:
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <handle_debounce_Button_Fan>:
/* Private function prototypes */
uint8_t handle_debounce_Button_Fan();
/* --------------------------------*/

uint8_t handle_debounce_Button_Fan()
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
	uint8_t retVal = FALSE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	71fb      	strb	r3, [r7, #7]

	if( HIGH == (HAL_GPIO_ReadPin(Button_Fan_GPIO_Port, Button_Fan_Pin)) )
 8000a96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9a:	4816      	ldr	r0, [pc, #88]	; (8000af4 <handle_debounce_Button_Fan+0x68>)
 8000a9c:	f007 fd7c 	bl	8008598 <HAL_GPIO_ReadPin>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d11d      	bne.n	8000ae2 <handle_debounce_Button_Fan+0x56>
	{
		if(0u == timer_debounce_button_fan)
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <handle_debounce_Button_Fan+0x6c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d103      	bne.n	8000ab6 <handle_debounce_Button_Fan+0x2a>
		{
			timer_debounce_button_fan = TIMER_2S + 1;
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <handle_debounce_Button_Fan+0x6c>)
 8000ab0:	2215      	movs	r2, #21
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	e018      	b.n	8000ae8 <handle_debounce_Button_Fan+0x5c>
		}
		else if(1u == timer_debounce_button_fan)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <handle_debounce_Button_Fan+0x6c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d10b      	bne.n	8000ad6 <handle_debounce_Button_Fan+0x4a>
		{
			retVal = TRUE;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]
			timer_debounce_button_fan = 0u;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <handle_debounce_Button_Fan+0x6c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
			handleFan++;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <handle_debounce_Button_Fan+0x70>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	3301      	adds	r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <handle_debounce_Button_Fan+0x70>)
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	e008      	b.n	8000ae8 <handle_debounce_Button_Fan+0x5c>
		}
		else
		{
			timer_debounce_button_fan--;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <handle_debounce_Button_Fan+0x6c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <handle_debounce_Button_Fan+0x6c>)
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	e002      	b.n	8000ae8 <handle_debounce_Button_Fan+0x5c>
		}
	}
	else
	{
		timer_debounce_button_fan = 0u;
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <handle_debounce_Button_Fan+0x6c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
	}
	return retVal;
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	58021800 	.word	0x58021800
 8000af8:	2400099c 	.word	0x2400099c
 8000afc:	24000998 	.word	0x24000998

08000b00 <FanControl_Init>:


/*Exported Functions*/
void FanControl_Init()
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000b04:	2100      	movs	r1, #0
 8000b06:	4807      	ldr	r0, [pc, #28]	; (8000b24 <FanControl_Init+0x24>)
 8000b08:	f00b f9f2 	bl	800bef0 <HAL_TIM_PWM_Start>
	htim4.Instance->CCR1 = 0u;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <FanControl_Init+0x24>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34
	handleFan = 0u;
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <FanControl_Init+0x28>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
	checkFanStatus = 0u;
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <FanControl_Init+0x2c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	240013bc 	.word	0x240013bc
 8000b28:	24000998 	.word	0x24000998
 8000b2c:	240009a0 	.word	0x240009a0

08000b30 <FanControl_TaskCyclicEvent>:

void FanControl_TaskCyclicEvent()
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af02      	add	r7, sp, #8

	uint8_t driverPresent;
	Rte_Read_DriverPresence_value(&driverPresent);
 8000b36:	1cfb      	adds	r3, r7, #3
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 f979 	bl	8001e30 <Rte_Read_DriverPresence_value>

	if(FALSE == driverPresent)
 8000b3e:	78fb      	ldrb	r3, [r7, #3]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d127      	bne.n	8000b94 <FanControl_TaskCyclicEvent+0x64>
	{

			  uint8_t fanStatus;
			  Rte_Read_CommandBuffer_Fan_status(&fanStatus);
 8000b44:	1cbb      	adds	r3, r7, #2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 f9a8 	bl	8001e9c <Rte_Read_CommandBuffer_Fan_status>

			  if(ON == fanStatus)
 8000b4c:	78bb      	ldrb	r3, [r7, #2]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d114      	bne.n	8000b7c <FanControl_TaskCyclicEvent+0x4c>
			  {
				  HAL_GPIO_WritePin(In3_GPIO_Port, In3_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b58:	4852      	ldr	r0, [pc, #328]	; (8000ca4 <FanControl_TaskCyclicEvent+0x174>)
 8000b5a:	f007 fd35 	bl	80085c8 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(In4_GPIO_Port, In4_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2104      	movs	r1, #4
 8000b62:	4851      	ldr	r0, [pc, #324]	; (8000ca8 <FanControl_TaskCyclicEvent+0x178>)
 8000b64:	f007 fd30 	bl	80085c8 <HAL_GPIO_WritePin>
			 	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4850      	ldr	r0, [pc, #320]	; (8000cac <FanControl_TaskCyclicEvent+0x17c>)
 8000b6c:	f00b f9c0 	bl	800bef0 <HAL_TIM_PWM_Start>
				  htim4.Instance->CCR1 = 1023u;
 8000b70:	4b4e      	ldr	r3, [pc, #312]	; (8000cac <FanControl_TaskCyclicEvent+0x17c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34
 8000b7a:	e089      	b.n	8000c90 <FanControl_TaskCyclicEvent+0x160>
			  }
			  else
			  {
				  HAL_GPIO_WritePin(In3_GPIO_Port, In3_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b82:	4848      	ldr	r0, [pc, #288]	; (8000ca4 <FanControl_TaskCyclicEvent+0x174>)
 8000b84:	f007 fd20 	bl	80085c8 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(In4_GPIO_Port, In4_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	4846      	ldr	r0, [pc, #280]	; (8000ca8 <FanControl_TaskCyclicEvent+0x178>)
 8000b8e:	f007 fd1b 	bl	80085c8 <HAL_GPIO_WritePin>
 8000b92:	e07d      	b.n	8000c90 <FanControl_TaskCyclicEvent+0x160>
	}
	else
	{

		uint8_t lu8_debounce;
		lu8_debounce = handle_debounce_Button_Fan();
 8000b94:	f7ff ff7a 	bl	8000a8c <handle_debounce_Button_Fan>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	71fb      	strb	r3, [r7, #7]
		Rte_Write_CarSignals_FanStatus(handleFan&1);
 8000b9c:	4b44      	ldr	r3, [pc, #272]	; (8000cb0 <FanControl_TaskCyclicEvent+0x180>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 fa87 	bl	80020b8 <Rte_Write_CarSignals_FanStatus>


		 if( (handleFan & 1u) == 1u ) /* need to check this */
 8000baa:	4b41      	ldr	r3, [pc, #260]	; (8000cb0 <FanControl_TaskCyclicEvent+0x180>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d056      	beq.n	8000c64 <FanControl_TaskCyclicEvent+0x134>
		{
			uint8_t setpointTemp;
			uint8_t measuredTemp;
			uint16_t pwmValue;

			Rte_Read_Potentiometer_interval(&setpointTemp);
 8000bb6:	1c7b      	adds	r3, r7, #1
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 f90d 	bl	8001dd8 <Rte_Read_Potentiometer_interval>
			Rte_Read_Temperature_Value(&measuredTemp);
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 f8bd 	bl	8001d40 <Rte_Read_Temperature_Value>

			if(setpointTemp <= measuredTemp)
 8000bc6:	787a      	ldrb	r2, [r7, #1]
 8000bc8:	783b      	ldrb	r3, [r7, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d833      	bhi.n	8000c36 <FanControl_TaskCyclicEvent+0x106>
			{
				uint8_t lu8_percentage = map_values(abs(setpointTemp - measuredTemp),ZERO,TEN,ZERO_PERCENT,HUNDRED_PERCENT);
 8000bce:	787b      	ldrb	r3, [r7, #1]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	783b      	ldrb	r3, [r7, #0]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8000bda:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000bde:	2364      	movs	r3, #100	; 0x64
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2300      	movs	r3, #0
 8000be4:	220a      	movs	r2, #10
 8000be6:	2100      	movs	r1, #0
 8000be8:	f000 fed8 	bl	800199c <map_values>
 8000bec:	4603      	mov	r3, r0
 8000bee:	71bb      	strb	r3, [r7, #6]
				pwmValue = map_values(lu8_percentage,ZERO,HUNDRED_PERCENT,650u,1023u);
 8000bf0:	79b8      	ldrb	r0, [r7, #6]
 8000bf2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	f240 238a 	movw	r3, #650	; 0x28a
 8000bfc:	2264      	movs	r2, #100	; 0x64
 8000bfe:	2100      	movs	r1, #0
 8000c00:	f000 fecc 	bl	800199c <map_values>
 8000c04:	4603      	mov	r3, r0
 8000c06:	80bb      	strh	r3, [r7, #4]
				HAL_GPIO_WritePin(In3_GPIO_Port, In3_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c0e:	4825      	ldr	r0, [pc, #148]	; (8000ca4 <FanControl_TaskCyclicEvent+0x174>)
 8000c10:	f007 fcda 	bl	80085c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(In4_GPIO_Port, In4_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2104      	movs	r1, #4
 8000c18:	4823      	ldr	r0, [pc, #140]	; (8000ca8 <FanControl_TaskCyclicEvent+0x178>)
 8000c1a:	f007 fcd5 	bl	80085c8 <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4822      	ldr	r0, [pc, #136]	; (8000cac <FanControl_TaskCyclicEvent+0x17c>)
 8000c22:	f00b f965 	bl	800bef0 <HAL_TIM_PWM_Start>
				htim4.Instance->CCR1 = pwmValue;
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <FanControl_TaskCyclicEvent+0x17c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	88ba      	ldrh	r2, [r7, #4]
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34
				checkFanStatus = 1u;
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <FanControl_TaskCyclicEvent+0x184>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e02c      	b.n	8000c90 <FanControl_TaskCyclicEvent+0x160>
			}
			else
			{
				HAL_GPIO_WritePin(In3_GPIO_Port, In3_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3c:	4819      	ldr	r0, [pc, #100]	; (8000ca4 <FanControl_TaskCyclicEvent+0x174>)
 8000c3e:	f007 fcc3 	bl	80085c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(In4_GPIO_Port, In4_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2104      	movs	r1, #4
 8000c46:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <FanControl_TaskCyclicEvent+0x178>)
 8000c48:	f007 fcbe 	bl	80085c8 <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4817      	ldr	r0, [pc, #92]	; (8000cac <FanControl_TaskCyclicEvent+0x17c>)
 8000c50:	f00b f94e 	bl	800bef0 <HAL_TIM_PWM_Start>
				htim4.Instance->CCR1 = ZERO;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <FanControl_TaskCyclicEvent+0x17c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	635a      	str	r2, [r3, #52]	; 0x34
				checkFanStatus = 0u;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <FanControl_TaskCyclicEvent+0x184>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e015      	b.n	8000c90 <FanControl_TaskCyclicEvent+0x160>
			}
		}
		else
		{
			HAL_GPIO_WritePin(In3_GPIO_Port, In3_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c6a:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <FanControl_TaskCyclicEvent+0x174>)
 8000c6c:	f007 fcac 	bl	80085c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(In4_GPIO_Port, In4_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2104      	movs	r1, #4
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <FanControl_TaskCyclicEvent+0x178>)
 8000c76:	f007 fca7 	bl	80085c8 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	480b      	ldr	r0, [pc, #44]	; (8000cac <FanControl_TaskCyclicEvent+0x17c>)
 8000c7e:	f00b f937 	bl	800bef0 <HAL_TIM_PWM_Start>
			htim4.Instance->CCR1 = ZERO;
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <FanControl_TaskCyclicEvent+0x17c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2200      	movs	r2, #0
 8000c88:	635a      	str	r2, [r3, #52]	; 0x34
			checkFanStatus = 0u;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <FanControl_TaskCyclicEvent+0x184>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
		}

	}
	Rte_Write_CarSignals_FanStatus(checkFanStatus);
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <FanControl_TaskCyclicEvent+0x184>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 fa0f 	bl	80020b8 <Rte_Write_CarSignals_FanStatus>

	}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	58020c00 	.word	0x58020c00
 8000ca8:	58021000 	.word	0x58021000
 8000cac:	240013bc 	.word	0x240013bc
 8000cb0:	24000998 	.word	0x24000998
 8000cb4:	240009a0 	.word	0x240009a0

08000cb8 <Find_Command_Character>:

							"AT+CIPSEND\r\n",

};

uint8_t Find_Command_Character(char* buffer, uint16_t buffer_size) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
  uint16_t i, j;
  char number[4] = {0}; // Maximum 3 digits for number plus null terminator
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  for(i = 0; i < buffer_size; i++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	83fb      	strh	r3, [r7, #30]
 8000ccc:	e056      	b.n	8000d7c <Find_Command_Character+0xc4>
    if(buffer[i] == '#') {
 8000cce:	8bfb      	ldrh	r3, [r7, #30]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b23      	cmp	r3, #35	; 0x23
 8000cd8:	d14d      	bne.n	8000d76 <Find_Command_Character+0xbe>
      // Found '#' character, check for number
      j = (i+1) % buffer_size;
 8000cda:	8bfb      	ldrh	r3, [r7, #30]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	887a      	ldrh	r2, [r7, #2]
 8000ce0:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ce4:	fb01 f202 	mul.w	r2, r1, r2
 8000ce8:	1a9b      	subs	r3, r3, r2
 8000cea:	82fb      	strh	r3, [r7, #22]
      if(buffer[j] >= '0' && buffer[j] <= '9') {
 8000cec:	8afb      	ldrh	r3, [r7, #22]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b2f      	cmp	r3, #47	; 0x2f
 8000cf6:	d93e      	bls.n	8000d76 <Find_Command_Character+0xbe>
 8000cf8:	8afb      	ldrh	r3, [r7, #22]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b39      	cmp	r3, #57	; 0x39
 8000d02:	d838      	bhi.n	8000d76 <Find_Command_Character+0xbe>
        // Found number, extract digits and return as integer
        int k = j;
 8000d04:	8afb      	ldrh	r3, [r7, #22]
 8000d06:	61bb      	str	r3, [r7, #24]
        while(k != i && buffer[k] >= '0' && buffer[k] <= '9') {
 8000d08:	e008      	b.n	8000d1c <Find_Command_Character+0x64>
          k = (k+1) % buffer_size;
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	887a      	ldrh	r2, [r7, #2]
 8000d10:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d14:	fb01 f202 	mul.w	r2, r1, r2
 8000d18:	1a9b      	subs	r3, r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        while(k != i && buffer[k] >= '0' && buffer[k] <= '9') {
 8000d1c:	8bfb      	ldrh	r3, [r7, #30]
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d00b      	beq.n	8000d3c <Find_Command_Character+0x84>
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b2f      	cmp	r3, #47	; 0x2f
 8000d2e:	d905      	bls.n	8000d3c <Find_Command_Character+0x84>
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b39      	cmp	r3, #57	; 0x39
 8000d3a:	d9e6      	bls.n	8000d0a <Find_Command_Character+0x52>
        }
        int len = (k - j + buffer_size) % buffer_size;
 8000d3c:	8afb      	ldrh	r3, [r7, #22]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	1ad2      	subs	r2, r2, r3
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	4413      	add	r3, r2
 8000d46:	887a      	ldrh	r2, [r7, #2]
 8000d48:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d4c:	fb01 f202 	mul.w	r2, r1, r2
 8000d50:	1a9b      	subs	r3, r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        strncpy(number, buffer + j, len);
 8000d54:	8afb      	ldrh	r3, [r7, #22]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	18d1      	adds	r1, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	4618      	mov	r0, r3
 8000d62:	f011 fa1f 	bl	80121a4 <strncpy>
        return atoi(number);
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f010 fd69 	bl	8011842 <atoi>
 8000d70:	4603      	mov	r3, r0
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	e007      	b.n	8000d86 <Find_Command_Character+0xce>
  for(i = 0; i < buffer_size; i++) {
 8000d76:	8bfb      	ldrh	r3, [r7, #30]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	83fb      	strh	r3, [r7, #30]
 8000d7c:	8bfa      	ldrh	r2, [r7, #30]
 8000d7e:	887b      	ldrh	r3, [r7, #2]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d3a4      	bcc.n	8000cce <Find_Command_Character+0x16>
      }
    }
  }
  // Pattern not found
  return 10;
 8000d84:	230a      	movs	r3, #10
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3720      	adds	r7, #32
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <Calculate_Command_Buffer>:

void Calculate_Command_Buffer(uint8_t decimal, uint8_t* binary_array, uint8_t array_size) {
 8000d8e:	b480      	push	{r7}
 8000d90:	b085      	sub	sp, #20
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	6039      	str	r1, [r7, #0]
 8000d98:	71fb      	strb	r3, [r7, #7]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	71bb      	strb	r3, [r7, #6]

    for (uint8_t i = 0; i < array_size; i++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	e007      	b.n	8000db4 <Calculate_Command_Buffer+0x26>
    {
        binary_array[i] = 0;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < array_size; i++)
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	3301      	adds	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	7bfa      	ldrb	r2, [r7, #15]
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d3f3      	bcc.n	8000da4 <Calculate_Command_Buffer+0x16>
    }
    uint8_t i = array_size - 1;
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	73bb      	strb	r3, [r7, #14]

    while (decimal > 0 && decimal <= 7 && i >= 0)
 8000dc2:	e00d      	b.n	8000de0 <Calculate_Command_Buffer+0x52>
    {
        binary_array[i] = (decimal & ONE);
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	4413      	add	r3, r2
 8000dca:	79fa      	ldrb	r2, [r7, #7]
 8000dcc:	f002 0201 	and.w	r2, r2, #1
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	701a      	strb	r2, [r3, #0]
        decimal >>= 1;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	085b      	lsrs	r3, r3, #1
 8000dd8:	71fb      	strb	r3, [r7, #7]
        i--;
 8000dda:	7bbb      	ldrb	r3, [r7, #14]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	73bb      	strb	r3, [r7, #14]
    while (decimal > 0 && decimal <= 7 && i >= 0)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <Calculate_Command_Buffer+0x5e>
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b07      	cmp	r3, #7
 8000dea:	d9eb      	bls.n	8000dc4 <Calculate_Command_Buffer+0x36>
    }
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <extractValueFromString>:

float extractValueFromString(const char* str, const char* prefix, int valueLength) {
 8000df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dfc:	b089      	sub	sp, #36	; 0x24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	466b      	mov	r3, sp
 8000e08:	461e      	mov	r6, r3
    const int prefixLength = strlen(prefix);
 8000e0a:	68b8      	ldr	r0, [r7, #8]
 8000e0c:	f7ff fa70 	bl	80002f0 <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	61fb      	str	r3, [r7, #28]

    const char* start = strstr(str, prefix);
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f011 f9d7 	bl	80121ca <strstr>
 8000e1c:	61b8      	str	r0, [r7, #24]
    if (start == NULL) {
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <extractValueFromString+0x32>
        // Prefix not found in the string
        return 0.0;
 8000e24:	eddf 7a23 	vldr	s15, [pc, #140]	; 8000eb4 <extractValueFromString+0xbc>
 8000e28:	e03c      	b.n	8000ea4 <extractValueFromString+0xac>
    }

    start += prefixLength;  // Move the pointer to the beginning of the value
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4413      	add	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
    char valueStr[valueLength + 1];  // Add 1 for null-termination
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	1c59      	adds	r1, r3, #1
 8000e36:	1e4b      	subs	r3, r1, #1
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	460a      	mov	r2, r1
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	4690      	mov	r8, r2
 8000e40:	4699      	mov	r9, r3
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	f04f 0300 	mov.w	r3, #0
 8000e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e56:	460a      	mov	r2, r1
 8000e58:	2300      	movs	r3, #0
 8000e5a:	4614      	mov	r4, r2
 8000e5c:	461d      	mov	r5, r3
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	00eb      	lsls	r3, r5, #3
 8000e68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e6c:	00e2      	lsls	r2, r4, #3
 8000e6e:	460b      	mov	r3, r1
 8000e70:	3307      	adds	r3, #7
 8000e72:	08db      	lsrs	r3, r3, #3
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	ebad 0d03 	sub.w	sp, sp, r3
 8000e7a:	466b      	mov	r3, sp
 8000e7c:	3300      	adds	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]

    strncpy(valueStr, start, valueLength);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	461a      	mov	r2, r3
 8000e84:	69b9      	ldr	r1, [r7, #24]
 8000e86:	6938      	ldr	r0, [r7, #16]
 8000e88:	f011 f98c 	bl	80121a4 <strncpy>
    valueStr[valueLength] = '\0';  // Null-terminate the value string
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]

    return atof(valueStr);
 8000e96:	6938      	ldr	r0, [r7, #16]
 8000e98:	f010 fcd0 	bl	801183c <atof>
 8000e9c:	eeb0 7b40 	vmov.f64	d7, d0
 8000ea0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ea4:	46b5      	mov	sp, r6
}
 8000ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eaa:	3724      	adds	r7, #36	; 0x24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000eb2:	bf00      	nop
 8000eb4:	00000000 	.word	0x00000000

08000eb8 <convertToDecimalDegrees>:

float convertToDecimalDegrees(float coordinate) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	ed87 0a01 	vstr	s0, [r7, #4]
    int degrees = (int)(coordinate / 100);         // Extract the degrees component
 8000ec2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ec6:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000f28 <convertToDecimalDegrees+0x70>
 8000eca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ece:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ed2:	ee17 3a90 	vmov	r3, s15
 8000ed6:	617b      	str	r3, [r7, #20]
    float minutes = coordinate - (degrees * 100); // Extract the decimal minutes component
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	2264      	movs	r2, #100	; 0x64
 8000edc:	fb02 f303 	mul.w	r3, r2, r3
 8000ee0:	ee07 3a90 	vmov	s15, r3
 8000ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef0:	edc7 7a04 	vstr	s15, [r7, #16]

    float decimalDegrees = degrees + (minutes / 60); // Convert to decimal degrees
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efe:	edd7 6a04 	vldr	s13, [r7, #16]
 8000f02:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8000f2c <convertToDecimalDegrees+0x74>
 8000f06:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f0e:	edc7 7a03 	vstr	s15, [r7, #12]

    return decimalDegrees;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	ee07 3a90 	vmov	s15, r3
}
 8000f18:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1c:	371c      	adds	r7, #28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	42c80000 	.word	0x42c80000
 8000f2c:	42700000 	.word	0x42700000

08000f30 <convertToNormalCoordinates>:

void convertToNormalCoordinates(float coord1, float coord2, float* latitude, float* longitude) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f3a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
    *latitude = convertToDecimalDegrees(coord1);
 8000f42:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f46:	f7ff ffb7 	bl	8000eb8 <convertToDecimalDegrees>
 8000f4a:	eef0 7a40 	vmov.f32	s15, s0
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	edc3 7a00 	vstr	s15, [r3]
    *longitude = convertToDecimalDegrees(coord2);
 8000f54:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f58:	f7ff ffae 	bl	8000eb8 <convertToDecimalDegrees>
 8000f5c:	eef0 7a40 	vmov.f32	s15, s0
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	edc3 7a00 	vstr	s15, [r3]
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <checkSubstring>:

int checkSubstring(const char* buffer) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    const char* substring = ",A,";
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <checkSubstring+0x60>)
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t bufferLength = strlen(buffer);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff f9b7 	bl	80002f0 <strlen>
 8000f82:	62b8      	str	r0, [r7, #40]	; 0x28

    // Check if the buffer length is less than 25
    if (bufferLength < 25) {
 8000f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f86:	2b18      	cmp	r3, #24
 8000f88:	d808      	bhi.n	8000f9c <checkSubstring+0x2c>
        // Check if the substring is present within the buffer
        if (strstr(buffer, substring) != NULL) {
 8000f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f011 f91c 	bl	80121ca <strstr>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d016      	beq.n	8000fc6 <checkSubstring+0x56>
            return 1;  // Substring found
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e015      	b.n	8000fc8 <checkSubstring+0x58>
        }
    } else {
        // Create a temporary buffer to hold the first 25 characters
        char tempBuffer[26];
        strncpy(tempBuffer, buffer, 25);
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2219      	movs	r2, #25
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f011 f8fd 	bl	80121a4 <strncpy>
        tempBuffer[25] = '\0';  // Null-terminate the temporary buffer
 8000faa:	2300      	movs	r3, #0
 8000fac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

        // Check if the substring is present within the temporary buffer
        if (strstr(tempBuffer, substring) != NULL) {
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f011 f907 	bl	80121ca <strstr>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <checkSubstring+0x56>
            return 1;  // Substring found
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <checkSubstring+0x58>
        }
    }

    return 0;  // Substring not found
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3730      	adds	r7, #48	; 0x30
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	08015c08 	.word	0x08015c08

08000fd4 <GPS_Read_Data>:

void GPS_Read_Data(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0


		uint32_t counter_u32 = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
		Msgindex=0;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <GPS_Read_Data+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
		strcpy(tx_data,(char*)UART_GPS_Buffer);
 8000fe4:	4920      	ldr	r1, [pc, #128]	; (8001068 <GPS_Read_Data+0x94>)
 8000fe6:	4821      	ldr	r0, [pc, #132]	; (800106c <GPS_Read_Data+0x98>)
 8000fe8:	f011 f8d4 	bl	8012194 <strcpy>
		ptr=strstr(tx_data,"GPRMC");
 8000fec:	4920      	ldr	r1, [pc, #128]	; (8001070 <GPS_Read_Data+0x9c>)
 8000fee:	481f      	ldr	r0, [pc, #124]	; (800106c <GPS_Read_Data+0x98>)
 8000ff0:	f011 f8eb 	bl	80121ca <strstr>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <GPS_Read_Data+0xa0>)
 8000ff8:	6013      	str	r3, [r2, #0]
		if(*ptr=='G')
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <GPS_Read_Data+0xa0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b47      	cmp	r3, #71	; 0x47
 8001002:	d12b      	bne.n	800105c <GPS_Read_Data+0x88>
		{
			while(1)
			{
				GPS_Payload[Msgindex]=*ptr;
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <GPS_Read_Data+0xa0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a16      	ldr	r2, [pc, #88]	; (8001064 <GPS_Read_Data+0x90>)
 800100a:	7812      	ldrb	r2, [r2, #0]
 800100c:	7819      	ldrb	r1, [r3, #0]
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <GPS_Read_Data+0xa4>)
 8001010:	5499      	strb	r1, [r3, r2]
				Msgindex++;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <GPS_Read_Data+0x90>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <GPS_Read_Data+0x90>)
 800101c:	701a      	strb	r2, [r3, #0]
				*ptr=*(ptr+Msgindex);
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <GPS_Read_Data+0xa0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <GPS_Read_Data+0x90>)
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	441a      	add	r2, r3
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <GPS_Read_Data+0xa0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	7812      	ldrb	r2, [r2, #0]
 800102e:	701a      	strb	r2, [r3, #0]
				if(*ptr=='\n')
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <GPS_Read_Data+0xa0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b0a      	cmp	r3, #10
 8001038:	d106      	bne.n	8001048 <GPS_Read_Data+0x74>
				{
					GPS_Payload[Msgindex]='\0';
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <GPS_Read_Data+0x90>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <GPS_Read_Data+0xa4>)
 8001042:	2100      	movs	r1, #0
 8001044:	5499      	strb	r1, [r3, r2]
					break;
 8001046:	e009      	b.n	800105c <GPS_Read_Data+0x88>
				}
				else
				{
					counter_u32++;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3301      	adds	r3, #1
 800104c:	607b      	str	r3, [r7, #4]
				}
				if(counter_u32 == 50000)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001054:	4293      	cmp	r3, r2
 8001056:	d000      	beq.n	800105a <GPS_Read_Data+0x86>
				GPS_Payload[Msgindex]=*ptr;
 8001058:	e7d4      	b.n	8001004 <GPS_Read_Data+0x30>
					break;
 800105a:	bf00      	nop
			}

		}
	}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	240011d0 	.word	0x240011d0
 8001068:	24000a6c 	.word	0x24000a6c
 800106c:	24000e7c 	.word	0x24000e7c
 8001070:	08015c0c 	.word	0x08015c0c
 8001074:	240011d4 	.word	0x240011d4
 8001078:	2400116c 	.word	0x2400116c

0800107c <Send_Init_AT_Commands>:


void Send_Init_AT_Commands()
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
	if(FALSE == UART_Init_Done)
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <Send_Init_AT_Commands+0x94>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d13e      	bne.n	8001108 <Send_Init_AT_Commands+0x8c>
	{

		for(uint8_t i = 0 ; i < AT_INIT_COMMANDS_NUM ; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	e031      	b.n	80010f4 <Send_Init_AT_Commands+0x78>
			{
				HAL_UART_Transmit(&huart6, (uint8_t*)AT_Init_Commands[i],strlen(AT_Init_Commands[i]), UART_TIMEOUT);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2246      	movs	r2, #70	; 0x46
 8001094:	fb02 f303 	mul.w	r3, r2, r3
 8001098:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <Send_Init_AT_Commands+0x98>)
 800109a:	189c      	adds	r4, r3, r2
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2246      	movs	r2, #70	; 0x46
 80010a0:	fb02 f303 	mul.w	r3, r2, r3
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <Send_Init_AT_Commands+0x98>)
 80010a6:	4413      	add	r3, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f921 	bl	80002f0 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80010b6:	4621      	mov	r1, r4
 80010b8:	4817      	ldr	r0, [pc, #92]	; (8001118 <Send_Init_AT_Commands+0x9c>)
 80010ba:	f00b fdaf 	bl	800cc1c <HAL_UART_Transmit>

				if(GSM_CONNECTED_INDEX_PAST == i && FALSE == GSM_isConnected)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d110      	bne.n	80010e6 <Send_Init_AT_Commands+0x6a>
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <Send_Init_AT_Commands+0xa0>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10c      	bne.n	80010e6 <Send_Init_AT_Commands+0x6a>
				{

					if( NULL != strstr(UART_Rx_Buffer,"OK") )
 80010cc:	4914      	ldr	r1, [pc, #80]	; (8001120 <Send_Init_AT_Commands+0xa4>)
 80010ce:	4815      	ldr	r0, [pc, #84]	; (8001124 <Send_Init_AT_Commands+0xa8>)
 80010d0:	f011 f87b 	bl	80121ca <strstr>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <Send_Init_AT_Commands+0x66>
					{
						GSM_isConnected = TRUE;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <Send_Init_AT_Commands+0xa0>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e001      	b.n	80010e6 <Send_Init_AT_Commands+0x6a>
					}
					else
					{
						i = GSM_CONNECTED_INDEX_MINUS_ONE;
 80010e2:	2301      	movs	r3, #1
 80010e4:	71fb      	strb	r3, [r7, #7]
					}
				}

				HAL_Delay(3000);
 80010e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010ea:	f002 fba9 	bl	8003840 <HAL_Delay>
		for(uint8_t i = 0 ; i < AT_INIT_COMMANDS_NUM ; i++)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	3301      	adds	r3, #1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b0e      	cmp	r3, #14
 80010f8:	d9ca      	bls.n	8001090 <Send_Init_AT_Commands+0x14>
			}

		if(TRUE == GSM_isConnected)
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <Send_Init_AT_Commands+0xa0>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d102      	bne.n	8001108 <Send_Init_AT_Commands+0x8c>
		{
			UART_Init_Done = TRUE;
 8001102:	4b03      	ldr	r3, [pc, #12]	; (8001110 <Send_Init_AT_Commands+0x94>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bd90      	pop	{r4, r7, pc}
 8001110:	240009a1 	.word	0x240009a1
 8001114:	24000000 	.word	0x24000000
 8001118:	24001530 	.word	0x24001530
 800111c:	240009a2 	.word	0x240009a2
 8001120:	08015c14 	.word	0x08015c14
 8001124:	240009a4 	.word	0x240009a4

08001128 <Send_Cyclic_Read_AT_Commands>:

void Send_Cyclic_Read_AT_Commands()
{
 8001128:	b598      	push	{r3, r4, r7, lr}
 800112a:	af00      	add	r7, sp, #0
	if(TRUE == UART_Init_Done)
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <Send_Cyclic_Read_AT_Commands+0x80>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d131      	bne.n	8001198 <Send_Cyclic_Read_AT_Commands+0x70>
	{
		static uint8_t AT_Read_Commands_counter = 0u;
		Write_Done = FALSE;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <Send_Cyclic_Read_AT_Commands+0x84>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]

		 if(CYCLIC_TIME_READ == cyclic_read_counter)
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <Send_Cyclic_Read_AT_Commands+0x88>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b1e      	cmp	r3, #30
 8001140:	d12a      	bne.n	8001198 <Send_Cyclic_Read_AT_Commands+0x70>
		{
			cyclic_read_counter = 0u;
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <Send_Cyclic_Read_AT_Commands+0x88>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6,(uint8_t*)AT_Cyclic_Commands_Read[AT_Read_Commands_counter],strlen(AT_Cyclic_Commands_Read[AT_Read_Commands_counter]), UART_TIMEOUT);
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <Send_Cyclic_Read_AT_Commands+0x8c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	236e      	movs	r3, #110	; 0x6e
 8001150:	fb02 f303 	mul.w	r3, r2, r3
 8001154:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <Send_Cyclic_Read_AT_Commands+0x90>)
 8001156:	189c      	adds	r4, r3, r2
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <Send_Cyclic_Read_AT_Commands+0x8c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	236e      	movs	r3, #110	; 0x6e
 8001160:	fb02 f303 	mul.w	r3, r2, r3
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <Send_Cyclic_Read_AT_Commands+0x90>)
 8001166:	4413      	add	r3, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f8c1 	bl	80002f0 <strlen>
 800116e:	4603      	mov	r3, r0
 8001170:	b29a      	uxth	r2, r3
 8001172:	f241 3388 	movw	r3, #5000	; 0x1388
 8001176:	4621      	mov	r1, r4
 8001178:	4810      	ldr	r0, [pc, #64]	; (80011bc <Send_Cyclic_Read_AT_Commands+0x94>)
 800117a:	f00b fd4f 	bl	800cc1c <HAL_UART_Transmit>
			AT_Read_Commands_counter++;
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <Send_Cyclic_Read_AT_Commands+0x8c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <Send_Cyclic_Read_AT_Commands+0x8c>)
 8001188:	701a      	strb	r2, [r3, #0]
			if(AT_CYCLIC_COMMANDS_READ_NUM == AT_Read_Commands_counter)
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <Send_Cyclic_Read_AT_Commands+0x8c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b04      	cmp	r3, #4
 8001190:	d102      	bne.n	8001198 <Send_Cyclic_Read_AT_Commands+0x70>
			{
				AT_Read_Commands_counter = 0u;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <Send_Cyclic_Read_AT_Commands+0x8c>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
			}
		}


	}
	cyclic_read_counter++;
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <Send_Cyclic_Read_AT_Commands+0x88>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <Send_Cyclic_Read_AT_Commands+0x88>)
 80011a2:	701a      	strb	r2, [r3, #0]

}
 80011a4:	bf00      	nop
 80011a6:	bd98      	pop	{r3, r4, r7, pc}
 80011a8:	240009a1 	.word	0x240009a1
 80011ac:	24000dfa 	.word	0x24000dfa
 80011b0:	24000d5f 	.word	0x24000d5f
 80011b4:	240011d8 	.word	0x240011d8
 80011b8:	2400041c 	.word	0x2400041c
 80011bc:	24001530 	.word	0x24001530

080011c0 <Send_Cyclic_Write_AT_Commands>:

void Send_Cyclic_Write_AT_Commands()
{
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af08      	add	r7, sp, #32
	uint8_t temperatureValue;
	uint8_t engineStatus;
	uint8_t driverPresenceStatus;

	/* Read data to send through to the server */
	Rte_Read_Lights_Status(&lightStatus);
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 feaf 	bl	8001f2c <Rte_Read_Lights_Status>
	Rte_Read_Door_Status(&doorStatus);
 80011ce:	1dbb      	adds	r3, r7, #6
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 fd45 	bl	8001c60 <Rte_Read_Door_Status>
	Rte_Read_Fan_Status(&fanStatus);
 80011d6:	1d7b      	adds	r3, r7, #5
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fd7d 	bl	8001cd8 <Rte_Read_Fan_Status>
	Rte_Read_Temperature_Value(&temperatureValue);
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fdad 	bl	8001d40 <Rte_Read_Temperature_Value>
	Rte_Read_Engine_Status(&engineStatus);
 80011e6:	1cfb      	adds	r3, r7, #3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fd8f 	bl	8001d0c <Rte_Read_Engine_Status>
	Rte_Read_DriverPresence_value(&driverPresenceStatus);
 80011ee:	1cbb      	adds	r3, r7, #2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fe1d 	bl	8001e30 <Rte_Read_DriverPresence_value>
	sprintf(datapacket,"%f|%f|%d|%d|%d|%d|%d|%d",latitudeFinal,longitudeFinal,lightStatus,doorStatus,fanStatus,temperatureValue,engineStatus,driverPresenceStatus);
 80011f6:	4b47      	ldr	r3, [pc, #284]	; (8001314 <Send_Cyclic_Write_AT_Commands+0x154>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001200:	4b45      	ldr	r3, [pc, #276]	; (8001318 <Send_Cyclic_Write_AT_Commands+0x158>)
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	79ba      	ldrb	r2, [r7, #6]
 800120e:	7979      	ldrb	r1, [r7, #5]
 8001210:	7938      	ldrb	r0, [r7, #4]
 8001212:	78fc      	ldrb	r4, [r7, #3]
 8001214:	78bd      	ldrb	r5, [r7, #2]
 8001216:	9507      	str	r5, [sp, #28]
 8001218:	9406      	str	r4, [sp, #24]
 800121a:	9005      	str	r0, [sp, #20]
 800121c:	9104      	str	r1, [sp, #16]
 800121e:	9203      	str	r2, [sp, #12]
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	ed8d 7b00 	vstr	d7, [sp]
 8001226:	ec53 2b16 	vmov	r2, r3, d6
 800122a:	493c      	ldr	r1, [pc, #240]	; (800131c <Send_Cyclic_Write_AT_Commands+0x15c>)
 800122c:	483c      	ldr	r0, [pc, #240]	; (8001320 <Send_Cyclic_Write_AT_Commands+0x160>)
 800122e:	f010 ff91 	bl	8012154 <siprintf>

	if(TRUE == UART_Init_Done)
 8001232:	4b3c      	ldr	r3, [pc, #240]	; (8001324 <Send_Cyclic_Write_AT_Commands+0x164>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d162      	bne.n	8001300 <Send_Cyclic_Write_AT_Commands+0x140>
	{
	if(CYCLIC_TIME_WRITE == cyclic_write_counter)
 800123a:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <Send_Cyclic_Write_AT_Commands+0x168>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b14      	cmp	r3, #20
 8001240:	d15e      	bne.n	8001300 <Send_Cyclic_Write_AT_Commands+0x140>
			{
				cyclic_write_counter = 0u;
 8001242:	4b39      	ldr	r3, [pc, #228]	; (8001328 <Send_Cyclic_Write_AT_Commands+0x168>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]

				if( (0u == AT_Write_Commands_counter) || (1u == AT_Write_Commands_counter) )
 8001248:	4b38      	ldr	r3, [pc, #224]	; (800132c <Send_Cyclic_Write_AT_Commands+0x16c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <Send_Cyclic_Write_AT_Commands+0x98>
 8001250:	4b36      	ldr	r3, [pc, #216]	; (800132c <Send_Cyclic_Write_AT_Commands+0x16c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d121      	bne.n	800129c <Send_Cyclic_Write_AT_Commands+0xdc>
				{
					HAL_UART_Transmit(&huart6,(uint8_t*)AT_Cyclic_Commands_Write[AT_Write_Commands_counter],strlen(AT_Cyclic_Commands_Write[AT_Write_Commands_counter]), UART_TIMEOUT);
 8001258:	4b34      	ldr	r3, [pc, #208]	; (800132c <Send_Cyclic_Write_AT_Commands+0x16c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	236e      	movs	r3, #110	; 0x6e
 8001260:	fb02 f303 	mul.w	r3, r2, r3
 8001264:	4a32      	ldr	r2, [pc, #200]	; (8001330 <Send_Cyclic_Write_AT_Commands+0x170>)
 8001266:	189c      	adds	r4, r3, r2
 8001268:	4b30      	ldr	r3, [pc, #192]	; (800132c <Send_Cyclic_Write_AT_Commands+0x16c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	236e      	movs	r3, #110	; 0x6e
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	4a2e      	ldr	r2, [pc, #184]	; (8001330 <Send_Cyclic_Write_AT_Commands+0x170>)
 8001276:	4413      	add	r3, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f839 	bl	80002f0 <strlen>
 800127e:	4603      	mov	r3, r0
 8001280:	b29a      	uxth	r2, r3
 8001282:	f241 3388 	movw	r3, #5000	; 0x1388
 8001286:	4621      	mov	r1, r4
 8001288:	482a      	ldr	r0, [pc, #168]	; (8001334 <Send_Cyclic_Write_AT_Commands+0x174>)
 800128a:	f00b fcc7 	bl	800cc1c <HAL_UART_Transmit>
					AT_Write_Commands_counter++;
 800128e:	4b27      	ldr	r3, [pc, #156]	; (800132c <Send_Cyclic_Write_AT_Commands+0x16c>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b25      	ldr	r3, [pc, #148]	; (800132c <Send_Cyclic_Write_AT_Commands+0x16c>)
 8001298:	701a      	strb	r2, [r3, #0]
					return;
 800129a:	e037      	b.n	800130c <Send_Cyclic_Write_AT_Commands+0x14c>
				}

				if( 2u == AT_Write_Commands_counter )
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <Send_Cyclic_Write_AT_Commands+0x16c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d116      	bne.n	80012d2 <Send_Cyclic_Write_AT_Commands+0x112>
				{
					sprintf(buffer,"GET https://api.thingspeak.com/update?api_key=D1GRDRI7RBQNR1K3&field1=%s\r\n",datapacket);
 80012a4:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <Send_Cyclic_Write_AT_Commands+0x160>)
 80012a6:	4924      	ldr	r1, [pc, #144]	; (8001338 <Send_Cyclic_Write_AT_Commands+0x178>)
 80012a8:	4824      	ldr	r0, [pc, #144]	; (800133c <Send_Cyclic_Write_AT_Commands+0x17c>)
 80012aa:	f010 ff53 	bl	8012154 <siprintf>
					HAL_UART_Transmit(&huart6,(uint8_t*)buffer,strlen(buffer), UART_TIMEOUT);
 80012ae:	4823      	ldr	r0, [pc, #140]	; (800133c <Send_Cyclic_Write_AT_Commands+0x17c>)
 80012b0:	f7ff f81e 	bl	80002f0 <strlen>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80012bc:	491f      	ldr	r1, [pc, #124]	; (800133c <Send_Cyclic_Write_AT_Commands+0x17c>)
 80012be:	481d      	ldr	r0, [pc, #116]	; (8001334 <Send_Cyclic_Write_AT_Commands+0x174>)
 80012c0:	f00b fcac 	bl	800cc1c <HAL_UART_Transmit>
					AT_Write_Commands_counter++;
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <Send_Cyclic_Write_AT_Commands+0x16c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <Send_Cyclic_Write_AT_Commands+0x16c>)
 80012ce:	701a      	strb	r2, [r3, #0]
					return;
 80012d0:	e01c      	b.n	800130c <Send_Cyclic_Write_AT_Commands+0x14c>
				}

				if( 3u == AT_Write_Commands_counter )
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <Send_Cyclic_Write_AT_Commands+0x16c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d112      	bne.n	8001300 <Send_Cyclic_Write_AT_Commands+0x140>
				{
					char CTRLZ[] = { 26 };
 80012da:	231a      	movs	r3, #26
 80012dc:	703b      	strb	r3, [r7, #0]
					HAL_UART_Transmit(&huart6, (uint8_t*) CTRLZ, 1, UART_TIMEOUT);
 80012de:	4639      	mov	r1, r7
 80012e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80012e4:	2201      	movs	r2, #1
 80012e6:	4813      	ldr	r0, [pc, #76]	; (8001334 <Send_Cyclic_Write_AT_Commands+0x174>)
 80012e8:	f00b fc98 	bl	800cc1c <HAL_UART_Transmit>
					AT_Write_Commands_counter = 0u;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <Send_Cyclic_Write_AT_Commands+0x16c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
					Write_Done = TRUE;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <Send_Cyclic_Write_AT_Commands+0x180>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
					write_counter = 0u;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <Send_Cyclic_Write_AT_Commands+0x184>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	801a      	strh	r2, [r3, #0]
 80012fe:	e005      	b.n	800130c <Send_Cyclic_Write_AT_Commands+0x14c>
					return;

				}
			}
	}
	cyclic_write_counter++;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <Send_Cyclic_Write_AT_Commands+0x168>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <Send_Cyclic_Write_AT_Commands+0x168>)
 800130a:	701a      	strb	r2, [r3, #0]
}
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bdb0      	pop	{r4, r5, r7, pc}
 8001312:	bf00      	nop
 8001314:	24000e70 	.word	0x24000e70
 8001318:	24000e74 	.word	0x24000e74
 800131c:	08015c18 	.word	0x08015c18
 8001320:	24000e00 	.word	0x24000e00
 8001324:	240009a1 	.word	0x240009a1
 8001328:	24000d60 	.word	0x24000d60
 800132c:	240011d9 	.word	0x240011d9
 8001330:	240005d4 	.word	0x240005d4
 8001334:	24001530 	.word	0x24001530
 8001338:	08015c30 	.word	0x08015c30
 800133c:	24000d64 	.word	0x24000d64
 8001340:	24000dfa 	.word	0x24000dfa
 8001344:	24000dfc 	.word	0x24000dfc

08001348 <GSM_Start_Init>:


void GSM_Start_Init()
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

	static uint8_t first_run = FALSE;
	HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART_Rx_Buffer, UART_RECEIVE_MAX_LENGTH);
 800134c:	22c8      	movs	r2, #200	; 0xc8
 800134e:	490c      	ldr	r1, [pc, #48]	; (8001380 <GSM_Start_Init+0x38>)
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <GSM_Start_Init+0x3c>)
 8001352:	f00b fcf1 	bl	800cd38 <HAL_UART_Receive_DMA>
	if(first_run == FALSE)
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <GSM_Start_Init+0x40>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10d      	bne.n	800137a <GSM_Start_Init+0x32>
	{
		first_run = TRUE;
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <GSM_Start_Init+0x40>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
		Command_Character = FALSE;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <GSM_Start_Init+0x44>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
		cyclic_read_counter = 0u;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <GSM_Start_Init+0x48>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
		cyclic_write_counter = 0u;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <GSM_Start_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
		Send_Init_AT_Commands();
 8001376:	f7ff fe81 	bl	800107c <Send_Init_AT_Commands>
	}
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	240009a4 	.word	0x240009a4
 8001384:	24001530 	.word	0x24001530
 8001388:	240011da 	.word	0x240011da
 800138c:	24000d5a 	.word	0x24000d5a
 8001390:	24000d5f 	.word	0x24000d5f
 8001394:	24000d60 	.word	0x24000d60

08001398 <GSM_Start_TaskCyclicEvent>:

void GSM_Start_TaskCyclicEvent()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0

	/* TODO: Store and manipulate response from GPS Module */
	uint8_t driverPresent;
	Rte_Read_DriverPresence_value(&driverPresent);
 800139e:	f107 030e 	add.w	r3, r7, #14
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fd44 	bl	8001e30 <Rte_Read_DriverPresence_value>

	/* Receive values from GPS and process them */
	HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART_GPS_Buffer, 750u);
 80013a8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80013ac:	4956      	ldr	r1, [pc, #344]	; (8001508 <GSM_Start_TaskCyclicEvent+0x170>)
 80013ae:	4857      	ldr	r0, [pc, #348]	; (800150c <GSM_Start_TaskCyclicEvent+0x174>)
 80013b0:	f00b fcc2 	bl	800cd38 <HAL_UART_Receive_DMA>
	GPS_Read_Data();
 80013b4:	f7ff fe0e 	bl	8000fd4 <GPS_Read_Data>
	if(TRUE == checkSubstring(GPS_Payload))
 80013b8:	4855      	ldr	r0, [pc, #340]	; (8001510 <GSM_Start_TaskCyclicEvent+0x178>)
 80013ba:	f7ff fdd9 	bl	8000f70 <checkSubstring>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d144      	bne.n	800144e <GSM_Start_TaskCyclicEvent+0xb6>
	{
		latitude = extractValueFromString(GPS_Payload,"A,", 10u);
 80013c4:	220a      	movs	r2, #10
 80013c6:	4953      	ldr	r1, [pc, #332]	; (8001514 <GSM_Start_TaskCyclicEvent+0x17c>)
 80013c8:	4851      	ldr	r0, [pc, #324]	; (8001510 <GSM_Start_TaskCyclicEvent+0x178>)
 80013ca:	f7ff fd15 	bl	8000df8 <extractValueFromString>
 80013ce:	eef0 7a40 	vmov.f32	s15, s0
 80013d2:	4b51      	ldr	r3, [pc, #324]	; (8001518 <GSM_Start_TaskCyclicEvent+0x180>)
 80013d4:	edc3 7a00 	vstr	s15, [r3]
		longitude = extractValueFromString(GPS_Payload,"N,", 10u);
 80013d8:	220a      	movs	r2, #10
 80013da:	4950      	ldr	r1, [pc, #320]	; (800151c <GSM_Start_TaskCyclicEvent+0x184>)
 80013dc:	484c      	ldr	r0, [pc, #304]	; (8001510 <GSM_Start_TaskCyclicEvent+0x178>)
 80013de:	f7ff fd0b 	bl	8000df8 <extractValueFromString>
 80013e2:	eef0 7a40 	vmov.f32	s15, s0
 80013e6:	4b4e      	ldr	r3, [pc, #312]	; (8001520 <GSM_Start_TaskCyclicEvent+0x188>)
 80013e8:	edc3 7a00 	vstr	s15, [r3]
		speed_in_knots = extractValueFromString(GPS_Payload,"E,", 5u);
 80013ec:	2205      	movs	r2, #5
 80013ee:	494d      	ldr	r1, [pc, #308]	; (8001524 <GSM_Start_TaskCyclicEvent+0x18c>)
 80013f0:	4847      	ldr	r0, [pc, #284]	; (8001510 <GSM_Start_TaskCyclicEvent+0x178>)
 80013f2:	f7ff fd01 	bl	8000df8 <extractValueFromString>
 80013f6:	eef0 7a40 	vmov.f32	s15, s0
 80013fa:	4b4b      	ldr	r3, [pc, #300]	; (8001528 <GSM_Start_TaskCyclicEvent+0x190>)
 80013fc:	edc3 7a00 	vstr	s15, [r3]
		speed_kmh = speed_in_knots * 1.852;
 8001400:	4b49      	ldr	r3, [pc, #292]	; (8001528 <GSM_Start_TaskCyclicEvent+0x190>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800140a:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001500 <GSM_Start_TaskCyclicEvent+0x168>
 800140e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001412:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001416:	edc7 7a01 	vstr	s15, [r7, #4]
 800141a:	793b      	ldrb	r3, [r7, #4]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4b43      	ldr	r3, [pc, #268]	; (800152c <GSM_Start_TaskCyclicEvent+0x194>)
 8001420:	701a      	strb	r2, [r3, #0]
		convertToNormalCoordinates(latitude, longitude, &latitudeFinal, &longitudeFinal);
 8001422:	4b3d      	ldr	r3, [pc, #244]	; (8001518 <GSM_Start_TaskCyclicEvent+0x180>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	4b3d      	ldr	r3, [pc, #244]	; (8001520 <GSM_Start_TaskCyclicEvent+0x188>)
 800142a:	ed93 7a00 	vldr	s14, [r3]
 800142e:	4940      	ldr	r1, [pc, #256]	; (8001530 <GSM_Start_TaskCyclicEvent+0x198>)
 8001430:	4840      	ldr	r0, [pc, #256]	; (8001534 <GSM_Start_TaskCyclicEvent+0x19c>)
 8001432:	eef0 0a47 	vmov.f32	s1, s14
 8001436:	eeb0 0a67 	vmov.f32	s0, s15
 800143a:	f7ff fd79 	bl	8000f30 <convertToNormalCoordinates>
		if(speed_kmh <= 5u)
 800143e:	4b3b      	ldr	r3, [pc, #236]	; (800152c <GSM_Start_TaskCyclicEvent+0x194>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b05      	cmp	r3, #5
 8001444:	d818      	bhi.n	8001478 <GSM_Start_TaskCyclicEvent+0xe0>
		{
			speed_kmh = 0u;
 8001446:	4b39      	ldr	r3, [pc, #228]	; (800152c <GSM_Start_TaskCyclicEvent+0x194>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	e014      	b.n	8001478 <GSM_Start_TaskCyclicEvent+0xe0>
		}
	}
	else
	{
		latitudeFinal = 46.757283072640064;
 800144e:	4b39      	ldr	r3, [pc, #228]	; (8001534 <GSM_Start_TaskCyclicEvent+0x19c>)
 8001450:	4a39      	ldr	r2, [pc, #228]	; (8001538 <GSM_Start_TaskCyclicEvent+0x1a0>)
 8001452:	601a      	str	r2, [r3, #0]
		longitudeFinal = 23.596367095983563;
 8001454:	4b36      	ldr	r3, [pc, #216]	; (8001530 <GSM_Start_TaskCyclicEvent+0x198>)
 8001456:	4a39      	ldr	r2, [pc, #228]	; (800153c <GSM_Start_TaskCyclicEvent+0x1a4>)
 8001458:	601a      	str	r2, [r3, #0]
		uint8_t speed_kmh = speed_in_knots * 1.852;
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <GSM_Start_TaskCyclicEvent+0x190>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001464:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8001500 <GSM_Start_TaskCyclicEvent+0x168>
 8001468:	ee27 7b06 	vmul.f64	d7, d7, d6
 800146c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001470:	edc7 7a01 	vstr	s15, [r7, #4]
 8001474:	793b      	ldrb	r3, [r7, #4]
 8001476:	73fb      	strb	r3, [r7, #15]
	}

	Rte_Write_CarSignals_VehicleSpeed(speed_kmh);
 8001478:	4b2c      	ldr	r3, [pc, #176]	; (800152c <GSM_Start_TaskCyclicEvent+0x194>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fe03 	bl	8002088 <Rte_Write_CarSignals_VehicleSpeed>

	if( (600u <= write_counter)  )
 8001482:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <GSM_Start_TaskCyclicEvent+0x1a8>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800148a:	d302      	bcc.n	8001492 <GSM_Start_TaskCyclicEvent+0xfa>
	{

		Send_Cyclic_Write_AT_Commands();
 800148c:	f7ff fe98 	bl	80011c0 <Send_Cyclic_Write_AT_Commands>
 8001490:	e02a      	b.n	80014e8 <GSM_Start_TaskCyclicEvent+0x150>
	}
	else if( FALSE == driverPresent)
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d127      	bne.n	80014e8 <GSM_Start_TaskCyclicEvent+0x150>
	{
		Send_Cyclic_Read_AT_Commands();
 8001498:	f7ff fe46 	bl	8001128 <Send_Cyclic_Read_AT_Commands>
		Command_Character = Find_Command_Character(UART_Rx_Buffer,sizeof(UART_Rx_Buffer));
 800149c:	21c8      	movs	r1, #200	; 0xc8
 800149e:	4829      	ldr	r0, [pc, #164]	; (8001544 <GSM_Start_TaskCyclicEvent+0x1ac>)
 80014a0:	f7ff fc0a 	bl	8000cb8 <Find_Command_Character>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <GSM_Start_TaskCyclicEvent+0x1b0>)
 80014aa:	701a      	strb	r2, [r3, #0]

		if(FIND_PATTERN_ERROR_CODE != Command_Character)
 80014ac:	4b26      	ldr	r3, [pc, #152]	; (8001548 <GSM_Start_TaskCyclicEvent+0x1b0>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b0a      	cmp	r3, #10
 80014b2:	d00a      	beq.n	80014ca <GSM_Start_TaskCyclicEvent+0x132>
		{
			last_Command_Character = Command_Character;
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <GSM_Start_TaskCyclicEvent+0x1b0>)
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <GSM_Start_TaskCyclicEvent+0x1b4>)
 80014ba:	701a      	strb	r2, [r3, #0]
			Calculate_Command_Buffer(last_Command_Character, Command_Buffer, sizeof(Command_Buffer));
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <GSM_Start_TaskCyclicEvent+0x1b4>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2203      	movs	r2, #3
 80014c2:	4923      	ldr	r1, [pc, #140]	; (8001550 <GSM_Start_TaskCyclicEvent+0x1b8>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fc62 	bl	8000d8e <Calculate_Command_Buffer>
		}

		Rte_Write_CommandBuffer_Lights_status(Command_Buffer[0]);
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <GSM_Start_TaskCyclicEvent+0x1b8>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fd9e 	bl	8002010 <Rte_Write_CommandBuffer_Lights_status>
		Rte_Write_CommandBuffer_Door_status(Command_Buffer[1]);
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <GSM_Start_TaskCyclicEvent+0x1b8>)
 80014d6:	785b      	ldrb	r3, [r3, #1]
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fdad 	bl	8002038 <Rte_Write_CommandBuffer_Door_status>
		Rte_Write_CommandBuffer_Fan_status(Command_Buffer[2]);
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <GSM_Start_TaskCyclicEvent+0x1b8>)
 80014e0:	789b      	ldrb	r3, [r3, #2]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fdbc 	bl	8002060 <Rte_Write_CommandBuffer_Fan_status>
	}

	write_counter++;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <GSM_Start_TaskCyclicEvent+0x1a8>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <GSM_Start_TaskCyclicEvent+0x1a8>)
 80014f2:	801a      	strh	r2, [r3, #0]

}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	f3af 8000 	nop.w
 8001500:	c083126f 	.word	0xc083126f
 8001504:	3ffda1ca 	.word	0x3ffda1ca
 8001508:	24000a6c 	.word	0x24000a6c
 800150c:	2400149c 	.word	0x2400149c
 8001510:	2400116c 	.word	0x2400116c
 8001514:	08015c7c 	.word	0x08015c7c
 8001518:	24000e64 	.word	0x24000e64
 800151c:	08015c80 	.word	0x08015c80
 8001520:	24000e68 	.word	0x24000e68
 8001524:	08015c84 	.word	0x08015c84
 8001528:	24000e6c 	.word	0x24000e6c
 800152c:	24000e78 	.word	0x24000e78
 8001530:	24000e74 	.word	0x24000e74
 8001534:	24000e70 	.word	0x24000e70
 8001538:	423b0775 	.word	0x423b0775
 800153c:	41bcc55c 	.word	0x41bcc55c
 8001540:	24000dfc 	.word	0x24000dfc
 8001544:	240009a4 	.word	0x240009a4
 8001548:	24000d5a 	.word	0x24000d5a
 800154c:	24000d5b 	.word	0x24000d5b
 8001550:	24000d5c 	.word	0x24000d5c

08001554 <handle_debounce_Button_Engine>:
 uint8_t adcConversionComplete = 0;
 static uint8_t timer_debounce_button_engine;
 static uint8_t handleEngine;

 uint8_t handle_debounce_Button_Engine()
 {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 	uint8_t retVal = FALSE;
 800155a:	2300      	movs	r3, #0
 800155c:	71fb      	strb	r3, [r7, #7]

 	if( HIGH == (HAL_GPIO_ReadPin(Button_Fan_GPIO_Port, Button_Fan_Pin)) )
 800155e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001562:	4816      	ldr	r0, [pc, #88]	; (80015bc <handle_debounce_Button_Engine+0x68>)
 8001564:	f007 f818 	bl	8008598 <HAL_GPIO_ReadPin>
 8001568:	4603      	mov	r3, r0
 800156a:	2b01      	cmp	r3, #1
 800156c:	d11e      	bne.n	80015ac <handle_debounce_Button_Engine+0x58>
 	{
 		if(0u == timer_debounce_button_engine)
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <handle_debounce_Button_Engine+0x6c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d103      	bne.n	800157e <handle_debounce_Button_Engine+0x2a>
 		{
 			timer_debounce_button_engine = TIMER_2S + 1;
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <handle_debounce_Button_Engine+0x6c>)
 8001578:	2215      	movs	r2, #21
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e019      	b.n	80015b2 <handle_debounce_Button_Engine+0x5e>
 		}
 		else if(1u == timer_debounce_button_engine)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <handle_debounce_Button_Engine+0x6c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d10b      	bne.n	800159e <handle_debounce_Button_Engine+0x4a>
 		{
 			retVal = TRUE;
 8001586:	2301      	movs	r3, #1
 8001588:	71fb      	strb	r3, [r7, #7]
 			timer_debounce_button_engine = 0u;
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <handle_debounce_Button_Engine+0x6c>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
 			handleEngine++;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <handle_debounce_Button_Engine+0x70>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <handle_debounce_Button_Engine+0x70>)
 800159a:	701a      	strb	r2, [r3, #0]
 800159c:	e009      	b.n	80015b2 <handle_debounce_Button_Engine+0x5e>
 		}
 		else
 		{
 			timer_debounce_button_engine--;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <handle_debounce_Button_Engine+0x6c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <handle_debounce_Button_Engine+0x6c>)
 80015a8:	701a      	strb	r2, [r3, #0]
 80015aa:	e002      	b.n	80015b2 <handle_debounce_Button_Engine+0x5e>
 		}
 	}
 	else
 	{
 		timer_debounce_button_engine = 0u;
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <handle_debounce_Button_Engine+0x6c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
 	}
 	return retVal;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 }
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	58021800 	.word	0x58021800
 80015c0:	240011e0 	.word	0x240011e0
 80015c4:	240011e1 	.word	0x240011e1

080015c8 <Handle_Inputs_Init>:


void Handle_Inputs_Init()
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	timer_debounce_button_engine = 0u;
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <Handle_Inputs_Init+0x1c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
	handleEngine = 0u;
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <Handle_Inputs_Init+0x20>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	240011e0 	.word	0x240011e0
 80015e8:	240011e1 	.word	0x240011e1

080015ec <Handle_Inputs_TaskCyclicEvent>:

void Handle_Inputs_TaskCyclicEvent()
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0

		uint8_t lu8_debounce;
		uint8_t lu8_engineStatus;
		lu8_debounce = handle_debounce_Button_Engine();
 80015f2:	f7ff ffaf 	bl	8001554 <handle_debounce_Button_Engine>
 80015f6:	4603      	mov	r3, r0
 80015f8:	71bb      	strb	r3, [r7, #6]

		if( (TRUE == lu8_debounce) )
 80015fa:	79bb      	ldrb	r3, [r7, #6]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d104      	bne.n	800160a <Handle_Inputs_TaskCyclicEvent+0x1e>
		{
			lu8_engineStatus = handleEngine & 1;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <Handle_Inputs_TaskCyclicEvent+0x78>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	71fb      	strb	r3, [r7, #7]
		}
		Rte_Write_CarSignals_EngineStatus(lu8_engineStatus);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fd67 	bl	80020e0 <Rte_Write_CarSignals_EngineStatus>

		/* No calculations needed, just send the raw values through the RTE */
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcResultsDMA, adcChannelCount);
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <Handle_Inputs_TaskCyclicEvent+0x7c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	4914      	ldr	r1, [pc, #80]	; (800166c <Handle_Inputs_TaskCyclicEvent+0x80>)
 800161a:	4815      	ldr	r0, [pc, #84]	; (8001670 <Handle_Inputs_TaskCyclicEvent+0x84>)
 800161c:	f002 fe9a 	bl	8004354 <HAL_ADC_Start_DMA>
		Rte_Write_RawValues_rawLux(adcResultsDMA[0]);
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <Handle_Inputs_TaskCyclicEvent+0x80>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fcb7 	bl	8001f98 <Rte_Write_RawValues_rawLux>
		Rte_Write_RawValues_rawTemperature(adcResultsDMA[1]);
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <Handle_Inputs_TaskCyclicEvent+0x80>)
 800162c:	885b      	ldrh	r3, [r3, #2]
 800162e:	4618      	mov	r0, r3
 8001630:	f000 fc9e 	bl	8001f70 <Rte_Write_RawValues_rawTemperature>

		/* Read ADC values for the potentiometer */
		HAL_ADC_Start(&hadc2);
 8001634:	480f      	ldr	r0, [pc, #60]	; (8001674 <Handle_Inputs_TaskCyclicEvent+0x88>)
 8001636:	f002 fcc7 	bl	8003fc8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 100u);
 800163a:	2164      	movs	r1, #100	; 0x64
 800163c:	480d      	ldr	r0, [pc, #52]	; (8001674 <Handle_Inputs_TaskCyclicEvent+0x88>)
 800163e:	f002 fdb1 	bl	80041a4 <HAL_ADC_PollForConversion>
		uint16_t pot_raw = HAL_ADC_GetValue(&hadc2);
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <Handle_Inputs_TaskCyclicEvent+0x88>)
 8001644:	f002 ff3a 	bl	80044bc <HAL_ADC_GetValue>
 8001648:	4603      	mov	r3, r0
 800164a:	80bb      	strh	r3, [r7, #4]
		HAL_ADC_Stop(&hadc2);
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <Handle_Inputs_TaskCyclicEvent+0x88>)
 800164e:	f002 fd75 	bl	800413c <HAL_ADC_Stop>

		Rte_Write_RawValues_rawPotentiometer(pot_raw);
 8001652:	88bb      	ldrh	r3, [r7, #4]
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fcb3 	bl	8001fc0 <Rte_Write_RawValues_rawPotentiometer>



}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	240011e1 	.word	0x240011e1
 8001668:	2400078c 	.word	0x2400078c
 800166c:	240011dc 	.word	0x240011dc
 8001670:	24001230 	.word	0x24001230
 8001674:	24001294 	.word	0x24001294

08001678 <Lights_TurnOffAllLights>:
static void Lights_HandleLowBeam(uint8_t status);
static void Lights_HandleHighBeam(uint8_t status);
/* ------------------------------------------------ */

void Lights_TurnOffAllLights()
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	/* Turn off Position Lights */
	Lights_HandlePositionLights(OFF);
 800167c:	2000      	movs	r0, #0
 800167e:	f000 f809 	bl	8001694 <Lights_HandlePositionLights>

	/* Turn off Lowbeam */
	Lights_HandleLowBeam(OFF);
 8001682:	2000      	movs	r0, #0
 8001684:	f000 f824 	bl	80016d0 <Lights_HandleLowBeam>

	/* Turn off Highbeam */
	Lights_HandleHighBeam(ON);
 8001688:	2001      	movs	r0, #1
 800168a:	f000 f84d 	bl	8001728 <Lights_HandleHighBeam>
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <Lights_HandlePositionLights>:
	/* Turn on Highbeam */
	Lights_HandleHighBeam(OFF);
}

void Lights_HandlePositionLights(uint8_t status)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
	/* Handle Position Lights */
	HAL_GPIO_WritePin(Lights_Pos_Left_GPIO_Port, Lights_Pos_Left_Pin, status);
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	461a      	mov	r2, r3
 80016a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a6:	4808      	ldr	r0, [pc, #32]	; (80016c8 <Lights_HandlePositionLights+0x34>)
 80016a8:	f006 ff8e 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lights_Pos_Right_GPIO_Port, Lights_Pos_Right_Pin, status);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	461a      	mov	r2, r3
 80016b0:	2140      	movs	r1, #64	; 0x40
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <Lights_HandlePositionLights+0x38>)
 80016b4:	f006 ff88 	bl	80085c8 <HAL_GPIO_WritePin>

	/* Turn off HighBeam */
	Lights_HandleHighBeam(OFF);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f000 f835 	bl	8001728 <Lights_HandleHighBeam>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	58021000 	.word	0x58021000
 80016cc:	58020400 	.word	0x58020400

080016d0 <Lights_HandleLowBeam>:

void Lights_HandleLowBeam(uint8_t status)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	/* Handle Left LowBeam */
	HAL_GPIO_WritePin(Lights_LowBeam_Bottom_Left_GPIO_Port, Lights_LowBeam_Bottom_Left_Pin, status);
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	461a      	mov	r2, r3
 80016de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e2:	480f      	ldr	r0, [pc, #60]	; (8001720 <Lights_HandleLowBeam+0x50>)
 80016e4:	f006 ff70 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lights_LowBeam_Top_Left_GPIO_Port, Lights_LowBeam_Top_Left_Pin, status);
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	461a      	mov	r2, r3
 80016ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f0:	480b      	ldr	r0, [pc, #44]	; (8001720 <Lights_HandleLowBeam+0x50>)
 80016f2:	f006 ff69 	bl	80085c8 <HAL_GPIO_WritePin>

	/* Handle Right LowBeam */
	HAL_GPIO_WritePin(Lights_LowBeam_Bottom_Right_GPIO_Port, Lights_LowBeam_Bottom_Right_Pin, status);
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	461a      	mov	r2, r3
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	4809      	ldr	r0, [pc, #36]	; (8001724 <Lights_HandleLowBeam+0x54>)
 80016fe:	f006 ff63 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Lights_LowBeam_Top_Right_GPIO_Port, Lights_LowBeam_Top_Right_Pin, status);
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	461a      	mov	r2, r3
 8001706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <Lights_HandleLowBeam+0x50>)
 800170c:	f006 ff5c 	bl	80085c8 <HAL_GPIO_WritePin>

	/* Turn off HighBeam */
	Lights_HandleHighBeam(OFF);
 8001710:	2000      	movs	r0, #0
 8001712:	f000 f809 	bl	8001728 <Lights_HandleHighBeam>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	58021000 	.word	0x58021000
 8001724:	58020400 	.word	0x58020400

08001728 <Lights_HandleHighBeam>:

void Lights_HandleHighBeam(uint8_t status)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
	/* Handle HighBeam */
	HAL_GPIO_WritePin(Lights_HighBeam_GPIO_Port, Lights_HighBeam_Pin, status);
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	461a      	mov	r2, r3
 8001736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800173a:	4803      	ldr	r0, [pc, #12]	; (8001748 <Lights_HandleHighBeam+0x20>)
 800173c:	f006 ff44 	bl	80085c8 <HAL_GPIO_WritePin>

}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	58020400 	.word	0x58020400

0800174c <Lights_Module_Init>:

/* ---------------- Exported functions ---------------- */
void Lights_Module_Init()
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	/* Initialize all lights by turning them off */
	Lights_TurnOffAllLights();
 8001750:	f7ff ff92 	bl	8001678 <Lights_TurnOffAllLights>
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <Lights_Module_Start_TaskCyclicEvent>:

void Lights_Module_Start_TaskCyclicEvent()
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0

	uint8_t driverPresent;
	Rte_Read_DriverPresence_value(&driverPresent);
 800175e:	1dfb      	adds	r3, r7, #7
 8001760:	4618      	mov	r0, r3
 8001762:	f000 fb65 	bl	8001e30 <Rte_Read_DriverPresence_value>
	if(FALSE == driverPresent)
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10f      	bne.n	800178c <Lights_Module_Start_TaskCyclicEvent+0x34>
	{
			uint8_t light_status;
			Rte_Read_CommandBuffer_Lights_status(&light_status);
 800176c:	1dbb      	adds	r3, r7, #6
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fb72 	bl	8001e58 <Rte_Read_CommandBuffer_Lights_status>

			/* Handle Position Lights */
			Lights_HandlePositionLights(light_status);
 8001774:	79bb      	ldrb	r3, [r7, #6]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff8c 	bl	8001694 <Lights_HandlePositionLights>

			/* Handle Lowbeam */
			Lights_HandleLowBeam(light_status);
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ffa6 	bl	80016d0 <Lights_HandleLowBeam>

			/* Highbeam cannot be controlled from distance - negative logic */
			Lights_HandleHighBeam(ON);
 8001784:	2001      	movs	r0, #1
 8001786:	f7ff ffcf 	bl	8001728 <Lights_HandleHighBeam>
		{
			/* Do nothing */
		}
	}

}
 800178a:	e054      	b.n	8001836 <Lights_Module_Start_TaskCyclicEvent+0xde>
		Rte_Read_Lights_OnOffStatus(&turnedOff);
 800178c:	1d7b      	adds	r3, r7, #5
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fa1e 	bl	8001bd0 <Rte_Read_Lights_OnOffStatus>
		Rte_Read_Lights_PosLights(&posLights);
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f99c 	bl	8001ad4 <Rte_Read_Lights_PosLights>
		Rte_Read_Lights_LowBeam(&lowBeam);
 800179c:	1cfb      	adds	r3, r7, #3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f9b8 	bl	8001b14 <Rte_Read_Lights_LowBeam>
		Rte_Read_Lights_HighBeam(&highBeam);
 80017a4:	1cbb      	adds	r3, r7, #2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f9de 	bl	8001b68 <Rte_Read_Lights_HighBeam>
		Rte_Read_Lights_Status_Auto(&statusAuto);
 80017ac:	1c7b      	adds	r3, r7, #1
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fa36 	bl	8001c20 <Rte_Read_Lights_Status_Auto>
		if(FALSE != turnedOff)
 80017b4:	797b      	ldrb	r3, [r7, #5]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <Lights_Module_Start_TaskCyclicEvent+0x66>
			Lights_TurnOffAllLights();
 80017ba:	f7ff ff5d 	bl	8001678 <Lights_TurnOffAllLights>
		if( FALSE != posLights)
 80017be:	793b      	ldrb	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <Lights_Module_Start_TaskCyclicEvent+0x72>
			Lights_HandlePositionLights(ON);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f7ff ff65 	bl	8001694 <Lights_HandlePositionLights>
		if( FALSE != lowBeam)
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <Lights_Module_Start_TaskCyclicEvent+0x80>
			Lights_HandleLowBeam(ON);
 80017d0:	2001      	movs	r0, #1
 80017d2:	f7ff ff7d 	bl	80016d0 <Lights_HandleLowBeam>
 80017d6:	e002      	b.n	80017de <Lights_Module_Start_TaskCyclicEvent+0x86>
			Lights_HandleLowBeam(OFF);
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff ff79 	bl	80016d0 <Lights_HandleLowBeam>
		if( FALSE != highBeam)
 80017de:	78bb      	ldrb	r3, [r7, #2]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <Lights_Module_Start_TaskCyclicEvent+0x94>
			Lights_HandleHighBeam(OFF);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff ff9f 	bl	8001728 <Lights_HandleHighBeam>
 80017ea:	e002      	b.n	80017f2 <Lights_Module_Start_TaskCyclicEvent+0x9a>
			Lights_HandleHighBeam(ON);
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff ff9b 	bl	8001728 <Lights_HandleHighBeam>
		if( FALSE != statusAuto)
 80017f2:	787b      	ldrb	r3, [r7, #1]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d01e      	beq.n	8001836 <Lights_Module_Start_TaskCyclicEvent+0xde>
			Lights_TurnOffAllLights();
 80017f8:	f7ff ff3e 	bl	8001678 <Lights_TurnOffAllLights>
			Lights_HandlePositionLights(ON);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f7ff ff49 	bl	8001694 <Lights_HandlePositionLights>
			Rte_Read_PhotoSen_prcntg(&lu8_photosen_prcntg);
 8001802:	463b      	mov	r3, r7
 8001804:	4618      	mov	r0, r3
 8001806:	f000 fabd 	bl	8001d84 <Rte_Read_PhotoSen_prcntg>
			if( (lu8_photosen_prcntg <= PERCENTAGE_75) && (lu8_photosen_prcntg >= PERCENTAGE_50) )			 /* Might calibrate it after the Photosen is integrated */
 800180a:	783b      	ldrb	r3, [r7, #0]
 800180c:	2b4b      	cmp	r3, #75	; 0x4b
 800180e:	d809      	bhi.n	8001824 <Lights_Module_Start_TaskCyclicEvent+0xcc>
 8001810:	783b      	ldrb	r3, [r7, #0]
 8001812:	2b31      	cmp	r3, #49	; 0x31
 8001814:	d906      	bls.n	8001824 <Lights_Module_Start_TaskCyclicEvent+0xcc>
				Lights_HandleLowBeam(ON);
 8001816:	2001      	movs	r0, #1
 8001818:	f7ff ff5a 	bl	80016d0 <Lights_HandleLowBeam>
				Lights_HandleHighBeam(ON); /* Turn off highbeam */
 800181c:	2001      	movs	r0, #1
 800181e:	f7ff ff83 	bl	8001728 <Lights_HandleHighBeam>
}
 8001822:	e008      	b.n	8001836 <Lights_Module_Start_TaskCyclicEvent+0xde>
			else if( (lu8_photosen_prcntg < PERCENTAGE_50) && (lu8_photosen_prcntg >= PERCENTAGE_0) )		 /* Might calibrate it after the Photosen is integrated */
 8001824:	783b      	ldrb	r3, [r7, #0]
 8001826:	2b31      	cmp	r3, #49	; 0x31
 8001828:	d805      	bhi.n	8001836 <Lights_Module_Start_TaskCyclicEvent+0xde>
				Lights_HandleLowBeam(ON);
 800182a:	2001      	movs	r0, #1
 800182c:	f7ff ff50 	bl	80016d0 <Lights_HandleLowBeam>
				Lights_HandleHighBeam(OFF); /* Turn on highbeam */
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff ff79 	bl	8001728 <Lights_HandleHighBeam>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <handle_debounce_Touch_Sensor>:
static uint8_t touch_sensor_timer;
static uint8_t handle_debounce;
static uint8_t driverPresence;

static uint8_t handle_debounce_Touch_Sensor()
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
	uint8_t retVal = FALSE;
 8001846:	2300      	movs	r3, #0
 8001848:	71fb      	strb	r3, [r7, #7]

	if( HIGH == (HAL_GPIO_ReadPin(Touch_Sensor_GPIO_Port, Touch_Sensor_Pin)) )
 800184a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800184e:	4816      	ldr	r0, [pc, #88]	; (80018a8 <handle_debounce_Touch_Sensor+0x68>)
 8001850:	f006 fea2 	bl	8008598 <HAL_GPIO_ReadPin>
 8001854:	4603      	mov	r3, r0
 8001856:	2b01      	cmp	r3, #1
 8001858:	d11e      	bne.n	8001898 <handle_debounce_Touch_Sensor+0x58>
	{
		if(0u == touch_sensor_timer)
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <handle_debounce_Touch_Sensor+0x6c>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d103      	bne.n	800186a <handle_debounce_Touch_Sensor+0x2a>
		{
			touch_sensor_timer = TIMER_2S + 1;
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <handle_debounce_Touch_Sensor+0x6c>)
 8001864:	2215      	movs	r2, #21
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	e019      	b.n	800189e <handle_debounce_Touch_Sensor+0x5e>
		}
		else if(1u == touch_sensor_timer)
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <handle_debounce_Touch_Sensor+0x6c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d10b      	bne.n	800188a <handle_debounce_Touch_Sensor+0x4a>
		{
			retVal = TRUE;
 8001872:	2301      	movs	r3, #1
 8001874:	71fb      	strb	r3, [r7, #7]
			touch_sensor_timer = 0u;
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <handle_debounce_Touch_Sensor+0x6c>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
			handle_debounce++;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <handle_debounce_Touch_Sensor+0x70>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <handle_debounce_Touch_Sensor+0x70>)
 8001886:	701a      	strb	r2, [r3, #0]
 8001888:	e009      	b.n	800189e <handle_debounce_Touch_Sensor+0x5e>
		}
		else
		{
			touch_sensor_timer--;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <handle_debounce_Touch_Sensor+0x6c>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	3b01      	subs	r3, #1
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <handle_debounce_Touch_Sensor+0x6c>)
 8001894:	701a      	strb	r2, [r3, #0]
 8001896:	e002      	b.n	800189e <handle_debounce_Touch_Sensor+0x5e>
		}
	}
	else
	{
		touch_sensor_timer = 0u;
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <handle_debounce_Touch_Sensor+0x6c>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
	}
	return retVal;
 800189e:	79fb      	ldrb	r3, [r7, #7]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	58021800 	.word	0x58021800
 80018ac:	240011e2 	.word	0x240011e2
 80018b0:	240011e3 	.word	0x240011e3

080018b4 <Presence_Detection_Init>:


void Presence_Detection_Init()
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	touch_sensor_timer = 0u;
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <Presence_Detection_Init+0x34>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
	handle_debounce = 0u;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <Presence_Detection_Init+0x38>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
	driverPresence = DRIVER_PRESENT;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <Presence_Detection_Init+0x3c>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, OFF);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018d0:	4808      	ldr	r0, [pc, #32]	; (80018f4 <Presence_Detection_Init+0x40>)
 80018d2:	f006 fe79 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, ON);
 80018d6:	2201      	movs	r2, #1
 80018d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <Presence_Detection_Init+0x40>)
 80018de:	f006 fe73 	bl	80085c8 <HAL_GPIO_WritePin>

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	240011e2 	.word	0x240011e2
 80018ec:	240011e3 	.word	0x240011e3
 80018f0:	240011e4 	.word	0x240011e4
 80018f4:	58020400 	.word	0x58020400

080018f8 <Presence_Detection_TaskCyclicEvent>:


void Presence_Detection_TaskCyclicEvent()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
	uint8_t doorStatus;
	uint8_t debounce_touchSensor;
	uint8_t vehicleSpeed;

	Rte_Read_Door_Status(&doorStatus);
 80018fe:	1dbb      	adds	r3, r7, #6
 8001900:	4618      	mov	r0, r3
 8001902:	f000 f9ad 	bl	8001c60 <Rte_Read_Door_Status>
	Rte_Read_CarSignals_VehicleSpeed(&vehicleSpeed);
 8001906:	1d7b      	adds	r3, r7, #5
 8001908:	4618      	mov	r0, r3
 800190a:	f000 fafb 	bl	8001f04 <Rte_Read_CarSignals_VehicleSpeed>

	debounce_touchSensor = handle_debounce_Touch_Sensor();
 800190e:	f7ff ff97 	bl	8001840 <handle_debounce_Touch_Sensor>
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]

	/* Case when driver exits */
	if( (DOOR_OPEN == doorStatus) && (KM_H_2 >= vehicleSpeed) && (TRUE == debounce_touchSensor) &&
 8001916:	79bb      	ldrb	r3, [r7, #6]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d11b      	bne.n	8001954 <Presence_Detection_TaskCyclicEvent+0x5c>
 800191c:	797b      	ldrb	r3, [r7, #5]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d818      	bhi.n	8001954 <Presence_Detection_TaskCyclicEvent+0x5c>
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d115      	bne.n	8001954 <Presence_Detection_TaskCyclicEvent+0x5c>
		( 1u == (handle_debounce&1)	) )
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <Presence_Detection_TaskCyclicEvent+0x98>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	f003 0301 	and.w	r3, r3, #1
	if( (DOOR_OPEN == doorStatus) && (KM_H_2 >= vehicleSpeed) && (TRUE == debounce_touchSensor) &&
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00f      	beq.n	8001954 <Presence_Detection_TaskCyclicEvent+0x5c>
	{
	  driverPresence = DRIVER_ABSENT;
 8001934:	4b17      	ldr	r3, [pc, #92]	; (8001994 <Presence_Detection_TaskCyclicEvent+0x9c>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, ON);
 800193a:	2201      	movs	r2, #1
 800193c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001940:	4815      	ldr	r0, [pc, #84]	; (8001998 <Presence_Detection_TaskCyclicEvent+0xa0>)
 8001942:	f006 fe41 	bl	80085c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, OFF);
 8001946:	2200      	movs	r2, #0
 8001948:	f44f 7180 	mov.w	r1, #256	; 0x100
 800194c:	4812      	ldr	r0, [pc, #72]	; (8001998 <Presence_Detection_TaskCyclicEvent+0xa0>)
 800194e:	f006 fe3b 	bl	80085c8 <HAL_GPIO_WritePin>
 8001952:	e014      	b.n	800197e <Presence_Detection_TaskCyclicEvent+0x86>
	}
	else if ( 0u == (handle_debounce&1) )
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <Presence_Detection_TaskCyclicEvent+0x98>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10e      	bne.n	800197e <Presence_Detection_TaskCyclicEvent+0x86>
	{
	 driverPresence = DRIVER_PRESENT;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <Presence_Detection_TaskCyclicEvent+0x9c>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
	 HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, ON);
 8001966:	2201      	movs	r2, #1
 8001968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196c:	480a      	ldr	r0, [pc, #40]	; (8001998 <Presence_Detection_TaskCyclicEvent+0xa0>)
 800196e:	f006 fe2b 	bl	80085c8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, OFF);
 8001972:	2200      	movs	r2, #0
 8001974:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001978:	4807      	ldr	r0, [pc, #28]	; (8001998 <Presence_Detection_TaskCyclicEvent+0xa0>)
 800197a:	f006 fe25 	bl	80085c8 <HAL_GPIO_WritePin>
	else
	{
		/* Do nothing */
	}

	Rte_Write_CarSignals_DriverPresence(driverPresence);
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <Presence_Detection_TaskCyclicEvent+0x9c>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fb30 	bl	8001fe8 <Rte_Write_CarSignals_DriverPresence>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	240011e3 	.word	0x240011e3
 8001994:	240011e4 	.word	0x240011e4
 8001998:	58020400 	.word	0x58020400

0800199c <map_values>:
static uint8_t Get_Temperature(uint16_t adc_raw);
static double Get_Voltage(uint16_t adc_raw);
/* ------------------------------------------------ */


uint16_t map_values(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 800199c:	b490      	push	{r4, r7}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4604      	mov	r4, r0
 80019a4:	4608      	mov	r0, r1
 80019a6:	4611      	mov	r1, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	4623      	mov	r3, r4
 80019ac:	80fb      	strh	r3, [r7, #6]
 80019ae:	4603      	mov	r3, r0
 80019b0:	80bb      	strh	r3, [r7, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	807b      	strh	r3, [r7, #2]
 80019b6:	4613      	mov	r3, r2
 80019b8:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80019ba:	88fa      	ldrh	r2, [r7, #6]
 80019bc:	88bb      	ldrh	r3, [r7, #4]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	8a39      	ldrh	r1, [r7, #16]
 80019c2:	883a      	ldrh	r2, [r7, #0]
 80019c4:	1a8a      	subs	r2, r1, r2
 80019c6:	fb03 f202 	mul.w	r2, r3, r2
 80019ca:	8879      	ldrh	r1, [r7, #2]
 80019cc:	88bb      	ldrh	r3, [r7, #4]
 80019ce:	1acb      	subs	r3, r1, r3
 80019d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	883b      	ldrh	r3, [r7, #0]
 80019d8:	4413      	add	r3, r2
 80019da:	b29b      	uxth	r3, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc90      	pop	{r4, r7}
 80019e4:	4770      	bx	lr
	...

080019e8 <Get_Temperature>:

uint8_t Get_Temperature(uint16_t adc_raw)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
	/* Local variables used for calculations */
	double Voltage,mV,temperature;

	/* Calculate Voltage[V] */
	Voltage = ( adc_raw / (pow(2,ADC_RESOLUTION) - 1u) ) * REF_5V;
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	ee07 3a90 	vmov	s15, r3
 80019f8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019fc:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8001a50 <Get_Temperature+0x68>
 8001a00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a04:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8001a58 <Get_Temperature+0x70>
 8001a08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a0c:	ed87 7b06 	vstr	d7, [r7, #24]
	/* mV = V * 1000 */
	mV = Voltage * RESOLUTION_V_TO_mV;
 8001a10:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a14:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001a60 <Get_Temperature+0x78>
 8001a18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a1c:	ed87 7b04 	vstr	d7, [r7, #16]
	/* Calculate temperature */
	temperature = mV / 10;
 8001a20:	ed97 6b04 	vldr	d6, [r7, #16]
 8001a24:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001a28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a2c:	ed87 7b02 	vstr	d7, [r7, #8]

	return (uint8_t)temperature;
 8001a30:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a38:	edc7 7a00 	vstr	s15, [r7]
 8001a3c:	783b      	ldrb	r3, [r7, #0]
 8001a3e:	b2db      	uxtb	r3, r3
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3724      	adds	r7, #36	; 0x24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	f3af 8000 	nop.w
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40affe00 	.word	0x40affe00
 8001a58:	cccccccd 	.word	0xcccccccd
 8001a5c:	4014cccc 	.word	0x4014cccc
 8001a60:	00000000 	.word	0x00000000
 8001a64:	408f4000 	.word	0x408f4000

08001a68 <Get_Voltage>:

double Get_Voltage(uint16_t adc_raw)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
	/* Local variables used for calculations */
	double Voltage,mV;

	/* Calculate Voltage[V] */
	Voltage = ( adc_raw / ADC_RESOLUTION - 1u) * REF_5V;
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <Get_Voltage+0x68>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	08db      	lsrs	r3, r3, #3
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a88:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001ac0 <Get_Voltage+0x58>
 8001a8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a90:	ed87 7b04 	vstr	d7, [r7, #16]
	/* mV = V * 1000 */
	mV = Voltage * RESOLUTION_V_TO_mV;
 8001a94:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a98:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8001ac8 <Get_Voltage+0x60>
 8001a9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001aa0:	ed87 7b02 	vstr	d7, [r7, #8]

	return mV;
 8001aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001aa8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001aac:	eeb0 0b47 	vmov.f64	d0, d7
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	f3af 8000 	nop.w
 8001ac0:	cccccccd 	.word	0xcccccccd
 8001ac4:	4014cccc 	.word	0x4014cccc
 8001ac8:	00000000 	.word	0x00000000
 8001acc:	408f4000 	.word	0x408f4000
 8001ad0:	aaaaaaab 	.word	0xaaaaaaab

08001ad4 <Rte_Read_Lights_PosLights>:

/* -----------------------------------Exported Functions----------------------------------- */

/* ----------RTE READ---------- */
Std_ReturnType Rte_Read_Lights_PosLights (uint8_t *data)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
	uint8_t state = HAL_GPIO_ReadPin(GPIOD, Switch_POS_Pin);
 8001ae0:	2140      	movs	r1, #64	; 0x40
 8001ae2:	480a      	ldr	r0, [pc, #40]	; (8001b0c <Rte_Read_Lights_PosLights+0x38>)
 8001ae4:	f006 fd58 	bl	8008598 <HAL_GPIO_ReadPin>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	73bb      	strb	r3, [r7, #14]
	if(state == HIGH)
 8001aec:	7bbb      	ldrb	r3, [r7, #14]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d102      	bne.n	8001af8 <Rte_Read_Lights_PosLights+0x24>
	{
		CarSignals.posLights = state;
 8001af2:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <Rte_Read_Lights_PosLights+0x3c>)
 8001af4:	7bbb      	ldrb	r3, [r7, #14]
 8001af6:	7093      	strb	r3, [r2, #2]
	}

	*data = CarSignals.posLights;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <Rte_Read_Lights_PosLights+0x3c>)
 8001afa:	789a      	ldrb	r2, [r3, #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	701a      	strb	r2, [r3, #0]

	return Rte_Status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	58020c00 	.word	0x58020c00
 8001b10:	240011e8 	.word	0x240011e8

08001b14 <Rte_Read_Lights_LowBeam>:
Std_ReturnType Rte_Read_Lights_LowBeam (uint8_t *data)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
	uint8_t state = HAL_GPIO_ReadPin(GPIOD, Switch_LOWBEAM_Pin);
 8001b20:	2120      	movs	r1, #32
 8001b22:	480f      	ldr	r0, [pc, #60]	; (8001b60 <Rte_Read_Lights_LowBeam+0x4c>)
 8001b24:	f006 fd38 	bl	8008598 <HAL_GPIO_ReadPin>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	73bb      	strb	r3, [r7, #14]
	if(state == HIGH)
 8001b2c:	7bbb      	ldrb	r3, [r7, #14]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d102      	bne.n	8001b38 <Rte_Read_Lights_LowBeam+0x24>
	{
		CarSignals.lowBeam = HIGH;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <Rte_Read_Lights_LowBeam+0x50>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOD, Switch_POS_Pin) == HIGH)
 8001b38:	2140      	movs	r1, #64	; 0x40
 8001b3a:	4809      	ldr	r0, [pc, #36]	; (8001b60 <Rte_Read_Lights_LowBeam+0x4c>)
 8001b3c:	f006 fd2c 	bl	8008598 <HAL_GPIO_ReadPin>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d102      	bne.n	8001b4c <Rte_Read_Lights_LowBeam+0x38>
	{
		CarSignals.lowBeam = LOW;
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <Rte_Read_Lights_LowBeam+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
	}
	*data = CarSignals.lowBeam;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <Rte_Read_Lights_LowBeam+0x50>)
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	701a      	strb	r2, [r3, #0]

	return Rte_Status;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	58020c00 	.word	0x58020c00
 8001b64:	240011e8 	.word	0x240011e8

08001b68 <Rte_Read_Lights_HighBeam>:

Std_ReturnType Rte_Read_Lights_HighBeam (uint8_t *data)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
	uint8_t state = HAL_GPIO_ReadPin(GPIOD, Switch_HIGHBEAM_Pin);
 8001b74:	2110      	movs	r1, #16
 8001b76:	4814      	ldr	r0, [pc, #80]	; (8001bc8 <Rte_Read_Lights_HighBeam+0x60>)
 8001b78:	f006 fd0e 	bl	8008598 <HAL_GPIO_ReadPin>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	73bb      	strb	r3, [r7, #14]
	if(state == HIGH)
 8001b80:	7bbb      	ldrb	r3, [r7, #14]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d102      	bne.n	8001b8c <Rte_Read_Lights_HighBeam+0x24>
	{
		CarSignals.highBeam = HIGH;
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <Rte_Read_Lights_HighBeam+0x64>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	705a      	strb	r2, [r3, #1]
	}
	if(HAL_GPIO_ReadPin(GPIOD, Switch_LOWBEAM_Pin) == HIGH)
 8001b8c:	2120      	movs	r1, #32
 8001b8e:	480e      	ldr	r0, [pc, #56]	; (8001bc8 <Rte_Read_Lights_HighBeam+0x60>)
 8001b90:	f006 fd02 	bl	8008598 <HAL_GPIO_ReadPin>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <Rte_Read_Lights_HighBeam+0x38>
	{
		CarSignals.highBeam = LOW;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <Rte_Read_Lights_HighBeam+0x64>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	705a      	strb	r2, [r3, #1]
	}
	if(HAL_GPIO_ReadPin(GPIOD, Switch_POS_Pin) == HIGH)
 8001ba0:	2140      	movs	r1, #64	; 0x40
 8001ba2:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <Rte_Read_Lights_HighBeam+0x60>)
 8001ba4:	f006 fcf8 	bl	8008598 <HAL_GPIO_ReadPin>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d102      	bne.n	8001bb4 <Rte_Read_Lights_HighBeam+0x4c>
	{
		CarSignals.highBeam = LOW;
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <Rte_Read_Lights_HighBeam+0x64>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	705a      	strb	r2, [r3, #1]
	}
	*data = CarSignals.highBeam;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <Rte_Read_Lights_HighBeam+0x64>)
 8001bb6:	785a      	ldrb	r2, [r3, #1]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	701a      	strb	r2, [r3, #0]

	return Rte_Status;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	58020c00 	.word	0x58020c00
 8001bcc:	240011e8 	.word	0x240011e8

08001bd0 <Rte_Read_Lights_OnOffStatus>:


Std_ReturnType Rte_Read_Lights_OnOffStatus (uint8_t *data)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
	*data = HAL_GPIO_ReadPin(GPIOD, Switch_OFF_Pin);
 8001bdc:	2180      	movs	r1, #128	; 0x80
 8001bde:	480e      	ldr	r0, [pc, #56]	; (8001c18 <Rte_Read_Lights_OnOffStatus+0x48>)
 8001be0:	f006 fcda 	bl	8008598 <HAL_GPIO_ReadPin>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GPIOD, Switch_OFF_Pin) == HIGH)
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	480a      	ldr	r0, [pc, #40]	; (8001c18 <Rte_Read_Lights_OnOffStatus+0x48>)
 8001bf0:	f006 fcd2 	bl	8008598 <HAL_GPIO_ReadPin>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d108      	bne.n	8001c0c <Rte_Read_Lights_OnOffStatus+0x3c>
	{
		CarSignals.posLights = LOW;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <Rte_Read_Lights_OnOffStatus+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	709a      	strb	r2, [r3, #2]
		CarSignals.lowBeam = LOW;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <Rte_Read_Lights_OnOffStatus+0x4c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
		CarSignals.highBeam = LOW;
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <Rte_Read_Lights_OnOffStatus+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	705a      	strb	r2, [r3, #1]
	}

	return Rte_Status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	58020c00 	.word	0x58020c00
 8001c1c:	240011e8 	.word	0x240011e8

08001c20 <Rte_Read_Lights_Status_Auto>:

Std_ReturnType Rte_Read_Lights_Status_Auto (uint8_t *data)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
	*data = HAL_GPIO_ReadPin(GPIOD, Switch_AUTO_Pin);
 8001c2c:	2108      	movs	r1, #8
 8001c2e:	480a      	ldr	r0, [pc, #40]	; (8001c58 <Rte_Read_Lights_Status_Auto+0x38>)
 8001c30:	f006 fcb2 	bl	8008598 <HAL_GPIO_ReadPin>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	701a      	strb	r2, [r3, #0]
	DataPacket_Arduino[5] = HAL_GPIO_ReadPin(GPIOD, Switch_AUTO_Pin);
 8001c3c:	2108      	movs	r1, #8
 8001c3e:	4806      	ldr	r0, [pc, #24]	; (8001c58 <Rte_Read_Lights_Status_Auto+0x38>)
 8001c40:	f006 fcaa 	bl	8008598 <HAL_GPIO_ReadPin>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <Rte_Read_Lights_Status_Auto+0x3c>)
 8001c4a:	715a      	strb	r2, [r3, #5]

	return Rte_Status;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	58020c00 	.word	0x58020c00
 8001c5c:	240011fc 	.word	0x240011fc

08001c60 <Rte_Read_Door_Status>:

Std_ReturnType Rte_Read_Door_Status(uint8_t *data)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]

	if( (DEG90 == htim2.Instance->CCR1) && (DEG90 == htim2.Instance->CCR2) )
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <Rte_Read_Door_Status+0x70>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c72:	f240 5246 	movw	r2, #1350	; 0x546
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10e      	bne.n	8001c98 <Rte_Read_Door_Status+0x38>
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <Rte_Read_Door_Status+0x70>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c80:	f240 5246 	movw	r2, #1350	; 0x546
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d107      	bne.n	8001c98 <Rte_Read_Door_Status+0x38>
	{
		CarSignals.doorStatus = DOOR_OPEN;
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <Rte_Read_Door_Status+0x74>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	70da      	strb	r2, [r3, #3]
		*data = CarSignals.doorStatus;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <Rte_Read_Door_Status+0x74>)
 8001c90:	78da      	ldrb	r2, [r3, #3]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	e013      	b.n	8001cc0 <Rte_Read_Door_Status+0x60>

	}
	else if( (DEG180 == htim2.Instance->CCR1) && (DEG0 == htim2.Instance->CCR2) )
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <Rte_Read_Door_Status+0x70>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9e:	f640 0298 	movw	r2, #2200	; 0x898
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d10c      	bne.n	8001cc0 <Rte_Read_Door_Status+0x60>
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <Rte_Read_Door_Status+0x70>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cac:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001cb0:	d106      	bne.n	8001cc0 <Rte_Read_Door_Status+0x60>
	{
		CarSignals.doorStatus = DOOR_CLOSED;
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <Rte_Read_Door_Status+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	70da      	strb	r2, [r3, #3]
		*data = CarSignals.doorStatus;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <Rte_Read_Door_Status+0x74>)
 8001cba:	78da      	ldrb	r2, [r3, #3]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	701a      	strb	r2, [r3, #0]
	}


	return Rte_Status;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	24001370 	.word	0x24001370
 8001cd4:	240011e8 	.word	0x240011e8

08001cd8 <Rte_Read_Fan_Status>:

Std_ReturnType Rte_Read_Fan_Status (uint8_t *data)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

	Std_ReturnType Rte_Status = RTE_E_OK;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
	DataPacket_Arduino[8] = CarSignals.fanStatus;
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <Rte_Read_Fan_Status+0x2c>)
 8001ce6:	791a      	ldrb	r2, [r3, #4]
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <Rte_Read_Fan_Status+0x30>)
 8001cea:	721a      	strb	r2, [r3, #8]
	*data = CarSignals.fanStatus;
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <Rte_Read_Fan_Status+0x2c>)
 8001cee:	791a      	ldrb	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	701a      	strb	r2, [r3, #0]

	return Rte_Status;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	240011e8 	.word	0x240011e8
 8001d08:	240011fc 	.word	0x240011fc

08001d0c <Rte_Read_Engine_Status>:

Std_ReturnType Rte_Read_Engine_Status (uint8_t *data)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

	Std_ReturnType Rte_Status = RTE_E_OK;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
	DataPacket_Arduino[7] = CarSignals.engineStatus;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <Rte_Read_Engine_Status+0x2c>)
 8001d1a:	799a      	ldrb	r2, [r3, #6]
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <Rte_Read_Engine_Status+0x30>)
 8001d1e:	71da      	strb	r2, [r3, #7]
	*data = CarSignals.engineStatus;
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <Rte_Read_Engine_Status+0x2c>)
 8001d22:	799a      	ldrb	r2, [r3, #6]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	701a      	strb	r2, [r3, #0]

	return Rte_Status;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	240011e8 	.word	0x240011e8
 8001d3c:	240011fc 	.word	0x240011fc

08001d40 <Rte_Read_Temperature_Value>:

Std_ReturnType Rte_Read_Temperature_Value(uint8_t *data)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
	uint16_t lu8_temp = RawValues.rawTemperature;
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <Rte_Read_Temperature_Value+0x3c>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	81bb      	strh	r3, [r7, #12]
	DataPacket_Arduino[1] = Get_Temperature(lu8_temp);
 8001d52:	89bb      	ldrh	r3, [r7, #12]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fe47 	bl	80019e8 <Get_Temperature>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <Rte_Read_Temperature_Value+0x40>)
 8001d60:	705a      	strb	r2, [r3, #1]
	*data = Get_Temperature(lu8_temp);
 8001d62:	89bb      	ldrh	r3, [r7, #12]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fe3f 	bl	80019e8 <Get_Temperature>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	701a      	strb	r2, [r3, #0]

	return Rte_Status;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]

}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	240011f4 	.word	0x240011f4
 8001d80:	240011fc 	.word	0x240011fc

08001d84 <Rte_Read_PhotoSen_prcntg>:

Std_ReturnType Rte_Read_PhotoSen_prcntg(uint8_t *data)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
	uint16_t lu8_temp = RawValues.rawLux;
 8001d90:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <Rte_Read_PhotoSen_prcntg+0x50>)
 8001d92:	885b      	ldrh	r3, [r3, #2]
 8001d94:	81bb      	strh	r3, [r7, #12]

	uint8_t mV = Get_Voltage(lu8_temp);
 8001d96:	89bb      	ldrh	r3, [r7, #12]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fe65 	bl	8001a68 <Get_Voltage>
 8001d9e:	eeb0 7b40 	vmov.f64	d7, d0
 8001da2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001da6:	edc7 7a00 	vstr	s15, [r7]
 8001daa:	783b      	ldrb	r3, [r7, #0]
 8001dac:	72fb      	strb	r3, [r7, #11]

	*data = map_values(mV, 0, 4880, 0, 100);
 8001dae:	7afb      	ldrb	r3, [r7, #11]
 8001db0:	b298      	uxth	r0, r3
 8001db2:	2364      	movs	r3, #100	; 0x64
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2300      	movs	r3, #0
 8001db8:	f241 3210 	movw	r2, #4880	; 0x1310
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	f7ff fded 	bl	800199c <map_values>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	701a      	strb	r2, [r3, #0]

	return Rte_Status;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	240011f4 	.word	0x240011f4

08001dd8 <Rte_Read_Potentiometer_interval>:

Std_ReturnType Rte_Read_Potentiometer_interval(uint8_t *data)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
	uint16_t lu8_temp = RawValues.rawPotentiometer;
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <Rte_Read_Potentiometer_interval+0x50>)
 8001de6:	889b      	ldrh	r3, [r3, #4]
 8001de8:	81bb      	strh	r3, [r7, #12]
	DataPacket_Arduino[6] = map_values(lu8_temp, 55, 4095, 15, 25);
 8001dea:	89b8      	ldrh	r0, [r7, #12]
 8001dec:	2319      	movs	r3, #25
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	230f      	movs	r3, #15
 8001df2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001df6:	2137      	movs	r1, #55	; 0x37
 8001df8:	f7ff fdd0 	bl	800199c <map_values>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <Rte_Read_Potentiometer_interval+0x54>)
 8001e02:	719a      	strb	r2, [r3, #6]
	*data = map_values(lu8_temp, 55, 4095, 15, 25);
 8001e04:	89b8      	ldrh	r0, [r7, #12]
 8001e06:	2319      	movs	r3, #25
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	230f      	movs	r3, #15
 8001e0c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e10:	2137      	movs	r1, #55	; 0x37
 8001e12:	f7ff fdc3 	bl	800199c <map_values>
 8001e16:	4603      	mov	r3, r0
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	701a      	strb	r2, [r3, #0]


	return Rte_Status;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	240011f4 	.word	0x240011f4
 8001e2c:	240011fc 	.word	0x240011fc

08001e30 <Rte_Read_DriverPresence_value>:

Std_ReturnType Rte_Read_DriverPresence_value(uint8_t *data)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
	*data = CarSignals.driverPresence;
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <Rte_Read_DriverPresence_value+0x24>)
 8001e3e:	79da      	ldrb	r2, [r3, #7]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	701a      	strb	r2, [r3, #0]

	return Rte_Status;
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	240011e8 	.word	0x240011e8

08001e58 <Rte_Read_CommandBuffer_Lights_status>:

Std_ReturnType Rte_Read_CommandBuffer_Lights_status(uint8_t *data)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
	CarSignals.posLights = CommandValues[0];
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <Rte_Read_CommandBuffer_Lights_status+0x3c>)
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <Rte_Read_CommandBuffer_Lights_status+0x40>)
 8001e6a:	709a      	strb	r2, [r3, #2]
	CarSignals.lowBeam = CommandValues[0];
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <Rte_Read_CommandBuffer_Lights_status+0x3c>)
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <Rte_Read_CommandBuffer_Lights_status+0x40>)
 8001e72:	701a      	strb	r2, [r3, #0]
	CarSignals.highBeam = CommandValues[0];
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <Rte_Read_CommandBuffer_Lights_status+0x3c>)
 8001e76:	781a      	ldrb	r2, [r3, #0]
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <Rte_Read_CommandBuffer_Lights_status+0x40>)
 8001e7a:	705a      	strb	r2, [r3, #1]
	*data = CommandValues[0];
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <Rte_Read_CommandBuffer_Lights_status+0x3c>)
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	701a      	strb	r2, [r3, #0]

	return Rte_Status;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	24000790 	.word	0x24000790
 8001e98:	240011e8 	.word	0x240011e8

08001e9c <Rte_Read_CommandBuffer_Fan_status>:

Std_ReturnType Rte_Read_CommandBuffer_Fan_status(uint8_t *data)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
	CarSignals.fanStatus = CommandValues[2];
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <Rte_Read_CommandBuffer_Fan_status+0x2c>)
 8001eaa:	789a      	ldrb	r2, [r3, #2]
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <Rte_Read_CommandBuffer_Fan_status+0x30>)
 8001eae:	711a      	strb	r2, [r3, #4]
	*data = CommandValues[2];
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <Rte_Read_CommandBuffer_Fan_status+0x2c>)
 8001eb2:	789a      	ldrb	r2, [r3, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	701a      	strb	r2, [r3, #0]

	return Rte_Status;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	24000790 	.word	0x24000790
 8001ecc:	240011e8 	.word	0x240011e8

08001ed0 <Rte_Read_CommandBuffer_Door_status>:

Std_ReturnType Rte_Read_CommandBuffer_Door_status(uint8_t *data)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
	CarSignals.doorStatus = CommandValues[1];
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <Rte_Read_CommandBuffer_Door_status+0x2c>)
 8001ede:	785a      	ldrb	r2, [r3, #1]
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <Rte_Read_CommandBuffer_Door_status+0x30>)
 8001ee2:	70da      	strb	r2, [r3, #3]
	*data = CommandValues[1];
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <Rte_Read_CommandBuffer_Door_status+0x2c>)
 8001ee6:	785a      	ldrb	r2, [r3, #1]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	701a      	strb	r2, [r3, #0]

	return Rte_Status;
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	24000790 	.word	0x24000790
 8001f00:	240011e8 	.word	0x240011e8

08001f04 <Rte_Read_CarSignals_VehicleSpeed>:

Std_ReturnType Rte_Read_CarSignals_VehicleSpeed(uint8_t *data)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
	*data = CarSignals.vehicleSpeed;
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <Rte_Read_CarSignals_VehicleSpeed+0x24>)
 8001f12:	7a1a      	ldrb	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	701a      	strb	r2, [r3, #0]

	return Rte_Status;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	240011e8 	.word	0x240011e8

08001f2c <Rte_Read_Lights_Status>:

Std_ReturnType Rte_Read_Lights_Status(uint8_t *data)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]

	if(CarSignals.posLights == ON || CarSignals.lowBeam == ON || CarSignals.highBeam == ON)
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <Rte_Read_Lights_Status+0x40>)
 8001f3a:	789b      	ldrb	r3, [r3, #2]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d007      	beq.n	8001f50 <Rte_Read_Lights_Status+0x24>
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <Rte_Read_Lights_Status+0x40>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d003      	beq.n	8001f50 <Rte_Read_Lights_Status+0x24>
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <Rte_Read_Lights_Status+0x40>)
 8001f4a:	785b      	ldrb	r3, [r3, #1]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d103      	bne.n	8001f58 <Rte_Read_Lights_Status+0x2c>
	{
		*data = ON;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	e002      	b.n	8001f5e <Rte_Read_Lights_Status+0x32>
	}
	else
	{
		*data = OFF;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
	}
	return Rte_Status;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	240011e8 	.word	0x240011e8

08001f70 <Rte_Write_RawValues_rawTemperature>:
	return Rte_Status;
}
/* ----------RTE READ---------- */

Std_ReturnType Rte_Write_RawValues_rawTemperature(uint16_t data)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
	RawValues.rawTemperature = data;
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <Rte_Write_RawValues_rawTemperature+0x24>)
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	8013      	strh	r3, [r2, #0]

	return Rte_Status;
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	240011f4 	.word	0x240011f4

08001f98 <Rte_Write_RawValues_rawLux>:

Std_ReturnType Rte_Write_RawValues_rawLux(uint16_t data)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
	RawValues.rawLux = data;
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <Rte_Write_RawValues_rawLux+0x24>)
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	8053      	strh	r3, [r2, #2]

	return Rte_Status;
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	240011f4 	.word	0x240011f4

08001fc0 <Rte_Write_RawValues_rawPotentiometer>:

Std_ReturnType Rte_Write_RawValues_rawPotentiometer(uint16_t data)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
	RawValues.rawPotentiometer = data;
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <Rte_Write_RawValues_rawPotentiometer+0x24>)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	8093      	strh	r3, [r2, #4]

	return Rte_Status;
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	240011f4 	.word	0x240011f4

08001fe8 <Rte_Write_CarSignals_DriverPresence>:

Std_ReturnType Rte_Write_CarSignals_DriverPresence(uint8_t data)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
	CarSignals.driverPresence = data;
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <Rte_Write_CarSignals_DriverPresence+0x24>)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	71d3      	strb	r3, [r2, #7]

	return Rte_Status;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	240011e8 	.word	0x240011e8

08002010 <Rte_Write_CommandBuffer_Lights_status>:

Std_ReturnType Rte_Write_CommandBuffer_Lights_status(uint8_t data)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Rte_Status = RTE_E_OK;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
	CommandValues[0] = data;
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <Rte_Write_CommandBuffer_Lights_status+0x24>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	7013      	strb	r3, [r2, #0]

	return Rte_Status;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	24000790 	.word	0x24000790

08002038 <Rte_Write_CommandBuffer_Door_status>:

Std_ReturnType Rte_Write_CommandBuffer_Door_status(uint8_t data)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8002042:	2301      	movs	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
	CommandValues[1] = data;
 8002046:	4a05      	ldr	r2, [pc, #20]	; (800205c <Rte_Write_CommandBuffer_Door_status+0x24>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	7053      	strb	r3, [r2, #1]

	return Rte_Status;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	24000790 	.word	0x24000790

08002060 <Rte_Write_CommandBuffer_Fan_status>:

Std_ReturnType Rte_Write_CommandBuffer_Fan_status(uint8_t data)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Rte_Status = RTE_E_OK;
 800206a:	2301      	movs	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
	CommandValues[2] = data;
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <Rte_Write_CommandBuffer_Fan_status+0x24>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	7093      	strb	r3, [r2, #2]

	return Rte_Status;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	24000790 	.word	0x24000790

08002088 <Rte_Write_CarSignals_VehicleSpeed>:

Std_ReturnType Rte_Write_CarSignals_VehicleSpeed(uint8_t data)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Rte_Status = RTE_E_OK;
 8002092:	2301      	movs	r3, #1
 8002094:	73fb      	strb	r3, [r7, #15]
	DataPacket_Arduino[0] = data;
 8002096:	4a06      	ldr	r2, [pc, #24]	; (80020b0 <Rte_Write_CarSignals_VehicleSpeed+0x28>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	7013      	strb	r3, [r2, #0]
	CarSignals.vehicleSpeed = data;
 800209c:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <Rte_Write_CarSignals_VehicleSpeed+0x2c>)
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	7213      	strb	r3, [r2, #8]

	return Rte_Status;
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	240011fc 	.word	0x240011fc
 80020b4:	240011e8 	.word	0x240011e8

080020b8 <Rte_Write_CarSignals_FanStatus>:

Std_ReturnType Rte_Write_CarSignals_FanStatus(uint8_t data)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Rte_Status = RTE_E_OK;
 80020c2:	2301      	movs	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
	CarSignals.fanStatus = data;
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <Rte_Write_CarSignals_FanStatus+0x24>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	7113      	strb	r3, [r2, #4]

	return Rte_Status;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	240011e8 	.word	0x240011e8

080020e0 <Rte_Write_CarSignals_EngineStatus>:

Std_ReturnType Rte_Write_CarSignals_EngineStatus(uint8_t data)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType Rte_Status = RTE_E_OK;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
	CarSignals.engineStatus = data;
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <Rte_Write_CarSignals_EngineStatus+0x24>)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	7193      	strb	r3, [r2, #6]

	return Rte_Status;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	240011e8 	.word	0x240011e8

08002108 <handle_debounce_Button_Door>:
static uint8_t timer_betweenDebounce;
static uint8_t doors_last;
static uint8_t handle_door; /* even - door opened / odd - door is closed */

static uint8_t handle_debounce_Button_Door()
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
	uint8_t retVal = FALSE;
 800210e:	2300      	movs	r3, #0
 8002110:	71fb      	strb	r3, [r7, #7]

	if( HIGH == (HAL_GPIO_ReadPin(GPIOB, Button_Doors_Pin)) )
 8002112:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002116:	4816      	ldr	r0, [pc, #88]	; (8002170 <handle_debounce_Button_Door+0x68>)
 8002118:	f006 fa3e 	bl	8008598 <HAL_GPIO_ReadPin>
 800211c:	4603      	mov	r3, r0
 800211e:	2b01      	cmp	r3, #1
 8002120:	d11e      	bne.n	8002160 <handle_debounce_Button_Door+0x58>
	{
		if(0u == timer_debounce_button_door)
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <handle_debounce_Button_Door+0x6c>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <handle_debounce_Button_Door+0x2a>
		{
			timer_debounce_button_door = TIMER_2S + 1;
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <handle_debounce_Button_Door+0x6c>)
 800212c:	2215      	movs	r2, #21
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	e019      	b.n	8002166 <handle_debounce_Button_Door+0x5e>
		}
		else if(1u == timer_debounce_button_door)
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <handle_debounce_Button_Door+0x6c>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d10b      	bne.n	8002152 <handle_debounce_Button_Door+0x4a>
		{
			retVal = TRUE;
 800213a:	2301      	movs	r3, #1
 800213c:	71fb      	strb	r3, [r7, #7]
			timer_debounce_button_door = 0u;
 800213e:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <handle_debounce_Button_Door+0x6c>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
			handle_door++;
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <handle_debounce_Button_Door+0x70>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	3301      	adds	r3, #1
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <handle_debounce_Button_Door+0x70>)
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	e009      	b.n	8002166 <handle_debounce_Button_Door+0x5e>
		}
		else
		{
			timer_debounce_button_door--;
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <handle_debounce_Button_Door+0x6c>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	3b01      	subs	r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <handle_debounce_Button_Door+0x6c>)
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	e002      	b.n	8002166 <handle_debounce_Button_Door+0x5e>
		}
	}
	else
	{
		timer_debounce_button_door = 0u;
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <handle_debounce_Button_Door+0x6c>)
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
	}
	return retVal;
 8002166:	79fb      	ldrb	r3, [r7, #7]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	58020400 	.word	0x58020400
 8002174:	24001205 	.word	0x24001205
 8002178:	24001207 	.word	0x24001207

0800217c <Servo_Start_Init>:


void Servo_Start_Init()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0

	static uint8_t first_run = FALSE;
	timer_debounce_button_door = 0u;
 8002180:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <Servo_Start_Init+0x48>)
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
	handle_door = 1u;
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <Servo_Start_Init+0x4c>)
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]

	if(first_run == FALSE)
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <Servo_Start_Init+0x50>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d114      	bne.n	80021be <Servo_Start_Init+0x42>
	{
		first_run = TRUE;
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <Servo_Start_Init+0x50>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800219a:	2100      	movs	r1, #0
 800219c:	480c      	ldr	r0, [pc, #48]	; (80021d0 <Servo_Start_Init+0x54>)
 800219e:	f009 fea7 	bl	800bef0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 80021a2:	2104      	movs	r1, #4
 80021a4:	480a      	ldr	r0, [pc, #40]	; (80021d0 <Servo_Start_Init+0x54>)
 80021a6:	f009 fea3 	bl	800bef0 <HAL_TIM_PWM_Start>
		htim2.Instance->CCR1 = DEG90;
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <Servo_Start_Init+0x54>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f240 5246 	movw	r2, #1350	; 0x546
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34
		htim2.Instance->CCR2 = DEG90;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <Servo_Start_Init+0x54>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f240 5246 	movw	r2, #1350	; 0x546
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38
	}
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	24001205 	.word	0x24001205
 80021c8:	24001207 	.word	0x24001207
 80021cc:	24001208 	.word	0x24001208
 80021d0:	24001370 	.word	0x24001370

080021d4 <Servo_Start_TaskCyclicEvent>:

void Servo_Start_TaskCyclicEvent()
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0

	uint8_t driverPresent;
	Rte_Read_DriverPresence_value(&driverPresent);
 80021da:	1dbb      	adds	r3, r7, #6
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fe27 	bl	8001e30 <Rte_Read_DriverPresence_value>

	if(FALSE == driverPresent)
 80021e2:	79bb      	ldrb	r3, [r7, #6]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d122      	bne.n	800222e <Servo_Start_TaskCyclicEvent+0x5a>
	{
		uint8_t lu8_temp;
		Rte_Read_CommandBuffer_Door_status(&lu8_temp);
 80021e8:	1d7b      	adds	r3, r7, #5
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fe70 	bl	8001ed0 <Rte_Read_CommandBuffer_Door_status>

		if( (DOOR_CLOSED == lu8_temp) )
 80021f0:	797b      	ldrb	r3, [r7, #5]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10d      	bne.n	8002212 <Servo_Start_TaskCyclicEvent+0x3e>
		{
			htim2.Instance->CCR1 = DEG180;   				/* Close Doors */
 80021f6:	4b23      	ldr	r3, [pc, #140]	; (8002284 <Servo_Start_TaskCyclicEvent+0xb0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f640 0298 	movw	r2, #2200	; 0x898
 80021fe:	635a      	str	r2, [r3, #52]	; 0x34
			htim2.Instance->CCR2 = DEG0;
 8002200:	4b20      	ldr	r3, [pc, #128]	; (8002284 <Servo_Start_TaskCyclicEvent+0xb0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
			doors_last = DOOR_OPEN;
 800220a:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <Servo_Start_TaskCyclicEvent+0xb4>)
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
	}




}
 8002210:	e033      	b.n	800227a <Servo_Start_TaskCyclicEvent+0xa6>
			htim2.Instance->CCR1 = DEG90;      				/* Open Doors */
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <Servo_Start_TaskCyclicEvent+0xb0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f240 5246 	movw	r2, #1350	; 0x546
 800221a:	635a      	str	r2, [r3, #52]	; 0x34
			htim2.Instance->CCR2 = DEG90;
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <Servo_Start_TaskCyclicEvent+0xb0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f240 5246 	movw	r2, #1350	; 0x546
 8002224:	639a      	str	r2, [r3, #56]	; 0x38
			doors_last = DOOR_CLOSED;
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <Servo_Start_TaskCyclicEvent+0xb4>)
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
}
 800222c:	e025      	b.n	800227a <Servo_Start_TaskCyclicEvent+0xa6>
		lu8_debounce_doorStatus = handle_debounce_Button_Door();
 800222e:	f7ff ff6b 	bl	8002108 <handle_debounce_Button_Door>
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
		if( FALSE != lu8_debounce_doorStatus )
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01e      	beq.n	800227a <Servo_Start_TaskCyclicEvent+0xa6>
			Rte_Read_Door_Status(&status);
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fd0e 	bl	8001c60 <Rte_Read_Door_Status>
			if( (handle_door & 1) == 0)
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <Servo_Start_TaskCyclicEvent+0xb8>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10a      	bne.n	8002266 <Servo_Start_TaskCyclicEvent+0x92>
				htim2.Instance->CCR1 = DEG180;   /* Close Doors */
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <Servo_Start_TaskCyclicEvent+0xb0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f640 0298 	movw	r2, #2200	; 0x898
 8002258:	635a      	str	r2, [r3, #52]	; 0x34
				htim2.Instance->CCR2 = DEG0;
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <Servo_Start_TaskCyclicEvent+0xb0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002262:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002264:	e009      	b.n	800227a <Servo_Start_TaskCyclicEvent+0xa6>
				htim2.Instance->CCR1 = DEG90;    /* Open Doors */
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <Servo_Start_TaskCyclicEvent+0xb0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f240 5246 	movw	r2, #1350	; 0x546
 800226e:	635a      	str	r2, [r3, #52]	; 0x34
				htim2.Instance->CCR2 = DEG90;
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <Servo_Start_TaskCyclicEvent+0xb0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f240 5246 	movw	r2, #1350	; 0x546
 8002278:	639a      	str	r2, [r3, #56]	; 0x38
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	24001370 	.word	0x24001370
 8002288:	24001206 	.word	0x24001206
 800228c:	24001207 	.word	0x24001207

08002290 <Start_Init>:
#include "Transmit_Arduino.h"
#include "main.h"


void Start_Init()
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	GSM_Start_Init();
 8002294:	f7ff f858 	bl	8001348 <GSM_Start_Init>
	Presence_Detection_Init();
 8002298:	f7ff fb0c 	bl	80018b4 <Presence_Detection_Init>
	Servo_Start_Init();
 800229c:	f7ff ff6e 	bl	800217c <Servo_Start_Init>
	Lights_Module_Init();
 80022a0:	f7ff fa54 	bl	800174c <Lights_Module_Init>
	Handle_Inputs_Init();
 80022a4:	f7ff f990 	bl	80015c8 <Handle_Inputs_Init>
	FanControl_Init();
 80022a8:	f7fe fc2a 	bl	8000b00 <FanControl_Init>
	Transmit_Arduino_Init();
 80022ac:	f000 f814 	bl	80022d8 <Transmit_Arduino_Init>
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <Start_TaskCyclicEvent>:

void Start_TaskCyclicEvent()
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	GSM_Start_TaskCyclicEvent();
 80022b8:	f7ff f86e 	bl	8001398 <GSM_Start_TaskCyclicEvent>
	Presence_Detection_TaskCyclicEvent();
 80022bc:	f7ff fb1c 	bl	80018f8 <Presence_Detection_TaskCyclicEvent>
	Servo_Start_TaskCyclicEvent();
 80022c0:	f7ff ff88 	bl	80021d4 <Servo_Start_TaskCyclicEvent>
	Handle_Inputs_TaskCyclicEvent();
 80022c4:	f7ff f992 	bl	80015ec <Handle_Inputs_TaskCyclicEvent>
	Lights_Module_Start_TaskCyclicEvent();
 80022c8:	f7ff fa46 	bl	8001758 <Lights_Module_Start_TaskCyclicEvent>
	FanControl_TaskCyclicEvent();
 80022cc:	f7fe fc30 	bl	8000b30 <FanControl_TaskCyclicEvent>
	Transmit_Arduino_TaskCyclicEvent();
 80022d0:	f000 f80a 	bl	80022e8 <Transmit_Arduino_TaskCyclicEvent>
}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <Transmit_Arduino_Init>:
static uint8_t fanStatus;
static char TX_BUFFER[25];

/*Exported functions */
void Transmit_Arduino_Init()
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
	/* Do nothing */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <Transmit_Arduino_TaskCyclicEvent>:

void Transmit_Arduino_TaskCyclicEvent()
{
 80022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af08      	add	r7, sp, #32
	static uint8_t debounce=0;
	Rte_Read_CarSignals_VehicleSpeed(&speed);
 80022ee:	4830      	ldr	r0, [pc, #192]	; (80023b0 <Transmit_Arduino_TaskCyclicEvent+0xc8>)
 80022f0:	f7ff fe08 	bl	8001f04 <Rte_Read_CarSignals_VehicleSpeed>
	Rte_Read_Temperature_Value(&temperature);
 80022f4:	482f      	ldr	r0, [pc, #188]	; (80023b4 <Transmit_Arduino_TaskCyclicEvent+0xcc>)
 80022f6:	f7ff fd23 	bl	8001d40 <Rte_Read_Temperature_Value>
	Rte_Read_Potentiometer_interval(&temperature_setpoint);
 80022fa:	482f      	ldr	r0, [pc, #188]	; (80023b8 <Transmit_Arduino_TaskCyclicEvent+0xd0>)
 80022fc:	f7ff fd6c 	bl	8001dd8 <Rte_Read_Potentiometer_interval>
	Rte_Read_Lights_PosLights(&posLights);
 8002300:	482e      	ldr	r0, [pc, #184]	; (80023bc <Transmit_Arduino_TaskCyclicEvent+0xd4>)
 8002302:	f7ff fbe7 	bl	8001ad4 <Rte_Read_Lights_PosLights>
	Rte_Read_Lights_LowBeam(&lowBeam);
 8002306:	482e      	ldr	r0, [pc, #184]	; (80023c0 <Transmit_Arduino_TaskCyclicEvent+0xd8>)
 8002308:	f7ff fc04 	bl	8001b14 <Rte_Read_Lights_LowBeam>
	Rte_Read_Lights_HighBeam(&highBeam);
 800230c:	482d      	ldr	r0, [pc, #180]	; (80023c4 <Transmit_Arduino_TaskCyclicEvent+0xdc>)
 800230e:	f7ff fc2b 	bl	8001b68 <Rte_Read_Lights_HighBeam>
	Rte_Read_Lights_Status_Auto(&autoMode);
 8002312:	482d      	ldr	r0, [pc, #180]	; (80023c8 <Transmit_Arduino_TaskCyclicEvent+0xe0>)
 8002314:	f7ff fc84 	bl	8001c20 <Rte_Read_Lights_Status_Auto>
	Rte_Read_Engine_Status(&engineStatus);
 8002318:	482c      	ldr	r0, [pc, #176]	; (80023cc <Transmit_Arduino_TaskCyclicEvent+0xe4>)
 800231a:	f7ff fcf7 	bl	8001d0c <Rte_Read_Engine_Status>
	Rte_Read_Fan_Status(&fanStatus);
 800231e:	482c      	ldr	r0, [pc, #176]	; (80023d0 <Transmit_Arduino_TaskCyclicEvent+0xe8>)
 8002320:	f7ff fcda 	bl	8001cd8 <Rte_Read_Fan_Status>
	engineStatus = ON;
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <Transmit_Arduino_TaskCyclicEvent+0xe4>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
	debounce++;
 800232a:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <Transmit_Arduino_TaskCyclicEvent+0xec>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <Transmit_Arduino_TaskCyclicEvent+0xec>)
 8002334:	701a      	strb	r2, [r3, #0]
	if(debounce == 50)
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <Transmit_Arduino_TaskCyclicEvent+0xec>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b32      	cmp	r3, #50	; 0x32
 800233c:	d134      	bne.n	80023a8 <Transmit_Arduino_TaskCyclicEvent+0xc0>
	{
		debounce=0;
 800233e:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <Transmit_Arduino_TaskCyclicEvent+0xec>)
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]
	sprintf(TX_BUFFER,"%d|%d|%d|%d|%d|%d|%d|%d|%d",speed,temperature,temperature_setpoint,posLights,lowBeam,highBeam,autoMode,engineStatus,fanStatus);
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <Transmit_Arduino_TaskCyclicEvent+0xc8>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	469c      	mov	ip, r3
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <Transmit_Arduino_TaskCyclicEvent+0xcc>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	469e      	mov	lr, r3
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <Transmit_Arduino_TaskCyclicEvent+0xd0>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b19      	ldr	r3, [pc, #100]	; (80023bc <Transmit_Arduino_TaskCyclicEvent+0xd4>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <Transmit_Arduino_TaskCyclicEvent+0xd8>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <Transmit_Arduino_TaskCyclicEvent+0xdc>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	461c      	mov	r4, r3
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <Transmit_Arduino_TaskCyclicEvent+0xe0>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461d      	mov	r5, r3
 800236e:	4b17      	ldr	r3, [pc, #92]	; (80023cc <Transmit_Arduino_TaskCyclicEvent+0xe4>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461e      	mov	r6, r3
 8002374:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <Transmit_Arduino_TaskCyclicEvent+0xe8>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	9306      	str	r3, [sp, #24]
 800237a:	9605      	str	r6, [sp, #20]
 800237c:	9504      	str	r5, [sp, #16]
 800237e:	9403      	str	r4, [sp, #12]
 8002380:	9002      	str	r0, [sp, #8]
 8002382:	9101      	str	r1, [sp, #4]
 8002384:	9200      	str	r2, [sp, #0]
 8002386:	4673      	mov	r3, lr
 8002388:	4662      	mov	r2, ip
 800238a:	4913      	ldr	r1, [pc, #76]	; (80023d8 <Transmit_Arduino_TaskCyclicEvent+0xf0>)
 800238c:	4813      	ldr	r0, [pc, #76]	; (80023dc <Transmit_Arduino_TaskCyclicEvent+0xf4>)
 800238e:	f00f fee1 	bl	8012154 <siprintf>
	HAL_UART_Transmit(&huart9, (uint8_t*)TX_BUFFER, strlen(TX_BUFFER), HAL_MAX_DELAY);}
 8002392:	4812      	ldr	r0, [pc, #72]	; (80023dc <Transmit_Arduino_TaskCyclicEvent+0xf4>)
 8002394:	f7fd ffac 	bl	80002f0 <strlen>
 8002398:	4603      	mov	r3, r0
 800239a:	b29a      	uxth	r2, r3
 800239c:	f04f 33ff 	mov.w	r3, #4294967295
 80023a0:	490e      	ldr	r1, [pc, #56]	; (80023dc <Transmit_Arduino_TaskCyclicEvent+0xf4>)
 80023a2:	480f      	ldr	r0, [pc, #60]	; (80023e0 <Transmit_Arduino_TaskCyclicEvent+0xf8>)
 80023a4:	f00a fc3a 	bl	800cc1c <HAL_UART_Transmit>
}
 80023a8:	bf00      	nop
 80023aa:	3704      	adds	r7, #4
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b0:	24001209 	.word	0x24001209
 80023b4:	2400120a 	.word	0x2400120a
 80023b8:	2400120b 	.word	0x2400120b
 80023bc:	2400120c 	.word	0x2400120c
 80023c0:	2400120d 	.word	0x2400120d
 80023c4:	2400120e 	.word	0x2400120e
 80023c8:	2400120f 	.word	0x2400120f
 80023cc:	24001210 	.word	0x24001210
 80023d0:	24001211 	.word	0x24001211
 80023d4:	2400122d 	.word	0x2400122d
 80023d8:	08015c88 	.word	0x08015c88
 80023dc:	24001214 	.word	0x24001214
 80023e0:	24001408 	.word	0x24001408

080023e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023e8:	f001 f998 	bl	800371c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023ec:	f000 f828 	bl	8002440 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80023f0:	f000 f890 	bl	8002514 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023f4:	f000 fb7e 	bl	8002af4 <MX_GPIO_Init>
  MX_DMA_Init();
 80023f8:	f000 fb4c 	bl	8002a94 <MX_DMA_Init>
  MX_TIM2_Init();
 80023fc:	f000 f9a8 	bl	8002750 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002400:	f000 f8b8 	bl	8002574 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002404:	f000 f93e 	bl	8002684 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8002408:	f000 faac 	bl	8002964 <MX_USART3_UART_Init>
  MX_UART9_Init();
 800240c:	f000 fa5e 	bl	80028cc <MX_UART9_Init>
  MX_USART6_UART_Init();
 8002410:	f000 faf4 	bl	80029fc <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8002414:	f000 fa00 	bl	8002818 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002418:	f00c fcc0 	bl	800ed9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800241c:	4a05      	ldr	r2, [pc, #20]	; (8002434 <main+0x50>)
 800241e:	2100      	movs	r1, #0
 8002420:	4805      	ldr	r0, [pc, #20]	; (8002438 <main+0x54>)
 8002422:	f00c fd05 	bl	800ee30 <osThreadNew>
 8002426:	4603      	mov	r3, r0
 8002428:	4a04      	ldr	r2, [pc, #16]	; (800243c <main+0x58>)
 800242a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800242c:	f00c fcda 	bl	800ede4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002430:	e7fe      	b.n	8002430 <main+0x4c>
 8002432:	bf00      	nop
 8002434:	08015cc8 	.word	0x08015cc8
 8002438:	08002d19 	.word	0x08002d19
 800243c:	240016b4 	.word	0x240016b4

08002440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b09c      	sub	sp, #112	; 0x70
 8002444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244a:	224c      	movs	r2, #76	; 0x4c
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f00f fa34 	bl	80118bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	2220      	movs	r2, #32
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f00f fa2e 	bl	80118bc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <SystemClock_Config+0xcc>)
 8002462:	f04f 32ff 	mov.w	r2, #4294967295
 8002466:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800246a:	2004      	movs	r0, #4
 800246c:	f006 f8c6 	bl	80085fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002470:	2300      	movs	r3, #0
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	4b26      	ldr	r3, [pc, #152]	; (8002510 <SystemClock_Config+0xd0>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a25      	ldr	r2, [pc, #148]	; (8002510 <SystemClock_Config+0xd0>)
 800247a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800247e:	6193      	str	r3, [r2, #24]
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <SystemClock_Config+0xd0>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800248c:	bf00      	nop
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <SystemClock_Config+0xd0>)
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800249a:	d1f8      	bne.n	800248e <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <SystemClock_Config+0xcc>)
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	4a1a      	ldr	r2, [pc, #104]	; (800250c <SystemClock_Config+0xcc>)
 80024a2:	f023 0303 	bic.w	r3, r3, #3
 80024a6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024a8:	2302      	movs	r3, #2
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80024ac:	2301      	movs	r3, #1
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80024b0:	2340      	movs	r3, #64	; 0x40
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024bc:	4618      	mov	r0, r3
 80024be:	f006 f8f7 	bl	80086b0 <HAL_RCC_OscConfig>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80024c8:	f000 fc40 	bl	8002d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024cc:	233f      	movs	r3, #63	; 0x3f
 80024ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV4;
 80024d4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80024d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f006 fd0e 	bl	8008f14 <HAL_RCC_ClockConfig>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80024fe:	f000 fc25 	bl	8002d4c <Error_Handler>
  }
}
 8002502:	bf00      	nop
 8002504:	3770      	adds	r7, #112	; 0x70
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	58024400 	.word	0x58024400
 8002510:	58024800 	.word	0x58024800

08002514 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b0b0      	sub	sp, #192	; 0xc0
 8002518:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800251a:	463b      	mov	r3, r7
 800251c:	22c0      	movs	r2, #192	; 0xc0
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f00f f9cb 	bl	80118bc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002526:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002532:	2304      	movs	r3, #4
 8002534:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 8;
 8002536:	2308      	movs	r3, #8
 8002538:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800253a:	2303      	movs	r3, #3
 800253c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800253e:	2302      	movs	r3, #2
 8002540:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002542:	2302      	movs	r3, #2
 8002544:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002546:	23c0      	movs	r3, #192	; 0xc0
 8002548:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002558:	463b      	mov	r3, r7
 800255a:	4618      	mov	r0, r3
 800255c:	f007 f866 	bl	800962c <HAL_RCCEx_PeriphCLKConfig>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002566:	f000 fbf1 	bl	8002d4c <Error_Handler>
  }
}
 800256a:	bf00      	nop
 800256c:	37c0      	adds	r7, #192	; 0xc0
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800257a:	f107 031c 	add.w	r3, r7, #28
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002586:	463b      	mov	r3, r7
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
 8002594:	615a      	str	r2, [r3, #20]
 8002596:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002598:	4b36      	ldr	r3, [pc, #216]	; (8002674 <MX_ADC1_Init+0x100>)
 800259a:	4a37      	ldr	r2, [pc, #220]	; (8002678 <MX_ADC1_Init+0x104>)
 800259c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800259e:	4b35      	ldr	r3, [pc, #212]	; (8002674 <MX_ADC1_Init+0x100>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025a4:	4b33      	ldr	r3, [pc, #204]	; (8002674 <MX_ADC1_Init+0x100>)
 80025a6:	2208      	movs	r2, #8
 80025a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80025aa:	4b32      	ldr	r3, [pc, #200]	; (8002674 <MX_ADC1_Init+0x100>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025b0:	4b30      	ldr	r3, [pc, #192]	; (8002674 <MX_ADC1_Init+0x100>)
 80025b2:	2204      	movs	r2, #4
 80025b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80025b6:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <MX_ADC1_Init+0x100>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <MX_ADC1_Init+0x100>)
 80025be:	2200      	movs	r2, #0
 80025c0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 80025c2:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <MX_ADC1_Init+0x100>)
 80025c4:	2202      	movs	r2, #2
 80025c6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025c8:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <MX_ADC1_Init+0x100>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025ce:	4b29      	ldr	r3, [pc, #164]	; (8002674 <MX_ADC1_Init+0x100>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <MX_ADC1_Init+0x100>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <MX_ADC1_Init+0x100>)
 80025dc:	2203      	movs	r2, #3
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025e0:	4b24      	ldr	r3, [pc, #144]	; (8002674 <MX_ADC1_Init+0x100>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80025e6:	4b23      	ldr	r3, [pc, #140]	; (8002674 <MX_ADC1_Init+0x100>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80025ec:	4b21      	ldr	r3, [pc, #132]	; (8002674 <MX_ADC1_Init+0x100>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025f4:	481f      	ldr	r0, [pc, #124]	; (8002674 <MX_ADC1_Init+0x100>)
 80025f6:	f001 fb8d 	bl	8003d14 <HAL_ADC_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002600:	f000 fba4 	bl	8002d4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4619      	mov	r1, r3
 800260e:	4819      	ldr	r0, [pc, #100]	; (8002674 <MX_ADC1_Init+0x100>)
 8002610:	f002 fd86 	bl	8005120 <HAL_ADCEx_MultiModeConfigChannel>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800261a:	f000 fb97 	bl	8002d4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800261e:	4b17      	ldr	r3, [pc, #92]	; (800267c <MX_ADC1_Init+0x108>)
 8002620:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002622:	2306      	movs	r3, #6
 8002624:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800262a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800262e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002630:	2304      	movs	r3, #4
 8002632:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800263c:	463b      	mov	r3, r7
 800263e:	4619      	mov	r1, r3
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <MX_ADC1_Init+0x100>)
 8002642:	f001 ff67 	bl	8004514 <HAL_ADC_ConfigChannel>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800264c:	f000 fb7e 	bl	8002d4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <MX_ADC1_Init+0x10c>)
 8002652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002654:	230c      	movs	r3, #12
 8002656:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002658:	463b      	mov	r3, r7
 800265a:	4619      	mov	r1, r3
 800265c:	4805      	ldr	r0, [pc, #20]	; (8002674 <MX_ADC1_Init+0x100>)
 800265e:	f001 ff59 	bl	8004514 <HAL_ADC_ConfigChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002668:	f000 fb70 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800266c:	bf00      	nop
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	24001230 	.word	0x24001230
 8002678:	40022000 	.word	0x40022000
 800267c:	08600004 	.word	0x08600004
 8002680:	2a000400 	.word	0x2a000400

08002684 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
 8002698:	615a      	str	r2, [r3, #20]
 800269a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800269c:	4b29      	ldr	r3, [pc, #164]	; (8002744 <MX_ADC2_Init+0xc0>)
 800269e:	4a2a      	ldr	r2, [pc, #168]	; (8002748 <MX_ADC2_Init+0xc4>)
 80026a0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80026a2:	4b28      	ldr	r3, [pc, #160]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80026a8:	4b26      	ldr	r3, [pc, #152]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026aa:	2208      	movs	r2, #8
 80026ac:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80026ae:	4b25      	ldr	r3, [pc, #148]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026b4:	4b23      	ldr	r3, [pc, #140]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026b6:	2204      	movs	r2, #4
 80026b8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026bc:	2200      	movs	r2, #0
 80026be:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80026c0:	4b20      	ldr	r3, [pc, #128]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80026c6:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026d8:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026da:	2200      	movs	r2, #0
 80026dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80026f8:	4812      	ldr	r0, [pc, #72]	; (8002744 <MX_ADC2_Init+0xc0>)
 80026fa:	f001 fb0b 	bl	8003d14 <HAL_ADC_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8002704:	f000 fb22 	bl	8002d4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002708:	4b10      	ldr	r3, [pc, #64]	; (800274c <MX_ADC2_Init+0xc8>)
 800270a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800270c:	2306      	movs	r3, #6
 800270e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002714:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002718:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800271a:	2304      	movs	r3, #4
 800271c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	4619      	mov	r1, r3
 800272a:	4806      	ldr	r0, [pc, #24]	; (8002744 <MX_ADC2_Init+0xc0>)
 800272c:	f001 fef2 	bl	8004514 <HAL_ADC_ConfigChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8002736:	f000 fb09 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800273a:	bf00      	nop
 800273c:	3720      	adds	r7, #32
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	24001294 	.word	0x24001294
 8002748:	40022100 	.word	0x40022100
 800274c:	19200040 	.word	0x19200040

08002750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002756:	f107 031c 	add.w	r3, r7, #28
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002762:	463b      	mov	r3, r7
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
 8002770:	615a      	str	r2, [r3, #20]
 8002772:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <MX_TIM2_Init+0xc4>)
 8002776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800277a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800277c:	4b25      	ldr	r3, [pc, #148]	; (8002814 <MX_TIM2_Init+0xc4>)
 800277e:	220f      	movs	r2, #15
 8002780:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <MX_TIM2_Init+0xc4>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8002788:	4b22      	ldr	r3, [pc, #136]	; (8002814 <MX_TIM2_Init+0xc4>)
 800278a:	f242 720f 	movw	r2, #9999	; 0x270f
 800278e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <MX_TIM2_Init+0xc4>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002796:	4b1f      	ldr	r3, [pc, #124]	; (8002814 <MX_TIM2_Init+0xc4>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800279c:	481d      	ldr	r0, [pc, #116]	; (8002814 <MX_TIM2_Init+0xc4>)
 800279e:	f009 fb4f 	bl	800be40 <HAL_TIM_PWM_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80027a8:	f000 fad0 	bl	8002d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	4619      	mov	r1, r3
 80027ba:	4816      	ldr	r0, [pc, #88]	; (8002814 <MX_TIM2_Init+0xc4>)
 80027bc:	f00a f950 	bl	800ca60 <HAL_TIMEx_MasterConfigSynchronization>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80027c6:	f000 fac1 	bl	8002d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ca:	2360      	movs	r3, #96	; 0x60
 80027cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027da:	463b      	mov	r3, r7
 80027dc:	2200      	movs	r2, #0
 80027de:	4619      	mov	r1, r3
 80027e0:	480c      	ldr	r0, [pc, #48]	; (8002814 <MX_TIM2_Init+0xc4>)
 80027e2:	f009 fc93 	bl	800c10c <HAL_TIM_PWM_ConfigChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80027ec:	f000 faae 	bl	8002d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027f0:	463b      	mov	r3, r7
 80027f2:	2204      	movs	r2, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	4807      	ldr	r0, [pc, #28]	; (8002814 <MX_TIM2_Init+0xc4>)
 80027f8:	f009 fc88 	bl	800c10c <HAL_TIM_PWM_ConfigChannel>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002802:	f000 faa3 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002806:	4803      	ldr	r0, [pc, #12]	; (8002814 <MX_TIM2_Init+0xc4>)
 8002808:	f000 fbda 	bl	8002fc0 <HAL_TIM_MspPostInit>

}
 800280c:	bf00      	nop
 800280e:	3728      	adds	r7, #40	; 0x28
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	24001370 	.word	0x24001370

08002818 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800282a:	463b      	mov	r3, r7
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
 8002838:	615a      	str	r2, [r3, #20]
 800283a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800283c:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <MX_TIM4_Init+0xac>)
 800283e:	4a22      	ldr	r2, [pc, #136]	; (80028c8 <MX_TIM4_Init+0xb0>)
 8002840:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <MX_TIM4_Init+0xac>)
 8002844:	220f      	movs	r2, #15
 8002846:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002848:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <MX_TIM4_Init+0xac>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1023;
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <MX_TIM4_Init+0xac>)
 8002850:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002854:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002856:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <MX_TIM4_Init+0xac>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <MX_TIM4_Init+0xac>)
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002862:	4818      	ldr	r0, [pc, #96]	; (80028c4 <MX_TIM4_Init+0xac>)
 8002864:	f009 faec 	bl	800be40 <HAL_TIM_PWM_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800286e:	f000 fa6d 	bl	8002d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800287a:	f107 031c 	add.w	r3, r7, #28
 800287e:	4619      	mov	r1, r3
 8002880:	4810      	ldr	r0, [pc, #64]	; (80028c4 <MX_TIM4_Init+0xac>)
 8002882:	f00a f8ed 	bl	800ca60 <HAL_TIMEx_MasterConfigSynchronization>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800288c:	f000 fa5e 	bl	8002d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002890:	2360      	movs	r3, #96	; 0x60
 8002892:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028a0:	463b      	mov	r3, r7
 80028a2:	2200      	movs	r2, #0
 80028a4:	4619      	mov	r1, r3
 80028a6:	4807      	ldr	r0, [pc, #28]	; (80028c4 <MX_TIM4_Init+0xac>)
 80028a8:	f009 fc30 	bl	800c10c <HAL_TIM_PWM_ConfigChannel>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80028b2:	f000 fa4b 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80028b6:	4803      	ldr	r0, [pc, #12]	; (80028c4 <MX_TIM4_Init+0xac>)
 80028b8:	f000 fb82 	bl	8002fc0 <HAL_TIM_MspPostInit>

}
 80028bc:	bf00      	nop
 80028be:	3728      	adds	r7, #40	; 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	240013bc 	.word	0x240013bc
 80028c8:	40000800 	.word	0x40000800

080028cc <MX_UART9_Init>:
  * @brief UART9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART9_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 80028d0:	4b22      	ldr	r3, [pc, #136]	; (800295c <MX_UART9_Init+0x90>)
 80028d2:	4a23      	ldr	r2, [pc, #140]	; (8002960 <MX_UART9_Init+0x94>)
 80028d4:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 9600;
 80028d6:	4b21      	ldr	r3, [pc, #132]	; (800295c <MX_UART9_Init+0x90>)
 80028d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028dc:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 80028de:	4b1f      	ldr	r3, [pc, #124]	; (800295c <MX_UART9_Init+0x90>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 80028e4:	4b1d      	ldr	r3, [pc, #116]	; (800295c <MX_UART9_Init+0x90>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <MX_UART9_Init+0x90>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 80028f0:	4b1a      	ldr	r3, [pc, #104]	; (800295c <MX_UART9_Init+0x90>)
 80028f2:	220c      	movs	r2, #12
 80028f4:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <MX_UART9_Init+0x90>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 80028fc:	4b17      	ldr	r3, [pc, #92]	; (800295c <MX_UART9_Init+0x90>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
  huart9.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002902:	4b16      	ldr	r3, [pc, #88]	; (800295c <MX_UART9_Init+0x90>)
 8002904:	2200      	movs	r2, #0
 8002906:	621a      	str	r2, [r3, #32]
  huart9.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <MX_UART9_Init+0x90>)
 800290a:	2200      	movs	r2, #0
 800290c:	625a      	str	r2, [r3, #36]	; 0x24
  huart9.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <MX_UART9_Init+0x90>)
 8002910:	2200      	movs	r2, #0
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart9) != HAL_OK)
 8002914:	4811      	ldr	r0, [pc, #68]	; (800295c <MX_UART9_Init+0x90>)
 8002916:	f00a f931 	bl	800cb7c <HAL_UART_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_UART9_Init+0x58>
  {
    Error_Handler();
 8002920:	f000 fa14 	bl	8002d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart9, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002924:	2100      	movs	r1, #0
 8002926:	480d      	ldr	r0, [pc, #52]	; (800295c <MX_UART9_Init+0x90>)
 8002928:	f00c f939 	bl	800eb9e <HAL_UARTEx_SetTxFifoThreshold>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_UART9_Init+0x6a>
  {
    Error_Handler();
 8002932:	f000 fa0b 	bl	8002d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart9, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002936:	2100      	movs	r1, #0
 8002938:	4808      	ldr	r0, [pc, #32]	; (800295c <MX_UART9_Init+0x90>)
 800293a:	f00c f96e 	bl	800ec1a <HAL_UARTEx_SetRxFifoThreshold>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_UART9_Init+0x7c>
  {
    Error_Handler();
 8002944:	f000 fa02 	bl	8002d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart9) != HAL_OK)
 8002948:	4804      	ldr	r0, [pc, #16]	; (800295c <MX_UART9_Init+0x90>)
 800294a:	f00c f8ef 	bl	800eb2c <HAL_UARTEx_DisableFifoMode>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_UART9_Init+0x8c>
  {
    Error_Handler();
 8002954:	f000 f9fa 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}
 800295c:	24001408 	.word	0x24001408
 8002960:	40011800 	.word	0x40011800

08002964 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 800296a:	4a23      	ldr	r2, [pc, #140]	; (80029f8 <MX_USART3_UART_Init+0x94>)
 800296c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800296e:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 8002970:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002974:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002976:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800297c:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002982:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8002988:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 800298a:	2204      	movs	r2, #4
 800298c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002994:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 8002996:	2200      	movs	r2, #0
 8002998:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800299a:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 800299c:	2200      	movs	r2, #0
 800299e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029a0:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029ac:	4811      	ldr	r0, [pc, #68]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 80029ae:	f00a f8e5 	bl	800cb7c <HAL_UART_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80029b8:	f000 f9c8 	bl	8002d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029bc:	2100      	movs	r1, #0
 80029be:	480d      	ldr	r0, [pc, #52]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 80029c0:	f00c f8ed 	bl	800eb9e <HAL_UARTEx_SetTxFifoThreshold>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80029ca:	f000 f9bf 	bl	8002d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029ce:	2100      	movs	r1, #0
 80029d0:	4808      	ldr	r0, [pc, #32]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 80029d2:	f00c f922 	bl	800ec1a <HAL_UARTEx_SetRxFifoThreshold>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80029dc:	f000 f9b6 	bl	8002d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80029e0:	4804      	ldr	r0, [pc, #16]	; (80029f4 <MX_USART3_UART_Init+0x90>)
 80029e2:	f00c f8a3 	bl	800eb2c <HAL_UARTEx_DisableFifoMode>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80029ec:	f000 f9ae 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	2400149c 	.word	0x2400149c
 80029f8:	40004800 	.word	0x40004800

080029fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002a00:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a02:	4a23      	ldr	r2, [pc, #140]	; (8002a90 <MX_USART6_UART_Init+0x94>)
 8002a04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002a06:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a0e:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a20:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a22:	220c      	movs	r2, #12
 8002a24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a26:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a2c:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a32:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a3e:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002a44:	4811      	ldr	r0, [pc, #68]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a46:	f00a f899 	bl	800cb7c <HAL_UART_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002a50:	f000 f97c 	bl	8002d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a54:	2100      	movs	r1, #0
 8002a56:	480d      	ldr	r0, [pc, #52]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a58:	f00c f8a1 	bl	800eb9e <HAL_UARTEx_SetTxFifoThreshold>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002a62:	f000 f973 	bl	8002d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a66:	2100      	movs	r1, #0
 8002a68:	4808      	ldr	r0, [pc, #32]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a6a:	f00c f8d6 	bl	800ec1a <HAL_UARTEx_SetRxFifoThreshold>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002a74:	f000 f96a 	bl	8002d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002a78:	4804      	ldr	r0, [pc, #16]	; (8002a8c <MX_USART6_UART_Init+0x90>)
 8002a7a:	f00c f857 	bl	800eb2c <HAL_UARTEx_DisableFifoMode>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002a84:	f000 f962 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	24001530 	.word	0x24001530
 8002a90:	40011400 	.word	0x40011400

08002a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <MX_DMA_Init+0x5c>)
 8002a9c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002aa0:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <MX_DMA_Init+0x5c>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <MX_DMA_Init+0x5c>)
 8002aac:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2105      	movs	r1, #5
 8002abc:	200b      	movs	r0, #11
 8002abe:	f002 fca6 	bl	800540e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002ac2:	200b      	movs	r0, #11
 8002ac4:	f002 fcbd 	bl	8005442 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2105      	movs	r1, #5
 8002acc:	200c      	movs	r0, #12
 8002ace:	f002 fc9e 	bl	800540e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002ad2:	200c      	movs	r0, #12
 8002ad4:	f002 fcb5 	bl	8005442 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2105      	movs	r1, #5
 8002adc:	200d      	movs	r0, #13
 8002ade:	f002 fc96 	bl	800540e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002ae2:	200d      	movs	r0, #13
 8002ae4:	f002 fcad 	bl	8005442 <HAL_NVIC_EnableIRQ>

}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	58024400 	.word	0x58024400

08002af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08e      	sub	sp, #56	; 0x38
 8002af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b0a:	4b7d      	ldr	r3, [pc, #500]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002b10:	4a7b      	ldr	r2, [pc, #492]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b12:	f043 0310 	orr.w	r3, r3, #16
 8002b16:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002b1a:	4b79      	ldr	r3, [pc, #484]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	623b      	str	r3, [r7, #32]
 8002b26:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b28:	4b75      	ldr	r3, [pc, #468]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002b2e:	4a74      	ldr	r2, [pc, #464]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002b38:	4b71      	ldr	r3, [pc, #452]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b46:	4b6e      	ldr	r3, [pc, #440]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002b4c:	4a6c      	ldr	r2, [pc, #432]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002b56:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b64:	4b66      	ldr	r3, [pc, #408]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002b6a:	4a65      	ldr	r2, [pc, #404]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002b74:	4b62      	ldr	r3, [pc, #392]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b82:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002b88:	4a5d      	ldr	r2, [pc, #372]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b8a:	f043 0320 	orr.w	r3, r3, #32
 8002b8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002b92:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002b94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba0:	4b57      	ldr	r3, [pc, #348]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002ba2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ba6:	4a56      	ldr	r2, [pc, #344]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002bb0:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002bb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bbe:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002bc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002bc4:	4a4e      	ldr	r2, [pc, #312]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002bc6:	f043 0308 	orr.w	r3, r3, #8
 8002bca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002bce:	4b4c      	ldr	r3, [pc, #304]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002bd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bdc:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002bde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002be2:	4a47      	ldr	r2, [pc, #284]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002bec:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <MX_GPIO_Init+0x20c>)
 8002bee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, In4_Pin|Lights_LowBeam_Top_Right_Pin|Lights_Pos_Left_Pin|Lights_LowBeam_Top_Left_Pin
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f646 1104 	movw	r1, #26884	; 0x6904
 8002c00:	4840      	ldr	r0, [pc, #256]	; (8002d04 <MX_GPIO_Init+0x210>)
 8002c02:	f005 fce1 	bl	80085c8 <HAL_GPIO_WritePin>
                          |Lights_LowBeam_Bottom_Left_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Lights_HighBeam_Pin|Lights_Pos_Right_Pin|Lights_LowBeam_Bottom_Right_Pin|Green_Pin
 8002c06:	2200      	movs	r2, #0
 8002c08:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8002c0c:	483e      	ldr	r0, [pc, #248]	; (8002d08 <MX_GPIO_Init+0x214>)
 8002c0e:	f005 fcdb 	bl	80085c8 <HAL_GPIO_WritePin>
                          |Blue_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, In3_Pin|Fan_Relay_Pin, GPIO_PIN_RESET);
 8002c12:	2200      	movs	r2, #0
 8002c14:	f640 0102 	movw	r1, #2050	; 0x802
 8002c18:	483c      	ldr	r0, [pc, #240]	; (8002d0c <MX_GPIO_Init+0x218>)
 8002c1a:	f005 fcd5 	bl	80085c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : In4_Pin Lights_LowBeam_Top_Right_Pin Lights_Pos_Left_Pin Lights_LowBeam_Top_Left_Pin
                           Lights_LowBeam_Bottom_Left_Pin */
  GPIO_InitStruct.Pin = In4_Pin|Lights_LowBeam_Top_Right_Pin|Lights_Pos_Left_Pin|Lights_LowBeam_Top_Left_Pin
 8002c1e:	f646 1304 	movw	r3, #26884	; 0x6904
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
                          |Lights_LowBeam_Bottom_Left_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c24:	2301      	movs	r3, #1
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c34:	4619      	mov	r1, r3
 8002c36:	4833      	ldr	r0, [pc, #204]	; (8002d04 <MX_GPIO_Init+0x210>)
 8002c38:	f005 fafe 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lights_HighBeam_Pin Lights_Pos_Right_Pin Lights_LowBeam_Bottom_Right_Pin Green_Pin
                           Blue_Pin */
  GPIO_InitStruct.Pin = Lights_HighBeam_Pin|Lights_Pos_Right_Pin|Lights_LowBeam_Bottom_Right_Pin|Green_Pin
 8002c3c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
                          |Blue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c42:	2301      	movs	r3, #1
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c52:	4619      	mov	r1, r3
 8002c54:	482c      	ldr	r0, [pc, #176]	; (8002d08 <MX_GPIO_Init+0x214>)
 8002c56:	f005 faef 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Doors_Pin */
  GPIO_InitStruct.Pin = Button_Doors_Pin;
 8002c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c64:	2302      	movs	r3, #2
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_Doors_GPIO_Port, &GPIO_InitStruct);
 8002c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4826      	ldr	r0, [pc, #152]	; (8002d08 <MX_GPIO_Init+0x214>)
 8002c70:	f005 fae2 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : In3_Pin Fan_Relay_Pin */
  GPIO_InitStruct.Pin = In3_Pin|Fan_Relay_Pin;
 8002c74:	f640 0302 	movw	r3, #2050	; 0x802
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	2300      	movs	r3, #0
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	481f      	ldr	r0, [pc, #124]	; (8002d0c <MX_GPIO_Init+0x218>)
 8002c8e:	f005 fad3 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Start_Pin */
  GPIO_InitStruct.Pin = Button_Start_Pin;
 8002c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_Start_GPIO_Port, &GPIO_InitStruct);
 8002ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	481a      	ldr	r0, [pc, #104]	; (8002d10 <MX_GPIO_Init+0x21c>)
 8002ca8:	f005 fac6 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_AUTO_Pin Switch_HIGHBEAM_Pin Switch_LOWBEAM_Pin Switch_POS_Pin
                           Switch_OFF_Pin */
  GPIO_InitStruct.Pin = Switch_AUTO_Pin|Switch_HIGHBEAM_Pin|Switch_LOWBEAM_Pin|Switch_POS_Pin
 8002cac:	23f8      	movs	r3, #248	; 0xf8
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
                          |Switch_OFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4813      	ldr	r0, [pc, #76]	; (8002d0c <MX_GPIO_Init+0x218>)
 8002cc0:	f005 faba 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pin : Touch_Sensor_Pin */
  GPIO_InitStruct.Pin = Touch_Sensor_Pin;
 8002cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Touch_Sensor_GPIO_Port, &GPIO_InitStruct);
 8002cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	480e      	ldr	r0, [pc, #56]	; (8002d14 <MX_GPIO_Init+0x220>)
 8002cda:	f005 faad 	bl	8008238 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Fan_Pin */
  GPIO_InitStruct.Pin = Button_Fan_Pin;
 8002cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_Fan_GPIO_Port, &GPIO_InitStruct);
 8002cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4808      	ldr	r0, [pc, #32]	; (8002d14 <MX_GPIO_Init+0x220>)
 8002cf4:	f005 faa0 	bl	8008238 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cf8:	bf00      	nop
 8002cfa:	3738      	adds	r7, #56	; 0x38
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	58024400 	.word	0x58024400
 8002d04:	58021000 	.word	0x58021000
 8002d08:	58020400 	.word	0x58020400
 8002d0c:	58020c00 	.word	0x58020c00
 8002d10:	58020800 	.word	0x58020800
 8002d14:	58021800 	.word	0x58021800

08002d18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  static uint8_t isInitDone = 0u;

	  for(;;)
	    {
		  	if(0u == isInitDone)
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <StartDefaultTask+0x30>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d104      	bne.n	8002d32 <StartDefaultTask+0x1a>
		  	{
		  		isInitDone = 1u;
 8002d28:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <StartDefaultTask+0x30>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
		  		Start_Init();
 8002d2e:	f7ff faaf 	bl	8002290 <Start_Init>
		  	}

		  	if(isInitDone == 1u)
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <StartDefaultTask+0x30>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <StartDefaultTask+0x26>
		  	{

	  	  	Start_TaskCyclicEvent();
 8002d3a:	f7ff fabb 	bl	80022b4 <Start_TaskCyclicEvent>

		  	}
	  		osDelay(100);
 8002d3e:	2064      	movs	r0, #100	; 0x64
 8002d40:	f00c f908 	bl	800ef54 <osDelay>
		  	if(0u == isInitDone)
 8002d44:	e7ec      	b.n	8002d20 <StartDefaultTask+0x8>
 8002d46:	bf00      	nop
 8002d48:	240016b8 	.word	0x240016b8

08002d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d50:	b672      	cpsid	i
}
 8002d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <Error_Handler+0x8>
	...

08002d58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <HAL_MspInit+0x38>)
 8002d60:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002d64:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <HAL_MspInit+0x38>)
 8002d66:	f043 0302 	orr.w	r3, r3, #2
 8002d6a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <HAL_MspInit+0x38>)
 8002d70:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	210f      	movs	r1, #15
 8002d80:	f06f 0001 	mvn.w	r0, #1
 8002d84:	f002 fb43 	bl	800540e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	58024400 	.word	0x58024400

08002d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08c      	sub	sp, #48	; 0x30
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 031c 	add.w	r3, r7, #28
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a5f      	ldr	r2, [pc, #380]	; (8002f30 <HAL_ADC_MspInit+0x19c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d17f      	bne.n	8002eb6 <HAL_ADC_MspInit+0x122>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002db6:	4b5f      	ldr	r3, [pc, #380]	; (8002f34 <HAL_ADC_MspInit+0x1a0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4a5d      	ldr	r2, [pc, #372]	; (8002f34 <HAL_ADC_MspInit+0x1a0>)
 8002dbe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002dc0:	4b5c      	ldr	r3, [pc, #368]	; (8002f34 <HAL_ADC_MspInit+0x1a0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d10e      	bne.n	8002de6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002dc8:	4b5b      	ldr	r3, [pc, #364]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002dca:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002dce:	4a5a      	ldr	r2, [pc, #360]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002dd0:	f043 0320 	orr.w	r3, r3, #32
 8002dd4:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8002dd8:	4b57      	ldr	r3, [pc, #348]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002dda:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de6:	4b54      	ldr	r3, [pc, #336]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002de8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002dec:	4a52      	ldr	r2, [pc, #328]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002df6:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002df8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e04:	4b4c      	ldr	r3, [pc, #304]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002e06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e0a:	4a4b      	ldr	r2, [pc, #300]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002e0c:	f043 0320 	orr.w	r3, r3, #32
 8002e10:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002e14:	4b48      	ldr	r3, [pc, #288]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002e16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e22:	2301      	movs	r3, #1
 8002e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e26:	2303      	movs	r3, #3
 8002e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e2e:	f107 031c 	add.w	r3, r7, #28
 8002e32:	4619      	mov	r1, r3
 8002e34:	4841      	ldr	r0, [pc, #260]	; (8002f3c <HAL_ADC_MspInit+0x1a8>)
 8002e36:	f005 f9ff 	bl	8008238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e40:	2303      	movs	r3, #3
 8002e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e48:	f107 031c 	add.w	r3, r7, #28
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	483c      	ldr	r0, [pc, #240]	; (8002f40 <HAL_ADC_MspInit+0x1ac>)
 8002e50:	f005 f9f2 	bl	8008238 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8002e54:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_ADC_MspInit+0x1b0>)
 8002e56:	4a3c      	ldr	r2, [pc, #240]	; (8002f48 <HAL_ADC_MspInit+0x1b4>)
 8002e58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002e5a:	4b3a      	ldr	r3, [pc, #232]	; (8002f44 <HAL_ADC_MspInit+0x1b0>)
 8002e5c:	2209      	movs	r2, #9
 8002e5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e60:	4b38      	ldr	r3, [pc, #224]	; (8002f44 <HAL_ADC_MspInit+0x1b0>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e66:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <HAL_ADC_MspInit+0x1b0>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e6c:	4b35      	ldr	r3, [pc, #212]	; (8002f44 <HAL_ADC_MspInit+0x1b0>)
 8002e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e72:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e74:	4b33      	ldr	r3, [pc, #204]	; (8002f44 <HAL_ADC_MspInit+0x1b0>)
 8002e76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e7a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e7c:	4b31      	ldr	r3, [pc, #196]	; (8002f44 <HAL_ADC_MspInit+0x1b0>)
 8002e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e84:	4b2f      	ldr	r3, [pc, #188]	; (8002f44 <HAL_ADC_MspInit+0x1b0>)
 8002e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e8a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e8c:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <HAL_ADC_MspInit+0x1b0>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e92:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <HAL_ADC_MspInit+0x1b0>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e98:	482a      	ldr	r0, [pc, #168]	; (8002f44 <HAL_ADC_MspInit+0x1b0>)
 8002e9a:	f002 faed 	bl	8005478 <HAL_DMA_Init>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8002ea4:	f7ff ff52 	bl	8002d4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a26      	ldr	r2, [pc, #152]	; (8002f44 <HAL_ADC_MspInit+0x1b0>)
 8002eac:	64da      	str	r2, [r3, #76]	; 0x4c
 8002eae:	4a25      	ldr	r2, [pc, #148]	; (8002f44 <HAL_ADC_MspInit+0x1b0>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002eb4:	e038      	b.n	8002f28 <HAL_ADC_MspInit+0x194>
  else if(hadc->Instance==ADC2)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a24      	ldr	r2, [pc, #144]	; (8002f4c <HAL_ADC_MspInit+0x1b8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d133      	bne.n	8002f28 <HAL_ADC_MspInit+0x194>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002ec0:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_ADC_MspInit+0x1a0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	4a1b      	ldr	r2, [pc, #108]	; (8002f34 <HAL_ADC_MspInit+0x1a0>)
 8002ec8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_ADC_MspInit+0x1a0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_ADC_MspInit+0x15c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002ed2:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002ed4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002ed8:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002eda:	f043 0320 	orr.w	r3, r3, #32
 8002ede:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002ee4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002ef2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ef6:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002ef8:	f043 0320 	orr.w	r3, r3, #32
 8002efc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002f00:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_ADC_MspInit+0x1a4>)
 8002f02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002f0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f14:	2303      	movs	r3, #3
 8002f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f1c:	f107 031c 	add.w	r3, r7, #28
 8002f20:	4619      	mov	r1, r3
 8002f22:	4807      	ldr	r0, [pc, #28]	; (8002f40 <HAL_ADC_MspInit+0x1ac>)
 8002f24:	f005 f988 	bl	8008238 <HAL_GPIO_Init>
}
 8002f28:	bf00      	nop
 8002f2a:	3730      	adds	r7, #48	; 0x30
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40022000 	.word	0x40022000
 8002f34:	240016bc 	.word	0x240016bc
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	58020800 	.word	0x58020800
 8002f40:	58021400 	.word	0x58021400
 8002f44:	240012f8 	.word	0x240012f8
 8002f48:	40020028 	.word	0x40020028
 8002f4c:	40022100 	.word	0x40022100

08002f50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f60:	d10f      	bne.n	8002f82 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_TIM_PWM_MspInit+0x68>)
 8002f64:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002f68:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <HAL_TIM_PWM_MspInit+0x68>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002f72:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_TIM_PWM_MspInit+0x68>)
 8002f74:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f80:	e013      	b.n	8002faa <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM4)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a0d      	ldr	r2, [pc, #52]	; (8002fbc <HAL_TIM_PWM_MspInit+0x6c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d10e      	bne.n	8002faa <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_TIM_PWM_MspInit+0x68>)
 8002f8e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002f92:	4a09      	ldr	r2, [pc, #36]	; (8002fb8 <HAL_TIM_PWM_MspInit+0x68>)
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_TIM_PWM_MspInit+0x68>)
 8002f9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	58024400 	.word	0x58024400
 8002fbc:	40000800 	.word	0x40000800

08002fc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe0:	d13e      	bne.n	8003060 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <HAL_TIM_MspPostInit+0xf4>)
 8002fe4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002fe8:	4a32      	ldr	r2, [pc, #200]	; (80030b4 <HAL_TIM_MspPostInit+0xf4>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002ff2:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_TIM_MspPostInit+0xf4>)
 8002ff4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003000:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <HAL_TIM_MspPostInit+0xf4>)
 8003002:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003006:	4a2b      	ldr	r2, [pc, #172]	; (80030b4 <HAL_TIM_MspPostInit+0xf4>)
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003010:	4b28      	ldr	r3, [pc, #160]	; (80030b4 <HAL_TIM_MspPostInit+0xf4>)
 8003012:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800301e:	2301      	movs	r3, #1
 8003020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800302e:	2301      	movs	r3, #1
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003032:	f107 0314 	add.w	r3, r7, #20
 8003036:	4619      	mov	r1, r3
 8003038:	481f      	ldr	r0, [pc, #124]	; (80030b8 <HAL_TIM_MspPostInit+0xf8>)
 800303a:	f005 f8fd 	bl	8008238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800303e:	2308      	movs	r3, #8
 8003040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003042:	2302      	movs	r3, #2
 8003044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304a:	2300      	movs	r3, #0
 800304c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800304e:	2301      	movs	r3, #1
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	4619      	mov	r1, r3
 8003058:	4818      	ldr	r0, [pc, #96]	; (80030bc <HAL_TIM_MspPostInit+0xfc>)
 800305a:	f005 f8ed 	bl	8008238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800305e:	e024      	b.n	80030aa <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM4)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <HAL_TIM_MspPostInit+0x100>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d11f      	bne.n	80030aa <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <HAL_TIM_MspPostInit+0xf4>)
 800306c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003070:	4a10      	ldr	r2, [pc, #64]	; (80030b4 <HAL_TIM_MspPostInit+0xf4>)
 8003072:	f043 0308 	orr.w	r3, r3, #8
 8003076:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_TIM_MspPostInit+0xf4>)
 800307c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800308c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800309a:	2302      	movs	r3, #2
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	4619      	mov	r1, r3
 80030a4:	4807      	ldr	r0, [pc, #28]	; (80030c4 <HAL_TIM_MspPostInit+0x104>)
 80030a6:	f005 f8c7 	bl	8008238 <HAL_GPIO_Init>
}
 80030aa:	bf00      	nop
 80030ac:	3728      	adds	r7, #40	; 0x28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	58024400 	.word	0x58024400
 80030b8:	58020000 	.word	0x58020000
 80030bc:	58020400 	.word	0x58020400
 80030c0:	40000800 	.word	0x40000800
 80030c4:	58020c00 	.word	0x58020c00

080030c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b0be      	sub	sp, #248	; 0xf8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030e0:	f107 0320 	add.w	r3, r7, #32
 80030e4:	22c0      	movs	r2, #192	; 0xc0
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f00e fbe7 	bl	80118bc <memset>
  if(huart->Instance==UART9)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4aa6      	ldr	r2, [pc, #664]	; (800338c <HAL_UART_MspInit+0x2c4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d147      	bne.n	8003188 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART9_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
 80030f8:	f04f 0201 	mov.w	r2, #1
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800310a:	f107 0320 	add.w	r3, r7, #32
 800310e:	4618      	mov	r0, r3
 8003110:	f006 fa8c 	bl	800962c <HAL_RCCEx_PeriphCLKConfig>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800311a:	f7ff fe17 	bl	8002d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART9_CLK_ENABLE();
 800311e:	4b9c      	ldr	r3, [pc, #624]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 8003120:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003124:	4a9a      	ldr	r2, [pc, #616]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 8003126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800312a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800312e:	4b98      	ldr	r3, [pc, #608]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 8003130:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800313c:	4b94      	ldr	r3, [pc, #592]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 800313e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003142:	4a93      	ldr	r2, [pc, #588]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 8003144:	f043 0308 	orr.w	r3, r3, #8
 8003148:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800314c:	4b90      	ldr	r3, [pc, #576]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 800314e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	69bb      	ldr	r3, [r7, #24]
    /**UART9 GPIO Configuration
    PD14     ------> UART9_RX
    PD15     ------> UART9_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800315a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800315e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003162:	2302      	movs	r3, #2
 8003164:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316e:	2300      	movs	r3, #0
 8003170:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 8003174:	230b      	movs	r3, #11
 8003176:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800317a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800317e:	4619      	mov	r1, r3
 8003180:	4884      	ldr	r0, [pc, #528]	; (8003394 <HAL_UART_MspInit+0x2cc>)
 8003182:	f005 f859 	bl	8008238 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003186:	e0fc      	b.n	8003382 <HAL_UART_MspInit+0x2ba>
  else if(huart->Instance==USART3)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a82      	ldr	r2, [pc, #520]	; (8003398 <HAL_UART_MspInit+0x2d0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d17d      	bne.n	800328e <HAL_UART_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003192:	f04f 0202 	mov.w	r2, #2
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031a4:	f107 0320 	add.w	r3, r7, #32
 80031a8:	4618      	mov	r0, r3
 80031aa:	f006 fa3f 	bl	800962c <HAL_RCCEx_PeriphCLKConfig>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80031b4:	f7ff fdca 	bl	8002d4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031b8:	4b75      	ldr	r3, [pc, #468]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 80031ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80031be:	4a74      	ldr	r2, [pc, #464]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 80031c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80031c8:	4b71      	ldr	r3, [pc, #452]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 80031ca:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80031ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031d6:	4b6e      	ldr	r3, [pc, #440]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 80031d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031dc:	4a6c      	ldr	r2, [pc, #432]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 80031de:	f043 0304 	orr.w	r3, r3, #4
 80031e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80031e6:	4b6a      	ldr	r3, [pc, #424]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 80031e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fc:	2302      	movs	r3, #2
 80031fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	2300      	movs	r3, #0
 800320a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800320e:	2307      	movs	r3, #7
 8003210:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003214:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003218:	4619      	mov	r1, r3
 800321a:	4860      	ldr	r0, [pc, #384]	; (800339c <HAL_UART_MspInit+0x2d4>)
 800321c:	f005 f80c 	bl	8008238 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream2;
 8003220:	4b5f      	ldr	r3, [pc, #380]	; (80033a0 <HAL_UART_MspInit+0x2d8>)
 8003222:	4a60      	ldr	r2, [pc, #384]	; (80033a4 <HAL_UART_MspInit+0x2dc>)
 8003224:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003226:	4b5e      	ldr	r3, [pc, #376]	; (80033a0 <HAL_UART_MspInit+0x2d8>)
 8003228:	222d      	movs	r2, #45	; 0x2d
 800322a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800322c:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <HAL_UART_MspInit+0x2d8>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003232:	4b5b      	ldr	r3, [pc, #364]	; (80033a0 <HAL_UART_MspInit+0x2d8>)
 8003234:	2200      	movs	r2, #0
 8003236:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003238:	4b59      	ldr	r3, [pc, #356]	; (80033a0 <HAL_UART_MspInit+0x2d8>)
 800323a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800323e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003240:	4b57      	ldr	r3, [pc, #348]	; (80033a0 <HAL_UART_MspInit+0x2d8>)
 8003242:	2200      	movs	r2, #0
 8003244:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003246:	4b56      	ldr	r3, [pc, #344]	; (80033a0 <HAL_UART_MspInit+0x2d8>)
 8003248:	2200      	movs	r2, #0
 800324a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800324c:	4b54      	ldr	r3, [pc, #336]	; (80033a0 <HAL_UART_MspInit+0x2d8>)
 800324e:	2200      	movs	r2, #0
 8003250:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003252:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <HAL_UART_MspInit+0x2d8>)
 8003254:	2200      	movs	r2, #0
 8003256:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003258:	4b51      	ldr	r3, [pc, #324]	; (80033a0 <HAL_UART_MspInit+0x2d8>)
 800325a:	2200      	movs	r2, #0
 800325c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800325e:	4850      	ldr	r0, [pc, #320]	; (80033a0 <HAL_UART_MspInit+0x2d8>)
 8003260:	f002 f90a 	bl	8005478 <HAL_DMA_Init>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 800326a:	f7ff fd6f 	bl	8002d4c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4b      	ldr	r2, [pc, #300]	; (80033a0 <HAL_UART_MspInit+0x2d8>)
 8003272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003276:	4a4a      	ldr	r2, [pc, #296]	; (80033a0 <HAL_UART_MspInit+0x2d8>)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800327c:	2200      	movs	r2, #0
 800327e:	2105      	movs	r1, #5
 8003280:	2027      	movs	r0, #39	; 0x27
 8003282:	f002 f8c4 	bl	800540e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003286:	2027      	movs	r0, #39	; 0x27
 8003288:	f002 f8db 	bl	8005442 <HAL_NVIC_EnableIRQ>
}
 800328c:	e079      	b.n	8003382 <HAL_UART_MspInit+0x2ba>
  else if(huart->Instance==USART6)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a45      	ldr	r2, [pc, #276]	; (80033a8 <HAL_UART_MspInit+0x2e0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d174      	bne.n	8003382 <HAL_UART_MspInit+0x2ba>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003298:	f04f 0201 	mov.w	r2, #1
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032aa:	f107 0320 	add.w	r3, r7, #32
 80032ae:	4618      	mov	r0, r3
 80032b0:	f006 f9bc 	bl	800962c <HAL_RCCEx_PeriphCLKConfig>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 80032ba:	f7ff fd47 	bl	8002d4c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80032be:	4b34      	ldr	r3, [pc, #208]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 80032c0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80032c4:	4a32      	ldr	r2, [pc, #200]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 80032c6:	f043 0320 	orr.w	r3, r3, #32
 80032ca:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 80032d0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032dc:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 80032de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032e2:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80032ec:	4b28      	ldr	r3, [pc, #160]	; (8003390 <HAL_UART_MspInit+0x2c8>)
 80032ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032fa:	23c0      	movs	r3, #192	; 0xc0
 80032fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003300:	2302      	movs	r3, #2
 8003302:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330c:	2300      	movs	r3, #0
 800330e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003312:	2307      	movs	r3, #7
 8003314:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003318:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800331c:	4619      	mov	r1, r3
 800331e:	481f      	ldr	r0, [pc, #124]	; (800339c <HAL_UART_MspInit+0x2d4>)
 8003320:	f004 ff8a 	bl	8008238 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA1_Stream0;
 8003324:	4b21      	ldr	r3, [pc, #132]	; (80033ac <HAL_UART_MspInit+0x2e4>)
 8003326:	4a22      	ldr	r2, [pc, #136]	; (80033b0 <HAL_UART_MspInit+0x2e8>)
 8003328:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 800332a:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_UART_MspInit+0x2e4>)
 800332c:	2247      	movs	r2, #71	; 0x47
 800332e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003330:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <HAL_UART_MspInit+0x2e4>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003336:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <HAL_UART_MspInit+0x2e4>)
 8003338:	2200      	movs	r2, #0
 800333a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800333c:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <HAL_UART_MspInit+0x2e4>)
 800333e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003342:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003344:	4b19      	ldr	r3, [pc, #100]	; (80033ac <HAL_UART_MspInit+0x2e4>)
 8003346:	2200      	movs	r2, #0
 8003348:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800334a:	4b18      	ldr	r3, [pc, #96]	; (80033ac <HAL_UART_MspInit+0x2e4>)
 800334c:	2200      	movs	r2, #0
 800334e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003350:	4b16      	ldr	r3, [pc, #88]	; (80033ac <HAL_UART_MspInit+0x2e4>)
 8003352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003356:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003358:	4b14      	ldr	r3, [pc, #80]	; (80033ac <HAL_UART_MspInit+0x2e4>)
 800335a:	2200      	movs	r2, #0
 800335c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <HAL_UART_MspInit+0x2e4>)
 8003360:	2200      	movs	r2, #0
 8003362:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003364:	4811      	ldr	r0, [pc, #68]	; (80033ac <HAL_UART_MspInit+0x2e4>)
 8003366:	f002 f887 	bl	8005478 <HAL_DMA_Init>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 8003370:	f7ff fcec 	bl	8002d4c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a0d      	ldr	r2, [pc, #52]	; (80033ac <HAL_UART_MspInit+0x2e4>)
 8003378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800337c:	4a0b      	ldr	r2, [pc, #44]	; (80033ac <HAL_UART_MspInit+0x2e4>)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003382:	bf00      	nop
 8003384:	37f8      	adds	r7, #248	; 0xf8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40011800 	.word	0x40011800
 8003390:	58024400 	.word	0x58024400
 8003394:	58020c00 	.word	0x58020c00
 8003398:	40004800 	.word	0x40004800
 800339c:	58020800 	.word	0x58020800
 80033a0:	240015c4 	.word	0x240015c4
 80033a4:	40020040 	.word	0x40020040
 80033a8:	40011400 	.word	0x40011400
 80033ac:	2400163c 	.word	0x2400163c
 80033b0:	40020010 	.word	0x40020010

080033b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033b8:	e7fe      	b.n	80033b8 <NMI_Handler+0x4>

080033ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ba:	b480      	push	{r7}
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033be:	e7fe      	b.n	80033be <HardFault_Handler+0x4>

080033c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033c4:	e7fe      	b.n	80033c4 <MemManage_Handler+0x4>

080033c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ca:	e7fe      	b.n	80033ca <BusFault_Handler+0x4>

080033cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033d0:	e7fe      	b.n	80033d0 <UsageFault_Handler+0x4>

080033d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033d2:	b480      	push	{r7}
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e4:	f000 fa0c 	bl	8003800 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80033e8:	f00d f9c2 	bl	8010770 <xTaskGetSchedulerState>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d001      	beq.n	80033f6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80033f2:	f00d ffa9 	bl	8011348 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <DMA1_Stream0_IRQHandler+0x10>)
 8003402:	f003 fb97 	bl	8006b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	2400163c 	.word	0x2400163c

08003410 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003414:	4802      	ldr	r0, [pc, #8]	; (8003420 <DMA1_Stream1_IRQHandler+0x10>)
 8003416:	f003 fb8d 	bl	8006b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	240012f8 	.word	0x240012f8

08003424 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003428:	4802      	ldr	r0, [pc, #8]	; (8003434 <DMA1_Stream2_IRQHandler+0x10>)
 800342a:	f003 fb83 	bl	8006b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	240015c4 	.word	0x240015c4

08003438 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <USART3_IRQHandler+0x10>)
 800343e:	f009 fcc7 	bl	800cdd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	2400149c 	.word	0x2400149c

0800344c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return 1;
 8003450:	2301      	movs	r3, #1
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <_kill>:

int _kill(int pid, int sig)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003466:	f00e f9f1 	bl	801184c <__errno>
 800346a:	4603      	mov	r3, r0
 800346c:	2216      	movs	r2, #22
 800346e:	601a      	str	r2, [r3, #0]
  return -1;
 8003470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <_exit>:

void _exit (int status)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003484:	f04f 31ff 	mov.w	r1, #4294967295
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ffe7 	bl	800345c <_kill>
  while (1) {}    /* Make sure we hang here */
 800348e:	e7fe      	b.n	800348e <_exit+0x12>

08003490 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e00a      	b.n	80034b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034a2:	f3af 8000 	nop.w
 80034a6:	4601      	mov	r1, r0
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	60ba      	str	r2, [r7, #8]
 80034ae:	b2ca      	uxtb	r2, r1
 80034b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3301      	adds	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	dbf0      	blt.n	80034a2 <_read+0x12>
  }

  return len;
 80034c0:	687b      	ldr	r3, [r7, #4]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e009      	b.n	80034f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	60ba      	str	r2, [r7, #8]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	3301      	adds	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	dbf1      	blt.n	80034dc <_write+0x12>
  }
  return len;
 80034f8:	687b      	ldr	r3, [r7, #4]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <_close>:

int _close(int file)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800350a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800352a:	605a      	str	r2, [r3, #4]
  return 0;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <_isatty>:

int _isatty(int file)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003542:	2301      	movs	r3, #1
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <_sbrk+0x5c>)
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <_sbrk+0x60>)
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003580:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <_sbrk+0x64>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <_sbrk+0x64>)
 800358a:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <_sbrk+0x68>)
 800358c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800358e:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <_sbrk+0x64>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	429a      	cmp	r2, r3
 800359a:	d207      	bcs.n	80035ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800359c:	f00e f956 	bl	801184c <__errno>
 80035a0:	4603      	mov	r3, r0
 80035a2:	220c      	movs	r2, #12
 80035a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	e009      	b.n	80035c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035ac:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <_sbrk+0x64>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <_sbrk+0x64>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <_sbrk+0x64>)
 80035bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035be:	68fb      	ldr	r3, [r7, #12]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	24100000 	.word	0x24100000
 80035cc:	00000400 	.word	0x00000400
 80035d0:	240016c0 	.word	0x240016c0
 80035d4:	24006028 	.word	0x24006028

080035d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80035dc:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <SystemInit+0xd0>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	4a31      	ldr	r2, [pc, #196]	; (80036a8 <SystemInit+0xd0>)
 80035e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035ec:	4b2f      	ldr	r3, [pc, #188]	; (80036ac <SystemInit+0xd4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d807      	bhi.n	8003608 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035f8:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <SystemInit+0xd4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 030f 	bic.w	r3, r3, #15
 8003600:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <SystemInit+0xd4>)
 8003602:	f043 0303 	orr.w	r3, r3, #3
 8003606:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003608:	4b29      	ldr	r3, [pc, #164]	; (80036b0 <SystemInit+0xd8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <SystemInit+0xd8>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003614:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <SystemInit+0xd8>)
 8003616:	2200      	movs	r2, #0
 8003618:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800361a:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <SystemInit+0xd8>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4924      	ldr	r1, [pc, #144]	; (80036b0 <SystemInit+0xd8>)
 8003620:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <SystemInit+0xdc>)
 8003622:	4013      	ands	r3, r2
 8003624:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003626:	4b21      	ldr	r3, [pc, #132]	; (80036ac <SystemInit+0xd4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b00      	cmp	r3, #0
 8003630:	d007      	beq.n	8003642 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003632:	4b1e      	ldr	r3, [pc, #120]	; (80036ac <SystemInit+0xd4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 030f 	bic.w	r3, r3, #15
 800363a:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <SystemInit+0xd4>)
 800363c:	f043 0303 	orr.w	r3, r3, #3
 8003640:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003642:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <SystemInit+0xd8>)
 8003644:	2200      	movs	r2, #0
 8003646:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003648:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <SystemInit+0xd8>)
 800364a:	2200      	movs	r2, #0
 800364c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800364e:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <SystemInit+0xd8>)
 8003650:	2200      	movs	r2, #0
 8003652:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003654:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <SystemInit+0xd8>)
 8003656:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <SystemInit+0xe0>)
 8003658:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <SystemInit+0xd8>)
 800365c:	4a17      	ldr	r2, [pc, #92]	; (80036bc <SystemInit+0xe4>)
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003660:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <SystemInit+0xd8>)
 8003662:	4a17      	ldr	r2, [pc, #92]	; (80036c0 <SystemInit+0xe8>)
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <SystemInit+0xd8>)
 8003668:	2200      	movs	r2, #0
 800366a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800366c:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <SystemInit+0xd8>)
 800366e:	4a14      	ldr	r2, [pc, #80]	; (80036c0 <SystemInit+0xe8>)
 8003670:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003672:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <SystemInit+0xd8>)
 8003674:	2200      	movs	r2, #0
 8003676:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <SystemInit+0xd8>)
 800367a:	4a11      	ldr	r2, [pc, #68]	; (80036c0 <SystemInit+0xe8>)
 800367c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <SystemInit+0xd8>)
 8003680:	2200      	movs	r2, #0
 8003682:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <SystemInit+0xd8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <SystemInit+0xd8>)
 800368a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003690:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <SystemInit+0xd8>)
 8003692:	2200      	movs	r2, #0
 8003694:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <SystemInit+0xec>)
 8003698:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800369c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800369e:	bf00      	nop
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00
 80036ac:	52002000 	.word	0x52002000
 80036b0:	58024400 	.word	0x58024400
 80036b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80036b8:	02020200 	.word	0x02020200
 80036bc:	01ff0000 	.word	0x01ff0000
 80036c0:	01010280 	.word	0x01010280
 80036c4:	52004000 	.word	0x52004000

080036c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003700 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80036cc:	f7ff ff84 	bl	80035d8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036d0:	480c      	ldr	r0, [pc, #48]	; (8003704 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036d2:	490d      	ldr	r1, [pc, #52]	; (8003708 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036d4:	4a0d      	ldr	r2, [pc, #52]	; (800370c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036d8:	e002      	b.n	80036e0 <LoopCopyDataInit>

080036da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036de:	3304      	adds	r3, #4

080036e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80036e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036e4:	d3f9      	bcc.n	80036da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036e6:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036e8:	4c0a      	ldr	r4, [pc, #40]	; (8003714 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036ec:	e001      	b.n	80036f2 <LoopFillZerobss>

080036ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036f0:	3204      	adds	r2, #4

080036f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036f4:	d3fb      	bcc.n	80036ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80036f6:	f00e f8af 	bl	8011858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036fa:	f7fe fe73 	bl	80023e4 <main>
  bx  lr
 80036fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003700:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003704:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003708:	2400097c 	.word	0x2400097c
  ldr r2, =_sidata
 800370c:	080161dc 	.word	0x080161dc
  ldr r2, =_sbss
 8003710:	2400097c 	.word	0x2400097c
  ldr r4, =_ebss
 8003714:	24006028 	.word	0x24006028

08003718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003718:	e7fe      	b.n	8003718 <ADC_IRQHandler>
	...

0800371c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003722:	2003      	movs	r0, #3
 8003724:	f001 fe68 	bl	80053f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003728:	f005 fdaa 	bl	8009280 <HAL_RCC_GetSysClockFreq>
 800372c:	4602      	mov	r2, r0
 800372e:	4b15      	ldr	r3, [pc, #84]	; (8003784 <HAL_Init+0x68>)
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	4913      	ldr	r1, [pc, #76]	; (8003788 <HAL_Init+0x6c>)
 800373a:	5ccb      	ldrb	r3, [r1, r3]
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	fa22 f303 	lsr.w	r3, r2, r3
 8003744:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003746:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <HAL_Init+0x68>)
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	4a0e      	ldr	r2, [pc, #56]	; (8003788 <HAL_Init+0x6c>)
 8003750:	5cd3      	ldrb	r3, [r2, r3]
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
 800375c:	4a0b      	ldr	r2, [pc, #44]	; (800378c <HAL_Init+0x70>)
 800375e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003760:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <HAL_Init+0x74>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003766:	200f      	movs	r0, #15
 8003768:	f000 f814 	bl	8003794 <HAL_InitTick>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e002      	b.n	800377c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003776:	f7ff faef 	bl	8002d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	58024400 	.word	0x58024400
 8003788:	08015cec 	.word	0x08015cec
 800378c:	24000798 	.word	0x24000798
 8003790:	24000794 	.word	0x24000794

08003794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800379c:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <HAL_InitTick+0x60>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e021      	b.n	80037ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <HAL_InitTick+0x64>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <HAL_InitTick+0x60>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	4619      	mov	r1, r3
 80037b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	4618      	mov	r0, r3
 80037c0:	f001 fe4d 	bl	800545e <HAL_SYSTICK_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e00e      	b.n	80037ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b0f      	cmp	r3, #15
 80037d2:	d80a      	bhi.n	80037ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037d4:	2200      	movs	r2, #0
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295
 80037dc:	f001 fe17 	bl	800540e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037e0:	4a06      	ldr	r2, [pc, #24]	; (80037fc <HAL_InitTick+0x68>)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e000      	b.n	80037ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	240007a0 	.word	0x240007a0
 80037f8:	24000794 	.word	0x24000794
 80037fc:	2400079c 	.word	0x2400079c

08003800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_IncTick+0x20>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_IncTick+0x24>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4413      	add	r3, r2
 8003810:	4a04      	ldr	r2, [pc, #16]	; (8003824 <HAL_IncTick+0x24>)
 8003812:	6013      	str	r3, [r2, #0]
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	240007a0 	.word	0x240007a0
 8003824:	240016c4 	.word	0x240016c4

08003828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return uwTick;
 800382c:	4b03      	ldr	r3, [pc, #12]	; (800383c <HAL_GetTick+0x14>)
 800382e:	681b      	ldr	r3, [r3, #0]
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	240016c4 	.word	0x240016c4

08003840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003848:	f7ff ffee 	bl	8003828 <HAL_GetTick>
 800384c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003858:	d005      	beq.n	8003866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <HAL_Delay+0x44>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003866:	bf00      	nop
 8003868:	f7ff ffde 	bl	8003828 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	429a      	cmp	r2, r3
 8003876:	d8f7      	bhi.n	8003868 <HAL_Delay+0x28>
  {
  }
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	240007a0 	.word	0x240007a0

08003888 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	609a      	str	r2, [r3, #8]
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	609a      	str	r2, [r3, #8]
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3360      	adds	r3, #96	; 0x60
 8003902:	461a      	mov	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	430b      	orrs	r3, r1
 800391e:	431a      	orrs	r2, r3
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003924:	bf00      	nop
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	fa01 f303 	lsl.w	r3, r1, r3
 8003950:	431a      	orrs	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	611a      	str	r2, [r3, #16]
}
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003962:	b480      	push	{r7}
 8003964:	b087      	sub	sp, #28
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	3360      	adds	r3, #96	; 0x60
 8003972:	461a      	mov	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	431a      	orrs	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	601a      	str	r2, [r3, #0]
  }
}
 800398c:	bf00      	nop
 800398e:	371c      	adds	r7, #28
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039be:	b480      	push	{r7}
 80039c0:	b087      	sub	sp, #28
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3330      	adds	r3, #48	; 0x30
 80039ce:	461a      	mov	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	0a1b      	lsrs	r3, r3, #8
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	4413      	add	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	211f      	movs	r1, #31
 80039ea:	fa01 f303 	lsl.w	r3, r1, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	401a      	ands	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0e9b      	lsrs	r3, r3, #26
 80039f6:	f003 011f 	and.w	r1, r3, #31
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	431a      	orrs	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f023 0203 	bic.w	r2, r3, #3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3314      	adds	r3, #20
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	0e5b      	lsrs	r3, r3, #25
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	4413      	add	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	0d1b      	lsrs	r3, r3, #20
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	2107      	movs	r1, #7
 8003a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	401a      	ands	r2, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	0d1b      	lsrs	r3, r3, #20
 8003a76:	f003 031f 	and.w	r3, r3, #31
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a80:	431a      	orrs	r2, r3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aac:	43db      	mvns	r3, r3
 8003aae:	401a      	ands	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f003 0318 	and.w	r3, r3, #24
 8003ab6:	4908      	ldr	r1, [pc, #32]	; (8003ad8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ab8:	40d9      	lsrs	r1, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	400b      	ands	r3, r1
 8003abe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	000fffff 	.word	0x000fffff

08003adc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 031f 	and.w	r3, r3, #31
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6093      	str	r3, [r2, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	5fffffc0 	.word	0x5fffffc0

08003b38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b4c:	d101      	bne.n	8003b52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <LL_ADC_EnableInternalRegulator+0x24>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	6fffffc0 	.word	0x6fffffc0

08003b88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b9c:	d101      	bne.n	8003ba2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <LL_ADC_Enable+0x24>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	f043 0201 	orr.w	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	7fffffc0 	.word	0x7fffffc0

08003bd8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <LL_ADC_Disable+0x24>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	f043 0202 	orr.w	r2, r3, #2
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	7fffffc0 	.word	0x7fffffc0

08003c00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <LL_ADC_IsEnabled+0x18>
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <LL_ADC_IsEnabled+0x1a>
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d101      	bne.n	8003c3e <LL_ADC_IsDisableOngoing+0x18>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <LL_ADC_IsDisableOngoing+0x1a>
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <LL_ADC_REG_StartConversion+0x24>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	f043 0204 	orr.w	r2, r3, #4
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	7fffffc0 	.word	0x7fffffc0

08003c74 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <LL_ADC_REG_StopConversion+0x24>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	f043 0210 	orr.w	r2, r3, #16
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	7fffffc0 	.word	0x7fffffc0

08003c9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d101      	bne.n	8003cb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <LL_ADC_INJ_StopConversion+0x24>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	7fffffc0 	.word	0x7fffffc0

08003cec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d101      	bne.n	8003d04 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b089      	sub	sp, #36	; 0x24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e138      	b.n	8003fa0 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d109      	bne.n	8003d50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff f829 	bl	8002d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff feef 	bl	8003b38 <LL_ADC_IsDeepPowerDownEnabled>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff fed5 	bl	8003b14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ff0a 	bl	8003b88 <LL_ADC_IsInternalRegulatorEnabled>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d114      	bne.n	8003da4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff feee 	bl	8003b60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d84:	4b88      	ldr	r3, [pc, #544]	; (8003fa8 <HAL_ADC_Init+0x294>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	099b      	lsrs	r3, r3, #6
 8003d8a:	4a88      	ldr	r2, [pc, #544]	; (8003fac <HAL_ADC_Init+0x298>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	099b      	lsrs	r3, r3, #6
 8003d92:	3301      	adds	r3, #1
 8003d94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d96:	e002      	b.n	8003d9e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f9      	bne.n	8003d98 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff feed 	bl	8003b88 <LL_ADC_IsInternalRegulatorEnabled>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10d      	bne.n	8003dd0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db8:	f043 0210 	orr.w	r2, r3, #16
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc4:	f043 0201 	orr.w	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff ff61 	bl	8003c9c <LL_ADC_REG_IsConversionOngoing>
 8003dda:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f040 80d2 	bne.w	8003f8e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f040 80ce 	bne.w	8003f8e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003dfa:	f043 0202 	orr.w	r2, r3, #2
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fefa 	bl	8003c00 <LL_ADC_IsEnabled>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d110      	bne.n	8003e34 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e12:	4867      	ldr	r0, [pc, #412]	; (8003fb0 <HAL_ADC_Init+0x29c>)
 8003e14:	f7ff fef4 	bl	8003c00 <LL_ADC_IsEnabled>
 8003e18:	4604      	mov	r4, r0
 8003e1a:	4866      	ldr	r0, [pc, #408]	; (8003fb4 <HAL_ADC_Init+0x2a0>)
 8003e1c:	f7ff fef0 	bl	8003c00 <LL_ADC_IsEnabled>
 8003e20:	4603      	mov	r3, r0
 8003e22:	4323      	orrs	r3, r4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4862      	ldr	r0, [pc, #392]	; (8003fb8 <HAL_ADC_Init+0x2a4>)
 8003e30:	f7ff fd2a 	bl	8003888 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	7d5b      	ldrb	r3, [r3, #21]
 8003e38:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e3e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8003e44:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7f1b      	ldrb	r3, [r3, #28]
 8003e4a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	7f1b      	ldrb	r3, [r3, #28]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d106      	bne.n	8003e66 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	045b      	lsls	r3, r3, #17
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	4b4c      	ldr	r3, [pc, #304]	; (8003fbc <HAL_ADC_Init+0x2a8>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	69b9      	ldr	r1, [r7, #24]
 8003e92:	430b      	orrs	r3, r1
 8003e94:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fefe 	bl	8003c9c <LL_ADC_REG_IsConversionOngoing>
 8003ea0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff ff20 	bl	8003cec <LL_ADC_INJ_IsConversionOngoing>
 8003eac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d14a      	bne.n	8003f4a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d147      	bne.n	8003f4a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7d1b      	ldrb	r3, [r3, #20]
 8003ebe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	4b3c      	ldr	r3, [pc, #240]	; (8003fc0 <HAL_ADC_Init+0x2ac>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	69b9      	ldr	r1, [r7, #24]
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d11b      	bne.n	8003f1e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	4b34      	ldr	r3, [pc, #208]	; (8003fc4 <HAL_ADC_Init+0x2b0>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003efa:	3a01      	subs	r2, #1
 8003efc:	0411      	lsls	r1, r2, #16
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f02:	4311      	orrs	r1, r2
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f08:	4311      	orrs	r1, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	611a      	str	r2, [r3, #16]
 8003f1c:	e007      	b.n	8003f2e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fff7 	bl	8004f38 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d10c      	bne.n	8003f6c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	f023 010f 	bic.w	r1, r3, #15
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	1e5a      	subs	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	631a      	str	r2, [r3, #48]	; 0x30
 8003f6a:	e007      	b.n	8003f7c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 020f 	bic.w	r2, r2, #15
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	f023 0303 	bic.w	r3, r3, #3
 8003f84:	f043 0201 	orr.w	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54
 8003f8c:	e007      	b.n	8003f9e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	f043 0210 	orr.w	r2, r3, #16
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3724      	adds	r7, #36	; 0x24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd90      	pop	{r4, r7, pc}
 8003fa8:	24000794 	.word	0x24000794
 8003fac:	053e2d63 	.word	0x053e2d63
 8003fb0:	40022000 	.word	0x40022000
 8003fb4:	40022100 	.word	0x40022100
 8003fb8:	40022300 	.word	0x40022300
 8003fbc:	fff0c003 	.word	0xfff0c003
 8003fc0:	ffffbffc 	.word	0xffffbffc
 8003fc4:	fc00f81e 	.word	0xfc00f81e

08003fc8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fd0:	4856      	ldr	r0, [pc, #344]	; (800412c <HAL_ADC_Start+0x164>)
 8003fd2:	f7ff fd83 	bl	8003adc <LL_ADC_GetMultimode>
 8003fd6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fe5d 	bl	8003c9c <LL_ADC_REG_IsConversionOngoing>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f040 809a 	bne.w	800411e <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ADC_Start+0x30>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e095      	b.n	8004124 <HAL_ADC_Start+0x15c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fe29 	bl	8004c58 <ADC_Enable>
 8004006:	4603      	mov	r3, r0
 8004008:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800400a:	7dfb      	ldrb	r3, [r7, #23]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f040 8081 	bne.w	8004114 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004016:	4b46      	ldr	r3, [pc, #280]	; (8004130 <HAL_ADC_Start+0x168>)
 8004018:	4013      	ands	r3, r2
 800401a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a43      	ldr	r2, [pc, #268]	; (8004134 <HAL_ADC_Start+0x16c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d002      	beq.n	8004032 <HAL_ADC_Start+0x6a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	e000      	b.n	8004034 <HAL_ADC_Start+0x6c>
 8004032:	4b41      	ldr	r3, [pc, #260]	; (8004138 <HAL_ADC_Start+0x170>)
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	4293      	cmp	r3, r2
 800403a:	d002      	beq.n	8004042 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d105      	bne.n	800404e <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004046:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405a:	d106      	bne.n	800406a <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	f023 0206 	bic.w	r2, r3, #6
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	659a      	str	r2, [r3, #88]	; 0x58
 8004068:	e002      	b.n	8004070 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	221c      	movs	r2, #28
 8004076:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a2b      	ldr	r2, [pc, #172]	; (8004134 <HAL_ADC_Start+0x16c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d002      	beq.n	8004090 <HAL_ADC_Start+0xc8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	e000      	b.n	8004092 <HAL_ADC_Start+0xca>
 8004090:	4b29      	ldr	r3, [pc, #164]	; (8004138 <HAL_ADC_Start+0x170>)
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	4293      	cmp	r3, r2
 8004098:	d008      	beq.n	80040ac <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	d002      	beq.n	80040ac <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b09      	cmp	r3, #9
 80040aa:	d114      	bne.n	80040d6 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fdbc 	bl	8003c4c <LL_ADC_REG_StartConversion>
 80040d4:	e025      	b.n	8004122 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a13      	ldr	r2, [pc, #76]	; (8004134 <HAL_ADC_Start+0x16c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d002      	beq.n	80040f2 <HAL_ADC_Start+0x12a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	e000      	b.n	80040f4 <HAL_ADC_Start+0x12c>
 80040f2:	4b11      	ldr	r3, [pc, #68]	; (8004138 <HAL_ADC_Start+0x170>)
 80040f4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00f      	beq.n	8004122 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004106:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800410a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	655a      	str	r2, [r3, #84]	; 0x54
 8004112:	e006      	b.n	8004122 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800411c:	e001      	b.n	8004122 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800411e:	2302      	movs	r3, #2
 8004120:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004122:	7dfb      	ldrb	r3, [r7, #23]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40022300 	.word	0x40022300
 8004130:	fffff0fe 	.word	0xfffff0fe
 8004134:	40022100 	.word	0x40022100
 8004138:	40022000 	.word	0x40022000

0800413c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_ADC_Stop+0x16>
 800414e:	2302      	movs	r3, #2
 8004150:	e021      	b.n	8004196 <HAL_ADC_Stop+0x5a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800415a:	2103      	movs	r1, #3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fcbf 	bl	8004ae0 <ADC_ConversionStop>
 8004162:	4603      	mov	r3, r0
 8004164:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10f      	bne.n	800418c <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fdef 	bl	8004d50 <ADC_Disable>
 8004172:	4603      	mov	r3, r0
 8004174:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d107      	bne.n	800418c <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <HAL_ADC_Stop+0x64>)
 8004182:	4013      	ands	r3, r2
 8004184:	f043 0201 	orr.w	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004194:	7bfb      	ldrb	r3, [r7, #15]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	ffffeefe 	.word	0xffffeefe

080041a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041ae:	4866      	ldr	r0, [pc, #408]	; (8004348 <HAL_ADC_PollForConversion+0x1a4>)
 80041b0:	f7ff fc94 	bl	8003adc <LL_ADC_GetMultimode>
 80041b4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d102      	bne.n	80041c4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80041be:	2308      	movs	r3, #8
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	e02a      	b.n	800421a <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b05      	cmp	r3, #5
 80041ce:	d002      	beq.n	80041d6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b09      	cmp	r3, #9
 80041d4:	d111      	bne.n	80041fa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d007      	beq.n	80041f4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	f043 0220 	orr.w	r2, r3, #32
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0a4      	b.n	800433e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80041f4:	2304      	movs	r3, #4
 80041f6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80041f8:	e00f      	b.n	800421a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80041fa:	4853      	ldr	r0, [pc, #332]	; (8004348 <HAL_ADC_PollForConversion+0x1a4>)
 80041fc:	f7ff fc7c 	bl	8003af8 <LL_ADC_GetMultiDMATransfer>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f043 0220 	orr.w	r2, r3, #32
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e093      	b.n	800433e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004216:	2304      	movs	r3, #4
 8004218:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800421a:	f7ff fb05 	bl	8003828 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004220:	e021      	b.n	8004266 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d01d      	beq.n	8004266 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800422a:	f7ff fafd 	bl	8003828 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <HAL_ADC_PollForConversion+0x9c>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d112      	bne.n	8004266 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	4013      	ands	r3, r2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10b      	bne.n	8004266 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004252:	f043 0204 	orr.w	r2, r3, #4
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e06b      	b.n	800433e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0d6      	beq.n	8004222 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fb87 	bl	8003998 <LL_ADC_REG_IsTriggerSourceSWStart>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01c      	beq.n	80042ca <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	7d5b      	ldrb	r3, [r3, #21]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d118      	bne.n	80042ca <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d111      	bne.n	80042ca <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d105      	bne.n	80042ca <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	f043 0201 	orr.w	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1f      	ldr	r2, [pc, #124]	; (800434c <HAL_ADC_PollForConversion+0x1a8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d002      	beq.n	80042da <HAL_ADC_PollForConversion+0x136>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	e000      	b.n	80042dc <HAL_ADC_PollForConversion+0x138>
 80042da:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <HAL_ADC_PollForConversion+0x1ac>)
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d008      	beq.n	80042f6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b05      	cmp	r3, #5
 80042ee:	d002      	beq.n	80042f6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b09      	cmp	r3, #9
 80042f4:	d104      	bne.n	8004300 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	e00c      	b.n	800431a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a11      	ldr	r2, [pc, #68]	; (800434c <HAL_ADC_PollForConversion+0x1a8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d002      	beq.n	8004310 <HAL_ADC_PollForConversion+0x16c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	e000      	b.n	8004312 <HAL_ADC_PollForConversion+0x16e>
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <HAL_ADC_PollForConversion+0x1ac>)
 8004312:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d104      	bne.n	800432a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2208      	movs	r2, #8
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e008      	b.n	800433c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d103      	bne.n	800433c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	220c      	movs	r2, #12
 800433a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40022300 	.word	0x40022300
 800434c:	40022100 	.word	0x40022100
 8004350:	40022000 	.word	0x40022000

08004354 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004360:	484f      	ldr	r0, [pc, #316]	; (80044a0 <HAL_ADC_Start_DMA+0x14c>)
 8004362:	f7ff fbbb 	bl	8003adc <LL_ADC_GetMultimode>
 8004366:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fc95 	bl	8003c9c <LL_ADC_REG_IsConversionOngoing>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	f040 808c 	bne.w	8004492 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_ADC_Start_DMA+0x34>
 8004384:	2302      	movs	r3, #2
 8004386:	e087      	b.n	8004498 <HAL_ADC_Start_DMA+0x144>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b05      	cmp	r3, #5
 800439a:	d002      	beq.n	80043a2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b09      	cmp	r3, #9
 80043a0:	d170      	bne.n	8004484 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fc58 	bl	8004c58 <ADC_Enable>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d163      	bne.n	800447a <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043b6:	4b3b      	ldr	r3, [pc, #236]	; (80044a4 <HAL_ADC_Start_DMA+0x150>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a38      	ldr	r2, [pc, #224]	; (80044a8 <HAL_ADC_Start_DMA+0x154>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d002      	beq.n	80043d2 <HAL_ADC_Start_DMA+0x7e>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	e000      	b.n	80043d4 <HAL_ADC_Start_DMA+0x80>
 80043d2:	4b36      	ldr	r3, [pc, #216]	; (80044ac <HAL_ADC_Start_DMA+0x158>)
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	4293      	cmp	r3, r2
 80043da:	d002      	beq.n	80043e2 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d105      	bne.n	80043ee <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d006      	beq.n	8004408 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	f023 0206 	bic.w	r2, r3, #6
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	659a      	str	r2, [r3, #88]	; 0x58
 8004406:	e002      	b.n	800440e <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004412:	4a27      	ldr	r2, [pc, #156]	; (80044b0 <HAL_ADC_Start_DMA+0x15c>)
 8004414:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441a:	4a26      	ldr	r2, [pc, #152]	; (80044b4 <HAL_ADC_Start_DMA+0x160>)
 800441c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004422:	4a25      	ldr	r2, [pc, #148]	; (80044b8 <HAL_ADC_Start_DMA+0x164>)
 8004424:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	221c      	movs	r2, #28
 800442c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0210 	orr.w	r2, r2, #16
 8004444:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	4619      	mov	r1, r3
 8004450:	4610      	mov	r0, r2
 8004452:	f7ff fae0 	bl	8003a16 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3340      	adds	r3, #64	; 0x40
 8004460:	4619      	mov	r1, r3
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f001 fb97 	bl	8005b98 <HAL_DMA_Start_IT>
 800446a:	4603      	mov	r3, r0
 800446c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fbea 	bl	8003c4c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004478:	e00d      	b.n	8004496 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004482:	e008      	b.n	8004496 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004490:	e001      	b.n	8004496 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004492:	2302      	movs	r3, #2
 8004494:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004496:	7dfb      	ldrb	r3, [r7, #23]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40022300 	.word	0x40022300
 80044a4:	fffff0fe 	.word	0xfffff0fe
 80044a8:	40022100 	.word	0x40022100
 80044ac:	40022000 	.word	0x40022000
 80044b0:	08004e0f 	.word	0x08004e0f
 80044b4:	08004ee7 	.word	0x08004ee7
 80044b8:	08004f03 	.word	0x08004f03

080044bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004514:	b590      	push	{r4, r7, lr}
 8004516:	b0a1      	sub	sp, #132	; 0x84
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4a9a      	ldr	r2, [pc, #616]	; (8004798 <HAL_ADC_ConfigChannel+0x284>)
 800452e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_ADC_ConfigChannel+0x2a>
 800453a:	2302      	movs	r3, #2
 800453c:	e2bc      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x5a4>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fba6 	bl	8003c9c <LL_ADC_REG_IsConversionOngoing>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	f040 82a1 	bne.w	8004a9a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004560:	2b00      	cmp	r3, #0
 8004562:	d108      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x62>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	0e9b      	lsrs	r3, r3, #26
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	2201      	movs	r2, #1
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	e016      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x90>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800457e:	fa93 f3a3 	rbit	r3, r3
 8004582:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004586:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800458e:	2320      	movs	r3, #32
 8004590:	e003      	b.n	800459a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004594:	fab3 f383 	clz	r3, r3
 8004598:	b2db      	uxtb	r3, r3
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	2201      	movs	r2, #1
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6812      	ldr	r2, [r2, #0]
 80045a8:	69d1      	ldr	r1, [r2, #28]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	430b      	orrs	r3, r1
 80045b0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6859      	ldr	r1, [r3, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	f7ff f9fd 	bl	80039be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fb67 	bl	8003c9c <LL_ADC_REG_IsConversionOngoing>
 80045ce:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fb89 	bl	8003cec <LL_ADC_INJ_IsConversionOngoing>
 80045da:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f040 80a0 	bne.w	8004724 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f040 809c 	bne.w	8004724 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	461a      	mov	r2, r3
 80045fa:	f7ff fa1f 	bl	8003a3c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10b      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x110>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	695a      	ldr	r2, [r3, #20]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	089b      	lsrs	r3, r3, #2
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	e00a      	b.n	800463a <HAL_ADC_ConfigChannel+0x126>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	695a      	ldr	r2, [r3, #20]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	089b      	lsrs	r3, r3, #2
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b04      	cmp	r3, #4
 8004642:	d027      	beq.n	8004694 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	6919      	ldr	r1, [r3, #16]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004652:	f7ff f94d 	bl	80038f0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6919      	ldr	r1, [r3, #16]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	7e5b      	ldrb	r3, [r3, #25]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d102      	bne.n	800466c <HAL_ADC_ConfigChannel+0x158>
 8004666:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800466a:	e000      	b.n	800466e <HAL_ADC_ConfigChannel+0x15a>
 800466c:	2300      	movs	r3, #0
 800466e:	461a      	mov	r2, r3
 8004670:	f7ff f977 	bl	8003962 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6919      	ldr	r1, [r3, #16]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	7e1b      	ldrb	r3, [r3, #24]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d102      	bne.n	800468a <HAL_ADC_ConfigChannel+0x176>
 8004684:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004688:	e000      	b.n	800468c <HAL_ADC_ConfigChannel+0x178>
 800468a:	2300      	movs	r3, #0
 800468c:	461a      	mov	r2, r3
 800468e:	f7ff f94f 	bl	8003930 <LL_ADC_SetDataRightShift>
 8004692:	e047      	b.n	8004724 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	069b      	lsls	r3, r3, #26
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d107      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046b6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	069b      	lsls	r3, r3, #26
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d107      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046da:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	069b      	lsls	r3, r3, #26
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d107      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046fe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004706:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	069b      	lsls	r3, r3, #26
 8004710:	429a      	cmp	r2, r3
 8004712:	d107      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004722:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff fa69 	bl	8003c00 <LL_ADC_IsEnabled>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	f040 81bb 	bne.w	8004aac <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6819      	ldr	r1, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f7ff f9a6 	bl	8003a94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4a12      	ldr	r2, [pc, #72]	; (8004798 <HAL_ADC_ConfigChannel+0x284>)
 800474e:	4293      	cmp	r3, r2
 8004750:	f040 8130 	bne.w	80049b4 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10b      	bne.n	800477c <HAL_ADC_ConfigChannel+0x268>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	0e9b      	lsrs	r3, r3, #26
 800476a:	3301      	adds	r3, #1
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	2b09      	cmp	r3, #9
 8004772:	bf94      	ite	ls
 8004774:	2301      	movls	r3, #1
 8004776:	2300      	movhi	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e01b      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x2a0>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004784:	fa93 f3a3 	rbit	r3, r3
 8004788:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800478a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800478c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800478e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004790:	2b00      	cmp	r3, #0
 8004792:	d103      	bne.n	800479c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8004794:	2320      	movs	r3, #32
 8004796:	e005      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x290>
 8004798:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 800479c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479e:	fab3 f383 	clz	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	3301      	adds	r3, #1
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	2b09      	cmp	r3, #9
 80047ac:	bf94      	ite	ls
 80047ae:	2301      	movls	r3, #1
 80047b0:	2300      	movhi	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d079      	beq.n	80048ac <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d107      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x2c0>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	0e9b      	lsrs	r3, r3, #26
 80047ca:	3301      	adds	r3, #1
 80047cc:	069b      	lsls	r3, r3, #26
 80047ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047d2:	e015      	b.n	8004800 <HAL_ADC_ConfigChannel+0x2ec>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80047e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80047e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80047ec:	2320      	movs	r3, #32
 80047ee:	e003      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80047f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	3301      	adds	r3, #1
 80047fa:	069b      	lsls	r3, r3, #26
 80047fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x30c>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	0e9b      	lsrs	r3, r3, #26
 8004812:	3301      	adds	r3, #1
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	2101      	movs	r1, #1
 800481a:	fa01 f303 	lsl.w	r3, r1, r3
 800481e:	e017      	b.n	8004850 <HAL_ADC_ConfigChannel+0x33c>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004828:	fa93 f3a3 	rbit	r3, r3
 800482c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800482e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004830:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8004838:	2320      	movs	r3, #32
 800483a:	e003      	b.n	8004844 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 800483c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800483e:	fab3 f383 	clz	r3, r3
 8004842:	b2db      	uxtb	r3, r3
 8004844:	3301      	adds	r3, #1
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	2101      	movs	r1, #1
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	ea42 0103 	orr.w	r1, r2, r3
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x362>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	0e9b      	lsrs	r3, r3, #26
 8004866:	3301      	adds	r3, #1
 8004868:	f003 021f 	and.w	r2, r3, #31
 800486c:	4613      	mov	r3, r2
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	4413      	add	r3, r2
 8004872:	051b      	lsls	r3, r3, #20
 8004874:	e018      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x394>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487e:	fa93 f3a3 	rbit	r3, r3
 8004882:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800488e:	2320      	movs	r3, #32
 8004890:	e003      	b.n	800489a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	fab3 f383 	clz	r3, r3
 8004898:	b2db      	uxtb	r3, r3
 800489a:	3301      	adds	r3, #1
 800489c:	f003 021f 	and.w	r2, r3, #31
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048a8:	430b      	orrs	r3, r1
 80048aa:	e07e      	b.n	80049aa <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x3b4>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	0e9b      	lsrs	r3, r3, #26
 80048be:	3301      	adds	r3, #1
 80048c0:	069b      	lsls	r3, r3, #26
 80048c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048c6:	e015      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x3e0>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	fa93 f3a3 	rbit	r3, r3
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80048da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80048e0:	2320      	movs	r3, #32
 80048e2:	e003      	b.n	80048ec <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80048e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e6:	fab3 f383 	clz	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	3301      	adds	r3, #1
 80048ee:	069b      	lsls	r3, r3, #26
 80048f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x400>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	0e9b      	lsrs	r3, r3, #26
 8004906:	3301      	adds	r3, #1
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	2101      	movs	r1, #1
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	e017      	b.n	8004944 <HAL_ADC_ConfigChannel+0x430>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	fa93 f3a3 	rbit	r3, r3
 8004920:	61bb      	str	r3, [r7, #24]
  return result;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 800492c:	2320      	movs	r3, #32
 800492e:	e003      	b.n	8004938 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	fab3 f383 	clz	r3, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	3301      	adds	r3, #1
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2101      	movs	r1, #1
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	ea42 0103 	orr.w	r1, r2, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10d      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x45c>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	0e9b      	lsrs	r3, r3, #26
 800495a:	3301      	adds	r3, #1
 800495c:	f003 021f 	and.w	r2, r3, #31
 8004960:	4613      	mov	r3, r2
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	4413      	add	r3, r2
 8004966:	3b1e      	subs	r3, #30
 8004968:	051b      	lsls	r3, r3, #20
 800496a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800496e:	e01b      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x494>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	fa93 f3a3 	rbit	r3, r3
 800497c:	60fb      	str	r3, [r7, #12]
  return result;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8004988:	2320      	movs	r3, #32
 800498a:	e003      	b.n	8004994 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	fab3 f383 	clz	r3, r3
 8004992:	b2db      	uxtb	r3, r3
 8004994:	3301      	adds	r3, #1
 8004996:	f003 021f 	and.w	r2, r3, #31
 800499a:	4613      	mov	r3, r2
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	4413      	add	r3, r2
 80049a0:	3b1e      	subs	r3, #30
 80049a2:	051b      	lsls	r3, r3, #20
 80049a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049a8:	430b      	orrs	r3, r1
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	6892      	ldr	r2, [r2, #8]
 80049ae:	4619      	mov	r1, r3
 80049b0:	f7ff f844 	bl	8003a3c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	da77      	bge.n	8004aac <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049bc:	4840      	ldr	r0, [pc, #256]	; (8004ac0 <HAL_ADC_ConfigChannel+0x5ac>)
 80049be:	f7fe ff89 	bl	80038d4 <LL_ADC_GetCommonPathInternalCh>
 80049c2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049c4:	483f      	ldr	r0, [pc, #252]	; (8004ac4 <HAL_ADC_ConfigChannel+0x5b0>)
 80049c6:	f7ff f91b 	bl	8003c00 <LL_ADC_IsEnabled>
 80049ca:	4604      	mov	r4, r0
 80049cc:	483e      	ldr	r0, [pc, #248]	; (8004ac8 <HAL_ADC_ConfigChannel+0x5b4>)
 80049ce:	f7ff f917 	bl	8003c00 <LL_ADC_IsEnabled>
 80049d2:	4603      	mov	r3, r0
 80049d4:	4323      	orrs	r3, r4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d155      	bne.n	8004a86 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a3b      	ldr	r2, [pc, #236]	; (8004acc <HAL_ADC_ConfigChannel+0x5b8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d122      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x516>
 80049e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d11d      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a35      	ldr	r2, [pc, #212]	; (8004ac8 <HAL_ADC_ConfigChannel+0x5b4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d159      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80049f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049fe:	4619      	mov	r1, r3
 8004a00:	482f      	ldr	r0, [pc, #188]	; (8004ac0 <HAL_ADC_ConfigChannel+0x5ac>)
 8004a02:	f7fe ff54 	bl	80038ae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a06:	4b32      	ldr	r3, [pc, #200]	; (8004ad0 <HAL_ADC_ConfigChannel+0x5bc>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	099b      	lsrs	r3, r3, #6
 8004a0c:	4a31      	ldr	r2, [pc, #196]	; (8004ad4 <HAL_ADC_ConfigChannel+0x5c0>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	099b      	lsrs	r3, r3, #6
 8004a14:	3301      	adds	r3, #1
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a1a:	e002      	b.n	8004a22 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f9      	bne.n	8004a1c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a28:	e040      	b.n	8004aac <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a2a      	ldr	r2, [pc, #168]	; (8004ad8 <HAL_ADC_ConfigChannel+0x5c4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d111      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x544>
 8004a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10c      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a21      	ldr	r2, [pc, #132]	; (8004ac8 <HAL_ADC_ConfigChannel+0x5b4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d131      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	4619      	mov	r1, r3
 8004a50:	481b      	ldr	r0, [pc, #108]	; (8004ac0 <HAL_ADC_ConfigChannel+0x5ac>)
 8004a52:	f7fe ff2c 	bl	80038ae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a56:	e029      	b.n	8004aac <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1f      	ldr	r2, [pc, #124]	; (8004adc <HAL_ADC_ConfigChannel+0x5c8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d124      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x598>
 8004a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d11f      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <HAL_ADC_ConfigChannel+0x5b4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d11a      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4810      	ldr	r0, [pc, #64]	; (8004ac0 <HAL_ADC_ConfigChannel+0x5ac>)
 8004a80:	f7fe ff15 	bl	80038ae <LL_ADC_SetCommonPathInternalCh>
 8004a84:	e012      	b.n	8004aac <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8a:	f043 0220 	orr.w	r2, r3, #32
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004a98:	e008      	b.n	8004aac <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	f043 0220 	orr.w	r2, r3, #32
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ab4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3784      	adds	r7, #132	; 0x84
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd90      	pop	{r4, r7, pc}
 8004ac0:	40022300 	.word	0x40022300
 8004ac4:	40022000 	.word	0x40022000
 8004ac8:	40022100 	.word	0x40022100
 8004acc:	cb840000 	.word	0xcb840000
 8004ad0:	24000794 	.word	0x24000794
 8004ad4:	053e2d63 	.word	0x053e2d63
 8004ad8:	bac04000 	.word	0xbac04000
 8004adc:	cfb80000 	.word	0xcfb80000

08004ae0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff f8d0 	bl	8003c9c <LL_ADC_REG_IsConversionOngoing>
 8004afc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff f8f2 	bl	8003cec <LL_ADC_INJ_IsConversionOngoing>
 8004b08:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d103      	bne.n	8004b18 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 8098 	beq.w	8004c48 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d02a      	beq.n	8004b7c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	7d5b      	ldrb	r3, [r3, #21]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d126      	bne.n	8004b7c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	7d1b      	ldrb	r3, [r3, #20]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d122      	bne.n	8004b7c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004b36:	2301      	movs	r3, #1
 8004b38:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004b3a:	e014      	b.n	8004b66 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	4a45      	ldr	r2, [pc, #276]	; (8004c54 <ADC_ConversionStop+0x174>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d90d      	bls.n	8004b60 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b48:	f043 0210 	orr.w	r2, r3, #16
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b54:	f043 0201 	orr.w	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e074      	b.n	8004c4a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	3301      	adds	r3, #1
 8004b64:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d1e3      	bne.n	8004b3c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2240      	movs	r2, #64	; 0x40
 8004b7a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d014      	beq.n	8004bac <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff f888 	bl	8003c9c <LL_ADC_REG_IsConversionOngoing>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00c      	beq.n	8004bac <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff f845 	bl	8003c26 <LL_ADC_IsDisableOngoing>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff f864 	bl	8003c74 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d014      	beq.n	8004bdc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff f898 	bl	8003cec <LL_ADC_INJ_IsConversionOngoing>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00c      	beq.n	8004bdc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff f82d 	bl	8003c26 <LL_ADC_IsDisableOngoing>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d104      	bne.n	8004bdc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff f874 	bl	8003cc4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d005      	beq.n	8004bee <ADC_ConversionStop+0x10e>
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d105      	bne.n	8004bf4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004be8:	230c      	movs	r3, #12
 8004bea:	617b      	str	r3, [r7, #20]
        break;
 8004bec:	e005      	b.n	8004bfa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004bee:	2308      	movs	r3, #8
 8004bf0:	617b      	str	r3, [r7, #20]
        break;
 8004bf2:	e002      	b.n	8004bfa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	617b      	str	r3, [r7, #20]
        break;
 8004bf8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004bfa:	f7fe fe15 	bl	8003828 <HAL_GetTick>
 8004bfe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004c00:	e01b      	b.n	8004c3a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004c02:	f7fe fe11 	bl	8003828 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b05      	cmp	r3, #5
 8004c0e:	d914      	bls.n	8004c3a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00d      	beq.n	8004c3a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	f043 0210 	orr.w	r2, r3, #16
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2e:	f043 0201 	orr.w	r2, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e007      	b.n	8004c4a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1dc      	bne.n	8004c02 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	000cdbff 	.word	0x000cdbff

08004c58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fe ffcb 	bl	8003c00 <LL_ADC_IsEnabled>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d161      	bne.n	8004d34 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	4b32      	ldr	r3, [pc, #200]	; (8004d40 <ADC_Enable+0xe8>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00d      	beq.n	8004c9a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	f043 0210 	orr.w	r2, r3, #16
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8e:	f043 0201 	orr.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e04d      	b.n	8004d36 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe ff86 	bl	8003bb0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ca4:	f7fe fdc0 	bl	8003828 <HAL_GetTick>
 8004ca8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004caa:	4826      	ldr	r0, [pc, #152]	; (8004d44 <ADC_Enable+0xec>)
 8004cac:	f7fe ff16 	bl	8003adc <LL_ADC_GetMultimode>
 8004cb0:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a24      	ldr	r2, [pc, #144]	; (8004d48 <ADC_Enable+0xf0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d002      	beq.n	8004cc2 <ADC_Enable+0x6a>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	e000      	b.n	8004cc4 <ADC_Enable+0x6c>
 8004cc2:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <ADC_Enable+0xf4>)
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d02c      	beq.n	8004d26 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d130      	bne.n	8004d34 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cd2:	e028      	b.n	8004d26 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fe ff91 	bl	8003c00 <LL_ADC_IsEnabled>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d104      	bne.n	8004cee <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fe ff61 	bl	8003bb0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004cee:	f7fe fd9b 	bl	8003828 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d914      	bls.n	8004d26 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d00d      	beq.n	8004d26 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0e:	f043 0210 	orr.w	r2, r3, #16
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	f043 0201 	orr.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e007      	b.n	8004d36 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d1cf      	bne.n	8004cd4 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	8000003f 	.word	0x8000003f
 8004d44:	40022300 	.word	0x40022300
 8004d48:	40022100 	.word	0x40022100
 8004d4c:	40022000 	.word	0x40022000

08004d50 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fe ff62 	bl	8003c26 <LL_ADC_IsDisableOngoing>
 8004d62:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fe ff49 	bl	8003c00 <LL_ADC_IsEnabled>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d047      	beq.n	8004e04 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d144      	bne.n	8004e04 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 030d 	and.w	r3, r3, #13
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d10c      	bne.n	8004da2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fe ff23 	bl	8003bd8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2203      	movs	r2, #3
 8004d98:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d9a:	f7fe fd45 	bl	8003828 <HAL_GetTick>
 8004d9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004da0:	e029      	b.n	8004df6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	f043 0210 	orr.w	r2, r3, #16
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db2:	f043 0201 	orr.w	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e023      	b.n	8004e06 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004dbe:	f7fe fd33 	bl	8003828 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d914      	bls.n	8004df6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00d      	beq.n	8004df6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dde:	f043 0210 	orr.w	r2, r3, #16
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	f043 0201 	orr.w	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e007      	b.n	8004e06 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1dc      	bne.n	8004dbe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d14b      	bne.n	8004ec0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d021      	beq.n	8004e86 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe fda6 	bl	8003998 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d032      	beq.n	8004eb8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d12b      	bne.n	8004eb8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d11f      	bne.n	8004eb8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7c:	f043 0201 	orr.w	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	655a      	str	r2, [r3, #84]	; 0x54
 8004e84:	e018      	b.n	8004eb8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d111      	bne.n	8004eb8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d105      	bne.n	8004eb8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb0:	f043 0201 	orr.w	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f7ff fb0c 	bl	80044d6 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ebe:	e00e      	b.n	8004ede <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7ff fb16 	bl	80044fe <HAL_ADC_ErrorCallback>
}
 8004ed2:	e004      	b.n	8004ede <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	4798      	blx	r3
}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f7ff faf8 	bl	80044ea <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004efa:	bf00      	nop
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f20:	f043 0204 	orr.w	r2, r3, #4
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f7ff fae8 	bl	80044fe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f2e:	bf00      	nop
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004f40:	4b60      	ldr	r3, [pc, #384]	; (80050c4 <ADC_ConfigureBoostMode+0x18c>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01c      	beq.n	8004f86 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004f4c:	f004 fb12 	bl	8009574 <HAL_RCC_GetHCLKFreq>
 8004f50:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f5a:	d010      	beq.n	8004f7e <ADC_ConfigureBoostMode+0x46>
 8004f5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f60:	d873      	bhi.n	800504a <ADC_ConfigureBoostMode+0x112>
 8004f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f66:	d002      	beq.n	8004f6e <ADC_ConfigureBoostMode+0x36>
 8004f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f6c:	d16d      	bne.n	800504a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	0c1b      	lsrs	r3, r3, #16
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	60fb      	str	r3, [r7, #12]
        break;
 8004f7c:	e068      	b.n	8005050 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	089b      	lsrs	r3, r3, #2
 8004f82:	60fb      	str	r3, [r7, #12]
        break;
 8004f84:	e064      	b.n	8005050 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004f86:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004f8a:	f04f 0100 	mov.w	r1, #0
 8004f8e:	f005 fd0b 	bl	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f92:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004f9c:	d051      	beq.n	8005042 <ADC_ConfigureBoostMode+0x10a>
 8004f9e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004fa2:	d854      	bhi.n	800504e <ADC_ConfigureBoostMode+0x116>
 8004fa4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004fa8:	d047      	beq.n	800503a <ADC_ConfigureBoostMode+0x102>
 8004faa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004fae:	d84e      	bhi.n	800504e <ADC_ConfigureBoostMode+0x116>
 8004fb0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004fb4:	d03d      	beq.n	8005032 <ADC_ConfigureBoostMode+0xfa>
 8004fb6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004fba:	d848      	bhi.n	800504e <ADC_ConfigureBoostMode+0x116>
 8004fbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fc0:	d033      	beq.n	800502a <ADC_ConfigureBoostMode+0xf2>
 8004fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fc6:	d842      	bhi.n	800504e <ADC_ConfigureBoostMode+0x116>
 8004fc8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004fcc:	d029      	beq.n	8005022 <ADC_ConfigureBoostMode+0xea>
 8004fce:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004fd2:	d83c      	bhi.n	800504e <ADC_ConfigureBoostMode+0x116>
 8004fd4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004fd8:	d01a      	beq.n	8005010 <ADC_ConfigureBoostMode+0xd8>
 8004fda:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004fde:	d836      	bhi.n	800504e <ADC_ConfigureBoostMode+0x116>
 8004fe0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004fe4:	d014      	beq.n	8005010 <ADC_ConfigureBoostMode+0xd8>
 8004fe6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004fea:	d830      	bhi.n	800504e <ADC_ConfigureBoostMode+0x116>
 8004fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff0:	d00e      	beq.n	8005010 <ADC_ConfigureBoostMode+0xd8>
 8004ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff6:	d82a      	bhi.n	800504e <ADC_ConfigureBoostMode+0x116>
 8004ff8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ffc:	d008      	beq.n	8005010 <ADC_ConfigureBoostMode+0xd8>
 8004ffe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005002:	d824      	bhi.n	800504e <ADC_ConfigureBoostMode+0x116>
 8005004:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005008:	d002      	beq.n	8005010 <ADC_ConfigureBoostMode+0xd8>
 800500a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800500e:	d11e      	bne.n	800504e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	0c9b      	lsrs	r3, r3, #18
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	fbb2 f3f3 	udiv	r3, r2, r3
 800501e:	60fb      	str	r3, [r7, #12]
        break;
 8005020:	e016      	b.n	8005050 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	091b      	lsrs	r3, r3, #4
 8005026:	60fb      	str	r3, [r7, #12]
        break;
 8005028:	e012      	b.n	8005050 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	60fb      	str	r3, [r7, #12]
        break;
 8005030:	e00e      	b.n	8005050 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	099b      	lsrs	r3, r3, #6
 8005036:	60fb      	str	r3, [r7, #12]
        break;
 8005038:	e00a      	b.n	8005050 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	09db      	lsrs	r3, r3, #7
 800503e:	60fb      	str	r3, [r7, #12]
        break;
 8005040:	e006      	b.n	8005050 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	0a1b      	lsrs	r3, r3, #8
 8005046:	60fb      	str	r3, [r7, #12]
        break;
 8005048:	e002      	b.n	8005050 <ADC_ConfigureBoostMode+0x118>
        break;
 800504a:	bf00      	nop
 800504c:	e000      	b.n	8005050 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 800504e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <ADC_ConfigureBoostMode+0x190>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d808      	bhi.n	8005070 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800506c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800506e:	e025      	b.n	80050bc <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4a16      	ldr	r2, [pc, #88]	; (80050cc <ADC_ConfigureBoostMode+0x194>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d80a      	bhi.n	800508e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	e016      	b.n	80050bc <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4a0f      	ldr	r2, [pc, #60]	; (80050d0 <ADC_ConfigureBoostMode+0x198>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d80a      	bhi.n	80050ac <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	609a      	str	r2, [r3, #8]
}
 80050aa:	e007      	b.n	80050bc <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80050ba:	609a      	str	r2, [r3, #8]
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40022300 	.word	0x40022300
 80050c8:	005f5e10 	.word	0x005f5e10
 80050cc:	00bebc20 	.word	0x00bebc20
 80050d0:	017d7840 	.word	0x017d7840

080050d4 <LL_ADC_IsEnabled>:
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <LL_ADC_IsEnabled+0x18>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <LL_ADC_IsEnabled+0x1a>
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <LL_ADC_REG_IsConversionOngoing>:
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b04      	cmp	r3, #4
 800510c:	d101      	bne.n	8005112 <LL_ADC_REG_IsConversionOngoing+0x18>
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b09f      	sub	sp, #124	; 0x7c
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800513a:	2302      	movs	r3, #2
 800513c:	e080      	b.n	8005240 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005146:	2300      	movs	r3, #0
 8005148:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800514a:	2300      	movs	r3, #0
 800514c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a3d      	ldr	r2, [pc, #244]	; (8005248 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d102      	bne.n	800515e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005158:	4b3c      	ldr	r3, [pc, #240]	; (800524c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800515a:	60bb      	str	r3, [r7, #8]
 800515c:	e001      	b.n	8005162 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800515e:	2300      	movs	r3, #0
 8005160:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10b      	bne.n	8005180 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516c:	f043 0220 	orr.w	r2, r3, #32
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e05f      	b.n	8005240 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff ffb9 	bl	80050fa <LL_ADC_REG_IsConversionOngoing>
 8005188:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff ffb3 	bl	80050fa <LL_ADC_REG_IsConversionOngoing>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d141      	bne.n	800521e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800519a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800519c:	2b00      	cmp	r3, #0
 800519e:	d13e      	bne.n	800521e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80051a0:	4b2b      	ldr	r3, [pc, #172]	; (8005250 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80051a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d020      	beq.n	80051ee <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80051ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	431a      	orrs	r2, r3
 80051ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051bc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051be:	4822      	ldr	r0, [pc, #136]	; (8005248 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80051c0:	f7ff ff88 	bl	80050d4 <LL_ADC_IsEnabled>
 80051c4:	4604      	mov	r4, r0
 80051c6:	4821      	ldr	r0, [pc, #132]	; (800524c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80051c8:	f7ff ff84 	bl	80050d4 <LL_ADC_IsEnabled>
 80051cc:	4603      	mov	r3, r0
 80051ce:	4323      	orrs	r3, r4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d12e      	bne.n	8005232 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80051d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80051da:	4013      	ands	r3, r2
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	6811      	ldr	r1, [r2, #0]
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	6892      	ldr	r2, [r2, #8]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	431a      	orrs	r2, r3
 80051e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ea:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051ec:	e021      	b.n	8005232 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80051ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051fa:	4813      	ldr	r0, [pc, #76]	; (8005248 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80051fc:	f7ff ff6a 	bl	80050d4 <LL_ADC_IsEnabled>
 8005200:	4604      	mov	r4, r0
 8005202:	4812      	ldr	r0, [pc, #72]	; (800524c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8005204:	f7ff ff66 	bl	80050d4 <LL_ADC_IsEnabled>
 8005208:	4603      	mov	r3, r0
 800520a:	4323      	orrs	r3, r4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d110      	bne.n	8005232 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005216:	4013      	ands	r3, r2
 8005218:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800521a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800521c:	e009      	b.n	8005232 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	f043 0220 	orr.w	r2, r3, #32
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005230:	e000      	b.n	8005234 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005232:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800523c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005240:	4618      	mov	r0, r3
 8005242:	377c      	adds	r7, #124	; 0x7c
 8005244:	46bd      	mov	sp, r7
 8005246:	bd90      	pop	{r4, r7, pc}
 8005248:	40022000 	.word	0x40022000
 800524c:	40022100 	.word	0x40022100
 8005250:	40022300 	.word	0x40022300
 8005254:	fffff0e0 	.word	0xfffff0e0

08005258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005268:	4b0b      	ldr	r3, [pc, #44]	; (8005298 <__NVIC_SetPriorityGrouping+0x40>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005274:	4013      	ands	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005280:	4b06      	ldr	r3, [pc, #24]	; (800529c <__NVIC_SetPriorityGrouping+0x44>)
 8005282:	4313      	orrs	r3, r2
 8005284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005286:	4a04      	ldr	r2, [pc, #16]	; (8005298 <__NVIC_SetPriorityGrouping+0x40>)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	60d3      	str	r3, [r2, #12]
}
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	e000ed00 	.word	0xe000ed00
 800529c:	05fa0000 	.word	0x05fa0000

080052a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052a4:	4b04      	ldr	r3, [pc, #16]	; (80052b8 <__NVIC_GetPriorityGrouping+0x18>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	0a1b      	lsrs	r3, r3, #8
 80052aa:	f003 0307 	and.w	r3, r3, #7
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	e000ed00 	.word	0xe000ed00

080052bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	db0b      	blt.n	80052e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	f003 021f 	and.w	r2, r3, #31
 80052d4:	4907      	ldr	r1, [pc, #28]	; (80052f4 <__NVIC_EnableIRQ+0x38>)
 80052d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	2001      	movs	r0, #1
 80052de:	fa00 f202 	lsl.w	r2, r0, r2
 80052e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	e000e100 	.word	0xe000e100

080052f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	6039      	str	r1, [r7, #0]
 8005302:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005308:	2b00      	cmp	r3, #0
 800530a:	db0a      	blt.n	8005322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	b2da      	uxtb	r2, r3
 8005310:	490c      	ldr	r1, [pc, #48]	; (8005344 <__NVIC_SetPriority+0x4c>)
 8005312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005316:	0112      	lsls	r2, r2, #4
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	440b      	add	r3, r1
 800531c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005320:	e00a      	b.n	8005338 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	b2da      	uxtb	r2, r3
 8005326:	4908      	ldr	r1, [pc, #32]	; (8005348 <__NVIC_SetPriority+0x50>)
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	3b04      	subs	r3, #4
 8005330:	0112      	lsls	r2, r2, #4
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	440b      	add	r3, r1
 8005336:	761a      	strb	r2, [r3, #24]
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	e000e100 	.word	0xe000e100
 8005348:	e000ed00 	.word	0xe000ed00

0800534c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800534c:	b480      	push	{r7}
 800534e:	b089      	sub	sp, #36	; 0x24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f1c3 0307 	rsb	r3, r3, #7
 8005366:	2b04      	cmp	r3, #4
 8005368:	bf28      	it	cs
 800536a:	2304      	movcs	r3, #4
 800536c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	3304      	adds	r3, #4
 8005372:	2b06      	cmp	r3, #6
 8005374:	d902      	bls.n	800537c <NVIC_EncodePriority+0x30>
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	3b03      	subs	r3, #3
 800537a:	e000      	b.n	800537e <NVIC_EncodePriority+0x32>
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005380:	f04f 32ff 	mov.w	r2, #4294967295
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	43da      	mvns	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	401a      	ands	r2, r3
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005394:	f04f 31ff 	mov.w	r1, #4294967295
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	fa01 f303 	lsl.w	r3, r1, r3
 800539e:	43d9      	mvns	r1, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053a4:	4313      	orrs	r3, r2
         );
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3724      	adds	r7, #36	; 0x24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3b01      	subs	r3, #1
 80053c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053c4:	d301      	bcc.n	80053ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053c6:	2301      	movs	r3, #1
 80053c8:	e00f      	b.n	80053ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053ca:	4a0a      	ldr	r2, [pc, #40]	; (80053f4 <SysTick_Config+0x40>)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053d2:	210f      	movs	r1, #15
 80053d4:	f04f 30ff 	mov.w	r0, #4294967295
 80053d8:	f7ff ff8e 	bl	80052f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053dc:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <SysTick_Config+0x40>)
 80053de:	2200      	movs	r2, #0
 80053e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053e2:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <SysTick_Config+0x40>)
 80053e4:	2207      	movs	r2, #7
 80053e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	e000e010 	.word	0xe000e010

080053f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff ff29 	bl	8005258 <__NVIC_SetPriorityGrouping>
}
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b086      	sub	sp, #24
 8005412:	af00      	add	r7, sp, #0
 8005414:	4603      	mov	r3, r0
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
 800541a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800541c:	f7ff ff40 	bl	80052a0 <__NVIC_GetPriorityGrouping>
 8005420:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	6978      	ldr	r0, [r7, #20]
 8005428:	f7ff ff90 	bl	800534c <NVIC_EncodePriority>
 800542c:	4602      	mov	r2, r0
 800542e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005432:	4611      	mov	r1, r2
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff ff5f 	bl	80052f8 <__NVIC_SetPriority>
}
 800543a:	bf00      	nop
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	4603      	mov	r3, r0
 800544a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800544c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff ff33 	bl	80052bc <__NVIC_EnableIRQ>
}
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff ffa4 	bl	80053b4 <SysTick_Config>
 800546c:	4603      	mov	r3, r0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005480:	f7fe f9d2 	bl	8003828 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e37f      	b.n	8005b90 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a66      	ldr	r2, [pc, #408]	; (8005630 <HAL_DMA_Init+0x1b8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d04a      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a65      	ldr	r2, [pc, #404]	; (8005634 <HAL_DMA_Init+0x1bc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d045      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a63      	ldr	r2, [pc, #396]	; (8005638 <HAL_DMA_Init+0x1c0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d040      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a62      	ldr	r2, [pc, #392]	; (800563c <HAL_DMA_Init+0x1c4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d03b      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a60      	ldr	r2, [pc, #384]	; (8005640 <HAL_DMA_Init+0x1c8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d036      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a5f      	ldr	r2, [pc, #380]	; (8005644 <HAL_DMA_Init+0x1cc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d031      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a5d      	ldr	r2, [pc, #372]	; (8005648 <HAL_DMA_Init+0x1d0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d02c      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a5c      	ldr	r2, [pc, #368]	; (800564c <HAL_DMA_Init+0x1d4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d027      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a5a      	ldr	r2, [pc, #360]	; (8005650 <HAL_DMA_Init+0x1d8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d022      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a59      	ldr	r2, [pc, #356]	; (8005654 <HAL_DMA_Init+0x1dc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d01d      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a57      	ldr	r2, [pc, #348]	; (8005658 <HAL_DMA_Init+0x1e0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d018      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a56      	ldr	r2, [pc, #344]	; (800565c <HAL_DMA_Init+0x1e4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d013      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a54      	ldr	r2, [pc, #336]	; (8005660 <HAL_DMA_Init+0x1e8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00e      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a53      	ldr	r2, [pc, #332]	; (8005664 <HAL_DMA_Init+0x1ec>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d009      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a51      	ldr	r2, [pc, #324]	; (8005668 <HAL_DMA_Init+0x1f0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <HAL_DMA_Init+0xb8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a50      	ldr	r2, [pc, #320]	; (800566c <HAL_DMA_Init+0x1f4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d101      	bne.n	8005534 <HAL_DMA_Init+0xbc>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <HAL_DMA_Init+0xbe>
 8005534:	2300      	movs	r3, #0
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 813c 	beq.w	80057b4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a37      	ldr	r2, [pc, #220]	; (8005630 <HAL_DMA_Init+0x1b8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d04a      	beq.n	80055ec <HAL_DMA_Init+0x174>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a36      	ldr	r2, [pc, #216]	; (8005634 <HAL_DMA_Init+0x1bc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d045      	beq.n	80055ec <HAL_DMA_Init+0x174>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a34      	ldr	r2, [pc, #208]	; (8005638 <HAL_DMA_Init+0x1c0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d040      	beq.n	80055ec <HAL_DMA_Init+0x174>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a33      	ldr	r2, [pc, #204]	; (800563c <HAL_DMA_Init+0x1c4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d03b      	beq.n	80055ec <HAL_DMA_Init+0x174>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a31      	ldr	r2, [pc, #196]	; (8005640 <HAL_DMA_Init+0x1c8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d036      	beq.n	80055ec <HAL_DMA_Init+0x174>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a30      	ldr	r2, [pc, #192]	; (8005644 <HAL_DMA_Init+0x1cc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d031      	beq.n	80055ec <HAL_DMA_Init+0x174>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a2e      	ldr	r2, [pc, #184]	; (8005648 <HAL_DMA_Init+0x1d0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d02c      	beq.n	80055ec <HAL_DMA_Init+0x174>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a2d      	ldr	r2, [pc, #180]	; (800564c <HAL_DMA_Init+0x1d4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d027      	beq.n	80055ec <HAL_DMA_Init+0x174>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a2b      	ldr	r2, [pc, #172]	; (8005650 <HAL_DMA_Init+0x1d8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d022      	beq.n	80055ec <HAL_DMA_Init+0x174>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a2a      	ldr	r2, [pc, #168]	; (8005654 <HAL_DMA_Init+0x1dc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d01d      	beq.n	80055ec <HAL_DMA_Init+0x174>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a28      	ldr	r2, [pc, #160]	; (8005658 <HAL_DMA_Init+0x1e0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d018      	beq.n	80055ec <HAL_DMA_Init+0x174>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a27      	ldr	r2, [pc, #156]	; (800565c <HAL_DMA_Init+0x1e4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <HAL_DMA_Init+0x174>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a25      	ldr	r2, [pc, #148]	; (8005660 <HAL_DMA_Init+0x1e8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00e      	beq.n	80055ec <HAL_DMA_Init+0x174>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a24      	ldr	r2, [pc, #144]	; (8005664 <HAL_DMA_Init+0x1ec>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_DMA_Init+0x174>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a22      	ldr	r2, [pc, #136]	; (8005668 <HAL_DMA_Init+0x1f0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <HAL_DMA_Init+0x174>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a21      	ldr	r2, [pc, #132]	; (800566c <HAL_DMA_Init+0x1f4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d108      	bne.n	80055fe <HAL_DMA_Init+0x186>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0201 	bic.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	e007      	b.n	800560e <HAL_DMA_Init+0x196>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800560e:	e02f      	b.n	8005670 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005610:	f7fe f90a 	bl	8003828 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b05      	cmp	r3, #5
 800561c:	d928      	bls.n	8005670 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2203      	movs	r2, #3
 8005628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e2af      	b.n	8005b90 <HAL_DMA_Init+0x718>
 8005630:	40020010 	.word	0x40020010
 8005634:	40020028 	.word	0x40020028
 8005638:	40020040 	.word	0x40020040
 800563c:	40020058 	.word	0x40020058
 8005640:	40020070 	.word	0x40020070
 8005644:	40020088 	.word	0x40020088
 8005648:	400200a0 	.word	0x400200a0
 800564c:	400200b8 	.word	0x400200b8
 8005650:	40020410 	.word	0x40020410
 8005654:	40020428 	.word	0x40020428
 8005658:	40020440 	.word	0x40020440
 800565c:	40020458 	.word	0x40020458
 8005660:	40020470 	.word	0x40020470
 8005664:	40020488 	.word	0x40020488
 8005668:	400204a0 	.word	0x400204a0
 800566c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1c8      	bne.n	8005610 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4b73      	ldr	r3, [pc, #460]	; (8005858 <HAL_DMA_Init+0x3e0>)
 800568a:	4013      	ands	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005696:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d107      	bne.n	80056d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	4313      	orrs	r3, r2
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b28      	cmp	r3, #40	; 0x28
 80056da:	d903      	bls.n	80056e4 <HAL_DMA_Init+0x26c>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b2e      	cmp	r3, #46	; 0x2e
 80056e2:	d91f      	bls.n	8005724 <HAL_DMA_Init+0x2ac>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b3e      	cmp	r3, #62	; 0x3e
 80056ea:	d903      	bls.n	80056f4 <HAL_DMA_Init+0x27c>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b42      	cmp	r3, #66	; 0x42
 80056f2:	d917      	bls.n	8005724 <HAL_DMA_Init+0x2ac>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b46      	cmp	r3, #70	; 0x46
 80056fa:	d903      	bls.n	8005704 <HAL_DMA_Init+0x28c>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b48      	cmp	r3, #72	; 0x48
 8005702:	d90f      	bls.n	8005724 <HAL_DMA_Init+0x2ac>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b4e      	cmp	r3, #78	; 0x4e
 800570a:	d903      	bls.n	8005714 <HAL_DMA_Init+0x29c>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b52      	cmp	r3, #82	; 0x52
 8005712:	d907      	bls.n	8005724 <HAL_DMA_Init+0x2ac>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b73      	cmp	r3, #115	; 0x73
 800571a:	d905      	bls.n	8005728 <HAL_DMA_Init+0x2b0>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b77      	cmp	r3, #119	; 0x77
 8005722:	d801      	bhi.n	8005728 <HAL_DMA_Init+0x2b0>
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <HAL_DMA_Init+0x2b2>
 8005728:	2300      	movs	r3, #0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005734:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f023 0307 	bic.w	r3, r3, #7
 800574c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	2b04      	cmp	r3, #4
 800575e:	d117      	bne.n	8005790 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00e      	beq.n	8005790 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f002 fbd6 	bl	8007f24 <DMA_CheckFifoParam>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d008      	beq.n	8005790 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2240      	movs	r2, #64	; 0x40
 8005782:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e1ff      	b.n	8005b90 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f002 fb11 	bl	8007dc0 <DMA_CalcBaseAndBitshift>
 800579e:	4603      	mov	r3, r0
 80057a0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	223f      	movs	r2, #63	; 0x3f
 80057ac:	409a      	lsls	r2, r3
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	609a      	str	r2, [r3, #8]
 80057b2:	e0fe      	b.n	80059b2 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a28      	ldr	r2, [pc, #160]	; (800585c <HAL_DMA_Init+0x3e4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d04a      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a27      	ldr	r2, [pc, #156]	; (8005860 <HAL_DMA_Init+0x3e8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d045      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a25      	ldr	r2, [pc, #148]	; (8005864 <HAL_DMA_Init+0x3ec>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d040      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a24      	ldr	r2, [pc, #144]	; (8005868 <HAL_DMA_Init+0x3f0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d03b      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a22      	ldr	r2, [pc, #136]	; (800586c <HAL_DMA_Init+0x3f4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d036      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a21      	ldr	r2, [pc, #132]	; (8005870 <HAL_DMA_Init+0x3f8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d031      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1f      	ldr	r2, [pc, #124]	; (8005874 <HAL_DMA_Init+0x3fc>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d02c      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <HAL_DMA_Init+0x400>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d027      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1c      	ldr	r2, [pc, #112]	; (800587c <HAL_DMA_Init+0x404>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d022      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a1b      	ldr	r2, [pc, #108]	; (8005880 <HAL_DMA_Init+0x408>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d01d      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a19      	ldr	r2, [pc, #100]	; (8005884 <HAL_DMA_Init+0x40c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d018      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a18      	ldr	r2, [pc, #96]	; (8005888 <HAL_DMA_Init+0x410>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a16      	ldr	r2, [pc, #88]	; (800588c <HAL_DMA_Init+0x414>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a15      	ldr	r2, [pc, #84]	; (8005890 <HAL_DMA_Init+0x418>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a13      	ldr	r2, [pc, #76]	; (8005894 <HAL_DMA_Init+0x41c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_DMA_Init+0x3dc>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a12      	ldr	r2, [pc, #72]	; (8005898 <HAL_DMA_Init+0x420>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d123      	bne.n	800589c <HAL_DMA_Init+0x424>
 8005854:	2301      	movs	r3, #1
 8005856:	e022      	b.n	800589e <HAL_DMA_Init+0x426>
 8005858:	fe10803f 	.word	0xfe10803f
 800585c:	48022c08 	.word	0x48022c08
 8005860:	48022c1c 	.word	0x48022c1c
 8005864:	48022c30 	.word	0x48022c30
 8005868:	48022c44 	.word	0x48022c44
 800586c:	48022c58 	.word	0x48022c58
 8005870:	48022c6c 	.word	0x48022c6c
 8005874:	48022c80 	.word	0x48022c80
 8005878:	48022c94 	.word	0x48022c94
 800587c:	58025408 	.word	0x58025408
 8005880:	5802541c 	.word	0x5802541c
 8005884:	58025430 	.word	0x58025430
 8005888:	58025444 	.word	0x58025444
 800588c:	58025458 	.word	0x58025458
 8005890:	5802546c 	.word	0x5802546c
 8005894:	58025480 	.word	0x58025480
 8005898:	58025494 	.word	0x58025494
 800589c:	2300      	movs	r3, #0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d07e      	beq.n	80059a0 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a80      	ldr	r2, [pc, #512]	; (8005aa8 <HAL_DMA_Init+0x630>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d021      	beq.n	80058f0 <HAL_DMA_Init+0x478>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a7e      	ldr	r2, [pc, #504]	; (8005aac <HAL_DMA_Init+0x634>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d01c      	beq.n	80058f0 <HAL_DMA_Init+0x478>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a7d      	ldr	r2, [pc, #500]	; (8005ab0 <HAL_DMA_Init+0x638>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d017      	beq.n	80058f0 <HAL_DMA_Init+0x478>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a7b      	ldr	r2, [pc, #492]	; (8005ab4 <HAL_DMA_Init+0x63c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d012      	beq.n	80058f0 <HAL_DMA_Init+0x478>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a7a      	ldr	r2, [pc, #488]	; (8005ab8 <HAL_DMA_Init+0x640>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00d      	beq.n	80058f0 <HAL_DMA_Init+0x478>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a78      	ldr	r2, [pc, #480]	; (8005abc <HAL_DMA_Init+0x644>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d008      	beq.n	80058f0 <HAL_DMA_Init+0x478>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a77      	ldr	r2, [pc, #476]	; (8005ac0 <HAL_DMA_Init+0x648>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <HAL_DMA_Init+0x478>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a75      	ldr	r2, [pc, #468]	; (8005ac4 <HAL_DMA_Init+0x64c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4b6e      	ldr	r3, [pc, #440]	; (8005ac8 <HAL_DMA_Init+0x650>)
 800590e:	4013      	ands	r3, r2
 8005910:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d008      	beq.n	800592c <HAL_DMA_Init+0x4b4>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b80      	cmp	r3, #128	; 0x80
 8005920:	d102      	bne.n	8005928 <HAL_DMA_Init+0x4b0>
 8005922:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005926:	e002      	b.n	800592e <HAL_DMA_Init+0x4b6>
 8005928:	2300      	movs	r3, #0
 800592a:	e000      	b.n	800592e <HAL_DMA_Init+0x4b6>
 800592c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	68d2      	ldr	r2, [r2, #12]
 8005932:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005934:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800593c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005944:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800594c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005954:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800595c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	4b56      	ldr	r3, [pc, #344]	; (8005acc <HAL_DMA_Init+0x654>)
 8005974:	4413      	add	r3, r2
 8005976:	4a56      	ldr	r2, [pc, #344]	; (8005ad0 <HAL_DMA_Init+0x658>)
 8005978:	fba2 2303 	umull	r2, r3, r2, r3
 800597c:	091b      	lsrs	r3, r3, #4
 800597e:	009a      	lsls	r2, r3, #2
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f002 fa1b 	bl	8007dc0 <DMA_CalcBaseAndBitshift>
 800598a:	4603      	mov	r3, r0
 800598c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	2201      	movs	r2, #1
 8005998:	409a      	lsls	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	e008      	b.n	80059b2 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2240      	movs	r2, #64	; 0x40
 80059a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2203      	movs	r2, #3
 80059aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e0ee      	b.n	8005b90 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a47      	ldr	r2, [pc, #284]	; (8005ad4 <HAL_DMA_Init+0x65c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d072      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a45      	ldr	r2, [pc, #276]	; (8005ad8 <HAL_DMA_Init+0x660>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d06d      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a44      	ldr	r2, [pc, #272]	; (8005adc <HAL_DMA_Init+0x664>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d068      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a42      	ldr	r2, [pc, #264]	; (8005ae0 <HAL_DMA_Init+0x668>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d063      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a41      	ldr	r2, [pc, #260]	; (8005ae4 <HAL_DMA_Init+0x66c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d05e      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a3f      	ldr	r2, [pc, #252]	; (8005ae8 <HAL_DMA_Init+0x670>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d059      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a3e      	ldr	r2, [pc, #248]	; (8005aec <HAL_DMA_Init+0x674>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d054      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a3c      	ldr	r2, [pc, #240]	; (8005af0 <HAL_DMA_Init+0x678>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d04f      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a3b      	ldr	r2, [pc, #236]	; (8005af4 <HAL_DMA_Init+0x67c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d04a      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a39      	ldr	r2, [pc, #228]	; (8005af8 <HAL_DMA_Init+0x680>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d045      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a38      	ldr	r2, [pc, #224]	; (8005afc <HAL_DMA_Init+0x684>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d040      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a36      	ldr	r2, [pc, #216]	; (8005b00 <HAL_DMA_Init+0x688>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d03b      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a35      	ldr	r2, [pc, #212]	; (8005b04 <HAL_DMA_Init+0x68c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d036      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a33      	ldr	r2, [pc, #204]	; (8005b08 <HAL_DMA_Init+0x690>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d031      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a32      	ldr	r2, [pc, #200]	; (8005b0c <HAL_DMA_Init+0x694>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d02c      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a30      	ldr	r2, [pc, #192]	; (8005b10 <HAL_DMA_Init+0x698>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d027      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a14      	ldr	r2, [pc, #80]	; (8005aa8 <HAL_DMA_Init+0x630>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d022      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a12      	ldr	r2, [pc, #72]	; (8005aac <HAL_DMA_Init+0x634>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01d      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a11      	ldr	r2, [pc, #68]	; (8005ab0 <HAL_DMA_Init+0x638>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a0f      	ldr	r2, [pc, #60]	; (8005ab4 <HAL_DMA_Init+0x63c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a0e      	ldr	r2, [pc, #56]	; (8005ab8 <HAL_DMA_Init+0x640>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a0c      	ldr	r2, [pc, #48]	; (8005abc <HAL_DMA_Init+0x644>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a0b      	ldr	r2, [pc, #44]	; (8005ac0 <HAL_DMA_Init+0x648>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_DMA_Init+0x62a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <HAL_DMA_Init+0x64c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d138      	bne.n	8005b14 <HAL_DMA_Init+0x69c>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e037      	b.n	8005b16 <HAL_DMA_Init+0x69e>
 8005aa6:	bf00      	nop
 8005aa8:	58025408 	.word	0x58025408
 8005aac:	5802541c 	.word	0x5802541c
 8005ab0:	58025430 	.word	0x58025430
 8005ab4:	58025444 	.word	0x58025444
 8005ab8:	58025458 	.word	0x58025458
 8005abc:	5802546c 	.word	0x5802546c
 8005ac0:	58025480 	.word	0x58025480
 8005ac4:	58025494 	.word	0x58025494
 8005ac8:	fffe000f 	.word	0xfffe000f
 8005acc:	a7fdabf8 	.word	0xa7fdabf8
 8005ad0:	cccccccd 	.word	0xcccccccd
 8005ad4:	40020010 	.word	0x40020010
 8005ad8:	40020028 	.word	0x40020028
 8005adc:	40020040 	.word	0x40020040
 8005ae0:	40020058 	.word	0x40020058
 8005ae4:	40020070 	.word	0x40020070
 8005ae8:	40020088 	.word	0x40020088
 8005aec:	400200a0 	.word	0x400200a0
 8005af0:	400200b8 	.word	0x400200b8
 8005af4:	40020410 	.word	0x40020410
 8005af8:	40020428 	.word	0x40020428
 8005afc:	40020440 	.word	0x40020440
 8005b00:	40020458 	.word	0x40020458
 8005b04:	40020470 	.word	0x40020470
 8005b08:	40020488 	.word	0x40020488
 8005b0c:	400204a0 	.word	0x400204a0
 8005b10:	400204b8 	.word	0x400204b8
 8005b14:	2300      	movs	r3, #0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d032      	beq.n	8005b80 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f002 fa7e 	bl	800801c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b80      	cmp	r3, #128	; 0x80
 8005b26:	d102      	bne.n	8005b2e <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b42:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d010      	beq.n	8005b6e <HAL_DMA_Init+0x6f6>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d80c      	bhi.n	8005b6e <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f002 fafb 	bl	8008150 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b6a:	605a      	str	r2, [r3, #4]
 8005b6c:	e008      	b.n	8005b80 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e226      	b.n	8006002 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_DMA_Start_IT+0x2a>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e21f      	b.n	8006002 <HAL_DMA_Start_IT+0x46a>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	f040 820a 	bne.w	8005fec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a68      	ldr	r2, [pc, #416]	; (8005d8c <HAL_DMA_Start_IT+0x1f4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d04a      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a66      	ldr	r2, [pc, #408]	; (8005d90 <HAL_DMA_Start_IT+0x1f8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d045      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a65      	ldr	r2, [pc, #404]	; (8005d94 <HAL_DMA_Start_IT+0x1fc>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d040      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a63      	ldr	r2, [pc, #396]	; (8005d98 <HAL_DMA_Start_IT+0x200>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d03b      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a62      	ldr	r2, [pc, #392]	; (8005d9c <HAL_DMA_Start_IT+0x204>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d036      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a60      	ldr	r2, [pc, #384]	; (8005da0 <HAL_DMA_Start_IT+0x208>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d031      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a5f      	ldr	r2, [pc, #380]	; (8005da4 <HAL_DMA_Start_IT+0x20c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d02c      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a5d      	ldr	r2, [pc, #372]	; (8005da8 <HAL_DMA_Start_IT+0x210>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d027      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a5c      	ldr	r2, [pc, #368]	; (8005dac <HAL_DMA_Start_IT+0x214>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d022      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a5a      	ldr	r2, [pc, #360]	; (8005db0 <HAL_DMA_Start_IT+0x218>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d01d      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a59      	ldr	r2, [pc, #356]	; (8005db4 <HAL_DMA_Start_IT+0x21c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d018      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a57      	ldr	r2, [pc, #348]	; (8005db8 <HAL_DMA_Start_IT+0x220>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a56      	ldr	r2, [pc, #344]	; (8005dbc <HAL_DMA_Start_IT+0x224>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00e      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a54      	ldr	r2, [pc, #336]	; (8005dc0 <HAL_DMA_Start_IT+0x228>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d009      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a53      	ldr	r2, [pc, #332]	; (8005dc4 <HAL_DMA_Start_IT+0x22c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d004      	beq.n	8005c86 <HAL_DMA_Start_IT+0xee>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a51      	ldr	r2, [pc, #324]	; (8005dc8 <HAL_DMA_Start_IT+0x230>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d108      	bne.n	8005c98 <HAL_DMA_Start_IT+0x100>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e007      	b.n	8005ca8 <HAL_DMA_Start_IT+0x110>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	68b9      	ldr	r1, [r7, #8]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f001 fea2 	bl	80079f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a34      	ldr	r2, [pc, #208]	; (8005d8c <HAL_DMA_Start_IT+0x1f4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d04a      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a33      	ldr	r2, [pc, #204]	; (8005d90 <HAL_DMA_Start_IT+0x1f8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d045      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a31      	ldr	r2, [pc, #196]	; (8005d94 <HAL_DMA_Start_IT+0x1fc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d040      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a30      	ldr	r2, [pc, #192]	; (8005d98 <HAL_DMA_Start_IT+0x200>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d03b      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a2e      	ldr	r2, [pc, #184]	; (8005d9c <HAL_DMA_Start_IT+0x204>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d036      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a2d      	ldr	r2, [pc, #180]	; (8005da0 <HAL_DMA_Start_IT+0x208>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d031      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a2b      	ldr	r2, [pc, #172]	; (8005da4 <HAL_DMA_Start_IT+0x20c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d02c      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a2a      	ldr	r2, [pc, #168]	; (8005da8 <HAL_DMA_Start_IT+0x210>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d027      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a28      	ldr	r2, [pc, #160]	; (8005dac <HAL_DMA_Start_IT+0x214>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d022      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a27      	ldr	r2, [pc, #156]	; (8005db0 <HAL_DMA_Start_IT+0x218>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d01d      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a25      	ldr	r2, [pc, #148]	; (8005db4 <HAL_DMA_Start_IT+0x21c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d018      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a24      	ldr	r2, [pc, #144]	; (8005db8 <HAL_DMA_Start_IT+0x220>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d013      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a22      	ldr	r2, [pc, #136]	; (8005dbc <HAL_DMA_Start_IT+0x224>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00e      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a21      	ldr	r2, [pc, #132]	; (8005dc0 <HAL_DMA_Start_IT+0x228>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d009      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1f      	ldr	r2, [pc, #124]	; (8005dc4 <HAL_DMA_Start_IT+0x22c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <HAL_DMA_Start_IT+0x1bc>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1e      	ldr	r2, [pc, #120]	; (8005dc8 <HAL_DMA_Start_IT+0x230>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d101      	bne.n	8005d58 <HAL_DMA_Start_IT+0x1c0>
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <HAL_DMA_Start_IT+0x1c2>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d036      	beq.n	8005dcc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f023 021e 	bic.w	r2, r3, #30
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0216 	orr.w	r2, r2, #22
 8005d70:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d03e      	beq.n	8005df8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f042 0208 	orr.w	r2, r2, #8
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e035      	b.n	8005df8 <HAL_DMA_Start_IT+0x260>
 8005d8c:	40020010 	.word	0x40020010
 8005d90:	40020028 	.word	0x40020028
 8005d94:	40020040 	.word	0x40020040
 8005d98:	40020058 	.word	0x40020058
 8005d9c:	40020070 	.word	0x40020070
 8005da0:	40020088 	.word	0x40020088
 8005da4:	400200a0 	.word	0x400200a0
 8005da8:	400200b8 	.word	0x400200b8
 8005dac:	40020410 	.word	0x40020410
 8005db0:	40020428 	.word	0x40020428
 8005db4:	40020440 	.word	0x40020440
 8005db8:	40020458 	.word	0x40020458
 8005dbc:	40020470 	.word	0x40020470
 8005dc0:	40020488 	.word	0x40020488
 8005dc4:	400204a0 	.word	0x400204a0
 8005dc8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 020e 	bic.w	r2, r3, #14
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 020a 	orr.w	r2, r2, #10
 8005dde:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d007      	beq.n	8005df8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0204 	orr.w	r2, r2, #4
 8005df6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a83      	ldr	r2, [pc, #524]	; (800600c <HAL_DMA_Start_IT+0x474>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d072      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a82      	ldr	r2, [pc, #520]	; (8006010 <HAL_DMA_Start_IT+0x478>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d06d      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a80      	ldr	r2, [pc, #512]	; (8006014 <HAL_DMA_Start_IT+0x47c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d068      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a7f      	ldr	r2, [pc, #508]	; (8006018 <HAL_DMA_Start_IT+0x480>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d063      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a7d      	ldr	r2, [pc, #500]	; (800601c <HAL_DMA_Start_IT+0x484>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d05e      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a7c      	ldr	r2, [pc, #496]	; (8006020 <HAL_DMA_Start_IT+0x488>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d059      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a7a      	ldr	r2, [pc, #488]	; (8006024 <HAL_DMA_Start_IT+0x48c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d054      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a79      	ldr	r2, [pc, #484]	; (8006028 <HAL_DMA_Start_IT+0x490>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d04f      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a77      	ldr	r2, [pc, #476]	; (800602c <HAL_DMA_Start_IT+0x494>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d04a      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a76      	ldr	r2, [pc, #472]	; (8006030 <HAL_DMA_Start_IT+0x498>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d045      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a74      	ldr	r2, [pc, #464]	; (8006034 <HAL_DMA_Start_IT+0x49c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d040      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a73      	ldr	r2, [pc, #460]	; (8006038 <HAL_DMA_Start_IT+0x4a0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d03b      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a71      	ldr	r2, [pc, #452]	; (800603c <HAL_DMA_Start_IT+0x4a4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d036      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a70      	ldr	r2, [pc, #448]	; (8006040 <HAL_DMA_Start_IT+0x4a8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d031      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a6e      	ldr	r2, [pc, #440]	; (8006044 <HAL_DMA_Start_IT+0x4ac>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d02c      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6d      	ldr	r2, [pc, #436]	; (8006048 <HAL_DMA_Start_IT+0x4b0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d027      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a6b      	ldr	r2, [pc, #428]	; (800604c <HAL_DMA_Start_IT+0x4b4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d022      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a6a      	ldr	r2, [pc, #424]	; (8006050 <HAL_DMA_Start_IT+0x4b8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d01d      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a68      	ldr	r2, [pc, #416]	; (8006054 <HAL_DMA_Start_IT+0x4bc>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d018      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a67      	ldr	r2, [pc, #412]	; (8006058 <HAL_DMA_Start_IT+0x4c0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d013      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a65      	ldr	r2, [pc, #404]	; (800605c <HAL_DMA_Start_IT+0x4c4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00e      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a64      	ldr	r2, [pc, #400]	; (8006060 <HAL_DMA_Start_IT+0x4c8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d009      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a62      	ldr	r2, [pc, #392]	; (8006064 <HAL_DMA_Start_IT+0x4cc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <HAL_DMA_Start_IT+0x350>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a61      	ldr	r2, [pc, #388]	; (8006068 <HAL_DMA_Start_IT+0x4d0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d101      	bne.n	8005eec <HAL_DMA_Start_IT+0x354>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e000      	b.n	8005eee <HAL_DMA_Start_IT+0x356>
 8005eec:	2300      	movs	r3, #0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d01a      	beq.n	8005f28 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d007      	beq.n	8005f10 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f0e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d007      	beq.n	8005f28 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f26:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a37      	ldr	r2, [pc, #220]	; (800600c <HAL_DMA_Start_IT+0x474>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d04a      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a36      	ldr	r2, [pc, #216]	; (8006010 <HAL_DMA_Start_IT+0x478>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d045      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a34      	ldr	r2, [pc, #208]	; (8006014 <HAL_DMA_Start_IT+0x47c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d040      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a33      	ldr	r2, [pc, #204]	; (8006018 <HAL_DMA_Start_IT+0x480>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d03b      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a31      	ldr	r2, [pc, #196]	; (800601c <HAL_DMA_Start_IT+0x484>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d036      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a30      	ldr	r2, [pc, #192]	; (8006020 <HAL_DMA_Start_IT+0x488>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d031      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a2e      	ldr	r2, [pc, #184]	; (8006024 <HAL_DMA_Start_IT+0x48c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d02c      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a2d      	ldr	r2, [pc, #180]	; (8006028 <HAL_DMA_Start_IT+0x490>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d027      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a2b      	ldr	r2, [pc, #172]	; (800602c <HAL_DMA_Start_IT+0x494>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d022      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a2a      	ldr	r2, [pc, #168]	; (8006030 <HAL_DMA_Start_IT+0x498>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d01d      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a28      	ldr	r2, [pc, #160]	; (8006034 <HAL_DMA_Start_IT+0x49c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d018      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a27      	ldr	r2, [pc, #156]	; (8006038 <HAL_DMA_Start_IT+0x4a0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d013      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a25      	ldr	r2, [pc, #148]	; (800603c <HAL_DMA_Start_IT+0x4a4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00e      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a24      	ldr	r2, [pc, #144]	; (8006040 <HAL_DMA_Start_IT+0x4a8>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d009      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a22      	ldr	r2, [pc, #136]	; (8006044 <HAL_DMA_Start_IT+0x4ac>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d004      	beq.n	8005fc8 <HAL_DMA_Start_IT+0x430>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a21      	ldr	r2, [pc, #132]	; (8006048 <HAL_DMA_Start_IT+0x4b0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d108      	bne.n	8005fda <HAL_DMA_Start_IT+0x442>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	e012      	b.n	8006000 <HAL_DMA_Start_IT+0x468>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0201 	orr.w	r2, r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	e009      	b.n	8006000 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ff2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006000:	7dfb      	ldrb	r3, [r7, #23]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40020010 	.word	0x40020010
 8006010:	40020028 	.word	0x40020028
 8006014:	40020040 	.word	0x40020040
 8006018:	40020058 	.word	0x40020058
 800601c:	40020070 	.word	0x40020070
 8006020:	40020088 	.word	0x40020088
 8006024:	400200a0 	.word	0x400200a0
 8006028:	400200b8 	.word	0x400200b8
 800602c:	40020410 	.word	0x40020410
 8006030:	40020428 	.word	0x40020428
 8006034:	40020440 	.word	0x40020440
 8006038:	40020458 	.word	0x40020458
 800603c:	40020470 	.word	0x40020470
 8006040:	40020488 	.word	0x40020488
 8006044:	400204a0 	.word	0x400204a0
 8006048:	400204b8 	.word	0x400204b8
 800604c:	58025408 	.word	0x58025408
 8006050:	5802541c 	.word	0x5802541c
 8006054:	58025430 	.word	0x58025430
 8006058:	58025444 	.word	0x58025444
 800605c:	58025458 	.word	0x58025458
 8006060:	5802546c 	.word	0x5802546c
 8006064:	58025480 	.word	0x58025480
 8006068:	58025494 	.word	0x58025494

0800606c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006074:	f7fd fbd8 	bl	8003828 <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e2dc      	b.n	800663e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d008      	beq.n	80060a2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2280      	movs	r2, #128	; 0x80
 8006094:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e2cd      	b.n	800663e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a76      	ldr	r2, [pc, #472]	; (8006280 <HAL_DMA_Abort+0x214>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d04a      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a74      	ldr	r2, [pc, #464]	; (8006284 <HAL_DMA_Abort+0x218>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d045      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a73      	ldr	r2, [pc, #460]	; (8006288 <HAL_DMA_Abort+0x21c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d040      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a71      	ldr	r2, [pc, #452]	; (800628c <HAL_DMA_Abort+0x220>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d03b      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a70      	ldr	r2, [pc, #448]	; (8006290 <HAL_DMA_Abort+0x224>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d036      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a6e      	ldr	r2, [pc, #440]	; (8006294 <HAL_DMA_Abort+0x228>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d031      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a6d      	ldr	r2, [pc, #436]	; (8006298 <HAL_DMA_Abort+0x22c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d02c      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a6b      	ldr	r2, [pc, #428]	; (800629c <HAL_DMA_Abort+0x230>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d027      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a6a      	ldr	r2, [pc, #424]	; (80062a0 <HAL_DMA_Abort+0x234>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d022      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a68      	ldr	r2, [pc, #416]	; (80062a4 <HAL_DMA_Abort+0x238>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01d      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a67      	ldr	r2, [pc, #412]	; (80062a8 <HAL_DMA_Abort+0x23c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d018      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a65      	ldr	r2, [pc, #404]	; (80062ac <HAL_DMA_Abort+0x240>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d013      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a64      	ldr	r2, [pc, #400]	; (80062b0 <HAL_DMA_Abort+0x244>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00e      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a62      	ldr	r2, [pc, #392]	; (80062b4 <HAL_DMA_Abort+0x248>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d009      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a61      	ldr	r2, [pc, #388]	; (80062b8 <HAL_DMA_Abort+0x24c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d004      	beq.n	8006142 <HAL_DMA_Abort+0xd6>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a5f      	ldr	r2, [pc, #380]	; (80062bc <HAL_DMA_Abort+0x250>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d101      	bne.n	8006146 <HAL_DMA_Abort+0xda>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <HAL_DMA_Abort+0xdc>
 8006146:	2300      	movs	r3, #0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d013      	beq.n	8006174 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 021e 	bic.w	r2, r2, #30
 800615a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695a      	ldr	r2, [r3, #20]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800616a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	e00a      	b.n	800618a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 020e 	bic.w	r2, r2, #14
 8006182:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a3c      	ldr	r2, [pc, #240]	; (8006280 <HAL_DMA_Abort+0x214>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d072      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a3a      	ldr	r2, [pc, #232]	; (8006284 <HAL_DMA_Abort+0x218>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d06d      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a39      	ldr	r2, [pc, #228]	; (8006288 <HAL_DMA_Abort+0x21c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d068      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a37      	ldr	r2, [pc, #220]	; (800628c <HAL_DMA_Abort+0x220>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d063      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a36      	ldr	r2, [pc, #216]	; (8006290 <HAL_DMA_Abort+0x224>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d05e      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a34      	ldr	r2, [pc, #208]	; (8006294 <HAL_DMA_Abort+0x228>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d059      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a33      	ldr	r2, [pc, #204]	; (8006298 <HAL_DMA_Abort+0x22c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d054      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a31      	ldr	r2, [pc, #196]	; (800629c <HAL_DMA_Abort+0x230>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d04f      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a30      	ldr	r2, [pc, #192]	; (80062a0 <HAL_DMA_Abort+0x234>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d04a      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a2e      	ldr	r2, [pc, #184]	; (80062a4 <HAL_DMA_Abort+0x238>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d045      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a2d      	ldr	r2, [pc, #180]	; (80062a8 <HAL_DMA_Abort+0x23c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d040      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a2b      	ldr	r2, [pc, #172]	; (80062ac <HAL_DMA_Abort+0x240>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d03b      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a2a      	ldr	r2, [pc, #168]	; (80062b0 <HAL_DMA_Abort+0x244>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d036      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a28      	ldr	r2, [pc, #160]	; (80062b4 <HAL_DMA_Abort+0x248>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d031      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a27      	ldr	r2, [pc, #156]	; (80062b8 <HAL_DMA_Abort+0x24c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d02c      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a25      	ldr	r2, [pc, #148]	; (80062bc <HAL_DMA_Abort+0x250>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d027      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a24      	ldr	r2, [pc, #144]	; (80062c0 <HAL_DMA_Abort+0x254>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d022      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a22      	ldr	r2, [pc, #136]	; (80062c4 <HAL_DMA_Abort+0x258>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d01d      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a21      	ldr	r2, [pc, #132]	; (80062c8 <HAL_DMA_Abort+0x25c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d018      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a1f      	ldr	r2, [pc, #124]	; (80062cc <HAL_DMA_Abort+0x260>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d013      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1e      	ldr	r2, [pc, #120]	; (80062d0 <HAL_DMA_Abort+0x264>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00e      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <HAL_DMA_Abort+0x268>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d009      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1b      	ldr	r2, [pc, #108]	; (80062d8 <HAL_DMA_Abort+0x26c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d004      	beq.n	800627a <HAL_DMA_Abort+0x20e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a19      	ldr	r2, [pc, #100]	; (80062dc <HAL_DMA_Abort+0x270>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d132      	bne.n	80062e0 <HAL_DMA_Abort+0x274>
 800627a:	2301      	movs	r3, #1
 800627c:	e031      	b.n	80062e2 <HAL_DMA_Abort+0x276>
 800627e:	bf00      	nop
 8006280:	40020010 	.word	0x40020010
 8006284:	40020028 	.word	0x40020028
 8006288:	40020040 	.word	0x40020040
 800628c:	40020058 	.word	0x40020058
 8006290:	40020070 	.word	0x40020070
 8006294:	40020088 	.word	0x40020088
 8006298:	400200a0 	.word	0x400200a0
 800629c:	400200b8 	.word	0x400200b8
 80062a0:	40020410 	.word	0x40020410
 80062a4:	40020428 	.word	0x40020428
 80062a8:	40020440 	.word	0x40020440
 80062ac:	40020458 	.word	0x40020458
 80062b0:	40020470 	.word	0x40020470
 80062b4:	40020488 	.word	0x40020488
 80062b8:	400204a0 	.word	0x400204a0
 80062bc:	400204b8 	.word	0x400204b8
 80062c0:	58025408 	.word	0x58025408
 80062c4:	5802541c 	.word	0x5802541c
 80062c8:	58025430 	.word	0x58025430
 80062cc:	58025444 	.word	0x58025444
 80062d0:	58025458 	.word	0x58025458
 80062d4:	5802546c 	.word	0x5802546c
 80062d8:	58025480 	.word	0x58025480
 80062dc:	58025494 	.word	0x58025494
 80062e0:	2300      	movs	r3, #0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a6d      	ldr	r2, [pc, #436]	; (80064b0 <HAL_DMA_Abort+0x444>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d04a      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a6b      	ldr	r2, [pc, #428]	; (80064b4 <HAL_DMA_Abort+0x448>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d045      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a6a      	ldr	r2, [pc, #424]	; (80064b8 <HAL_DMA_Abort+0x44c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d040      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a68      	ldr	r2, [pc, #416]	; (80064bc <HAL_DMA_Abort+0x450>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d03b      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a67      	ldr	r2, [pc, #412]	; (80064c0 <HAL_DMA_Abort+0x454>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d036      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a65      	ldr	r2, [pc, #404]	; (80064c4 <HAL_DMA_Abort+0x458>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d031      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a64      	ldr	r2, [pc, #400]	; (80064c8 <HAL_DMA_Abort+0x45c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d02c      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a62      	ldr	r2, [pc, #392]	; (80064cc <HAL_DMA_Abort+0x460>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d027      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a61      	ldr	r2, [pc, #388]	; (80064d0 <HAL_DMA_Abort+0x464>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d022      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a5f      	ldr	r2, [pc, #380]	; (80064d4 <HAL_DMA_Abort+0x468>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d01d      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a5e      	ldr	r2, [pc, #376]	; (80064d8 <HAL_DMA_Abort+0x46c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d018      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a5c      	ldr	r2, [pc, #368]	; (80064dc <HAL_DMA_Abort+0x470>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d013      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a5b      	ldr	r2, [pc, #364]	; (80064e0 <HAL_DMA_Abort+0x474>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00e      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a59      	ldr	r2, [pc, #356]	; (80064e4 <HAL_DMA_Abort+0x478>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d009      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a58      	ldr	r2, [pc, #352]	; (80064e8 <HAL_DMA_Abort+0x47c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d004      	beq.n	8006396 <HAL_DMA_Abort+0x32a>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a56      	ldr	r2, [pc, #344]	; (80064ec <HAL_DMA_Abort+0x480>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d108      	bne.n	80063a8 <HAL_DMA_Abort+0x33c>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0201 	bic.w	r2, r2, #1
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	e007      	b.n	80063b8 <HAL_DMA_Abort+0x34c>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0201 	bic.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80063b8:	e013      	b.n	80063e2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063ba:	f7fd fa35 	bl	8003828 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b05      	cmp	r3, #5
 80063c6:	d90c      	bls.n	80063e2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2203      	movs	r2, #3
 80063d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e12d      	b.n	800663e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e5      	bne.n	80063ba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a2f      	ldr	r2, [pc, #188]	; (80064b0 <HAL_DMA_Abort+0x444>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d04a      	beq.n	800648e <HAL_DMA_Abort+0x422>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a2d      	ldr	r2, [pc, #180]	; (80064b4 <HAL_DMA_Abort+0x448>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d045      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a2c      	ldr	r2, [pc, #176]	; (80064b8 <HAL_DMA_Abort+0x44c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d040      	beq.n	800648e <HAL_DMA_Abort+0x422>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a2a      	ldr	r2, [pc, #168]	; (80064bc <HAL_DMA_Abort+0x450>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d03b      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a29      	ldr	r2, [pc, #164]	; (80064c0 <HAL_DMA_Abort+0x454>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d036      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a27      	ldr	r2, [pc, #156]	; (80064c4 <HAL_DMA_Abort+0x458>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d031      	beq.n	800648e <HAL_DMA_Abort+0x422>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a26      	ldr	r2, [pc, #152]	; (80064c8 <HAL_DMA_Abort+0x45c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d02c      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a24      	ldr	r2, [pc, #144]	; (80064cc <HAL_DMA_Abort+0x460>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d027      	beq.n	800648e <HAL_DMA_Abort+0x422>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a23      	ldr	r2, [pc, #140]	; (80064d0 <HAL_DMA_Abort+0x464>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d022      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a21      	ldr	r2, [pc, #132]	; (80064d4 <HAL_DMA_Abort+0x468>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d01d      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a20      	ldr	r2, [pc, #128]	; (80064d8 <HAL_DMA_Abort+0x46c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d018      	beq.n	800648e <HAL_DMA_Abort+0x422>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1e      	ldr	r2, [pc, #120]	; (80064dc <HAL_DMA_Abort+0x470>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d013      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1d      	ldr	r2, [pc, #116]	; (80064e0 <HAL_DMA_Abort+0x474>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00e      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1b      	ldr	r2, [pc, #108]	; (80064e4 <HAL_DMA_Abort+0x478>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d009      	beq.n	800648e <HAL_DMA_Abort+0x422>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1a      	ldr	r2, [pc, #104]	; (80064e8 <HAL_DMA_Abort+0x47c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d004      	beq.n	800648e <HAL_DMA_Abort+0x422>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a18      	ldr	r2, [pc, #96]	; (80064ec <HAL_DMA_Abort+0x480>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d101      	bne.n	8006492 <HAL_DMA_Abort+0x426>
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <HAL_DMA_Abort+0x428>
 8006492:	2300      	movs	r3, #0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d02b      	beq.n	80064f0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	223f      	movs	r2, #63	; 0x3f
 80064a8:	409a      	lsls	r2, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	609a      	str	r2, [r3, #8]
 80064ae:	e02a      	b.n	8006506 <HAL_DMA_Abort+0x49a>
 80064b0:	40020010 	.word	0x40020010
 80064b4:	40020028 	.word	0x40020028
 80064b8:	40020040 	.word	0x40020040
 80064bc:	40020058 	.word	0x40020058
 80064c0:	40020070 	.word	0x40020070
 80064c4:	40020088 	.word	0x40020088
 80064c8:	400200a0 	.word	0x400200a0
 80064cc:	400200b8 	.word	0x400200b8
 80064d0:	40020410 	.word	0x40020410
 80064d4:	40020428 	.word	0x40020428
 80064d8:	40020440 	.word	0x40020440
 80064dc:	40020458 	.word	0x40020458
 80064e0:	40020470 	.word	0x40020470
 80064e4:	40020488 	.word	0x40020488
 80064e8:	400204a0 	.word	0x400204a0
 80064ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	2201      	movs	r2, #1
 8006500:	409a      	lsls	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a4f      	ldr	r2, [pc, #316]	; (8006648 <HAL_DMA_Abort+0x5dc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d072      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a4d      	ldr	r2, [pc, #308]	; (800664c <HAL_DMA_Abort+0x5e0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d06d      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a4c      	ldr	r2, [pc, #304]	; (8006650 <HAL_DMA_Abort+0x5e4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d068      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a4a      	ldr	r2, [pc, #296]	; (8006654 <HAL_DMA_Abort+0x5e8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d063      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a49      	ldr	r2, [pc, #292]	; (8006658 <HAL_DMA_Abort+0x5ec>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d05e      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a47      	ldr	r2, [pc, #284]	; (800665c <HAL_DMA_Abort+0x5f0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d059      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a46      	ldr	r2, [pc, #280]	; (8006660 <HAL_DMA_Abort+0x5f4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d054      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a44      	ldr	r2, [pc, #272]	; (8006664 <HAL_DMA_Abort+0x5f8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d04f      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a43      	ldr	r2, [pc, #268]	; (8006668 <HAL_DMA_Abort+0x5fc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d04a      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a41      	ldr	r2, [pc, #260]	; (800666c <HAL_DMA_Abort+0x600>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d045      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a40      	ldr	r2, [pc, #256]	; (8006670 <HAL_DMA_Abort+0x604>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d040      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a3e      	ldr	r2, [pc, #248]	; (8006674 <HAL_DMA_Abort+0x608>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d03b      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a3d      	ldr	r2, [pc, #244]	; (8006678 <HAL_DMA_Abort+0x60c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d036      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a3b      	ldr	r2, [pc, #236]	; (800667c <HAL_DMA_Abort+0x610>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d031      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a3a      	ldr	r2, [pc, #232]	; (8006680 <HAL_DMA_Abort+0x614>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d02c      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a38      	ldr	r2, [pc, #224]	; (8006684 <HAL_DMA_Abort+0x618>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d027      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a37      	ldr	r2, [pc, #220]	; (8006688 <HAL_DMA_Abort+0x61c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d022      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a35      	ldr	r2, [pc, #212]	; (800668c <HAL_DMA_Abort+0x620>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d01d      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a34      	ldr	r2, [pc, #208]	; (8006690 <HAL_DMA_Abort+0x624>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d018      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a32      	ldr	r2, [pc, #200]	; (8006694 <HAL_DMA_Abort+0x628>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d013      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a31      	ldr	r2, [pc, #196]	; (8006698 <HAL_DMA_Abort+0x62c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00e      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a2f      	ldr	r2, [pc, #188]	; (800669c <HAL_DMA_Abort+0x630>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d009      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a2e      	ldr	r2, [pc, #184]	; (80066a0 <HAL_DMA_Abort+0x634>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d004      	beq.n	80065f6 <HAL_DMA_Abort+0x58a>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a2c      	ldr	r2, [pc, #176]	; (80066a4 <HAL_DMA_Abort+0x638>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d101      	bne.n	80065fa <HAL_DMA_Abort+0x58e>
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <HAL_DMA_Abort+0x590>
 80065fa:	2300      	movs	r3, #0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d015      	beq.n	800662c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006608:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00c      	beq.n	800662c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800661c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006620:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800662a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	40020010 	.word	0x40020010
 800664c:	40020028 	.word	0x40020028
 8006650:	40020040 	.word	0x40020040
 8006654:	40020058 	.word	0x40020058
 8006658:	40020070 	.word	0x40020070
 800665c:	40020088 	.word	0x40020088
 8006660:	400200a0 	.word	0x400200a0
 8006664:	400200b8 	.word	0x400200b8
 8006668:	40020410 	.word	0x40020410
 800666c:	40020428 	.word	0x40020428
 8006670:	40020440 	.word	0x40020440
 8006674:	40020458 	.word	0x40020458
 8006678:	40020470 	.word	0x40020470
 800667c:	40020488 	.word	0x40020488
 8006680:	400204a0 	.word	0x400204a0
 8006684:	400204b8 	.word	0x400204b8
 8006688:	58025408 	.word	0x58025408
 800668c:	5802541c 	.word	0x5802541c
 8006690:	58025430 	.word	0x58025430
 8006694:	58025444 	.word	0x58025444
 8006698:	58025458 	.word	0x58025458
 800669c:	5802546c 	.word	0x5802546c
 80066a0:	58025480 	.word	0x58025480
 80066a4:	58025494 	.word	0x58025494

080066a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e237      	b.n	8006b2a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d004      	beq.n	80066d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2280      	movs	r2, #128	; 0x80
 80066ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e22c      	b.n	8006b2a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a5c      	ldr	r2, [pc, #368]	; (8006848 <HAL_DMA_Abort_IT+0x1a0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d04a      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a5b      	ldr	r2, [pc, #364]	; (800684c <HAL_DMA_Abort_IT+0x1a4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d045      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a59      	ldr	r2, [pc, #356]	; (8006850 <HAL_DMA_Abort_IT+0x1a8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d040      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a58      	ldr	r2, [pc, #352]	; (8006854 <HAL_DMA_Abort_IT+0x1ac>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d03b      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a56      	ldr	r2, [pc, #344]	; (8006858 <HAL_DMA_Abort_IT+0x1b0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d036      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a55      	ldr	r2, [pc, #340]	; (800685c <HAL_DMA_Abort_IT+0x1b4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d031      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a53      	ldr	r2, [pc, #332]	; (8006860 <HAL_DMA_Abort_IT+0x1b8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d02c      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a52      	ldr	r2, [pc, #328]	; (8006864 <HAL_DMA_Abort_IT+0x1bc>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d027      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a50      	ldr	r2, [pc, #320]	; (8006868 <HAL_DMA_Abort_IT+0x1c0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d022      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a4f      	ldr	r2, [pc, #316]	; (800686c <HAL_DMA_Abort_IT+0x1c4>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d01d      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a4d      	ldr	r2, [pc, #308]	; (8006870 <HAL_DMA_Abort_IT+0x1c8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d018      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a4c      	ldr	r2, [pc, #304]	; (8006874 <HAL_DMA_Abort_IT+0x1cc>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d013      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a4a      	ldr	r2, [pc, #296]	; (8006878 <HAL_DMA_Abort_IT+0x1d0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d00e      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a49      	ldr	r2, [pc, #292]	; (800687c <HAL_DMA_Abort_IT+0x1d4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d009      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a47      	ldr	r2, [pc, #284]	; (8006880 <HAL_DMA_Abort_IT+0x1d8>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d004      	beq.n	8006770 <HAL_DMA_Abort_IT+0xc8>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a46      	ldr	r2, [pc, #280]	; (8006884 <HAL_DMA_Abort_IT+0x1dc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d101      	bne.n	8006774 <HAL_DMA_Abort_IT+0xcc>
 8006770:	2301      	movs	r3, #1
 8006772:	e000      	b.n	8006776 <HAL_DMA_Abort_IT+0xce>
 8006774:	2300      	movs	r3, #0
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8086 	beq.w	8006888 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2204      	movs	r2, #4
 8006780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a2f      	ldr	r2, [pc, #188]	; (8006848 <HAL_DMA_Abort_IT+0x1a0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d04a      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a2e      	ldr	r2, [pc, #184]	; (800684c <HAL_DMA_Abort_IT+0x1a4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d045      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a2c      	ldr	r2, [pc, #176]	; (8006850 <HAL_DMA_Abort_IT+0x1a8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d040      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a2b      	ldr	r2, [pc, #172]	; (8006854 <HAL_DMA_Abort_IT+0x1ac>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d03b      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a29      	ldr	r2, [pc, #164]	; (8006858 <HAL_DMA_Abort_IT+0x1b0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d036      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a28      	ldr	r2, [pc, #160]	; (800685c <HAL_DMA_Abort_IT+0x1b4>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d031      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a26      	ldr	r2, [pc, #152]	; (8006860 <HAL_DMA_Abort_IT+0x1b8>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d02c      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a25      	ldr	r2, [pc, #148]	; (8006864 <HAL_DMA_Abort_IT+0x1bc>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d027      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a23      	ldr	r2, [pc, #140]	; (8006868 <HAL_DMA_Abort_IT+0x1c0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d022      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a22      	ldr	r2, [pc, #136]	; (800686c <HAL_DMA_Abort_IT+0x1c4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d01d      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a20      	ldr	r2, [pc, #128]	; (8006870 <HAL_DMA_Abort_IT+0x1c8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d018      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a1f      	ldr	r2, [pc, #124]	; (8006874 <HAL_DMA_Abort_IT+0x1cc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d013      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a1d      	ldr	r2, [pc, #116]	; (8006878 <HAL_DMA_Abort_IT+0x1d0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00e      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1c      	ldr	r2, [pc, #112]	; (800687c <HAL_DMA_Abort_IT+0x1d4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d009      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a1a      	ldr	r2, [pc, #104]	; (8006880 <HAL_DMA_Abort_IT+0x1d8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d004      	beq.n	8006824 <HAL_DMA_Abort_IT+0x17c>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a19      	ldr	r2, [pc, #100]	; (8006884 <HAL_DMA_Abort_IT+0x1dc>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d108      	bne.n	8006836 <HAL_DMA_Abort_IT+0x18e>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0201 	bic.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	e178      	b.n	8006b28 <HAL_DMA_Abort_IT+0x480>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0201 	bic.w	r2, r2, #1
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	e16f      	b.n	8006b28 <HAL_DMA_Abort_IT+0x480>
 8006848:	40020010 	.word	0x40020010
 800684c:	40020028 	.word	0x40020028
 8006850:	40020040 	.word	0x40020040
 8006854:	40020058 	.word	0x40020058
 8006858:	40020070 	.word	0x40020070
 800685c:	40020088 	.word	0x40020088
 8006860:	400200a0 	.word	0x400200a0
 8006864:	400200b8 	.word	0x400200b8
 8006868:	40020410 	.word	0x40020410
 800686c:	40020428 	.word	0x40020428
 8006870:	40020440 	.word	0x40020440
 8006874:	40020458 	.word	0x40020458
 8006878:	40020470 	.word	0x40020470
 800687c:	40020488 	.word	0x40020488
 8006880:	400204a0 	.word	0x400204a0
 8006884:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 020e 	bic.w	r2, r2, #14
 8006896:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a6c      	ldr	r2, [pc, #432]	; (8006a50 <HAL_DMA_Abort_IT+0x3a8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d04a      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a6b      	ldr	r2, [pc, #428]	; (8006a54 <HAL_DMA_Abort_IT+0x3ac>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d045      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a69      	ldr	r2, [pc, #420]	; (8006a58 <HAL_DMA_Abort_IT+0x3b0>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d040      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a68      	ldr	r2, [pc, #416]	; (8006a5c <HAL_DMA_Abort_IT+0x3b4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d03b      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a66      	ldr	r2, [pc, #408]	; (8006a60 <HAL_DMA_Abort_IT+0x3b8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d036      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a65      	ldr	r2, [pc, #404]	; (8006a64 <HAL_DMA_Abort_IT+0x3bc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d031      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a63      	ldr	r2, [pc, #396]	; (8006a68 <HAL_DMA_Abort_IT+0x3c0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d02c      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a62      	ldr	r2, [pc, #392]	; (8006a6c <HAL_DMA_Abort_IT+0x3c4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d027      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a60      	ldr	r2, [pc, #384]	; (8006a70 <HAL_DMA_Abort_IT+0x3c8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d022      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a5f      	ldr	r2, [pc, #380]	; (8006a74 <HAL_DMA_Abort_IT+0x3cc>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d01d      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a5d      	ldr	r2, [pc, #372]	; (8006a78 <HAL_DMA_Abort_IT+0x3d0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d018      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a5c      	ldr	r2, [pc, #368]	; (8006a7c <HAL_DMA_Abort_IT+0x3d4>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d013      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a5a      	ldr	r2, [pc, #360]	; (8006a80 <HAL_DMA_Abort_IT+0x3d8>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d00e      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a59      	ldr	r2, [pc, #356]	; (8006a84 <HAL_DMA_Abort_IT+0x3dc>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d009      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a57      	ldr	r2, [pc, #348]	; (8006a88 <HAL_DMA_Abort_IT+0x3e0>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d004      	beq.n	8006938 <HAL_DMA_Abort_IT+0x290>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a56      	ldr	r2, [pc, #344]	; (8006a8c <HAL_DMA_Abort_IT+0x3e4>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d108      	bne.n	800694a <HAL_DMA_Abort_IT+0x2a2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0201 	bic.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	e007      	b.n	800695a <HAL_DMA_Abort_IT+0x2b2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0201 	bic.w	r2, r2, #1
 8006958:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a3c      	ldr	r2, [pc, #240]	; (8006a50 <HAL_DMA_Abort_IT+0x3a8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d072      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a3a      	ldr	r2, [pc, #232]	; (8006a54 <HAL_DMA_Abort_IT+0x3ac>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d06d      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a39      	ldr	r2, [pc, #228]	; (8006a58 <HAL_DMA_Abort_IT+0x3b0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d068      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a37      	ldr	r2, [pc, #220]	; (8006a5c <HAL_DMA_Abort_IT+0x3b4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d063      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a36      	ldr	r2, [pc, #216]	; (8006a60 <HAL_DMA_Abort_IT+0x3b8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d05e      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a34      	ldr	r2, [pc, #208]	; (8006a64 <HAL_DMA_Abort_IT+0x3bc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d059      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a33      	ldr	r2, [pc, #204]	; (8006a68 <HAL_DMA_Abort_IT+0x3c0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d054      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a31      	ldr	r2, [pc, #196]	; (8006a6c <HAL_DMA_Abort_IT+0x3c4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d04f      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a30      	ldr	r2, [pc, #192]	; (8006a70 <HAL_DMA_Abort_IT+0x3c8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d04a      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a2e      	ldr	r2, [pc, #184]	; (8006a74 <HAL_DMA_Abort_IT+0x3cc>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d045      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a2d      	ldr	r2, [pc, #180]	; (8006a78 <HAL_DMA_Abort_IT+0x3d0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d040      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a2b      	ldr	r2, [pc, #172]	; (8006a7c <HAL_DMA_Abort_IT+0x3d4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d03b      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a2a      	ldr	r2, [pc, #168]	; (8006a80 <HAL_DMA_Abort_IT+0x3d8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d036      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a28      	ldr	r2, [pc, #160]	; (8006a84 <HAL_DMA_Abort_IT+0x3dc>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d031      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a27      	ldr	r2, [pc, #156]	; (8006a88 <HAL_DMA_Abort_IT+0x3e0>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d02c      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a25      	ldr	r2, [pc, #148]	; (8006a8c <HAL_DMA_Abort_IT+0x3e4>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d027      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a24      	ldr	r2, [pc, #144]	; (8006a90 <HAL_DMA_Abort_IT+0x3e8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d022      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a22      	ldr	r2, [pc, #136]	; (8006a94 <HAL_DMA_Abort_IT+0x3ec>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d01d      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a21      	ldr	r2, [pc, #132]	; (8006a98 <HAL_DMA_Abort_IT+0x3f0>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d018      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1f      	ldr	r2, [pc, #124]	; (8006a9c <HAL_DMA_Abort_IT+0x3f4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1e      	ldr	r2, [pc, #120]	; (8006aa0 <HAL_DMA_Abort_IT+0x3f8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00e      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1c      	ldr	r2, [pc, #112]	; (8006aa4 <HAL_DMA_Abort_IT+0x3fc>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d009      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a1b      	ldr	r2, [pc, #108]	; (8006aa8 <HAL_DMA_Abort_IT+0x400>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d004      	beq.n	8006a4a <HAL_DMA_Abort_IT+0x3a2>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a19      	ldr	r2, [pc, #100]	; (8006aac <HAL_DMA_Abort_IT+0x404>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d132      	bne.n	8006ab0 <HAL_DMA_Abort_IT+0x408>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e031      	b.n	8006ab2 <HAL_DMA_Abort_IT+0x40a>
 8006a4e:	bf00      	nop
 8006a50:	40020010 	.word	0x40020010
 8006a54:	40020028 	.word	0x40020028
 8006a58:	40020040 	.word	0x40020040
 8006a5c:	40020058 	.word	0x40020058
 8006a60:	40020070 	.word	0x40020070
 8006a64:	40020088 	.word	0x40020088
 8006a68:	400200a0 	.word	0x400200a0
 8006a6c:	400200b8 	.word	0x400200b8
 8006a70:	40020410 	.word	0x40020410
 8006a74:	40020428 	.word	0x40020428
 8006a78:	40020440 	.word	0x40020440
 8006a7c:	40020458 	.word	0x40020458
 8006a80:	40020470 	.word	0x40020470
 8006a84:	40020488 	.word	0x40020488
 8006a88:	400204a0 	.word	0x400204a0
 8006a8c:	400204b8 	.word	0x400204b8
 8006a90:	58025408 	.word	0x58025408
 8006a94:	5802541c 	.word	0x5802541c
 8006a98:	58025430 	.word	0x58025430
 8006a9c:	58025444 	.word	0x58025444
 8006aa0:	58025458 	.word	0x58025458
 8006aa4:	5802546c 	.word	0x5802546c
 8006aa8:	58025480 	.word	0x58025480
 8006aac:	58025494 	.word	0x58025494
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d028      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ac4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad0:	f003 031f 	and.w	r3, r3, #31
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ae4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00c      	beq.n	8006b08 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006afc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b06:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop

08006b34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08a      	sub	sp, #40	; 0x28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b40:	4b67      	ldr	r3, [pc, #412]	; (8006ce0 <HAL_DMA_IRQHandler+0x1ac>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a67      	ldr	r2, [pc, #412]	; (8006ce4 <HAL_DMA_IRQHandler+0x1b0>)
 8006b46:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4a:	0a9b      	lsrs	r3, r3, #10
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b52:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b58:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a5f      	ldr	r2, [pc, #380]	; (8006ce8 <HAL_DMA_IRQHandler+0x1b4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d04a      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a5d      	ldr	r2, [pc, #372]	; (8006cec <HAL_DMA_IRQHandler+0x1b8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d045      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a5c      	ldr	r2, [pc, #368]	; (8006cf0 <HAL_DMA_IRQHandler+0x1bc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d040      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a5a      	ldr	r2, [pc, #360]	; (8006cf4 <HAL_DMA_IRQHandler+0x1c0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d03b      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a59      	ldr	r2, [pc, #356]	; (8006cf8 <HAL_DMA_IRQHandler+0x1c4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d036      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a57      	ldr	r2, [pc, #348]	; (8006cfc <HAL_DMA_IRQHandler+0x1c8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d031      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a56      	ldr	r2, [pc, #344]	; (8006d00 <HAL_DMA_IRQHandler+0x1cc>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d02c      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a54      	ldr	r2, [pc, #336]	; (8006d04 <HAL_DMA_IRQHandler+0x1d0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d027      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a53      	ldr	r2, [pc, #332]	; (8006d08 <HAL_DMA_IRQHandler+0x1d4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d022      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a51      	ldr	r2, [pc, #324]	; (8006d0c <HAL_DMA_IRQHandler+0x1d8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d01d      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a50      	ldr	r2, [pc, #320]	; (8006d10 <HAL_DMA_IRQHandler+0x1dc>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d018      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a4e      	ldr	r2, [pc, #312]	; (8006d14 <HAL_DMA_IRQHandler+0x1e0>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a4d      	ldr	r2, [pc, #308]	; (8006d18 <HAL_DMA_IRQHandler+0x1e4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00e      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a4b      	ldr	r2, [pc, #300]	; (8006d1c <HAL_DMA_IRQHandler+0x1e8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a4a      	ldr	r2, [pc, #296]	; (8006d20 <HAL_DMA_IRQHandler+0x1ec>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <HAL_DMA_IRQHandler+0xd2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a48      	ldr	r2, [pc, #288]	; (8006d24 <HAL_DMA_IRQHandler+0x1f0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d101      	bne.n	8006c0a <HAL_DMA_IRQHandler+0xd6>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <HAL_DMA_IRQHandler+0xd8>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 842b 	beq.w	8007468 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c16:	f003 031f 	and.w	r3, r3, #31
 8006c1a:	2208      	movs	r2, #8
 8006c1c:	409a      	lsls	r2, r3
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	4013      	ands	r3, r2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 80a2 	beq.w	8006d6c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a2e      	ldr	r2, [pc, #184]	; (8006ce8 <HAL_DMA_IRQHandler+0x1b4>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d04a      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2d      	ldr	r2, [pc, #180]	; (8006cec <HAL_DMA_IRQHandler+0x1b8>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d045      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a2b      	ldr	r2, [pc, #172]	; (8006cf0 <HAL_DMA_IRQHandler+0x1bc>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d040      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a2a      	ldr	r2, [pc, #168]	; (8006cf4 <HAL_DMA_IRQHandler+0x1c0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d03b      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a28      	ldr	r2, [pc, #160]	; (8006cf8 <HAL_DMA_IRQHandler+0x1c4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d036      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a27      	ldr	r2, [pc, #156]	; (8006cfc <HAL_DMA_IRQHandler+0x1c8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d031      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a25      	ldr	r2, [pc, #148]	; (8006d00 <HAL_DMA_IRQHandler+0x1cc>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d02c      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a24      	ldr	r2, [pc, #144]	; (8006d04 <HAL_DMA_IRQHandler+0x1d0>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d027      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a22      	ldr	r2, [pc, #136]	; (8006d08 <HAL_DMA_IRQHandler+0x1d4>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d022      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a21      	ldr	r2, [pc, #132]	; (8006d0c <HAL_DMA_IRQHandler+0x1d8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d01d      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a1f      	ldr	r2, [pc, #124]	; (8006d10 <HAL_DMA_IRQHandler+0x1dc>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d018      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1e      	ldr	r2, [pc, #120]	; (8006d14 <HAL_DMA_IRQHandler+0x1e0>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d013      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a1c      	ldr	r2, [pc, #112]	; (8006d18 <HAL_DMA_IRQHandler+0x1e4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00e      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1b      	ldr	r2, [pc, #108]	; (8006d1c <HAL_DMA_IRQHandler+0x1e8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d009      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a19      	ldr	r2, [pc, #100]	; (8006d20 <HAL_DMA_IRQHandler+0x1ec>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d004      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x194>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a18      	ldr	r2, [pc, #96]	; (8006d24 <HAL_DMA_IRQHandler+0x1f0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d12f      	bne.n	8006d28 <HAL_DMA_IRQHandler+0x1f4>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	bf14      	ite	ne
 8006cd6:	2301      	movne	r3, #1
 8006cd8:	2300      	moveq	r3, #0
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	e02e      	b.n	8006d3c <HAL_DMA_IRQHandler+0x208>
 8006cde:	bf00      	nop
 8006ce0:	24000794 	.word	0x24000794
 8006ce4:	1b4e81b5 	.word	0x1b4e81b5
 8006ce8:	40020010 	.word	0x40020010
 8006cec:	40020028 	.word	0x40020028
 8006cf0:	40020040 	.word	0x40020040
 8006cf4:	40020058 	.word	0x40020058
 8006cf8:	40020070 	.word	0x40020070
 8006cfc:	40020088 	.word	0x40020088
 8006d00:	400200a0 	.word	0x400200a0
 8006d04:	400200b8 	.word	0x400200b8
 8006d08:	40020410 	.word	0x40020410
 8006d0c:	40020428 	.word	0x40020428
 8006d10:	40020440 	.word	0x40020440
 8006d14:	40020458 	.word	0x40020458
 8006d18:	40020470 	.word	0x40020470
 8006d1c:	40020488 	.word	0x40020488
 8006d20:	400204a0 	.word	0x400204a0
 8006d24:	400204b8 	.word	0x400204b8
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0308 	and.w	r3, r3, #8
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	bf14      	ite	ne
 8006d36:	2301      	movne	r3, #1
 8006d38:	2300      	moveq	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d015      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0204 	bic.w	r2, r2, #4
 8006d4e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d54:	f003 031f 	and.w	r3, r3, #31
 8006d58:	2208      	movs	r2, #8
 8006d5a:	409a      	lsls	r2, r3
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d64:	f043 0201 	orr.w	r2, r3, #1
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d70:	f003 031f 	and.w	r3, r3, #31
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	fa22 f303 	lsr.w	r3, r2, r3
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d06e      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a69      	ldr	r2, [pc, #420]	; (8006f2c <HAL_DMA_IRQHandler+0x3f8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d04a      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a67      	ldr	r2, [pc, #412]	; (8006f30 <HAL_DMA_IRQHandler+0x3fc>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d045      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a66      	ldr	r2, [pc, #408]	; (8006f34 <HAL_DMA_IRQHandler+0x400>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d040      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a64      	ldr	r2, [pc, #400]	; (8006f38 <HAL_DMA_IRQHandler+0x404>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d03b      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a63      	ldr	r2, [pc, #396]	; (8006f3c <HAL_DMA_IRQHandler+0x408>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d036      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a61      	ldr	r2, [pc, #388]	; (8006f40 <HAL_DMA_IRQHandler+0x40c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d031      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a60      	ldr	r2, [pc, #384]	; (8006f44 <HAL_DMA_IRQHandler+0x410>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d02c      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a5e      	ldr	r2, [pc, #376]	; (8006f48 <HAL_DMA_IRQHandler+0x414>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d027      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a5d      	ldr	r2, [pc, #372]	; (8006f4c <HAL_DMA_IRQHandler+0x418>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d022      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a5b      	ldr	r2, [pc, #364]	; (8006f50 <HAL_DMA_IRQHandler+0x41c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d01d      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a5a      	ldr	r2, [pc, #360]	; (8006f54 <HAL_DMA_IRQHandler+0x420>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d018      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a58      	ldr	r2, [pc, #352]	; (8006f58 <HAL_DMA_IRQHandler+0x424>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d013      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a57      	ldr	r2, [pc, #348]	; (8006f5c <HAL_DMA_IRQHandler+0x428>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00e      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a55      	ldr	r2, [pc, #340]	; (8006f60 <HAL_DMA_IRQHandler+0x42c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d009      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a54      	ldr	r2, [pc, #336]	; (8006f64 <HAL_DMA_IRQHandler+0x430>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d004      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x2ee>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a52      	ldr	r2, [pc, #328]	; (8006f68 <HAL_DMA_IRQHandler+0x434>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d10a      	bne.n	8006e38 <HAL_DMA_IRQHandler+0x304>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	bf14      	ite	ne
 8006e30:	2301      	movne	r3, #1
 8006e32:	2300      	moveq	r3, #0
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	e003      	b.n	8006e40 <HAL_DMA_IRQHandler+0x30c>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00d      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e48:	f003 031f 	and.w	r3, r3, #31
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	409a      	lsls	r2, r3
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e58:	f043 0202 	orr.w	r2, r3, #2
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e64:	f003 031f 	and.w	r3, r3, #31
 8006e68:	2204      	movs	r2, #4
 8006e6a:	409a      	lsls	r2, r3
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	4013      	ands	r3, r2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 808f 	beq.w	8006f94 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a2c      	ldr	r2, [pc, #176]	; (8006f2c <HAL_DMA_IRQHandler+0x3f8>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d04a      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a2a      	ldr	r2, [pc, #168]	; (8006f30 <HAL_DMA_IRQHandler+0x3fc>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d045      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a29      	ldr	r2, [pc, #164]	; (8006f34 <HAL_DMA_IRQHandler+0x400>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d040      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a27      	ldr	r2, [pc, #156]	; (8006f38 <HAL_DMA_IRQHandler+0x404>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d03b      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a26      	ldr	r2, [pc, #152]	; (8006f3c <HAL_DMA_IRQHandler+0x408>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d036      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a24      	ldr	r2, [pc, #144]	; (8006f40 <HAL_DMA_IRQHandler+0x40c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d031      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a23      	ldr	r2, [pc, #140]	; (8006f44 <HAL_DMA_IRQHandler+0x410>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d02c      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a21      	ldr	r2, [pc, #132]	; (8006f48 <HAL_DMA_IRQHandler+0x414>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d027      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a20      	ldr	r2, [pc, #128]	; (8006f4c <HAL_DMA_IRQHandler+0x418>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d022      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1e      	ldr	r2, [pc, #120]	; (8006f50 <HAL_DMA_IRQHandler+0x41c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d01d      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a1d      	ldr	r2, [pc, #116]	; (8006f54 <HAL_DMA_IRQHandler+0x420>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d018      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a1b      	ldr	r2, [pc, #108]	; (8006f58 <HAL_DMA_IRQHandler+0x424>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d013      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a1a      	ldr	r2, [pc, #104]	; (8006f5c <HAL_DMA_IRQHandler+0x428>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d00e      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a18      	ldr	r2, [pc, #96]	; (8006f60 <HAL_DMA_IRQHandler+0x42c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d009      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a17      	ldr	r2, [pc, #92]	; (8006f64 <HAL_DMA_IRQHandler+0x430>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d004      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x3e2>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a15      	ldr	r2, [pc, #84]	; (8006f68 <HAL_DMA_IRQHandler+0x434>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d12a      	bne.n	8006f6c <HAL_DMA_IRQHandler+0x438>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bf14      	ite	ne
 8006f24:	2301      	movne	r3, #1
 8006f26:	2300      	moveq	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	e023      	b.n	8006f74 <HAL_DMA_IRQHandler+0x440>
 8006f2c:	40020010 	.word	0x40020010
 8006f30:	40020028 	.word	0x40020028
 8006f34:	40020040 	.word	0x40020040
 8006f38:	40020058 	.word	0x40020058
 8006f3c:	40020070 	.word	0x40020070
 8006f40:	40020088 	.word	0x40020088
 8006f44:	400200a0 	.word	0x400200a0
 8006f48:	400200b8 	.word	0x400200b8
 8006f4c:	40020410 	.word	0x40020410
 8006f50:	40020428 	.word	0x40020428
 8006f54:	40020440 	.word	0x40020440
 8006f58:	40020458 	.word	0x40020458
 8006f5c:	40020470 	.word	0x40020470
 8006f60:	40020488 	.word	0x40020488
 8006f64:	400204a0 	.word	0x400204a0
 8006f68:	400204b8 	.word	0x400204b8
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2300      	movs	r3, #0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00d      	beq.n	8006f94 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7c:	f003 031f 	and.w	r3, r3, #31
 8006f80:	2204      	movs	r2, #4
 8006f82:	409a      	lsls	r2, r3
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8c:	f043 0204 	orr.w	r2, r3, #4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f98:	f003 031f 	and.w	r3, r3, #31
 8006f9c:	2210      	movs	r2, #16
 8006f9e:	409a      	lsls	r2, r3
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80a6 	beq.w	80070f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a85      	ldr	r2, [pc, #532]	; (80071c4 <HAL_DMA_IRQHandler+0x690>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d04a      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a83      	ldr	r2, [pc, #524]	; (80071c8 <HAL_DMA_IRQHandler+0x694>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d045      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a82      	ldr	r2, [pc, #520]	; (80071cc <HAL_DMA_IRQHandler+0x698>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d040      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a80      	ldr	r2, [pc, #512]	; (80071d0 <HAL_DMA_IRQHandler+0x69c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d03b      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a7f      	ldr	r2, [pc, #508]	; (80071d4 <HAL_DMA_IRQHandler+0x6a0>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d036      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a7d      	ldr	r2, [pc, #500]	; (80071d8 <HAL_DMA_IRQHandler+0x6a4>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d031      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a7c      	ldr	r2, [pc, #496]	; (80071dc <HAL_DMA_IRQHandler+0x6a8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d02c      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a7a      	ldr	r2, [pc, #488]	; (80071e0 <HAL_DMA_IRQHandler+0x6ac>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d027      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a79      	ldr	r2, [pc, #484]	; (80071e4 <HAL_DMA_IRQHandler+0x6b0>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d022      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a77      	ldr	r2, [pc, #476]	; (80071e8 <HAL_DMA_IRQHandler+0x6b4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d01d      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a76      	ldr	r2, [pc, #472]	; (80071ec <HAL_DMA_IRQHandler+0x6b8>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d018      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a74      	ldr	r2, [pc, #464]	; (80071f0 <HAL_DMA_IRQHandler+0x6bc>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d013      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a73      	ldr	r2, [pc, #460]	; (80071f4 <HAL_DMA_IRQHandler+0x6c0>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00e      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a71      	ldr	r2, [pc, #452]	; (80071f8 <HAL_DMA_IRQHandler+0x6c4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d009      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a70      	ldr	r2, [pc, #448]	; (80071fc <HAL_DMA_IRQHandler+0x6c8>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d004      	beq.n	800704a <HAL_DMA_IRQHandler+0x516>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a6e      	ldr	r2, [pc, #440]	; (8007200 <HAL_DMA_IRQHandler+0x6cc>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d10a      	bne.n	8007060 <HAL_DMA_IRQHandler+0x52c>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0308 	and.w	r3, r3, #8
 8007054:	2b00      	cmp	r3, #0
 8007056:	bf14      	ite	ne
 8007058:	2301      	movne	r3, #1
 800705a:	2300      	moveq	r3, #0
 800705c:	b2db      	uxtb	r3, r3
 800705e:	e009      	b.n	8007074 <HAL_DMA_IRQHandler+0x540>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0304 	and.w	r3, r3, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	bf14      	ite	ne
 800706e:	2301      	movne	r3, #1
 8007070:	2300      	moveq	r3, #0
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d03e      	beq.n	80070f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800707c:	f003 031f 	and.w	r3, r3, #31
 8007080:	2210      	movs	r2, #16
 8007082:	409a      	lsls	r2, r3
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d018      	beq.n	80070c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d108      	bne.n	80070b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d024      	beq.n	80070f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	4798      	blx	r3
 80070b4:	e01f      	b.n	80070f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d01b      	beq.n	80070f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	4798      	blx	r3
 80070c6:	e016      	b.n	80070f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d107      	bne.n	80070e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0208 	bic.w	r2, r2, #8
 80070e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070fa:	f003 031f 	and.w	r3, r3, #31
 80070fe:	2220      	movs	r2, #32
 8007100:	409a      	lsls	r2, r3
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	4013      	ands	r3, r2
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 8110 	beq.w	800732c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a2c      	ldr	r2, [pc, #176]	; (80071c4 <HAL_DMA_IRQHandler+0x690>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d04a      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a2b      	ldr	r2, [pc, #172]	; (80071c8 <HAL_DMA_IRQHandler+0x694>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d045      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a29      	ldr	r2, [pc, #164]	; (80071cc <HAL_DMA_IRQHandler+0x698>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d040      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a28      	ldr	r2, [pc, #160]	; (80071d0 <HAL_DMA_IRQHandler+0x69c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d03b      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a26      	ldr	r2, [pc, #152]	; (80071d4 <HAL_DMA_IRQHandler+0x6a0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d036      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a25      	ldr	r2, [pc, #148]	; (80071d8 <HAL_DMA_IRQHandler+0x6a4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d031      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a23      	ldr	r2, [pc, #140]	; (80071dc <HAL_DMA_IRQHandler+0x6a8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d02c      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a22      	ldr	r2, [pc, #136]	; (80071e0 <HAL_DMA_IRQHandler+0x6ac>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d027      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a20      	ldr	r2, [pc, #128]	; (80071e4 <HAL_DMA_IRQHandler+0x6b0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d022      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a1f      	ldr	r2, [pc, #124]	; (80071e8 <HAL_DMA_IRQHandler+0x6b4>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d01d      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a1d      	ldr	r2, [pc, #116]	; (80071ec <HAL_DMA_IRQHandler+0x6b8>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d018      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a1c      	ldr	r2, [pc, #112]	; (80071f0 <HAL_DMA_IRQHandler+0x6bc>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d013      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a1a      	ldr	r2, [pc, #104]	; (80071f4 <HAL_DMA_IRQHandler+0x6c0>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d00e      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a19      	ldr	r2, [pc, #100]	; (80071f8 <HAL_DMA_IRQHandler+0x6c4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d009      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a17      	ldr	r2, [pc, #92]	; (80071fc <HAL_DMA_IRQHandler+0x6c8>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d004      	beq.n	80071ac <HAL_DMA_IRQHandler+0x678>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a16      	ldr	r2, [pc, #88]	; (8007200 <HAL_DMA_IRQHandler+0x6cc>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d12b      	bne.n	8007204 <HAL_DMA_IRQHandler+0x6d0>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0310 	and.w	r3, r3, #16
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bf14      	ite	ne
 80071ba:	2301      	movne	r3, #1
 80071bc:	2300      	moveq	r3, #0
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	e02a      	b.n	8007218 <HAL_DMA_IRQHandler+0x6e4>
 80071c2:	bf00      	nop
 80071c4:	40020010 	.word	0x40020010
 80071c8:	40020028 	.word	0x40020028
 80071cc:	40020040 	.word	0x40020040
 80071d0:	40020058 	.word	0x40020058
 80071d4:	40020070 	.word	0x40020070
 80071d8:	40020088 	.word	0x40020088
 80071dc:	400200a0 	.word	0x400200a0
 80071e0:	400200b8 	.word	0x400200b8
 80071e4:	40020410 	.word	0x40020410
 80071e8:	40020428 	.word	0x40020428
 80071ec:	40020440 	.word	0x40020440
 80071f0:	40020458 	.word	0x40020458
 80071f4:	40020470 	.word	0x40020470
 80071f8:	40020488 	.word	0x40020488
 80071fc:	400204a0 	.word	0x400204a0
 8007200:	400204b8 	.word	0x400204b8
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	bf14      	ite	ne
 8007212:	2301      	movne	r3, #1
 8007214:	2300      	moveq	r3, #0
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8087 	beq.w	800732c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007222:	f003 031f 	and.w	r3, r3, #31
 8007226:	2220      	movs	r2, #32
 8007228:	409a      	lsls	r2, r3
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b04      	cmp	r3, #4
 8007238:	d139      	bne.n	80072ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0216 	bic.w	r2, r2, #22
 8007248:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	695a      	ldr	r2, [r3, #20]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007258:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	2b00      	cmp	r3, #0
 8007260:	d103      	bne.n	800726a <HAL_DMA_IRQHandler+0x736>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007266:	2b00      	cmp	r3, #0
 8007268:	d007      	beq.n	800727a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 0208 	bic.w	r2, r2, #8
 8007278:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800727e:	f003 031f 	and.w	r3, r3, #31
 8007282:	223f      	movs	r2, #63	; 0x3f
 8007284:	409a      	lsls	r2, r3
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 8382 	beq.w	80079a8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	4798      	blx	r3
          }
          return;
 80072ac:	e37c      	b.n	80079a8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d018      	beq.n	80072ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d108      	bne.n	80072dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d02c      	beq.n	800732c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
 80072da:	e027      	b.n	800732c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d023      	beq.n	800732c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	4798      	blx	r3
 80072ec:	e01e      	b.n	800732c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10f      	bne.n	800731c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0210 	bic.w	r2, r2, #16
 800730a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 833e 	beq.w	80079b2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 8088 	beq.w	8007454 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2204      	movs	r2, #4
 8007348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a89      	ldr	r2, [pc, #548]	; (8007578 <HAL_DMA_IRQHandler+0xa44>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d04a      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a88      	ldr	r2, [pc, #544]	; (800757c <HAL_DMA_IRQHandler+0xa48>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d045      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a86      	ldr	r2, [pc, #536]	; (8007580 <HAL_DMA_IRQHandler+0xa4c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d040      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a85      	ldr	r2, [pc, #532]	; (8007584 <HAL_DMA_IRQHandler+0xa50>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d03b      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a83      	ldr	r2, [pc, #524]	; (8007588 <HAL_DMA_IRQHandler+0xa54>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d036      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a82      	ldr	r2, [pc, #520]	; (800758c <HAL_DMA_IRQHandler+0xa58>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d031      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a80      	ldr	r2, [pc, #512]	; (8007590 <HAL_DMA_IRQHandler+0xa5c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d02c      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a7f      	ldr	r2, [pc, #508]	; (8007594 <HAL_DMA_IRQHandler+0xa60>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d027      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a7d      	ldr	r2, [pc, #500]	; (8007598 <HAL_DMA_IRQHandler+0xa64>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d022      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a7c      	ldr	r2, [pc, #496]	; (800759c <HAL_DMA_IRQHandler+0xa68>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d01d      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a7a      	ldr	r2, [pc, #488]	; (80075a0 <HAL_DMA_IRQHandler+0xa6c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d018      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a79      	ldr	r2, [pc, #484]	; (80075a4 <HAL_DMA_IRQHandler+0xa70>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d013      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a77      	ldr	r2, [pc, #476]	; (80075a8 <HAL_DMA_IRQHandler+0xa74>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d00e      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a76      	ldr	r2, [pc, #472]	; (80075ac <HAL_DMA_IRQHandler+0xa78>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d009      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a74      	ldr	r2, [pc, #464]	; (80075b0 <HAL_DMA_IRQHandler+0xa7c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d004      	beq.n	80073ec <HAL_DMA_IRQHandler+0x8b8>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a73      	ldr	r2, [pc, #460]	; (80075b4 <HAL_DMA_IRQHandler+0xa80>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d108      	bne.n	80073fe <HAL_DMA_IRQHandler+0x8ca>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0201 	bic.w	r2, r2, #1
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	e007      	b.n	800740e <HAL_DMA_IRQHandler+0x8da>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f022 0201 	bic.w	r2, r2, #1
 800740c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3301      	adds	r3, #1
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007416:	429a      	cmp	r2, r3
 8007418:	d307      	bcc.n	800742a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1f2      	bne.n	800740e <HAL_DMA_IRQHandler+0x8da>
 8007428:	e000      	b.n	800742c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800742a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d004      	beq.n	8007444 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2203      	movs	r2, #3
 800743e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007442:	e003      	b.n	800744c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 82aa 	beq.w	80079b2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	4798      	blx	r3
 8007466:	e2a4      	b.n	80079b2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a52      	ldr	r2, [pc, #328]	; (80075b8 <HAL_DMA_IRQHandler+0xa84>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d04a      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a51      	ldr	r2, [pc, #324]	; (80075bc <HAL_DMA_IRQHandler+0xa88>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d045      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a4f      	ldr	r2, [pc, #316]	; (80075c0 <HAL_DMA_IRQHandler+0xa8c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d040      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a4e      	ldr	r2, [pc, #312]	; (80075c4 <HAL_DMA_IRQHandler+0xa90>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d03b      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a4c      	ldr	r2, [pc, #304]	; (80075c8 <HAL_DMA_IRQHandler+0xa94>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d036      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a4b      	ldr	r2, [pc, #300]	; (80075cc <HAL_DMA_IRQHandler+0xa98>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d031      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a49      	ldr	r2, [pc, #292]	; (80075d0 <HAL_DMA_IRQHandler+0xa9c>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d02c      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a48      	ldr	r2, [pc, #288]	; (80075d4 <HAL_DMA_IRQHandler+0xaa0>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d027      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a46      	ldr	r2, [pc, #280]	; (80075d8 <HAL_DMA_IRQHandler+0xaa4>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d022      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a45      	ldr	r2, [pc, #276]	; (80075dc <HAL_DMA_IRQHandler+0xaa8>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d01d      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a43      	ldr	r2, [pc, #268]	; (80075e0 <HAL_DMA_IRQHandler+0xaac>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d018      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a42      	ldr	r2, [pc, #264]	; (80075e4 <HAL_DMA_IRQHandler+0xab0>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d013      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a40      	ldr	r2, [pc, #256]	; (80075e8 <HAL_DMA_IRQHandler+0xab4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00e      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a3f      	ldr	r2, [pc, #252]	; (80075ec <HAL_DMA_IRQHandler+0xab8>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d009      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a3d      	ldr	r2, [pc, #244]	; (80075f0 <HAL_DMA_IRQHandler+0xabc>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d004      	beq.n	8007508 <HAL_DMA_IRQHandler+0x9d4>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a3c      	ldr	r2, [pc, #240]	; (80075f4 <HAL_DMA_IRQHandler+0xac0>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d101      	bne.n	800750c <HAL_DMA_IRQHandler+0x9d8>
 8007508:	2301      	movs	r3, #1
 800750a:	e000      	b.n	800750e <HAL_DMA_IRQHandler+0x9da>
 800750c:	2300      	movs	r3, #0
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 824f 	beq.w	80079b2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007520:	f003 031f 	and.w	r3, r3, #31
 8007524:	2204      	movs	r2, #4
 8007526:	409a      	lsls	r2, r3
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	4013      	ands	r3, r2
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 80dd 	beq.w	80076ec <HAL_DMA_IRQHandler+0xbb8>
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 80d7 	beq.w	80076ec <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007542:	f003 031f 	and.w	r3, r3, #31
 8007546:	2204      	movs	r2, #4
 8007548:	409a      	lsls	r2, r3
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d059      	beq.n	800760c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d14a      	bne.n	80075f8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 8220 	beq.w	80079ac <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007574:	e21a      	b.n	80079ac <HAL_DMA_IRQHandler+0xe78>
 8007576:	bf00      	nop
 8007578:	40020010 	.word	0x40020010
 800757c:	40020028 	.word	0x40020028
 8007580:	40020040 	.word	0x40020040
 8007584:	40020058 	.word	0x40020058
 8007588:	40020070 	.word	0x40020070
 800758c:	40020088 	.word	0x40020088
 8007590:	400200a0 	.word	0x400200a0
 8007594:	400200b8 	.word	0x400200b8
 8007598:	40020410 	.word	0x40020410
 800759c:	40020428 	.word	0x40020428
 80075a0:	40020440 	.word	0x40020440
 80075a4:	40020458 	.word	0x40020458
 80075a8:	40020470 	.word	0x40020470
 80075ac:	40020488 	.word	0x40020488
 80075b0:	400204a0 	.word	0x400204a0
 80075b4:	400204b8 	.word	0x400204b8
 80075b8:	48022c08 	.word	0x48022c08
 80075bc:	48022c1c 	.word	0x48022c1c
 80075c0:	48022c30 	.word	0x48022c30
 80075c4:	48022c44 	.word	0x48022c44
 80075c8:	48022c58 	.word	0x48022c58
 80075cc:	48022c6c 	.word	0x48022c6c
 80075d0:	48022c80 	.word	0x48022c80
 80075d4:	48022c94 	.word	0x48022c94
 80075d8:	58025408 	.word	0x58025408
 80075dc:	5802541c 	.word	0x5802541c
 80075e0:	58025430 	.word	0x58025430
 80075e4:	58025444 	.word	0x58025444
 80075e8:	58025458 	.word	0x58025458
 80075ec:	5802546c 	.word	0x5802546c
 80075f0:	58025480 	.word	0x58025480
 80075f4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 81d5 	beq.w	80079ac <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800760a:	e1cf      	b.n	80079ac <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f003 0320 	and.w	r3, r3, #32
 8007612:	2b00      	cmp	r3, #0
 8007614:	d160      	bne.n	80076d8 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a7f      	ldr	r2, [pc, #508]	; (8007818 <HAL_DMA_IRQHandler+0xce4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d04a      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a7d      	ldr	r2, [pc, #500]	; (800781c <HAL_DMA_IRQHandler+0xce8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d045      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a7c      	ldr	r2, [pc, #496]	; (8007820 <HAL_DMA_IRQHandler+0xcec>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d040      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a7a      	ldr	r2, [pc, #488]	; (8007824 <HAL_DMA_IRQHandler+0xcf0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d03b      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a79      	ldr	r2, [pc, #484]	; (8007828 <HAL_DMA_IRQHandler+0xcf4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d036      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a77      	ldr	r2, [pc, #476]	; (800782c <HAL_DMA_IRQHandler+0xcf8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d031      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a76      	ldr	r2, [pc, #472]	; (8007830 <HAL_DMA_IRQHandler+0xcfc>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d02c      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a74      	ldr	r2, [pc, #464]	; (8007834 <HAL_DMA_IRQHandler+0xd00>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d027      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a73      	ldr	r2, [pc, #460]	; (8007838 <HAL_DMA_IRQHandler+0xd04>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d022      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a71      	ldr	r2, [pc, #452]	; (800783c <HAL_DMA_IRQHandler+0xd08>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d01d      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a70      	ldr	r2, [pc, #448]	; (8007840 <HAL_DMA_IRQHandler+0xd0c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d018      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a6e      	ldr	r2, [pc, #440]	; (8007844 <HAL_DMA_IRQHandler+0xd10>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d013      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a6d      	ldr	r2, [pc, #436]	; (8007848 <HAL_DMA_IRQHandler+0xd14>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d00e      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a6b      	ldr	r2, [pc, #428]	; (800784c <HAL_DMA_IRQHandler+0xd18>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d009      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a6a      	ldr	r2, [pc, #424]	; (8007850 <HAL_DMA_IRQHandler+0xd1c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d004      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xb82>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a68      	ldr	r2, [pc, #416]	; (8007854 <HAL_DMA_IRQHandler+0xd20>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d108      	bne.n	80076c8 <HAL_DMA_IRQHandler+0xb94>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 0208 	bic.w	r2, r2, #8
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	e007      	b.n	80076d8 <HAL_DMA_IRQHandler+0xba4>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0204 	bic.w	r2, r2, #4
 80076d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8165 	beq.w	80079ac <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076ea:	e15f      	b.n	80079ac <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f0:	f003 031f 	and.w	r3, r3, #31
 80076f4:	2202      	movs	r2, #2
 80076f6:	409a      	lsls	r2, r3
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	4013      	ands	r3, r2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 80c5 	beq.w	800788c <HAL_DMA_IRQHandler+0xd58>
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 80bf 	beq.w	800788c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007712:	f003 031f 	and.w	r3, r3, #31
 8007716:	2202      	movs	r2, #2
 8007718:	409a      	lsls	r2, r3
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d018      	beq.n	800775a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d109      	bne.n	8007746 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 813a 	beq.w	80079b0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007744:	e134      	b.n	80079b0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 8130 	beq.w	80079b0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007758:	e12a      	b.n	80079b0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f003 0320 	and.w	r3, r3, #32
 8007760:	2b00      	cmp	r3, #0
 8007762:	f040 8089 	bne.w	8007878 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a2b      	ldr	r2, [pc, #172]	; (8007818 <HAL_DMA_IRQHandler+0xce4>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d04a      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a29      	ldr	r2, [pc, #164]	; (800781c <HAL_DMA_IRQHandler+0xce8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d045      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a28      	ldr	r2, [pc, #160]	; (8007820 <HAL_DMA_IRQHandler+0xcec>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d040      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a26      	ldr	r2, [pc, #152]	; (8007824 <HAL_DMA_IRQHandler+0xcf0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d03b      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a25      	ldr	r2, [pc, #148]	; (8007828 <HAL_DMA_IRQHandler+0xcf4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d036      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a23      	ldr	r2, [pc, #140]	; (800782c <HAL_DMA_IRQHandler+0xcf8>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d031      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a22      	ldr	r2, [pc, #136]	; (8007830 <HAL_DMA_IRQHandler+0xcfc>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d02c      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a20      	ldr	r2, [pc, #128]	; (8007834 <HAL_DMA_IRQHandler+0xd00>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d027      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a1f      	ldr	r2, [pc, #124]	; (8007838 <HAL_DMA_IRQHandler+0xd04>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d022      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1d      	ldr	r2, [pc, #116]	; (800783c <HAL_DMA_IRQHandler+0xd08>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d01d      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a1c      	ldr	r2, [pc, #112]	; (8007840 <HAL_DMA_IRQHandler+0xd0c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d018      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1a      	ldr	r2, [pc, #104]	; (8007844 <HAL_DMA_IRQHandler+0xd10>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d013      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a19      	ldr	r2, [pc, #100]	; (8007848 <HAL_DMA_IRQHandler+0xd14>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d00e      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a17      	ldr	r2, [pc, #92]	; (800784c <HAL_DMA_IRQHandler+0xd18>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d009      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a16      	ldr	r2, [pc, #88]	; (8007850 <HAL_DMA_IRQHandler+0xd1c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d004      	beq.n	8007806 <HAL_DMA_IRQHandler+0xcd2>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a14      	ldr	r2, [pc, #80]	; (8007854 <HAL_DMA_IRQHandler+0xd20>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d128      	bne.n	8007858 <HAL_DMA_IRQHandler+0xd24>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0214 	bic.w	r2, r2, #20
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	e027      	b.n	8007868 <HAL_DMA_IRQHandler+0xd34>
 8007818:	40020010 	.word	0x40020010
 800781c:	40020028 	.word	0x40020028
 8007820:	40020040 	.word	0x40020040
 8007824:	40020058 	.word	0x40020058
 8007828:	40020070 	.word	0x40020070
 800782c:	40020088 	.word	0x40020088
 8007830:	400200a0 	.word	0x400200a0
 8007834:	400200b8 	.word	0x400200b8
 8007838:	40020410 	.word	0x40020410
 800783c:	40020428 	.word	0x40020428
 8007840:	40020440 	.word	0x40020440
 8007844:	40020458 	.word	0x40020458
 8007848:	40020470 	.word	0x40020470
 800784c:	40020488 	.word	0x40020488
 8007850:	400204a0 	.word	0x400204a0
 8007854:	400204b8 	.word	0x400204b8
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 020a 	bic.w	r2, r2, #10
 8007866:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 8097 	beq.w	80079b0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800788a:	e091      	b.n	80079b0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007890:	f003 031f 	and.w	r3, r3, #31
 8007894:	2208      	movs	r2, #8
 8007896:	409a      	lsls	r2, r3
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	4013      	ands	r3, r2
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 8088 	beq.w	80079b2 <HAL_DMA_IRQHandler+0xe7e>
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f003 0308 	and.w	r3, r3, #8
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 8082 	beq.w	80079b2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a41      	ldr	r2, [pc, #260]	; (80079b8 <HAL_DMA_IRQHandler+0xe84>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d04a      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a3f      	ldr	r2, [pc, #252]	; (80079bc <HAL_DMA_IRQHandler+0xe88>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d045      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a3e      	ldr	r2, [pc, #248]	; (80079c0 <HAL_DMA_IRQHandler+0xe8c>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d040      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a3c      	ldr	r2, [pc, #240]	; (80079c4 <HAL_DMA_IRQHandler+0xe90>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d03b      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a3b      	ldr	r2, [pc, #236]	; (80079c8 <HAL_DMA_IRQHandler+0xe94>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d036      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a39      	ldr	r2, [pc, #228]	; (80079cc <HAL_DMA_IRQHandler+0xe98>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d031      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a38      	ldr	r2, [pc, #224]	; (80079d0 <HAL_DMA_IRQHandler+0xe9c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d02c      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a36      	ldr	r2, [pc, #216]	; (80079d4 <HAL_DMA_IRQHandler+0xea0>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d027      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a35      	ldr	r2, [pc, #212]	; (80079d8 <HAL_DMA_IRQHandler+0xea4>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d022      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a33      	ldr	r2, [pc, #204]	; (80079dc <HAL_DMA_IRQHandler+0xea8>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d01d      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a32      	ldr	r2, [pc, #200]	; (80079e0 <HAL_DMA_IRQHandler+0xeac>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d018      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a30      	ldr	r2, [pc, #192]	; (80079e4 <HAL_DMA_IRQHandler+0xeb0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d013      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a2f      	ldr	r2, [pc, #188]	; (80079e8 <HAL_DMA_IRQHandler+0xeb4>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00e      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a2d      	ldr	r2, [pc, #180]	; (80079ec <HAL_DMA_IRQHandler+0xeb8>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d009      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a2c      	ldr	r2, [pc, #176]	; (80079f0 <HAL_DMA_IRQHandler+0xebc>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d004      	beq.n	800794e <HAL_DMA_IRQHandler+0xe1a>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a2a      	ldr	r2, [pc, #168]	; (80079f4 <HAL_DMA_IRQHandler+0xec0>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d108      	bne.n	8007960 <HAL_DMA_IRQHandler+0xe2c>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 021c 	bic.w	r2, r2, #28
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	e007      	b.n	8007970 <HAL_DMA_IRQHandler+0xe3c>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 020e 	bic.w	r2, r2, #14
 800796e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007974:	f003 031f 	and.w	r3, r3, #31
 8007978:	2201      	movs	r2, #1
 800797a:	409a      	lsls	r2, r3
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800799a:	2b00      	cmp	r3, #0
 800799c:	d009      	beq.n	80079b2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
 80079a6:	e004      	b.n	80079b2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80079a8:	bf00      	nop
 80079aa:	e002      	b.n	80079b2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079ac:	bf00      	nop
 80079ae:	e000      	b.n	80079b2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80079b2:	3728      	adds	r7, #40	; 0x28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	40020010 	.word	0x40020010
 80079bc:	40020028 	.word	0x40020028
 80079c0:	40020040 	.word	0x40020040
 80079c4:	40020058 	.word	0x40020058
 80079c8:	40020070 	.word	0x40020070
 80079cc:	40020088 	.word	0x40020088
 80079d0:	400200a0 	.word	0x400200a0
 80079d4:	400200b8 	.word	0x400200b8
 80079d8:	40020410 	.word	0x40020410
 80079dc:	40020428 	.word	0x40020428
 80079e0:	40020440 	.word	0x40020440
 80079e4:	40020458 	.word	0x40020458
 80079e8:	40020470 	.word	0x40020470
 80079ec:	40020488 	.word	0x40020488
 80079f0:	400204a0 	.word	0x400204a0
 80079f4:	400204b8 	.word	0x400204b8

080079f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b087      	sub	sp, #28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a10:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a7f      	ldr	r2, [pc, #508]	; (8007c14 <DMA_SetConfig+0x21c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d072      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a7d      	ldr	r2, [pc, #500]	; (8007c18 <DMA_SetConfig+0x220>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d06d      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a7c      	ldr	r2, [pc, #496]	; (8007c1c <DMA_SetConfig+0x224>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d068      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a7a      	ldr	r2, [pc, #488]	; (8007c20 <DMA_SetConfig+0x228>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d063      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a79      	ldr	r2, [pc, #484]	; (8007c24 <DMA_SetConfig+0x22c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d05e      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a77      	ldr	r2, [pc, #476]	; (8007c28 <DMA_SetConfig+0x230>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d059      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a76      	ldr	r2, [pc, #472]	; (8007c2c <DMA_SetConfig+0x234>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d054      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a74      	ldr	r2, [pc, #464]	; (8007c30 <DMA_SetConfig+0x238>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d04f      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a73      	ldr	r2, [pc, #460]	; (8007c34 <DMA_SetConfig+0x23c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d04a      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a71      	ldr	r2, [pc, #452]	; (8007c38 <DMA_SetConfig+0x240>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d045      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a70      	ldr	r2, [pc, #448]	; (8007c3c <DMA_SetConfig+0x244>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d040      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a6e      	ldr	r2, [pc, #440]	; (8007c40 <DMA_SetConfig+0x248>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d03b      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a6d      	ldr	r2, [pc, #436]	; (8007c44 <DMA_SetConfig+0x24c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d036      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a6b      	ldr	r2, [pc, #428]	; (8007c48 <DMA_SetConfig+0x250>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d031      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a6a      	ldr	r2, [pc, #424]	; (8007c4c <DMA_SetConfig+0x254>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d02c      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a68      	ldr	r2, [pc, #416]	; (8007c50 <DMA_SetConfig+0x258>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d027      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a67      	ldr	r2, [pc, #412]	; (8007c54 <DMA_SetConfig+0x25c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d022      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a65      	ldr	r2, [pc, #404]	; (8007c58 <DMA_SetConfig+0x260>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d01d      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a64      	ldr	r2, [pc, #400]	; (8007c5c <DMA_SetConfig+0x264>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d018      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a62      	ldr	r2, [pc, #392]	; (8007c60 <DMA_SetConfig+0x268>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d013      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a61      	ldr	r2, [pc, #388]	; (8007c64 <DMA_SetConfig+0x26c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d00e      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a5f      	ldr	r2, [pc, #380]	; (8007c68 <DMA_SetConfig+0x270>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d009      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a5e      	ldr	r2, [pc, #376]	; (8007c6c <DMA_SetConfig+0x274>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d004      	beq.n	8007b02 <DMA_SetConfig+0x10a>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a5c      	ldr	r2, [pc, #368]	; (8007c70 <DMA_SetConfig+0x278>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d101      	bne.n	8007b06 <DMA_SetConfig+0x10e>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e000      	b.n	8007b08 <DMA_SetConfig+0x110>
 8007b06:	2300      	movs	r3, #0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00d      	beq.n	8007b28 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007b14:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d004      	beq.n	8007b28 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007b26:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a39      	ldr	r2, [pc, #228]	; (8007c14 <DMA_SetConfig+0x21c>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d04a      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a38      	ldr	r2, [pc, #224]	; (8007c18 <DMA_SetConfig+0x220>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d045      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a36      	ldr	r2, [pc, #216]	; (8007c1c <DMA_SetConfig+0x224>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d040      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a35      	ldr	r2, [pc, #212]	; (8007c20 <DMA_SetConfig+0x228>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d03b      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a33      	ldr	r2, [pc, #204]	; (8007c24 <DMA_SetConfig+0x22c>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d036      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a32      	ldr	r2, [pc, #200]	; (8007c28 <DMA_SetConfig+0x230>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d031      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a30      	ldr	r2, [pc, #192]	; (8007c2c <DMA_SetConfig+0x234>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d02c      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a2f      	ldr	r2, [pc, #188]	; (8007c30 <DMA_SetConfig+0x238>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d027      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a2d      	ldr	r2, [pc, #180]	; (8007c34 <DMA_SetConfig+0x23c>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d022      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a2c      	ldr	r2, [pc, #176]	; (8007c38 <DMA_SetConfig+0x240>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d01d      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a2a      	ldr	r2, [pc, #168]	; (8007c3c <DMA_SetConfig+0x244>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d018      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a29      	ldr	r2, [pc, #164]	; (8007c40 <DMA_SetConfig+0x248>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d013      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a27      	ldr	r2, [pc, #156]	; (8007c44 <DMA_SetConfig+0x24c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00e      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a26      	ldr	r2, [pc, #152]	; (8007c48 <DMA_SetConfig+0x250>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d009      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a24      	ldr	r2, [pc, #144]	; (8007c4c <DMA_SetConfig+0x254>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d004      	beq.n	8007bc8 <DMA_SetConfig+0x1d0>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a23      	ldr	r2, [pc, #140]	; (8007c50 <DMA_SetConfig+0x258>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d101      	bne.n	8007bcc <DMA_SetConfig+0x1d4>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e000      	b.n	8007bce <DMA_SetConfig+0x1d6>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d059      	beq.n	8007c86 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd6:	f003 031f 	and.w	r3, r3, #31
 8007bda:	223f      	movs	r2, #63	; 0x3f
 8007bdc:	409a      	lsls	r2, r3
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007bf0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	2b40      	cmp	r3, #64	; 0x40
 8007c00:	d138      	bne.n	8007c74 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c12:	e0ae      	b.n	8007d72 <DMA_SetConfig+0x37a>
 8007c14:	40020010 	.word	0x40020010
 8007c18:	40020028 	.word	0x40020028
 8007c1c:	40020040 	.word	0x40020040
 8007c20:	40020058 	.word	0x40020058
 8007c24:	40020070 	.word	0x40020070
 8007c28:	40020088 	.word	0x40020088
 8007c2c:	400200a0 	.word	0x400200a0
 8007c30:	400200b8 	.word	0x400200b8
 8007c34:	40020410 	.word	0x40020410
 8007c38:	40020428 	.word	0x40020428
 8007c3c:	40020440 	.word	0x40020440
 8007c40:	40020458 	.word	0x40020458
 8007c44:	40020470 	.word	0x40020470
 8007c48:	40020488 	.word	0x40020488
 8007c4c:	400204a0 	.word	0x400204a0
 8007c50:	400204b8 	.word	0x400204b8
 8007c54:	58025408 	.word	0x58025408
 8007c58:	5802541c 	.word	0x5802541c
 8007c5c:	58025430 	.word	0x58025430
 8007c60:	58025444 	.word	0x58025444
 8007c64:	58025458 	.word	0x58025458
 8007c68:	5802546c 	.word	0x5802546c
 8007c6c:	58025480 	.word	0x58025480
 8007c70:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	60da      	str	r2, [r3, #12]
}
 8007c84:	e075      	b.n	8007d72 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a3d      	ldr	r2, [pc, #244]	; (8007d80 <DMA_SetConfig+0x388>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d04a      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a3b      	ldr	r2, [pc, #236]	; (8007d84 <DMA_SetConfig+0x38c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d045      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a3a      	ldr	r2, [pc, #232]	; (8007d88 <DMA_SetConfig+0x390>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d040      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a38      	ldr	r2, [pc, #224]	; (8007d8c <DMA_SetConfig+0x394>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d03b      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a37      	ldr	r2, [pc, #220]	; (8007d90 <DMA_SetConfig+0x398>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d036      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a35      	ldr	r2, [pc, #212]	; (8007d94 <DMA_SetConfig+0x39c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d031      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a34      	ldr	r2, [pc, #208]	; (8007d98 <DMA_SetConfig+0x3a0>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d02c      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a32      	ldr	r2, [pc, #200]	; (8007d9c <DMA_SetConfig+0x3a4>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d027      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a31      	ldr	r2, [pc, #196]	; (8007da0 <DMA_SetConfig+0x3a8>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d022      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a2f      	ldr	r2, [pc, #188]	; (8007da4 <DMA_SetConfig+0x3ac>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d01d      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a2e      	ldr	r2, [pc, #184]	; (8007da8 <DMA_SetConfig+0x3b0>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d018      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a2c      	ldr	r2, [pc, #176]	; (8007dac <DMA_SetConfig+0x3b4>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d013      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a2b      	ldr	r2, [pc, #172]	; (8007db0 <DMA_SetConfig+0x3b8>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d00e      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a29      	ldr	r2, [pc, #164]	; (8007db4 <DMA_SetConfig+0x3bc>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d009      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a28      	ldr	r2, [pc, #160]	; (8007db8 <DMA_SetConfig+0x3c0>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d004      	beq.n	8007d26 <DMA_SetConfig+0x32e>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a26      	ldr	r2, [pc, #152]	; (8007dbc <DMA_SetConfig+0x3c4>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d101      	bne.n	8007d2a <DMA_SetConfig+0x332>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e000      	b.n	8007d2c <DMA_SetConfig+0x334>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d020      	beq.n	8007d72 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d34:	f003 031f 	and.w	r3, r3, #31
 8007d38:	2201      	movs	r2, #1
 8007d3a:	409a      	lsls	r2, r3
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	2b40      	cmp	r3, #64	; 0x40
 8007d4e:	d108      	bne.n	8007d62 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	60da      	str	r2, [r3, #12]
}
 8007d60:	e007      	b.n	8007d72 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	60da      	str	r2, [r3, #12]
}
 8007d72:	bf00      	nop
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	48022c08 	.word	0x48022c08
 8007d84:	48022c1c 	.word	0x48022c1c
 8007d88:	48022c30 	.word	0x48022c30
 8007d8c:	48022c44 	.word	0x48022c44
 8007d90:	48022c58 	.word	0x48022c58
 8007d94:	48022c6c 	.word	0x48022c6c
 8007d98:	48022c80 	.word	0x48022c80
 8007d9c:	48022c94 	.word	0x48022c94
 8007da0:	58025408 	.word	0x58025408
 8007da4:	5802541c 	.word	0x5802541c
 8007da8:	58025430 	.word	0x58025430
 8007dac:	58025444 	.word	0x58025444
 8007db0:	58025458 	.word	0x58025458
 8007db4:	5802546c 	.word	0x5802546c
 8007db8:	58025480 	.word	0x58025480
 8007dbc:	58025494 	.word	0x58025494

08007dc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a42      	ldr	r2, [pc, #264]	; (8007ed8 <DMA_CalcBaseAndBitshift+0x118>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d04a      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a41      	ldr	r2, [pc, #260]	; (8007edc <DMA_CalcBaseAndBitshift+0x11c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d045      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a3f      	ldr	r2, [pc, #252]	; (8007ee0 <DMA_CalcBaseAndBitshift+0x120>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d040      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a3e      	ldr	r2, [pc, #248]	; (8007ee4 <DMA_CalcBaseAndBitshift+0x124>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d03b      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a3c      	ldr	r2, [pc, #240]	; (8007ee8 <DMA_CalcBaseAndBitshift+0x128>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d036      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a3b      	ldr	r2, [pc, #236]	; (8007eec <DMA_CalcBaseAndBitshift+0x12c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d031      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a39      	ldr	r2, [pc, #228]	; (8007ef0 <DMA_CalcBaseAndBitshift+0x130>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d02c      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a38      	ldr	r2, [pc, #224]	; (8007ef4 <DMA_CalcBaseAndBitshift+0x134>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d027      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a36      	ldr	r2, [pc, #216]	; (8007ef8 <DMA_CalcBaseAndBitshift+0x138>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d022      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a35      	ldr	r2, [pc, #212]	; (8007efc <DMA_CalcBaseAndBitshift+0x13c>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d01d      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a33      	ldr	r2, [pc, #204]	; (8007f00 <DMA_CalcBaseAndBitshift+0x140>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d018      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a32      	ldr	r2, [pc, #200]	; (8007f04 <DMA_CalcBaseAndBitshift+0x144>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d013      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a30      	ldr	r2, [pc, #192]	; (8007f08 <DMA_CalcBaseAndBitshift+0x148>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00e      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a2f      	ldr	r2, [pc, #188]	; (8007f0c <DMA_CalcBaseAndBitshift+0x14c>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d009      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a2d      	ldr	r2, [pc, #180]	; (8007f10 <DMA_CalcBaseAndBitshift+0x150>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d004      	beq.n	8007e68 <DMA_CalcBaseAndBitshift+0xa8>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a2c      	ldr	r2, [pc, #176]	; (8007f14 <DMA_CalcBaseAndBitshift+0x154>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d101      	bne.n	8007e6c <DMA_CalcBaseAndBitshift+0xac>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e000      	b.n	8007e6e <DMA_CalcBaseAndBitshift+0xae>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d024      	beq.n	8007ebc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	3b10      	subs	r3, #16
 8007e7a:	4a27      	ldr	r2, [pc, #156]	; (8007f18 <DMA_CalcBaseAndBitshift+0x158>)
 8007e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e80:	091b      	lsrs	r3, r3, #4
 8007e82:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	4a24      	ldr	r2, [pc, #144]	; (8007f1c <DMA_CalcBaseAndBitshift+0x15c>)
 8007e8c:	5cd3      	ldrb	r3, [r2, r3]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d908      	bls.n	8007eac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	4b1f      	ldr	r3, [pc, #124]	; (8007f20 <DMA_CalcBaseAndBitshift+0x160>)
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	1d1a      	adds	r2, r3, #4
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	659a      	str	r2, [r3, #88]	; 0x58
 8007eaa:	e00d      	b.n	8007ec8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	4b1b      	ldr	r3, [pc, #108]	; (8007f20 <DMA_CalcBaseAndBitshift+0x160>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8007eba:	e005      	b.n	8007ec8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	40020010 	.word	0x40020010
 8007edc:	40020028 	.word	0x40020028
 8007ee0:	40020040 	.word	0x40020040
 8007ee4:	40020058 	.word	0x40020058
 8007ee8:	40020070 	.word	0x40020070
 8007eec:	40020088 	.word	0x40020088
 8007ef0:	400200a0 	.word	0x400200a0
 8007ef4:	400200b8 	.word	0x400200b8
 8007ef8:	40020410 	.word	0x40020410
 8007efc:	40020428 	.word	0x40020428
 8007f00:	40020440 	.word	0x40020440
 8007f04:	40020458 	.word	0x40020458
 8007f08:	40020470 	.word	0x40020470
 8007f0c:	40020488 	.word	0x40020488
 8007f10:	400204a0 	.word	0x400204a0
 8007f14:	400204b8 	.word	0x400204b8
 8007f18:	aaaaaaab 	.word	0xaaaaaaab
 8007f1c:	08015cfc 	.word	0x08015cfc
 8007f20:	fffffc00 	.word	0xfffffc00

08007f24 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d120      	bne.n	8007f7a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d858      	bhi.n	8007ff2 <DMA_CheckFifoParam+0xce>
 8007f40:	a201      	add	r2, pc, #4	; (adr r2, 8007f48 <DMA_CheckFifoParam+0x24>)
 8007f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f46:	bf00      	nop
 8007f48:	08007f59 	.word	0x08007f59
 8007f4c:	08007f6b 	.word	0x08007f6b
 8007f50:	08007f59 	.word	0x08007f59
 8007f54:	08007ff3 	.word	0x08007ff3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d048      	beq.n	8007ff6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f68:	e045      	b.n	8007ff6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f72:	d142      	bne.n	8007ffa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f78:	e03f      	b.n	8007ffa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f82:	d123      	bne.n	8007fcc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d838      	bhi.n	8007ffe <DMA_CheckFifoParam+0xda>
 8007f8c:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <DMA_CheckFifoParam+0x70>)
 8007f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f92:	bf00      	nop
 8007f94:	08007fa5 	.word	0x08007fa5
 8007f98:	08007fab 	.word	0x08007fab
 8007f9c:	08007fa5 	.word	0x08007fa5
 8007fa0:	08007fbd 	.word	0x08007fbd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	73fb      	strb	r3, [r7, #15]
        break;
 8007fa8:	e030      	b.n	800800c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d025      	beq.n	8008002 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fba:	e022      	b.n	8008002 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007fc4:	d11f      	bne.n	8008006 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fca:	e01c      	b.n	8008006 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d902      	bls.n	8007fda <DMA_CheckFifoParam+0xb6>
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d003      	beq.n	8007fe0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007fd8:	e018      	b.n	800800c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	73fb      	strb	r3, [r7, #15]
        break;
 8007fde:	e015      	b.n	800800c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00e      	beq.n	800800a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	73fb      	strb	r3, [r7, #15]
    break;
 8007ff0:	e00b      	b.n	800800a <DMA_CheckFifoParam+0xe6>
        break;
 8007ff2:	bf00      	nop
 8007ff4:	e00a      	b.n	800800c <DMA_CheckFifoParam+0xe8>
        break;
 8007ff6:	bf00      	nop
 8007ff8:	e008      	b.n	800800c <DMA_CheckFifoParam+0xe8>
        break;
 8007ffa:	bf00      	nop
 8007ffc:	e006      	b.n	800800c <DMA_CheckFifoParam+0xe8>
        break;
 8007ffe:	bf00      	nop
 8008000:	e004      	b.n	800800c <DMA_CheckFifoParam+0xe8>
        break;
 8008002:	bf00      	nop
 8008004:	e002      	b.n	800800c <DMA_CheckFifoParam+0xe8>
        break;
 8008006:	bf00      	nop
 8008008:	e000      	b.n	800800c <DMA_CheckFifoParam+0xe8>
    break;
 800800a:	bf00      	nop
    }
  }

  return status;
 800800c:	7bfb      	ldrb	r3, [r7, #15]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop

0800801c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a38      	ldr	r2, [pc, #224]	; (8008110 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d022      	beq.n	800807a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a36      	ldr	r2, [pc, #216]	; (8008114 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d01d      	beq.n	800807a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a35      	ldr	r2, [pc, #212]	; (8008118 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d018      	beq.n	800807a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a33      	ldr	r2, [pc, #204]	; (800811c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d013      	beq.n	800807a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a32      	ldr	r2, [pc, #200]	; (8008120 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00e      	beq.n	800807a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a30      	ldr	r2, [pc, #192]	; (8008124 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d009      	beq.n	800807a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a2f      	ldr	r2, [pc, #188]	; (8008128 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d004      	beq.n	800807a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a2d      	ldr	r2, [pc, #180]	; (800812c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d101      	bne.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800807a:	2301      	movs	r3, #1
 800807c:	e000      	b.n	8008080 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800807e:	2300      	movs	r3, #0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01a      	beq.n	80080ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	b2db      	uxtb	r3, r3
 800808a:	3b08      	subs	r3, #8
 800808c:	4a28      	ldr	r2, [pc, #160]	; (8008130 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800808e:	fba2 2303 	umull	r2, r3, r2, r3
 8008092:	091b      	lsrs	r3, r3, #4
 8008094:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	4b26      	ldr	r3, [pc, #152]	; (8008134 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800809a:	4413      	add	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	461a      	mov	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a24      	ldr	r2, [pc, #144]	; (8008138 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80080a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f003 031f 	and.w	r3, r3, #31
 80080b0:	2201      	movs	r2, #1
 80080b2:	409a      	lsls	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80080b8:	e024      	b.n	8008104 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	3b10      	subs	r3, #16
 80080c2:	4a1e      	ldr	r2, [pc, #120]	; (800813c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80080c4:	fba2 2303 	umull	r2, r3, r2, r3
 80080c8:	091b      	lsrs	r3, r3, #4
 80080ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4a1c      	ldr	r2, [pc, #112]	; (8008140 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d806      	bhi.n	80080e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	4a1b      	ldr	r2, [pc, #108]	; (8008144 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d902      	bls.n	80080e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	3308      	adds	r3, #8
 80080e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	4b18      	ldr	r3, [pc, #96]	; (8008148 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80080e6:	4413      	add	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	461a      	mov	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a16      	ldr	r2, [pc, #88]	; (800814c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80080f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f003 031f 	and.w	r3, r3, #31
 80080fc:	2201      	movs	r2, #1
 80080fe:	409a      	lsls	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	58025408 	.word	0x58025408
 8008114:	5802541c 	.word	0x5802541c
 8008118:	58025430 	.word	0x58025430
 800811c:	58025444 	.word	0x58025444
 8008120:	58025458 	.word	0x58025458
 8008124:	5802546c 	.word	0x5802546c
 8008128:	58025480 	.word	0x58025480
 800812c:	58025494 	.word	0x58025494
 8008130:	cccccccd 	.word	0xcccccccd
 8008134:	16009600 	.word	0x16009600
 8008138:	58025880 	.word	0x58025880
 800813c:	aaaaaaab 	.word	0xaaaaaaab
 8008140:	400204b8 	.word	0x400204b8
 8008144:	4002040f 	.word	0x4002040f
 8008148:	10008200 	.word	0x10008200
 800814c:	40020880 	.word	0x40020880

08008150 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	b2db      	uxtb	r3, r3
 800815e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d04a      	beq.n	80081fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b08      	cmp	r3, #8
 800816a:	d847      	bhi.n	80081fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a25      	ldr	r2, [pc, #148]	; (8008208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d022      	beq.n	80081bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a24      	ldr	r2, [pc, #144]	; (800820c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d01d      	beq.n	80081bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a22      	ldr	r2, [pc, #136]	; (8008210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d018      	beq.n	80081bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a21      	ldr	r2, [pc, #132]	; (8008214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d013      	beq.n	80081bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1f      	ldr	r2, [pc, #124]	; (8008218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d00e      	beq.n	80081bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a1e      	ldr	r2, [pc, #120]	; (800821c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d009      	beq.n	80081bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a1c      	ldr	r2, [pc, #112]	; (8008220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d004      	beq.n	80081bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a1b      	ldr	r2, [pc, #108]	; (8008224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d101      	bne.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80081bc:	2301      	movs	r3, #1
 80081be:	e000      	b.n	80081c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80081c0:	2300      	movs	r3, #0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00a      	beq.n	80081dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	4b17      	ldr	r3, [pc, #92]	; (8008228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80081ca:	4413      	add	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	461a      	mov	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a15      	ldr	r2, [pc, #84]	; (800822c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80081d8:	671a      	str	r2, [r3, #112]	; 0x70
 80081da:	e009      	b.n	80081f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4b14      	ldr	r3, [pc, #80]	; (8008230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80081e0:	4413      	add	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	461a      	mov	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a11      	ldr	r2, [pc, #68]	; (8008234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80081ee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	2201      	movs	r2, #1
 80081f6:	409a      	lsls	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80081fc:	bf00      	nop
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	58025408 	.word	0x58025408
 800820c:	5802541c 	.word	0x5802541c
 8008210:	58025430 	.word	0x58025430
 8008214:	58025444 	.word	0x58025444
 8008218:	58025458 	.word	0x58025458
 800821c:	5802546c 	.word	0x5802546c
 8008220:	58025480 	.word	0x58025480
 8008224:	58025494 	.word	0x58025494
 8008228:	1600963f 	.word	0x1600963f
 800822c:	58025940 	.word	0x58025940
 8008230:	1000823f 	.word	0x1000823f
 8008234:	40020940 	.word	0x40020940

08008238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008238:	b480      	push	{r7}
 800823a:	b089      	sub	sp, #36	; 0x24
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008242:	2300      	movs	r3, #0
 8008244:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008246:	4b89      	ldr	r3, [pc, #548]	; (800846c <HAL_GPIO_Init+0x234>)
 8008248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800824a:	e194      	b.n	8008576 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	2101      	movs	r1, #1
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	fa01 f303 	lsl.w	r3, r1, r3
 8008258:	4013      	ands	r3, r2
 800825a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 8186 	beq.w	8008570 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f003 0303 	and.w	r3, r3, #3
 800826c:	2b01      	cmp	r3, #1
 800826e:	d005      	beq.n	800827c <HAL_GPIO_Init+0x44>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f003 0303 	and.w	r3, r3, #3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d130      	bne.n	80082de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	2203      	movs	r2, #3
 8008288:	fa02 f303 	lsl.w	r3, r2, r3
 800828c:	43db      	mvns	r3, r3
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	4013      	ands	r3, r2
 8008292:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	fa02 f303 	lsl.w	r3, r2, r3
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80082b2:	2201      	movs	r2, #1
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ba:	43db      	mvns	r3, r3
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	4013      	ands	r3, r2
 80082c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	091b      	lsrs	r3, r3, #4
 80082c8:	f003 0201 	and.w	r2, r3, #1
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	fa02 f303 	lsl.w	r3, r2, r3
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d017      	beq.n	800831a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	2203      	movs	r2, #3
 80082f6:	fa02 f303 	lsl.w	r3, r2, r3
 80082fa:	43db      	mvns	r3, r3
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	4013      	ands	r3, r2
 8008300:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	689a      	ldr	r2, [r3, #8]
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	fa02 f303 	lsl.w	r3, r2, r3
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	4313      	orrs	r3, r2
 8008312:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f003 0303 	and.w	r3, r3, #3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d123      	bne.n	800836e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	08da      	lsrs	r2, r3, #3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3208      	adds	r2, #8
 800832e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	220f      	movs	r2, #15
 800833e:	fa02 f303 	lsl.w	r3, r2, r3
 8008342:	43db      	mvns	r3, r3
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	4013      	ands	r3, r2
 8008348:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	691a      	ldr	r2, [r3, #16]
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	f003 0307 	and.w	r3, r3, #7
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	fa02 f303 	lsl.w	r3, r2, r3
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	4313      	orrs	r3, r2
 800835e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	08da      	lsrs	r2, r3, #3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3208      	adds	r2, #8
 8008368:	69b9      	ldr	r1, [r7, #24]
 800836a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	2203      	movs	r2, #3
 800837a:	fa02 f303 	lsl.w	r3, r2, r3
 800837e:	43db      	mvns	r3, r3
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	4013      	ands	r3, r2
 8008384:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f003 0203 	and.w	r2, r3, #3
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	fa02 f303 	lsl.w	r3, r2, r3
 8008396:	69ba      	ldr	r2, [r7, #24]
 8008398:	4313      	orrs	r3, r2
 800839a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 80e0 	beq.w	8008570 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083b0:	4b2f      	ldr	r3, [pc, #188]	; (8008470 <HAL_GPIO_Init+0x238>)
 80083b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80083b6:	4a2e      	ldr	r2, [pc, #184]	; (8008470 <HAL_GPIO_Init+0x238>)
 80083b8:	f043 0302 	orr.w	r3, r3, #2
 80083bc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80083c0:	4b2b      	ldr	r3, [pc, #172]	; (8008470 <HAL_GPIO_Init+0x238>)
 80083c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80083ce:	4a29      	ldr	r2, [pc, #164]	; (8008474 <HAL_GPIO_Init+0x23c>)
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	089b      	lsrs	r3, r3, #2
 80083d4:	3302      	adds	r3, #2
 80083d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	f003 0303 	and.w	r3, r3, #3
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	220f      	movs	r2, #15
 80083e6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ea:	43db      	mvns	r3, r3
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	4013      	ands	r3, r2
 80083f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a20      	ldr	r2, [pc, #128]	; (8008478 <HAL_GPIO_Init+0x240>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d052      	beq.n	80084a0 <HAL_GPIO_Init+0x268>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a1f      	ldr	r2, [pc, #124]	; (800847c <HAL_GPIO_Init+0x244>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d031      	beq.n	8008466 <HAL_GPIO_Init+0x22e>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a1e      	ldr	r2, [pc, #120]	; (8008480 <HAL_GPIO_Init+0x248>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d02b      	beq.n	8008462 <HAL_GPIO_Init+0x22a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a1d      	ldr	r2, [pc, #116]	; (8008484 <HAL_GPIO_Init+0x24c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d025      	beq.n	800845e <HAL_GPIO_Init+0x226>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a1c      	ldr	r2, [pc, #112]	; (8008488 <HAL_GPIO_Init+0x250>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d01f      	beq.n	800845a <HAL_GPIO_Init+0x222>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a1b      	ldr	r2, [pc, #108]	; (800848c <HAL_GPIO_Init+0x254>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d019      	beq.n	8008456 <HAL_GPIO_Init+0x21e>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a1a      	ldr	r2, [pc, #104]	; (8008490 <HAL_GPIO_Init+0x258>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d013      	beq.n	8008452 <HAL_GPIO_Init+0x21a>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a19      	ldr	r2, [pc, #100]	; (8008494 <HAL_GPIO_Init+0x25c>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d00d      	beq.n	800844e <HAL_GPIO_Init+0x216>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a18      	ldr	r2, [pc, #96]	; (8008498 <HAL_GPIO_Init+0x260>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d007      	beq.n	800844a <HAL_GPIO_Init+0x212>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a17      	ldr	r2, [pc, #92]	; (800849c <HAL_GPIO_Init+0x264>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d101      	bne.n	8008446 <HAL_GPIO_Init+0x20e>
 8008442:	2309      	movs	r3, #9
 8008444:	e02d      	b.n	80084a2 <HAL_GPIO_Init+0x26a>
 8008446:	230a      	movs	r3, #10
 8008448:	e02b      	b.n	80084a2 <HAL_GPIO_Init+0x26a>
 800844a:	2308      	movs	r3, #8
 800844c:	e029      	b.n	80084a2 <HAL_GPIO_Init+0x26a>
 800844e:	2307      	movs	r3, #7
 8008450:	e027      	b.n	80084a2 <HAL_GPIO_Init+0x26a>
 8008452:	2306      	movs	r3, #6
 8008454:	e025      	b.n	80084a2 <HAL_GPIO_Init+0x26a>
 8008456:	2305      	movs	r3, #5
 8008458:	e023      	b.n	80084a2 <HAL_GPIO_Init+0x26a>
 800845a:	2304      	movs	r3, #4
 800845c:	e021      	b.n	80084a2 <HAL_GPIO_Init+0x26a>
 800845e:	2303      	movs	r3, #3
 8008460:	e01f      	b.n	80084a2 <HAL_GPIO_Init+0x26a>
 8008462:	2302      	movs	r3, #2
 8008464:	e01d      	b.n	80084a2 <HAL_GPIO_Init+0x26a>
 8008466:	2301      	movs	r3, #1
 8008468:	e01b      	b.n	80084a2 <HAL_GPIO_Init+0x26a>
 800846a:	bf00      	nop
 800846c:	58000080 	.word	0x58000080
 8008470:	58024400 	.word	0x58024400
 8008474:	58000400 	.word	0x58000400
 8008478:	58020000 	.word	0x58020000
 800847c:	58020400 	.word	0x58020400
 8008480:	58020800 	.word	0x58020800
 8008484:	58020c00 	.word	0x58020c00
 8008488:	58021000 	.word	0x58021000
 800848c:	58021400 	.word	0x58021400
 8008490:	58021800 	.word	0x58021800
 8008494:	58021c00 	.word	0x58021c00
 8008498:	58022000 	.word	0x58022000
 800849c:	58022400 	.word	0x58022400
 80084a0:	2300      	movs	r3, #0
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	f002 0203 	and.w	r2, r2, #3
 80084a8:	0092      	lsls	r2, r2, #2
 80084aa:	4093      	lsls	r3, r2
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80084b2:	4938      	ldr	r1, [pc, #224]	; (8008594 <HAL_GPIO_Init+0x35c>)
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	089b      	lsrs	r3, r3, #2
 80084b8:	3302      	adds	r3, #2
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80084c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	43db      	mvns	r3, r3
 80084cc:	69ba      	ldr	r2, [r7, #24]
 80084ce:	4013      	ands	r3, r2
 80084d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80084e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80084ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	43db      	mvns	r3, r3
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	4013      	ands	r3, r2
 80084fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	4313      	orrs	r3, r2
 8008512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	43db      	mvns	r3, r3
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	4013      	ands	r3, r2
 800852a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	4313      	orrs	r3, r2
 800853e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	43db      	mvns	r3, r3
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	4013      	ands	r3, r2
 8008554:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	4313      	orrs	r3, r2
 8008568:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	3301      	adds	r3, #1
 8008574:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	fa22 f303 	lsr.w	r3, r2, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	f47f ae63 	bne.w	800824c <HAL_GPIO_Init+0x14>
  }
}
 8008586:	bf00      	nop
 8008588:	bf00      	nop
 800858a:	3724      	adds	r7, #36	; 0x24
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	58000400 	.word	0x58000400

08008598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	460b      	mov	r3, r1
 80085a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	691a      	ldr	r2, [r3, #16]
 80085a8:	887b      	ldrh	r3, [r7, #2]
 80085aa:	4013      	ands	r3, r2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80085b0:	2301      	movs	r3, #1
 80085b2:	73fb      	strb	r3, [r7, #15]
 80085b4:	e001      	b.n	80085ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	807b      	strh	r3, [r7, #2]
 80085d4:	4613      	mov	r3, r2
 80085d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80085d8:	787b      	ldrb	r3, [r7, #1]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085de:	887a      	ldrh	r2, [r7, #2]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80085e4:	e003      	b.n	80085ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80085e6:	887b      	ldrh	r3, [r7, #2]
 80085e8:	041a      	lsls	r2, r3, #16
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	619a      	str	r2, [r3, #24]
}
 80085ee:	bf00      	nop
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
	...

080085fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008604:	4b29      	ldr	r3, [pc, #164]	; (80086ac <HAL_PWREx_ConfigSupply+0xb0>)
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	2b06      	cmp	r3, #6
 800860e:	d00a      	beq.n	8008626 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008610:	4b26      	ldr	r3, [pc, #152]	; (80086ac <HAL_PWREx_ConfigSupply+0xb0>)
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	429a      	cmp	r2, r3
 800861c:	d001      	beq.n	8008622 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e040      	b.n	80086a4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	e03e      	b.n	80086a4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008626:	4b21      	ldr	r3, [pc, #132]	; (80086ac <HAL_PWREx_ConfigSupply+0xb0>)
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800862e:	491f      	ldr	r1, [pc, #124]	; (80086ac <HAL_PWREx_ConfigSupply+0xb0>)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4313      	orrs	r3, r2
 8008634:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008636:	f7fb f8f7 	bl	8003828 <HAL_GetTick>
 800863a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800863c:	e009      	b.n	8008652 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800863e:	f7fb f8f3 	bl	8003828 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800864c:	d901      	bls.n	8008652 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e028      	b.n	80086a4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008652:	4b16      	ldr	r3, [pc, #88]	; (80086ac <HAL_PWREx_ConfigSupply+0xb0>)
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800865a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800865e:	d1ee      	bne.n	800863e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b1e      	cmp	r3, #30
 8008664:	d008      	beq.n	8008678 <HAL_PWREx_ConfigSupply+0x7c>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b2e      	cmp	r3, #46	; 0x2e
 800866a:	d005      	beq.n	8008678 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b1d      	cmp	r3, #29
 8008670:	d002      	beq.n	8008678 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b2d      	cmp	r3, #45	; 0x2d
 8008676:	d114      	bne.n	80086a2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008678:	f7fb f8d6 	bl	8003828 <HAL_GetTick>
 800867c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800867e:	e009      	b.n	8008694 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008680:	f7fb f8d2 	bl	8003828 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800868e:	d901      	bls.n	8008694 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e007      	b.n	80086a4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008694:	4b05      	ldr	r3, [pc, #20]	; (80086ac <HAL_PWREx_ConfigSupply+0xb0>)
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800869c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086a0:	d1ee      	bne.n	8008680 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	58024800 	.word	0x58024800

080086b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08c      	sub	sp, #48	; 0x30
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d102      	bne.n	80086c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	f000 bc1f 	b.w	8008f02 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 80b3 	beq.w	8008838 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086d2:	4b95      	ldr	r3, [pc, #596]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086da:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086dc:	4b92      	ldr	r3, [pc, #584]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80086e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e4:	2b10      	cmp	r3, #16
 80086e6:	d007      	beq.n	80086f8 <HAL_RCC_OscConfig+0x48>
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ea:	2b18      	cmp	r3, #24
 80086ec:	d112      	bne.n	8008714 <HAL_RCC_OscConfig+0x64>
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	f003 0303 	and.w	r3, r3, #3
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d10d      	bne.n	8008714 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086f8:	4b8b      	ldr	r3, [pc, #556]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 8098 	beq.w	8008836 <HAL_RCC_OscConfig+0x186>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	f040 8093 	bne.w	8008836 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e3f6      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800871c:	d106      	bne.n	800872c <HAL_RCC_OscConfig+0x7c>
 800871e:	4b82      	ldr	r3, [pc, #520]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a81      	ldr	r2, [pc, #516]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	e058      	b.n	80087de <HAL_RCC_OscConfig+0x12e>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d112      	bne.n	800875a <HAL_RCC_OscConfig+0xaa>
 8008734:	4b7c      	ldr	r3, [pc, #496]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a7b      	ldr	r2, [pc, #492]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 800873a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	4b79      	ldr	r3, [pc, #484]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a78      	ldr	r2, [pc, #480]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008746:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800874a:	6013      	str	r3, [r2, #0]
 800874c:	4b76      	ldr	r3, [pc, #472]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a75      	ldr	r2, [pc, #468]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	e041      	b.n	80087de <HAL_RCC_OscConfig+0x12e>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008762:	d112      	bne.n	800878a <HAL_RCC_OscConfig+0xda>
 8008764:	4b70      	ldr	r3, [pc, #448]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a6f      	ldr	r2, [pc, #444]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 800876a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800876e:	6013      	str	r3, [r2, #0]
 8008770:	4b6d      	ldr	r3, [pc, #436]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a6c      	ldr	r2, [pc, #432]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008776:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	4b6a      	ldr	r3, [pc, #424]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a69      	ldr	r2, [pc, #420]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	e029      	b.n	80087de <HAL_RCC_OscConfig+0x12e>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8008792:	d112      	bne.n	80087ba <HAL_RCC_OscConfig+0x10a>
 8008794:	4b64      	ldr	r3, [pc, #400]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a63      	ldr	r2, [pc, #396]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 800879a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	4b61      	ldr	r3, [pc, #388]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a60      	ldr	r2, [pc, #384]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80087a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	4b5e      	ldr	r3, [pc, #376]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a5d      	ldr	r2, [pc, #372]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80087b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	e011      	b.n	80087de <HAL_RCC_OscConfig+0x12e>
 80087ba:	4b5b      	ldr	r3, [pc, #364]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a5a      	ldr	r2, [pc, #360]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80087c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	4b58      	ldr	r3, [pc, #352]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a57      	ldr	r2, [pc, #348]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80087cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	4b55      	ldr	r3, [pc, #340]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a54      	ldr	r2, [pc, #336]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80087d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80087dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d013      	beq.n	800880e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e6:	f7fb f81f 	bl	8003828 <HAL_GetTick>
 80087ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087ec:	e008      	b.n	8008800 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087ee:	f7fb f81b 	bl	8003828 <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	2b64      	cmp	r3, #100	; 0x64
 80087fa:	d901      	bls.n	8008800 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e380      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008800:	4b49      	ldr	r3, [pc, #292]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0f0      	beq.n	80087ee <HAL_RCC_OscConfig+0x13e>
 800880c:	e014      	b.n	8008838 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880e:	f7fb f80b 	bl	8003828 <HAL_GetTick>
 8008812:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008814:	e008      	b.n	8008828 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008816:	f7fb f807 	bl	8003828 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b64      	cmp	r3, #100	; 0x64
 8008822:	d901      	bls.n	8008828 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e36c      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008828:	4b3f      	ldr	r3, [pc, #252]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1f0      	bne.n	8008816 <HAL_RCC_OscConfig+0x166>
 8008834:	e000      	b.n	8008838 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008836:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 808c 	beq.w	800895e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008846:	4b38      	ldr	r3, [pc, #224]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800884e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008850:	4b35      	ldr	r3, [pc, #212]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008854:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d007      	beq.n	800886c <HAL_RCC_OscConfig+0x1bc>
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	2b18      	cmp	r3, #24
 8008860:	d137      	bne.n	80088d2 <HAL_RCC_OscConfig+0x222>
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	f003 0303 	and.w	r3, r3, #3
 8008868:	2b00      	cmp	r3, #0
 800886a:	d132      	bne.n	80088d2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800886c:	4b2e      	ldr	r3, [pc, #184]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b00      	cmp	r3, #0
 8008876:	d005      	beq.n	8008884 <HAL_RCC_OscConfig+0x1d4>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e33e      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008884:	4b28      	ldr	r3, [pc, #160]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f023 0219 	bic.w	r2, r3, #25
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	4925      	ldr	r1, [pc, #148]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008892:	4313      	orrs	r3, r2
 8008894:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008896:	f7fa ffc7 	bl	8003828 <HAL_GetTick>
 800889a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800889c:	e008      	b.n	80088b0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800889e:	f7fa ffc3 	bl	8003828 <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d901      	bls.n	80088b0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e328      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088b0:	4b1d      	ldr	r3, [pc, #116]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0304 	and.w	r3, r3, #4
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d0f0      	beq.n	800889e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088bc:	4b1a      	ldr	r3, [pc, #104]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	061b      	lsls	r3, r3, #24
 80088ca:	4917      	ldr	r1, [pc, #92]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088d0:	e045      	b.n	800895e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d028      	beq.n	800892c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088da:	4b13      	ldr	r3, [pc, #76]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f023 0219 	bic.w	r2, r3, #25
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	4910      	ldr	r1, [pc, #64]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ec:	f7fa ff9c 	bl	8003828 <HAL_GetTick>
 80088f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088f2:	e008      	b.n	8008906 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088f4:	f7fa ff98 	bl	8003828 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d901      	bls.n	8008906 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e2fd      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008906:	4b08      	ldr	r3, [pc, #32]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0304 	and.w	r3, r3, #4
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0f0      	beq.n	80088f4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008912:	4b05      	ldr	r3, [pc, #20]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	061b      	lsls	r3, r3, #24
 8008920:	4901      	ldr	r1, [pc, #4]	; (8008928 <HAL_RCC_OscConfig+0x278>)
 8008922:	4313      	orrs	r3, r2
 8008924:	604b      	str	r3, [r1, #4]
 8008926:	e01a      	b.n	800895e <HAL_RCC_OscConfig+0x2ae>
 8008928:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800892c:	4b97      	ldr	r3, [pc, #604]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a96      	ldr	r2, [pc, #600]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008932:	f023 0301 	bic.w	r3, r3, #1
 8008936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008938:	f7fa ff76 	bl	8003828 <HAL_GetTick>
 800893c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800893e:	e008      	b.n	8008952 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008940:	f7fa ff72 	bl	8003828 <HAL_GetTick>
 8008944:	4602      	mov	r2, r0
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	2b02      	cmp	r3, #2
 800894c:	d901      	bls.n	8008952 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e2d7      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008952:	4b8e      	ldr	r3, [pc, #568]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0304 	and.w	r3, r3, #4
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1f0      	bne.n	8008940 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0310 	and.w	r3, r3, #16
 8008966:	2b00      	cmp	r3, #0
 8008968:	d06a      	beq.n	8008a40 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800896a:	4b88      	ldr	r3, [pc, #544]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008972:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008974:	4b85      	ldr	r3, [pc, #532]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008978:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	2b08      	cmp	r3, #8
 800897e:	d007      	beq.n	8008990 <HAL_RCC_OscConfig+0x2e0>
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	2b18      	cmp	r3, #24
 8008984:	d11b      	bne.n	80089be <HAL_RCC_OscConfig+0x30e>
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f003 0303 	and.w	r3, r3, #3
 800898c:	2b01      	cmp	r3, #1
 800898e:	d116      	bne.n	80089be <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008990:	4b7e      	ldr	r3, [pc, #504]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008998:	2b00      	cmp	r3, #0
 800899a:	d005      	beq.n	80089a8 <HAL_RCC_OscConfig+0x2f8>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	2b80      	cmp	r3, #128	; 0x80
 80089a2:	d001      	beq.n	80089a8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e2ac      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089a8:	4b78      	ldr	r3, [pc, #480]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	061b      	lsls	r3, r3, #24
 80089b6:	4975      	ldr	r1, [pc, #468]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089bc:	e040      	b.n	8008a40 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d023      	beq.n	8008a0e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80089c6:	4b71      	ldr	r3, [pc, #452]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a70      	ldr	r2, [pc, #448]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 80089cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d2:	f7fa ff29 	bl	8003828 <HAL_GetTick>
 80089d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089d8:	e008      	b.n	80089ec <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80089da:	f7fa ff25 	bl	8003828 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d901      	bls.n	80089ec <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e28a      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089ec:	4b67      	ldr	r3, [pc, #412]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d0f0      	beq.n	80089da <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089f8:	4b64      	ldr	r3, [pc, #400]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	061b      	lsls	r3, r3, #24
 8008a06:	4961      	ldr	r1, [pc, #388]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	60cb      	str	r3, [r1, #12]
 8008a0c:	e018      	b.n	8008a40 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008a0e:	4b5f      	ldr	r3, [pc, #380]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a5e      	ldr	r2, [pc, #376]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a1a:	f7fa ff05 	bl	8003828 <HAL_GetTick>
 8008a1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a20:	e008      	b.n	8008a34 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a22:	f7fa ff01 	bl	8003828 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d901      	bls.n	8008a34 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e266      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a34:	4b55      	ldr	r3, [pc, #340]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1f0      	bne.n	8008a22 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0308 	and.w	r3, r3, #8
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d036      	beq.n	8008aba <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d019      	beq.n	8008a88 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a54:	4b4d      	ldr	r3, [pc, #308]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a58:	4a4c      	ldr	r2, [pc, #304]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008a5a:	f043 0301 	orr.w	r3, r3, #1
 8008a5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a60:	f7fa fee2 	bl	8003828 <HAL_GetTick>
 8008a64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a68:	f7fa fede 	bl	8003828 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e243      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a7a:	4b44      	ldr	r3, [pc, #272]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a7e:	f003 0302 	and.w	r3, r3, #2
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0f0      	beq.n	8008a68 <HAL_RCC_OscConfig+0x3b8>
 8008a86:	e018      	b.n	8008aba <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a88:	4b40      	ldr	r3, [pc, #256]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a8c:	4a3f      	ldr	r2, [pc, #252]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008a8e:	f023 0301 	bic.w	r3, r3, #1
 8008a92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a94:	f7fa fec8 	bl	8003828 <HAL_GetTick>
 8008a98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a9a:	e008      	b.n	8008aae <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a9c:	f7fa fec4 	bl	8003828 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e229      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008aae:	4b37      	ldr	r3, [pc, #220]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1f0      	bne.n	8008a9c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0320 	and.w	r3, r3, #32
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d036      	beq.n	8008b34 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d019      	beq.n	8008b02 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008ace:	4b2f      	ldr	r3, [pc, #188]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a2e      	ldr	r2, [pc, #184]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ad8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ada:	f7fa fea5 	bl	8003828 <HAL_GetTick>
 8008ade:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ae0:	e008      	b.n	8008af4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ae2:	f7fa fea1 	bl	8003828 <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d901      	bls.n	8008af4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e206      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008af4:	4b25      	ldr	r3, [pc, #148]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0f0      	beq.n	8008ae2 <HAL_RCC_OscConfig+0x432>
 8008b00:	e018      	b.n	8008b34 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b02:	4b22      	ldr	r3, [pc, #136]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a21      	ldr	r2, [pc, #132]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008b08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b0e:	f7fa fe8b 	bl	8003828 <HAL_GetTick>
 8008b12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b14:	e008      	b.n	8008b28 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b16:	f7fa fe87 	bl	8003828 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d901      	bls.n	8008b28 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e1ec      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b28:	4b18      	ldr	r3, [pc, #96]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1f0      	bne.n	8008b16 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0304 	and.w	r3, r3, #4
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 80af 	beq.w	8008ca0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b42:	4b13      	ldr	r3, [pc, #76]	; (8008b90 <HAL_RCC_OscConfig+0x4e0>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a12      	ldr	r2, [pc, #72]	; (8008b90 <HAL_RCC_OscConfig+0x4e0>)
 8008b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b4e:	f7fa fe6b 	bl	8003828 <HAL_GetTick>
 8008b52:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b54:	e008      	b.n	8008b68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b56:	f7fa fe67 	bl	8003828 <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	2b64      	cmp	r3, #100	; 0x64
 8008b62:	d901      	bls.n	8008b68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e1cc      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b68:	4b09      	ldr	r3, [pc, #36]	; (8008b90 <HAL_RCC_OscConfig+0x4e0>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d0f0      	beq.n	8008b56 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d10b      	bne.n	8008b94 <HAL_RCC_OscConfig+0x4e4>
 8008b7c:	4b03      	ldr	r3, [pc, #12]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b80:	4a02      	ldr	r2, [pc, #8]	; (8008b8c <HAL_RCC_OscConfig+0x4dc>)
 8008b82:	f043 0301 	orr.w	r3, r3, #1
 8008b86:	6713      	str	r3, [r2, #112]	; 0x70
 8008b88:	e05b      	b.n	8008c42 <HAL_RCC_OscConfig+0x592>
 8008b8a:	bf00      	nop
 8008b8c:	58024400 	.word	0x58024400
 8008b90:	58024800 	.word	0x58024800
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d112      	bne.n	8008bc2 <HAL_RCC_OscConfig+0x512>
 8008b9c:	4b9d      	ldr	r3, [pc, #628]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba0:	4a9c      	ldr	r2, [pc, #624]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008ba2:	f023 0301 	bic.w	r3, r3, #1
 8008ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ba8:	4b9a      	ldr	r3, [pc, #616]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bac:	4a99      	ldr	r2, [pc, #612]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8008bb4:	4b97      	ldr	r3, [pc, #604]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb8:	4a96      	ldr	r2, [pc, #600]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008bba:	f023 0304 	bic.w	r3, r3, #4
 8008bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8008bc0:	e03f      	b.n	8008c42 <HAL_RCC_OscConfig+0x592>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2b05      	cmp	r3, #5
 8008bc8:	d112      	bne.n	8008bf0 <HAL_RCC_OscConfig+0x540>
 8008bca:	4b92      	ldr	r3, [pc, #584]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bce:	4a91      	ldr	r2, [pc, #580]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008bd0:	f043 0304 	orr.w	r3, r3, #4
 8008bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8008bd6:	4b8f      	ldr	r3, [pc, #572]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bda:	4a8e      	ldr	r2, [pc, #568]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008bdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008be0:	6713      	str	r3, [r2, #112]	; 0x70
 8008be2:	4b8c      	ldr	r3, [pc, #560]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be6:	4a8b      	ldr	r2, [pc, #556]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008be8:	f043 0301 	orr.w	r3, r3, #1
 8008bec:	6713      	str	r3, [r2, #112]	; 0x70
 8008bee:	e028      	b.n	8008c42 <HAL_RCC_OscConfig+0x592>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	2b85      	cmp	r3, #133	; 0x85
 8008bf6:	d112      	bne.n	8008c1e <HAL_RCC_OscConfig+0x56e>
 8008bf8:	4b86      	ldr	r3, [pc, #536]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfc:	4a85      	ldr	r2, [pc, #532]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008bfe:	f043 0304 	orr.w	r3, r3, #4
 8008c02:	6713      	str	r3, [r2, #112]	; 0x70
 8008c04:	4b83      	ldr	r3, [pc, #524]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c08:	4a82      	ldr	r2, [pc, #520]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8008c10:	4b80      	ldr	r3, [pc, #512]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c14:	4a7f      	ldr	r2, [pc, #508]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008c16:	f043 0301 	orr.w	r3, r3, #1
 8008c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c1c:	e011      	b.n	8008c42 <HAL_RCC_OscConfig+0x592>
 8008c1e:	4b7d      	ldr	r3, [pc, #500]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c22:	4a7c      	ldr	r2, [pc, #496]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008c24:	f023 0301 	bic.w	r3, r3, #1
 8008c28:	6713      	str	r3, [r2, #112]	; 0x70
 8008c2a:	4b7a      	ldr	r3, [pc, #488]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2e:	4a79      	ldr	r2, [pc, #484]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008c30:	f023 0304 	bic.w	r3, r3, #4
 8008c34:	6713      	str	r3, [r2, #112]	; 0x70
 8008c36:	4b77      	ldr	r3, [pc, #476]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3a:	4a76      	ldr	r2, [pc, #472]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d015      	beq.n	8008c76 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c4a:	f7fa fded 	bl	8003828 <HAL_GetTick>
 8008c4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c50:	e00a      	b.n	8008c68 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c52:	f7fa fde9 	bl	8003828 <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d901      	bls.n	8008c68 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e14c      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c68:	4b6a      	ldr	r3, [pc, #424]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6c:	f003 0302 	and.w	r3, r3, #2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d0ee      	beq.n	8008c52 <HAL_RCC_OscConfig+0x5a2>
 8008c74:	e014      	b.n	8008ca0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c76:	f7fa fdd7 	bl	8003828 <HAL_GetTick>
 8008c7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c7c:	e00a      	b.n	8008c94 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c7e:	f7fa fdd3 	bl	8003828 <HAL_GetTick>
 8008c82:	4602      	mov	r2, r0
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d901      	bls.n	8008c94 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8008c90:	2303      	movs	r3, #3
 8008c92:	e136      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c94:	4b5f      	ldr	r3, [pc, #380]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c98:	f003 0302 	and.w	r3, r3, #2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1ee      	bne.n	8008c7e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 812b 	beq.w	8008f00 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008caa:	4b5a      	ldr	r3, [pc, #360]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cb2:	2b18      	cmp	r3, #24
 8008cb4:	f000 80bb 	beq.w	8008e2e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	f040 8095 	bne.w	8008dec <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cc2:	4b54      	ldr	r3, [pc, #336]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a53      	ldr	r2, [pc, #332]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008cc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cce:	f7fa fdab 	bl	8003828 <HAL_GetTick>
 8008cd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cd4:	e008      	b.n	8008ce8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cd6:	f7fa fda7 	bl	8003828 <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d901      	bls.n	8008ce8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e10c      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ce8:	4b4a      	ldr	r3, [pc, #296]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1f0      	bne.n	8008cd6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cf4:	4b47      	ldr	r3, [pc, #284]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cf8:	4b47      	ldr	r3, [pc, #284]	; (8008e18 <HAL_RCC_OscConfig+0x768>)
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008d04:	0112      	lsls	r2, r2, #4
 8008d06:	430a      	orrs	r2, r1
 8008d08:	4942      	ldr	r1, [pc, #264]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	628b      	str	r3, [r1, #40]	; 0x28
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d12:	3b01      	subs	r3, #1
 8008d14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	025b      	lsls	r3, r3, #9
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	431a      	orrs	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	041b      	lsls	r3, r3, #16
 8008d2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d30:	431a      	orrs	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d36:	3b01      	subs	r3, #1
 8008d38:	061b      	lsls	r3, r3, #24
 8008d3a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d3e:	4935      	ldr	r1, [pc, #212]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008d44:	4b33      	ldr	r3, [pc, #204]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d48:	4a32      	ldr	r2, [pc, #200]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008d4a:	f023 0301 	bic.w	r3, r3, #1
 8008d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d50:	4b30      	ldr	r3, [pc, #192]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d54:	4b31      	ldr	r3, [pc, #196]	; (8008e1c <HAL_RCC_OscConfig+0x76c>)
 8008d56:	4013      	ands	r3, r2
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d5c:	00d2      	lsls	r2, r2, #3
 8008d5e:	492d      	ldr	r1, [pc, #180]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008d60:	4313      	orrs	r3, r2
 8008d62:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d64:	4b2b      	ldr	r3, [pc, #172]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d68:	f023 020c 	bic.w	r2, r3, #12
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d70:	4928      	ldr	r1, [pc, #160]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008d76:	4b27      	ldr	r3, [pc, #156]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7a:	f023 0202 	bic.w	r2, r3, #2
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d82:	4924      	ldr	r1, [pc, #144]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d88:	4b22      	ldr	r3, [pc, #136]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	4a21      	ldr	r2, [pc, #132]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d94:	4b1f      	ldr	r3, [pc, #124]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d98:	4a1e      	ldr	r2, [pc, #120]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008da0:	4b1c      	ldr	r3, [pc, #112]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da4:	4a1b      	ldr	r2, [pc, #108]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008da6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008daa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008dac:	4b19      	ldr	r3, [pc, #100]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db0:	4a18      	ldr	r2, [pc, #96]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008db2:	f043 0301 	orr.w	r3, r3, #1
 8008db6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008db8:	4b16      	ldr	r3, [pc, #88]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a15      	ldr	r2, [pc, #84]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc4:	f7fa fd30 	bl	8003828 <HAL_GetTick>
 8008dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dca:	e008      	b.n	8008dde <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dcc:	f7fa fd2c 	bl	8003828 <HAL_GetTick>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d901      	bls.n	8008dde <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e091      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dde:	4b0d      	ldr	r3, [pc, #52]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0f0      	beq.n	8008dcc <HAL_RCC_OscConfig+0x71c>
 8008dea:	e089      	b.n	8008f00 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dec:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a08      	ldr	r2, [pc, #32]	; (8008e14 <HAL_RCC_OscConfig+0x764>)
 8008df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008df8:	f7fa fd16 	bl	8003828 <HAL_GetTick>
 8008dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008dfe:	e00f      	b.n	8008e20 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e00:	f7fa fd12 	bl	8003828 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d908      	bls.n	8008e20 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e077      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
 8008e12:	bf00      	nop
 8008e14:	58024400 	.word	0x58024400
 8008e18:	fffffc0c 	.word	0xfffffc0c
 8008e1c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e20:	4b3a      	ldr	r3, [pc, #232]	; (8008f0c <HAL_RCC_OscConfig+0x85c>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1e9      	bne.n	8008e00 <HAL_RCC_OscConfig+0x750>
 8008e2c:	e068      	b.n	8008f00 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e2e:	4b37      	ldr	r3, [pc, #220]	; (8008f0c <HAL_RCC_OscConfig+0x85c>)
 8008e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e32:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e34:	4b35      	ldr	r3, [pc, #212]	; (8008f0c <HAL_RCC_OscConfig+0x85c>)
 8008e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e38:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d031      	beq.n	8008ea6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f003 0203 	and.w	r2, r3, #3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d12a      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	091b      	lsrs	r3, r3, #4
 8008e54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d122      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d11a      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	0a5b      	lsrs	r3, r3, #9
 8008e74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d111      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	0c1b      	lsrs	r3, r3, #16
 8008e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d108      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	0e1b      	lsrs	r3, r3, #24
 8008e98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d001      	beq.n	8008eaa <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e02b      	b.n	8008f02 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008eaa:	4b18      	ldr	r3, [pc, #96]	; (8008f0c <HAL_RCC_OscConfig+0x85c>)
 8008eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eae:	08db      	lsrs	r3, r3, #3
 8008eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008eb4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d01f      	beq.n	8008f00 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008ec0:	4b12      	ldr	r3, [pc, #72]	; (8008f0c <HAL_RCC_OscConfig+0x85c>)
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	4a11      	ldr	r2, [pc, #68]	; (8008f0c <HAL_RCC_OscConfig+0x85c>)
 8008ec6:	f023 0301 	bic.w	r3, r3, #1
 8008eca:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ecc:	f7fa fcac 	bl	8003828 <HAL_GetTick>
 8008ed0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008ed2:	bf00      	nop
 8008ed4:	f7fa fca8 	bl	8003828 <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d0f9      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ee0:	4b0a      	ldr	r3, [pc, #40]	; (8008f0c <HAL_RCC_OscConfig+0x85c>)
 8008ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	; (8008f10 <HAL_RCC_OscConfig+0x860>)
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008eec:	00d2      	lsls	r2, r2, #3
 8008eee:	4907      	ldr	r1, [pc, #28]	; (8008f0c <HAL_RCC_OscConfig+0x85c>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008ef4:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <HAL_RCC_OscConfig+0x85c>)
 8008ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef8:	4a04      	ldr	r2, [pc, #16]	; (8008f0c <HAL_RCC_OscConfig+0x85c>)
 8008efa:	f043 0301 	orr.w	r3, r3, #1
 8008efe:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3730      	adds	r7, #48	; 0x30
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	58024400 	.word	0x58024400
 8008f10:	ffff0007 	.word	0xffff0007

08008f14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e19c      	b.n	8009262 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f28:	4b8a      	ldr	r3, [pc, #552]	; (8009154 <HAL_RCC_ClockConfig+0x240>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 030f 	and.w	r3, r3, #15
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d910      	bls.n	8008f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f36:	4b87      	ldr	r3, [pc, #540]	; (8009154 <HAL_RCC_ClockConfig+0x240>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f023 020f 	bic.w	r2, r3, #15
 8008f3e:	4985      	ldr	r1, [pc, #532]	; (8009154 <HAL_RCC_ClockConfig+0x240>)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f46:	4b83      	ldr	r3, [pc, #524]	; (8009154 <HAL_RCC_ClockConfig+0x240>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 030f 	and.w	r3, r3, #15
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d001      	beq.n	8008f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e184      	b.n	8009262 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0304 	and.w	r3, r3, #4
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d010      	beq.n	8008f86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	691a      	ldr	r2, [r3, #16]
 8008f68:	4b7b      	ldr	r3, [pc, #492]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d908      	bls.n	8008f86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f74:	4b78      	ldr	r3, [pc, #480]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	4975      	ldr	r1, [pc, #468]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0308 	and.w	r3, r3, #8
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d010      	beq.n	8008fb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	695a      	ldr	r2, [r3, #20]
 8008f96:	4b70      	ldr	r3, [pc, #448]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8008f98:	69db      	ldr	r3, [r3, #28]
 8008f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d908      	bls.n	8008fb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008fa2:	4b6d      	ldr	r3, [pc, #436]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	496a      	ldr	r1, [pc, #424]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0310 	and.w	r3, r3, #16
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d010      	beq.n	8008fe2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	699a      	ldr	r2, [r3, #24]
 8008fc4:	4b64      	ldr	r3, [pc, #400]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8008fc6:	69db      	ldr	r3, [r3, #28]
 8008fc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d908      	bls.n	8008fe2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008fd0:	4b61      	ldr	r3, [pc, #388]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	495e      	ldr	r1, [pc, #376]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0320 	and.w	r3, r3, #32
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d010      	beq.n	8009010 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	69da      	ldr	r2, [r3, #28]
 8008ff2:	4b59      	ldr	r3, [pc, #356]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d908      	bls.n	8009010 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ffe:	4b56      	ldr	r3, [pc, #344]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8009000:	6a1b      	ldr	r3, [r3, #32]
 8009002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	4953      	ldr	r1, [pc, #332]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 800900c:	4313      	orrs	r3, r2
 800900e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0302 	and.w	r3, r3, #2
 8009018:	2b00      	cmp	r3, #0
 800901a:	d010      	beq.n	800903e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	68da      	ldr	r2, [r3, #12]
 8009020:	4b4d      	ldr	r3, [pc, #308]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	f003 030f 	and.w	r3, r3, #15
 8009028:	429a      	cmp	r2, r3
 800902a:	d908      	bls.n	800903e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800902c:	4b4a      	ldr	r3, [pc, #296]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	f023 020f 	bic.w	r2, r3, #15
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	4947      	ldr	r1, [pc, #284]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 800903a:	4313      	orrs	r3, r2
 800903c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d055      	beq.n	80090f6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800904a:	4b43      	ldr	r3, [pc, #268]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	4940      	ldr	r1, [pc, #256]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8009058:	4313      	orrs	r3, r2
 800905a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	2b02      	cmp	r3, #2
 8009062:	d107      	bne.n	8009074 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009064:	4b3c      	ldr	r3, [pc, #240]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800906c:	2b00      	cmp	r3, #0
 800906e:	d121      	bne.n	80090b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e0f6      	b.n	8009262 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	2b03      	cmp	r3, #3
 800907a:	d107      	bne.n	800908c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800907c:	4b36      	ldr	r3, [pc, #216]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d115      	bne.n	80090b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e0ea      	b.n	8009262 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d107      	bne.n	80090a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009094:	4b30      	ldr	r3, [pc, #192]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800909c:	2b00      	cmp	r3, #0
 800909e:	d109      	bne.n	80090b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e0de      	b.n	8009262 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090a4:	4b2c      	ldr	r3, [pc, #176]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e0d6      	b.n	8009262 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80090b4:	4b28      	ldr	r3, [pc, #160]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	f023 0207 	bic.w	r2, r3, #7
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	4925      	ldr	r1, [pc, #148]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090c6:	f7fa fbaf 	bl	8003828 <HAL_GetTick>
 80090ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090cc:	e00a      	b.n	80090e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090ce:	f7fa fbab 	bl	8003828 <HAL_GetTick>
 80090d2:	4602      	mov	r2, r0
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090dc:	4293      	cmp	r3, r2
 80090de:	d901      	bls.n	80090e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e0be      	b.n	8009262 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090e4:	4b1c      	ldr	r3, [pc, #112]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	00db      	lsls	r3, r3, #3
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d1eb      	bne.n	80090ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d010      	beq.n	8009124 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68da      	ldr	r2, [r3, #12]
 8009106:	4b14      	ldr	r3, [pc, #80]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	f003 030f 	and.w	r3, r3, #15
 800910e:	429a      	cmp	r2, r3
 8009110:	d208      	bcs.n	8009124 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009112:	4b11      	ldr	r3, [pc, #68]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8009114:	699b      	ldr	r3, [r3, #24]
 8009116:	f023 020f 	bic.w	r2, r3, #15
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	490e      	ldr	r1, [pc, #56]	; (8009158 <HAL_RCC_ClockConfig+0x244>)
 8009120:	4313      	orrs	r3, r2
 8009122:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009124:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <HAL_RCC_ClockConfig+0x240>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 030f 	and.w	r3, r3, #15
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	d214      	bcs.n	800915c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009132:	4b08      	ldr	r3, [pc, #32]	; (8009154 <HAL_RCC_ClockConfig+0x240>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f023 020f 	bic.w	r2, r3, #15
 800913a:	4906      	ldr	r1, [pc, #24]	; (8009154 <HAL_RCC_ClockConfig+0x240>)
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	4313      	orrs	r3, r2
 8009140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009142:	4b04      	ldr	r3, [pc, #16]	; (8009154 <HAL_RCC_ClockConfig+0x240>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 030f 	and.w	r3, r3, #15
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	429a      	cmp	r2, r3
 800914e:	d005      	beq.n	800915c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e086      	b.n	8009262 <HAL_RCC_ClockConfig+0x34e>
 8009154:	52002000 	.word	0x52002000
 8009158:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0304 	and.w	r3, r3, #4
 8009164:	2b00      	cmp	r3, #0
 8009166:	d010      	beq.n	800918a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	691a      	ldr	r2, [r3, #16]
 800916c:	4b3f      	ldr	r3, [pc, #252]	; (800926c <HAL_RCC_ClockConfig+0x358>)
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009174:	429a      	cmp	r2, r3
 8009176:	d208      	bcs.n	800918a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009178:	4b3c      	ldr	r3, [pc, #240]	; (800926c <HAL_RCC_ClockConfig+0x358>)
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	4939      	ldr	r1, [pc, #228]	; (800926c <HAL_RCC_ClockConfig+0x358>)
 8009186:	4313      	orrs	r3, r2
 8009188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0308 	and.w	r3, r3, #8
 8009192:	2b00      	cmp	r3, #0
 8009194:	d010      	beq.n	80091b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	695a      	ldr	r2, [r3, #20]
 800919a:	4b34      	ldr	r3, [pc, #208]	; (800926c <HAL_RCC_ClockConfig+0x358>)
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d208      	bcs.n	80091b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80091a6:	4b31      	ldr	r3, [pc, #196]	; (800926c <HAL_RCC_ClockConfig+0x358>)
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	492e      	ldr	r1, [pc, #184]	; (800926c <HAL_RCC_ClockConfig+0x358>)
 80091b4:	4313      	orrs	r3, r2
 80091b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0310 	and.w	r3, r3, #16
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d010      	beq.n	80091e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	699a      	ldr	r2, [r3, #24]
 80091c8:	4b28      	ldr	r3, [pc, #160]	; (800926c <HAL_RCC_ClockConfig+0x358>)
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d208      	bcs.n	80091e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091d4:	4b25      	ldr	r3, [pc, #148]	; (800926c <HAL_RCC_ClockConfig+0x358>)
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	4922      	ldr	r1, [pc, #136]	; (800926c <HAL_RCC_ClockConfig+0x358>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0320 	and.w	r3, r3, #32
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d010      	beq.n	8009214 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	69da      	ldr	r2, [r3, #28]
 80091f6:	4b1d      	ldr	r3, [pc, #116]	; (800926c <HAL_RCC_ClockConfig+0x358>)
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091fe:	429a      	cmp	r2, r3
 8009200:	d208      	bcs.n	8009214 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009202:	4b1a      	ldr	r3, [pc, #104]	; (800926c <HAL_RCC_ClockConfig+0x358>)
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	69db      	ldr	r3, [r3, #28]
 800920e:	4917      	ldr	r1, [pc, #92]	; (800926c <HAL_RCC_ClockConfig+0x358>)
 8009210:	4313      	orrs	r3, r2
 8009212:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8009214:	f000 f834 	bl	8009280 <HAL_RCC_GetSysClockFreq>
 8009218:	4602      	mov	r2, r0
 800921a:	4b14      	ldr	r3, [pc, #80]	; (800926c <HAL_RCC_ClockConfig+0x358>)
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	0a1b      	lsrs	r3, r3, #8
 8009220:	f003 030f 	and.w	r3, r3, #15
 8009224:	4912      	ldr	r1, [pc, #72]	; (8009270 <HAL_RCC_ClockConfig+0x35c>)
 8009226:	5ccb      	ldrb	r3, [r1, r3]
 8009228:	f003 031f 	and.w	r3, r3, #31
 800922c:	fa22 f303 	lsr.w	r3, r2, r3
 8009230:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009232:	4b0e      	ldr	r3, [pc, #56]	; (800926c <HAL_RCC_ClockConfig+0x358>)
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	f003 030f 	and.w	r3, r3, #15
 800923a:	4a0d      	ldr	r2, [pc, #52]	; (8009270 <HAL_RCC_ClockConfig+0x35c>)
 800923c:	5cd3      	ldrb	r3, [r2, r3]
 800923e:	f003 031f 	and.w	r3, r3, #31
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	fa22 f303 	lsr.w	r3, r2, r3
 8009248:	4a0a      	ldr	r2, [pc, #40]	; (8009274 <HAL_RCC_ClockConfig+0x360>)
 800924a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800924c:	4a0a      	ldr	r2, [pc, #40]	; (8009278 <HAL_RCC_ClockConfig+0x364>)
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009252:	4b0a      	ldr	r3, [pc, #40]	; (800927c <HAL_RCC_ClockConfig+0x368>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4618      	mov	r0, r3
 8009258:	f7fa fa9c 	bl	8003794 <HAL_InitTick>
 800925c:	4603      	mov	r3, r0
 800925e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009260:	7bfb      	ldrb	r3, [r7, #15]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	58024400 	.word	0x58024400
 8009270:	08015cec 	.word	0x08015cec
 8009274:	24000798 	.word	0x24000798
 8009278:	24000794 	.word	0x24000794
 800927c:	2400079c 	.word	0x2400079c

08009280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009280:	b480      	push	{r7}
 8009282:	b089      	sub	sp, #36	; 0x24
 8009284:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009286:	4bb3      	ldr	r3, [pc, #716]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800928e:	2b18      	cmp	r3, #24
 8009290:	f200 8155 	bhi.w	800953e <HAL_RCC_GetSysClockFreq+0x2be>
 8009294:	a201      	add	r2, pc, #4	; (adr r2, 800929c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929a:	bf00      	nop
 800929c:	08009301 	.word	0x08009301
 80092a0:	0800953f 	.word	0x0800953f
 80092a4:	0800953f 	.word	0x0800953f
 80092a8:	0800953f 	.word	0x0800953f
 80092ac:	0800953f 	.word	0x0800953f
 80092b0:	0800953f 	.word	0x0800953f
 80092b4:	0800953f 	.word	0x0800953f
 80092b8:	0800953f 	.word	0x0800953f
 80092bc:	08009327 	.word	0x08009327
 80092c0:	0800953f 	.word	0x0800953f
 80092c4:	0800953f 	.word	0x0800953f
 80092c8:	0800953f 	.word	0x0800953f
 80092cc:	0800953f 	.word	0x0800953f
 80092d0:	0800953f 	.word	0x0800953f
 80092d4:	0800953f 	.word	0x0800953f
 80092d8:	0800953f 	.word	0x0800953f
 80092dc:	0800932d 	.word	0x0800932d
 80092e0:	0800953f 	.word	0x0800953f
 80092e4:	0800953f 	.word	0x0800953f
 80092e8:	0800953f 	.word	0x0800953f
 80092ec:	0800953f 	.word	0x0800953f
 80092f0:	0800953f 	.word	0x0800953f
 80092f4:	0800953f 	.word	0x0800953f
 80092f8:	0800953f 	.word	0x0800953f
 80092fc:	08009333 	.word	0x08009333
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009300:	4b94      	ldr	r3, [pc, #592]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b00      	cmp	r3, #0
 800930a:	d009      	beq.n	8009320 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800930c:	4b91      	ldr	r3, [pc, #580]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	08db      	lsrs	r3, r3, #3
 8009312:	f003 0303 	and.w	r3, r3, #3
 8009316:	4a90      	ldr	r2, [pc, #576]	; (8009558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009318:	fa22 f303 	lsr.w	r3, r2, r3
 800931c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800931e:	e111      	b.n	8009544 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009320:	4b8d      	ldr	r3, [pc, #564]	; (8009558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009322:	61bb      	str	r3, [r7, #24]
      break;
 8009324:	e10e      	b.n	8009544 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009326:	4b8d      	ldr	r3, [pc, #564]	; (800955c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009328:	61bb      	str	r3, [r7, #24]
      break;
 800932a:	e10b      	b.n	8009544 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800932c:	4b8c      	ldr	r3, [pc, #560]	; (8009560 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800932e:	61bb      	str	r3, [r7, #24]
      break;
 8009330:	e108      	b.n	8009544 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009332:	4b88      	ldr	r3, [pc, #544]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009336:	f003 0303 	and.w	r3, r3, #3
 800933a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800933c:	4b85      	ldr	r3, [pc, #532]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800933e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009340:	091b      	lsrs	r3, r3, #4
 8009342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009346:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009348:	4b82      	ldr	r3, [pc, #520]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800934a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009352:	4b80      	ldr	r3, [pc, #512]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009356:	08db      	lsrs	r3, r3, #3
 8009358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	fb02 f303 	mul.w	r3, r2, r3
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 80e1 	beq.w	8009538 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2b02      	cmp	r3, #2
 800937a:	f000 8083 	beq.w	8009484 <HAL_RCC_GetSysClockFreq+0x204>
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2b02      	cmp	r3, #2
 8009382:	f200 80a1 	bhi.w	80094c8 <HAL_RCC_GetSysClockFreq+0x248>
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d003      	beq.n	8009394 <HAL_RCC_GetSysClockFreq+0x114>
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d056      	beq.n	8009440 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009392:	e099      	b.n	80094c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009394:	4b6f      	ldr	r3, [pc, #444]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0320 	and.w	r3, r3, #32
 800939c:	2b00      	cmp	r3, #0
 800939e:	d02d      	beq.n	80093fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093a0:	4b6c      	ldr	r3, [pc, #432]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	08db      	lsrs	r3, r3, #3
 80093a6:	f003 0303 	and.w	r3, r3, #3
 80093aa:	4a6b      	ldr	r2, [pc, #428]	; (8009558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093ac:	fa22 f303 	lsr.w	r3, r2, r3
 80093b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	ee07 3a90 	vmov	s15, r3
 80093b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	ee07 3a90 	vmov	s15, r3
 80093c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ca:	4b62      	ldr	r3, [pc, #392]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093da:	ed97 6a02 	vldr	s12, [r7, #8]
 80093de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009564 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80093fa:	e087      	b.n	800950c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009406:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009568 <HAL_RCC_GetSysClockFreq+0x2e8>
 800940a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940e:	4b51      	ldr	r3, [pc, #324]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009422:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009564 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800942a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800943e:	e065      	b.n	800950c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800956c <HAL_RCC_GetSysClockFreq+0x2ec>
 800944e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009452:	4b40      	ldr	r3, [pc, #256]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009462:	ed97 6a02 	vldr	s12, [r7, #8]
 8009466:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009564 <HAL_RCC_GetSysClockFreq+0x2e4>
 800946a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800947a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009482:	e043      	b.n	800950c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009570 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009496:	4b2f      	ldr	r3, [pc, #188]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80094aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009564 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094c6:	e021      	b.n	800950c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800956c <HAL_RCC_GetSysClockFreq+0x2ec>
 80094d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094da:	4b1e      	ldr	r3, [pc, #120]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80094ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009564 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009506:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800950a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800950c:	4b11      	ldr	r3, [pc, #68]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800950e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009510:	0a5b      	lsrs	r3, r3, #9
 8009512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009516:	3301      	adds	r3, #1
 8009518:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	ee07 3a90 	vmov	s15, r3
 8009520:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009524:	edd7 6a07 	vldr	s13, [r7, #28]
 8009528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800952c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009530:	ee17 3a90 	vmov	r3, s15
 8009534:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009536:	e005      	b.n	8009544 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009538:	2300      	movs	r3, #0
 800953a:	61bb      	str	r3, [r7, #24]
      break;
 800953c:	e002      	b.n	8009544 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800953e:	4b07      	ldr	r3, [pc, #28]	; (800955c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009540:	61bb      	str	r3, [r7, #24]
      break;
 8009542:	bf00      	nop
  }

  return sysclockfreq;
 8009544:	69bb      	ldr	r3, [r7, #24]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3724      	adds	r7, #36	; 0x24
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	58024400 	.word	0x58024400
 8009558:	03d09000 	.word	0x03d09000
 800955c:	003d0900 	.word	0x003d0900
 8009560:	016e3600 	.word	0x016e3600
 8009564:	46000000 	.word	0x46000000
 8009568:	4c742400 	.word	0x4c742400
 800956c:	4a742400 	.word	0x4a742400
 8009570:	4bb71b00 	.word	0x4bb71b00

08009574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800957a:	f7ff fe81 	bl	8009280 <HAL_RCC_GetSysClockFreq>
 800957e:	4602      	mov	r2, r0
 8009580:	4b10      	ldr	r3, [pc, #64]	; (80095c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	0a1b      	lsrs	r3, r3, #8
 8009586:	f003 030f 	and.w	r3, r3, #15
 800958a:	490f      	ldr	r1, [pc, #60]	; (80095c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800958c:	5ccb      	ldrb	r3, [r1, r3]
 800958e:	f003 031f 	and.w	r3, r3, #31
 8009592:	fa22 f303 	lsr.w	r3, r2, r3
 8009596:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009598:	4b0a      	ldr	r3, [pc, #40]	; (80095c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	f003 030f 	and.w	r3, r3, #15
 80095a0:	4a09      	ldr	r2, [pc, #36]	; (80095c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80095a2:	5cd3      	ldrb	r3, [r2, r3]
 80095a4:	f003 031f 	and.w	r3, r3, #31
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	fa22 f303 	lsr.w	r3, r2, r3
 80095ae:	4a07      	ldr	r2, [pc, #28]	; (80095cc <HAL_RCC_GetHCLKFreq+0x58>)
 80095b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80095b2:	4a07      	ldr	r2, [pc, #28]	; (80095d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80095b8:	4b04      	ldr	r3, [pc, #16]	; (80095cc <HAL_RCC_GetHCLKFreq+0x58>)
 80095ba:	681b      	ldr	r3, [r3, #0]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	58024400 	.word	0x58024400
 80095c8:	08015cec 	.word	0x08015cec
 80095cc:	24000798 	.word	0x24000798
 80095d0:	24000794 	.word	0x24000794

080095d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80095d8:	f7ff ffcc 	bl	8009574 <HAL_RCC_GetHCLKFreq>
 80095dc:	4602      	mov	r2, r0
 80095de:	4b06      	ldr	r3, [pc, #24]	; (80095f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	091b      	lsrs	r3, r3, #4
 80095e4:	f003 0307 	and.w	r3, r3, #7
 80095e8:	4904      	ldr	r1, [pc, #16]	; (80095fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80095ea:	5ccb      	ldrb	r3, [r1, r3]
 80095ec:	f003 031f 	and.w	r3, r3, #31
 80095f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	58024400 	.word	0x58024400
 80095fc:	08015cec 	.word	0x08015cec

08009600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8009604:	f7ff ffb6 	bl	8009574 <HAL_RCC_GetHCLKFreq>
 8009608:	4602      	mov	r2, r0
 800960a:	4b06      	ldr	r3, [pc, #24]	; (8009624 <HAL_RCC_GetPCLK2Freq+0x24>)
 800960c:	69db      	ldr	r3, [r3, #28]
 800960e:	0a1b      	lsrs	r3, r3, #8
 8009610:	f003 0307 	and.w	r3, r3, #7
 8009614:	4904      	ldr	r1, [pc, #16]	; (8009628 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009616:	5ccb      	ldrb	r3, [r1, r3]
 8009618:	f003 031f 	and.w	r3, r3, #31
 800961c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009620:	4618      	mov	r0, r3
 8009622:	bd80      	pop	{r7, pc}
 8009624:	58024400 	.word	0x58024400
 8009628:	08015cec 	.word	0x08015cec

0800962c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800962c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009630:	b0c8      	sub	sp, #288	; 0x120
 8009632:	af00      	add	r7, sp, #0
 8009634:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009638:	2300      	movs	r3, #0
 800963a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800963e:	2300      	movs	r3, #0
 8009640:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009650:	2500      	movs	r5, #0
 8009652:	ea54 0305 	orrs.w	r3, r4, r5
 8009656:	d049      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800965c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800965e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009662:	d02f      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009664:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009668:	d828      	bhi.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800966a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800966e:	d01a      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009674:	d822      	bhi.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009676:	2b00      	cmp	r3, #0
 8009678:	d003      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800967a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800967e:	d007      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009680:	e01c      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009682:	4ba7      	ldr	r3, [pc, #668]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009686:	4aa6      	ldr	r2, [pc, #664]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800968c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800968e:	e01a      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009694:	3308      	adds	r3, #8
 8009696:	2102      	movs	r1, #2
 8009698:	4618      	mov	r0, r3
 800969a:	f002 fa6d 	bl	800bb78 <RCCEx_PLL2_Config>
 800969e:	4603      	mov	r3, r0
 80096a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096a4:	e00f      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096aa:	3328      	adds	r3, #40	; 0x28
 80096ac:	2102      	movs	r1, #2
 80096ae:	4618      	mov	r0, r3
 80096b0:	f002 fb14 	bl	800bcdc <RCCEx_PLL3_Config>
 80096b4:	4603      	mov	r3, r0
 80096b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096ba:	e004      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80096c2:	e000      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80096c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10a      	bne.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80096ce:	4b94      	ldr	r3, [pc, #592]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80096d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096dc:	4a90      	ldr	r2, [pc, #576]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096de:	430b      	orrs	r3, r1
 80096e0:	6513      	str	r3, [r2, #80]	; 0x50
 80096e2:	e003      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80096e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80096ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80096f8:	f04f 0900 	mov.w	r9, #0
 80096fc:	ea58 0309 	orrs.w	r3, r8, r9
 8009700:	d047      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009708:	2b04      	cmp	r3, #4
 800970a:	d82a      	bhi.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800970c:	a201      	add	r2, pc, #4	; (adr r2, 8009714 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800970e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009712:	bf00      	nop
 8009714:	08009729 	.word	0x08009729
 8009718:	08009737 	.word	0x08009737
 800971c:	0800974d 	.word	0x0800974d
 8009720:	0800976b 	.word	0x0800976b
 8009724:	0800976b 	.word	0x0800976b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009728:	4b7d      	ldr	r3, [pc, #500]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800972a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972c:	4a7c      	ldr	r2, [pc, #496]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800972e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009732:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009734:	e01a      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800973a:	3308      	adds	r3, #8
 800973c:	2100      	movs	r1, #0
 800973e:	4618      	mov	r0, r3
 8009740:	f002 fa1a 	bl	800bb78 <RCCEx_PLL2_Config>
 8009744:	4603      	mov	r3, r0
 8009746:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800974a:	e00f      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800974c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009750:	3328      	adds	r3, #40	; 0x28
 8009752:	2100      	movs	r1, #0
 8009754:	4618      	mov	r0, r3
 8009756:	f002 fac1 	bl	800bcdc <RCCEx_PLL3_Config>
 800975a:	4603      	mov	r3, r0
 800975c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009760:	e004      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009768:	e000      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800976a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800976c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10a      	bne.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009774:	4b6a      	ldr	r3, [pc, #424]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009778:	f023 0107 	bic.w	r1, r3, #7
 800977c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009782:	4a67      	ldr	r2, [pc, #412]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009784:	430b      	orrs	r3, r1
 8009786:	6513      	str	r3, [r2, #80]	; 0x50
 8009788:	e003      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800978a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800978e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8009792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800979e:	f04f 0b00 	mov.w	fp, #0
 80097a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80097a6:	d054      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80097a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80097b2:	d036      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80097b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80097b8:	d82f      	bhi.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80097ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097be:	d032      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097c4:	d829      	bhi.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80097c6:	2bc0      	cmp	r3, #192	; 0xc0
 80097c8:	d02f      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80097ca:	2bc0      	cmp	r3, #192	; 0xc0
 80097cc:	d825      	bhi.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80097ce:	2b80      	cmp	r3, #128	; 0x80
 80097d0:	d018      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80097d2:	2b80      	cmp	r3, #128	; 0x80
 80097d4:	d821      	bhi.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80097da:	2b40      	cmp	r3, #64	; 0x40
 80097dc:	d007      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80097de:	e01c      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097e0:	4b4f      	ldr	r3, [pc, #316]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e4:	4a4e      	ldr	r2, [pc, #312]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80097ec:	e01e      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097f2:	3308      	adds	r3, #8
 80097f4:	2100      	movs	r1, #0
 80097f6:	4618      	mov	r0, r3
 80097f8:	f002 f9be 	bl	800bb78 <RCCEx_PLL2_Config>
 80097fc:	4603      	mov	r3, r0
 80097fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009802:	e013      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009808:	3328      	adds	r3, #40	; 0x28
 800980a:	2100      	movs	r1, #0
 800980c:	4618      	mov	r0, r3
 800980e:	f002 fa65 	bl	800bcdc <RCCEx_PLL3_Config>
 8009812:	4603      	mov	r3, r0
 8009814:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009818:	e008      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009820:	e004      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8009822:	bf00      	nop
 8009824:	e002      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8009826:	bf00      	nop
 8009828:	e000      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800982a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800982c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10a      	bne.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8009834:	4b3a      	ldr	r3, [pc, #232]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009838:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800983c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009842:	4a37      	ldr	r2, [pc, #220]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009844:	430b      	orrs	r3, r1
 8009846:	6513      	str	r3, [r2, #80]	; 0x50
 8009848:	e003      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800984a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800984e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8009852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800985e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009862:	2300      	movs	r3, #0
 8009864:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009868:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800986c:	460b      	mov	r3, r1
 800986e:	4313      	orrs	r3, r2
 8009870:	d05c      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8009872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009878:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800987c:	d03b      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800987e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009882:	d834      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009888:	d037      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800988a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800988e:	d82e      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009890:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009894:	d033      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009896:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800989a:	d828      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800989c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098a0:	d01a      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80098a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098a6:	d822      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d003      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80098ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098b0:	d007      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80098b2:	e01c      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098b4:	4b1a      	ldr	r3, [pc, #104]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	4a19      	ldr	r2, [pc, #100]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80098c0:	e01e      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098c6:	3308      	adds	r3, #8
 80098c8:	2100      	movs	r1, #0
 80098ca:	4618      	mov	r0, r3
 80098cc:	f002 f954 	bl	800bb78 <RCCEx_PLL2_Config>
 80098d0:	4603      	mov	r3, r0
 80098d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80098d6:	e013      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098dc:	3328      	adds	r3, #40	; 0x28
 80098de:	2100      	movs	r1, #0
 80098e0:	4618      	mov	r0, r3
 80098e2:	f002 f9fb 	bl	800bcdc <RCCEx_PLL3_Config>
 80098e6:	4603      	mov	r3, r0
 80098e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80098ec:	e008      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80098f4:	e004      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80098f6:	bf00      	nop
 80098f8:	e002      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80098fa:	bf00      	nop
 80098fc:	e000      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80098fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009900:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10d      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8009908:	4b05      	ldr	r3, [pc, #20]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800990a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800990c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8009910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009916:	4a02      	ldr	r2, [pc, #8]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009918:	430b      	orrs	r3, r1
 800991a:	6513      	str	r3, [r2, #80]	; 0x50
 800991c:	e006      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800991e:	bf00      	nop
 8009920:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009924:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009928:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800992c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800993c:	2300      	movs	r3, #0
 800993e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009942:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009946:	460b      	mov	r3, r1
 8009948:	4313      	orrs	r3, r2
 800994a:	d03a      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800994c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009952:	2b30      	cmp	r3, #48	; 0x30
 8009954:	d01f      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8009956:	2b30      	cmp	r3, #48	; 0x30
 8009958:	d819      	bhi.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800995a:	2b20      	cmp	r3, #32
 800995c:	d00c      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800995e:	2b20      	cmp	r3, #32
 8009960:	d815      	bhi.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8009962:	2b00      	cmp	r3, #0
 8009964:	d019      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009966:	2b10      	cmp	r3, #16
 8009968:	d111      	bne.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800996a:	4bae      	ldr	r3, [pc, #696]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800996c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996e:	4aad      	ldr	r2, [pc, #692]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009974:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009976:	e011      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800997c:	3308      	adds	r3, #8
 800997e:	2102      	movs	r1, #2
 8009980:	4618      	mov	r0, r3
 8009982:	f002 f8f9 	bl	800bb78 <RCCEx_PLL2_Config>
 8009986:	4603      	mov	r3, r0
 8009988:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800998c:	e006      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009994:	e002      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8009996:	bf00      	nop
 8009998:	e000      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800999a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800999c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10a      	bne.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80099a4:	4b9f      	ldr	r3, [pc, #636]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099a8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80099ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099b2:	4a9c      	ldr	r2, [pc, #624]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099b4:	430b      	orrs	r3, r1
 80099b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099b8:	e003      	b.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80099be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80099c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ca:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80099ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80099d2:	2300      	movs	r3, #0
 80099d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80099d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80099dc:	460b      	mov	r3, r1
 80099de:	4313      	orrs	r3, r2
 80099e0:	d051      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80099e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099ec:	d035      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80099ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099f2:	d82e      	bhi.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80099f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099f8:	d031      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80099fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099fe:	d828      	bhi.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a04:	d01a      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a0a:	d822      	bhi.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d003      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8009a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a14:	d007      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8009a16:	e01c      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a18:	4b82      	ldr	r3, [pc, #520]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1c:	4a81      	ldr	r2, [pc, #516]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a24:	e01c      	b.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a2a:	3308      	adds	r3, #8
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f002 f8a2 	bl	800bb78 <RCCEx_PLL2_Config>
 8009a34:	4603      	mov	r3, r0
 8009a36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a3a:	e011      	b.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a40:	3328      	adds	r3, #40	; 0x28
 8009a42:	2100      	movs	r1, #0
 8009a44:	4618      	mov	r0, r3
 8009a46:	f002 f949 	bl	800bcdc <RCCEx_PLL3_Config>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a50:	e006      	b.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009a58:	e002      	b.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8009a5a:	bf00      	nop
 8009a5c:	e000      	b.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8009a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10a      	bne.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a68:	4b6e      	ldr	r3, [pc, #440]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a6c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a76:	4a6b      	ldr	r2, [pc, #428]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a78:	430b      	orrs	r3, r1
 8009a7a:	6513      	str	r3, [r2, #80]	; 0x50
 8009a7c:	e003      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009a82:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009a92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a96:	2300      	movs	r3, #0
 8009a98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a9c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	d053      	beq.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ab0:	d033      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8009ab2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ab6:	d82c      	bhi.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009ab8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009abc:	d02f      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8009abe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ac2:	d826      	bhi.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009ac4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ac8:	d02b      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009aca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ace:	d820      	bhi.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ad4:	d012      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ada:	d81a      	bhi.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d022      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8009ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ae4:	d115      	bne.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aea:	3308      	adds	r3, #8
 8009aec:	2101      	movs	r1, #1
 8009aee:	4618      	mov	r0, r3
 8009af0:	f002 f842 	bl	800bb78 <RCCEx_PLL2_Config>
 8009af4:	4603      	mov	r3, r0
 8009af6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009afa:	e015      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b00:	3328      	adds	r3, #40	; 0x28
 8009b02:	2101      	movs	r1, #1
 8009b04:	4618      	mov	r0, r3
 8009b06:	f002 f8e9 	bl	800bcdc <RCCEx_PLL3_Config>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009b10:	e00a      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009b18:	e006      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009b1a:	bf00      	nop
 8009b1c:	e004      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009b1e:	bf00      	nop
 8009b20:	e002      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009b22:	bf00      	nop
 8009b24:	e000      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10a      	bne.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b30:	4b3c      	ldr	r3, [pc, #240]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b34:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b3e:	4a39      	ldr	r2, [pc, #228]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b40:	430b      	orrs	r3, r1
 8009b42:	6513      	str	r3, [r2, #80]	; 0x50
 8009b44:	e003      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009b4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009b5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b64:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	d060      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b76:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009b7a:	d039      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8009b7c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009b80:	d832      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b86:	d035      	beq.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b8c:	d82c      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b92:	d031      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b98:	d826      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009b9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b9e:	d02d      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009ba0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ba4:	d820      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009baa:	d012      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bb0:	d81a      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d024      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bba:	d115      	bne.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bc0:	3308      	adds	r3, #8
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f001 ffd7 	bl	800bb78 <RCCEx_PLL2_Config>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009bd0:	e017      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bd6:	3328      	adds	r3, #40	; 0x28
 8009bd8:	2101      	movs	r1, #1
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f002 f87e 	bl	800bcdc <RCCEx_PLL3_Config>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009be6:	e00c      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009bee:	e008      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009bf0:	bf00      	nop
 8009bf2:	e006      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009bf4:	bf00      	nop
 8009bf6:	e004      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009bf8:	bf00      	nop
 8009bfa:	e002      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009bfc:	bf00      	nop
 8009bfe:	e000      	b.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10e      	bne.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009c0a:	4b06      	ldr	r3, [pc, #24]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c0e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c1a:	4a02      	ldr	r2, [pc, #8]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c1c:	430b      	orrs	r3, r1
 8009c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8009c20:	e006      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009c22:	bf00      	nop
 8009c24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009c2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c40:	2300      	movs	r3, #0
 8009c42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	d037      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c5a:	d00e      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c60:	d816      	bhi.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d018      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c6a:	d111      	bne.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c6c:	4bc4      	ldr	r3, [pc, #784]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c70:	4ac3      	ldr	r2, [pc, #780]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c78:	e00f      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c7e:	3308      	adds	r3, #8
 8009c80:	2101      	movs	r1, #1
 8009c82:	4618      	mov	r0, r3
 8009c84:	f001 ff78 	bl	800bb78 <RCCEx_PLL2_Config>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c8e:	e004      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009c96:	e000      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10a      	bne.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009ca2:	4bb7      	ldr	r3, [pc, #732]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ca6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009cae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cb0:	4ab3      	ldr	r2, [pc, #716]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cb2:	430b      	orrs	r3, r1
 8009cb4:	6513      	str	r3, [r2, #80]	; 0x50
 8009cb6:	e003      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009cbc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009cd6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	d039      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ce6:	2b03      	cmp	r3, #3
 8009ce8:	d81c      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009cea:	a201      	add	r2, pc, #4	; (adr r2, 8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf0:	08009d2d 	.word	0x08009d2d
 8009cf4:	08009d01 	.word	0x08009d01
 8009cf8:	08009d0f 	.word	0x08009d0f
 8009cfc:	08009d2d 	.word	0x08009d2d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d00:	4b9f      	ldr	r3, [pc, #636]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d04:	4a9e      	ldr	r2, [pc, #632]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009d0c:	e00f      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d12:	3308      	adds	r3, #8
 8009d14:	2102      	movs	r1, #2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f001 ff2e 	bl	800bb78 <RCCEx_PLL2_Config>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009d22:	e004      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009d2a:	e000      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10a      	bne.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009d36:	4b92      	ldr	r3, [pc, #584]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d3a:	f023 0103 	bic.w	r1, r3, #3
 8009d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d44:	4a8e      	ldr	r2, [pc, #568]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d46:	430b      	orrs	r3, r1
 8009d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d4a:	e003      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009d50:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009d60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d64:	2300      	movs	r3, #0
 8009d66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009d6e:	460b      	mov	r3, r1
 8009d70:	4313      	orrs	r3, r2
 8009d72:	f000 8099 	beq.w	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d76:	4b83      	ldr	r3, [pc, #524]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a82      	ldr	r2, [pc, #520]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d82:	f7f9 fd51 	bl	8003828 <HAL_GetTick>
 8009d86:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d8a:	e00b      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d8c:	f7f9 fd4c 	bl	8003828 <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	2b64      	cmp	r3, #100	; 0x64
 8009d9a:	d903      	bls.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009da2:	e005      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009da4:	4b77      	ldr	r3, [pc, #476]	; (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d0ed      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009db0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d173      	bne.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009db8:	4b71      	ldr	r3, [pc, #452]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009dc4:	4053      	eors	r3, r2
 8009dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d015      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009dce:	4b6c      	ldr	r3, [pc, #432]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dd6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009dda:	4b69      	ldr	r3, [pc, #420]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dde:	4a68      	ldr	r2, [pc, #416]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009de4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009de6:	4b66      	ldr	r3, [pc, #408]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dea:	4a65      	ldr	r2, [pc, #404]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009df0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009df2:	4a63      	ldr	r2, [pc, #396]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e06:	d118      	bne.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e08:	f7f9 fd0e 	bl	8003828 <HAL_GetTick>
 8009e0c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e10:	e00d      	b.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e12:	f7f9 fd09 	bl	8003828 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009e1c:	1ad2      	subs	r2, r2, r3
 8009e1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d903      	bls.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8009e2c:	e005      	b.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e2e:	4b54      	ldr	r3, [pc, #336]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d0eb      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009e3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d129      	bne.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e52:	d10e      	bne.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009e54:	4b4a      	ldr	r3, [pc, #296]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e64:	091a      	lsrs	r2, r3, #4
 8009e66:	4b48      	ldr	r3, [pc, #288]	; (8009f88 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009e68:	4013      	ands	r3, r2
 8009e6a:	4a45      	ldr	r2, [pc, #276]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e6c:	430b      	orrs	r3, r1
 8009e6e:	6113      	str	r3, [r2, #16]
 8009e70:	e005      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009e72:	4b43      	ldr	r3, [pc, #268]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	4a42      	ldr	r2, [pc, #264]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009e7c:	6113      	str	r3, [r2, #16]
 8009e7e:	4b40      	ldr	r3, [pc, #256]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e80:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e8e:	4a3c      	ldr	r2, [pc, #240]	; (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e90:	430b      	orrs	r3, r1
 8009e92:	6713      	str	r3, [r2, #112]	; 0x70
 8009e94:	e008      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009e9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8009e9e:	e003      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009ea4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb0:	f002 0301 	and.w	r3, r2, #1
 8009eb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009eb8:	2300      	movs	r3, #0
 8009eba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ebe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	f000 8090 	beq.w	8009fea <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ed2:	2b28      	cmp	r3, #40	; 0x28
 8009ed4:	d870      	bhi.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009ed6:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009edc:	08009fc1 	.word	0x08009fc1
 8009ee0:	08009fb9 	.word	0x08009fb9
 8009ee4:	08009fb9 	.word	0x08009fb9
 8009ee8:	08009fb9 	.word	0x08009fb9
 8009eec:	08009fb9 	.word	0x08009fb9
 8009ef0:	08009fb9 	.word	0x08009fb9
 8009ef4:	08009fb9 	.word	0x08009fb9
 8009ef8:	08009fb9 	.word	0x08009fb9
 8009efc:	08009f8d 	.word	0x08009f8d
 8009f00:	08009fb9 	.word	0x08009fb9
 8009f04:	08009fb9 	.word	0x08009fb9
 8009f08:	08009fb9 	.word	0x08009fb9
 8009f0c:	08009fb9 	.word	0x08009fb9
 8009f10:	08009fb9 	.word	0x08009fb9
 8009f14:	08009fb9 	.word	0x08009fb9
 8009f18:	08009fb9 	.word	0x08009fb9
 8009f1c:	08009fa3 	.word	0x08009fa3
 8009f20:	08009fb9 	.word	0x08009fb9
 8009f24:	08009fb9 	.word	0x08009fb9
 8009f28:	08009fb9 	.word	0x08009fb9
 8009f2c:	08009fb9 	.word	0x08009fb9
 8009f30:	08009fb9 	.word	0x08009fb9
 8009f34:	08009fb9 	.word	0x08009fb9
 8009f38:	08009fb9 	.word	0x08009fb9
 8009f3c:	08009fc1 	.word	0x08009fc1
 8009f40:	08009fb9 	.word	0x08009fb9
 8009f44:	08009fb9 	.word	0x08009fb9
 8009f48:	08009fb9 	.word	0x08009fb9
 8009f4c:	08009fb9 	.word	0x08009fb9
 8009f50:	08009fb9 	.word	0x08009fb9
 8009f54:	08009fb9 	.word	0x08009fb9
 8009f58:	08009fb9 	.word	0x08009fb9
 8009f5c:	08009fc1 	.word	0x08009fc1
 8009f60:	08009fb9 	.word	0x08009fb9
 8009f64:	08009fb9 	.word	0x08009fb9
 8009f68:	08009fb9 	.word	0x08009fb9
 8009f6c:	08009fb9 	.word	0x08009fb9
 8009f70:	08009fb9 	.word	0x08009fb9
 8009f74:	08009fb9 	.word	0x08009fb9
 8009f78:	08009fb9 	.word	0x08009fb9
 8009f7c:	08009fc1 	.word	0x08009fc1
 8009f80:	58024400 	.word	0x58024400
 8009f84:	58024800 	.word	0x58024800
 8009f88:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f90:	3308      	adds	r3, #8
 8009f92:	2101      	movs	r1, #1
 8009f94:	4618      	mov	r0, r3
 8009f96:	f001 fdef 	bl	800bb78 <RCCEx_PLL2_Config>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009fa0:	e00f      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009fa6:	3328      	adds	r3, #40	; 0x28
 8009fa8:	2101      	movs	r1, #1
 8009faa:	4618      	mov	r0, r3
 8009fac:	f001 fe96 	bl	800bcdc <RCCEx_PLL3_Config>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009fb6:	e004      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009fbe:	e000      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fc2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10b      	bne.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009fca:	4bc0      	ldr	r3, [pc, #768]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fce:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fda:	4abc      	ldr	r2, [pc, #752]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009fdc:	430b      	orrs	r3, r1
 8009fde:	6553      	str	r3, [r2, #84]	; 0x54
 8009fe0:	e003      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009fe6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff2:	f002 0302 	and.w	r3, r2, #2
 8009ff6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a000:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a004:	460b      	mov	r3, r1
 800a006:	4313      	orrs	r3, r2
 800a008:	d043      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a00a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a00e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a012:	2b05      	cmp	r3, #5
 800a014:	d824      	bhi.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800a016:	a201      	add	r2, pc, #4	; (adr r2, 800a01c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800a018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01c:	0800a069 	.word	0x0800a069
 800a020:	0800a035 	.word	0x0800a035
 800a024:	0800a04b 	.word	0x0800a04b
 800a028:	0800a069 	.word	0x0800a069
 800a02c:	0800a069 	.word	0x0800a069
 800a030:	0800a069 	.word	0x0800a069
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a038:	3308      	adds	r3, #8
 800a03a:	2101      	movs	r1, #1
 800a03c:	4618      	mov	r0, r3
 800a03e:	f001 fd9b 	bl	800bb78 <RCCEx_PLL2_Config>
 800a042:	4603      	mov	r3, r0
 800a044:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a048:	e00f      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a04a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a04e:	3328      	adds	r3, #40	; 0x28
 800a050:	2101      	movs	r1, #1
 800a052:	4618      	mov	r0, r3
 800a054:	f001 fe42 	bl	800bcdc <RCCEx_PLL3_Config>
 800a058:	4603      	mov	r3, r0
 800a05a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a05e:	e004      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a066:	e000      	b.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800a068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a06a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10b      	bne.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a072:	4b96      	ldr	r3, [pc, #600]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a076:	f023 0107 	bic.w	r1, r3, #7
 800a07a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a07e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a082:	4a92      	ldr	r2, [pc, #584]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a084:	430b      	orrs	r3, r1
 800a086:	6553      	str	r3, [r2, #84]	; 0x54
 800a088:	e003      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a08a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a08e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09a:	f002 0304 	and.w	r3, r2, #4
 800a09e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0a8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	d043      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a0b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0ba:	2b05      	cmp	r3, #5
 800a0bc:	d824      	bhi.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a0be:	a201      	add	r2, pc, #4	; (adr r2, 800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800a0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c4:	0800a111 	.word	0x0800a111
 800a0c8:	0800a0dd 	.word	0x0800a0dd
 800a0cc:	0800a0f3 	.word	0x0800a0f3
 800a0d0:	0800a111 	.word	0x0800a111
 800a0d4:	0800a111 	.word	0x0800a111
 800a0d8:	0800a111 	.word	0x0800a111
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0e0:	3308      	adds	r3, #8
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f001 fd47 	bl	800bb78 <RCCEx_PLL2_Config>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a0f0:	e00f      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0f6:	3328      	adds	r3, #40	; 0x28
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f001 fdee 	bl	800bcdc <RCCEx_PLL3_Config>
 800a100:	4603      	mov	r3, r0
 800a102:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a106:	e004      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a10e:	e000      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800a110:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a112:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10b      	bne.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a11a:	4b6c      	ldr	r3, [pc, #432]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a11e:	f023 0107 	bic.w	r1, r3, #7
 800a122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a12a:	4a68      	ldr	r2, [pc, #416]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a12c:	430b      	orrs	r3, r1
 800a12e:	6593      	str	r3, [r2, #88]	; 0x58
 800a130:	e003      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a132:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a136:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a13a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a142:	f002 0320 	and.w	r3, r2, #32
 800a146:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a14a:	2300      	movs	r3, #0
 800a14c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a150:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a154:	460b      	mov	r3, r1
 800a156:	4313      	orrs	r3, r2
 800a158:	d055      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a15a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a15e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a166:	d033      	beq.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a16c:	d82c      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800a16e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a172:	d02f      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a178:	d826      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800a17a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a17e:	d02b      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a180:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a184:	d820      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800a186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a18a:	d012      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a18c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a190:	d81a      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d022      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a19a:	d115      	bne.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a19c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f001 fce7 	bl	800bb78 <RCCEx_PLL2_Config>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a1b0:	e015      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a1b6:	3328      	adds	r3, #40	; 0x28
 800a1b8:	2102      	movs	r1, #2
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f001 fd8e 	bl	800bcdc <RCCEx_PLL3_Config>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a1c6:	e00a      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a1ce:	e006      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a1d0:	bf00      	nop
 800a1d2:	e004      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a1d4:	bf00      	nop
 800a1d6:	e002      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a1d8:	bf00      	nop
 800a1da:	e000      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a1dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d10b      	bne.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a1e6:	4b39      	ldr	r3, [pc, #228]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a1ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a1f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1f6:	4a35      	ldr	r2, [pc, #212]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a1f8:	430b      	orrs	r3, r1
 800a1fa:	6553      	str	r3, [r2, #84]	; 0x54
 800a1fc:	e003      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a202:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a216:	2300      	movs	r3, #0
 800a218:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a21c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a220:	460b      	mov	r3, r1
 800a222:	4313      	orrs	r3, r2
 800a224:	d058      	beq.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a22a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a22e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a232:	d033      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a234:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a238:	d82c      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a23a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a23e:	d02f      	beq.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a244:	d826      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a246:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a24a:	d02b      	beq.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a24c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a250:	d820      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a256:	d012      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800a258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a25c:	d81a      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d022      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800a262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a266:	d115      	bne.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a26c:	3308      	adds	r3, #8
 800a26e:	2100      	movs	r1, #0
 800a270:	4618      	mov	r0, r3
 800a272:	f001 fc81 	bl	800bb78 <RCCEx_PLL2_Config>
 800a276:	4603      	mov	r3, r0
 800a278:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a27c:	e015      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a27e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a282:	3328      	adds	r3, #40	; 0x28
 800a284:	2102      	movs	r1, #2
 800a286:	4618      	mov	r0, r3
 800a288:	f001 fd28 	bl	800bcdc <RCCEx_PLL3_Config>
 800a28c:	4603      	mov	r3, r0
 800a28e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a292:	e00a      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a29a:	e006      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a29c:	bf00      	nop
 800a29e:	e004      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a2a0:	bf00      	nop
 800a2a2:	e002      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a2a4:	bf00      	nop
 800a2a6:	e000      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a2a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10e      	bne.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a2b2:	4b06      	ldr	r3, [pc, #24]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a2ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a2c2:	4a02      	ldr	r2, [pc, #8]	; (800a2cc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2c4:	430b      	orrs	r3, r1
 800a2c6:	6593      	str	r3, [r2, #88]	; 0x58
 800a2c8:	e006      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a2ca:	bf00      	nop
 800a2cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a2d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a2d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a2e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	d055      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a2f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a300:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a304:	d033      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a306:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a30a:	d82c      	bhi.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a30c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a310:	d02f      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a316:	d826      	bhi.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a318:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a31c:	d02b      	beq.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a31e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a322:	d820      	bhi.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a328:	d012      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a32a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a32e:	d81a      	bhi.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a330:	2b00      	cmp	r3, #0
 800a332:	d022      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800a334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a338:	d115      	bne.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a33a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a33e:	3308      	adds	r3, #8
 800a340:	2100      	movs	r1, #0
 800a342:	4618      	mov	r0, r3
 800a344:	f001 fc18 	bl	800bb78 <RCCEx_PLL2_Config>
 800a348:	4603      	mov	r3, r0
 800a34a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a34e:	e015      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a354:	3328      	adds	r3, #40	; 0x28
 800a356:	2102      	movs	r1, #2
 800a358:	4618      	mov	r0, r3
 800a35a:	f001 fcbf 	bl	800bcdc <RCCEx_PLL3_Config>
 800a35e:	4603      	mov	r3, r0
 800a360:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a364:	e00a      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a36c:	e006      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a36e:	bf00      	nop
 800a370:	e004      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a372:	bf00      	nop
 800a374:	e002      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a376:	bf00      	nop
 800a378:	e000      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a37a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a37c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10b      	bne.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a384:	4ba1      	ldr	r3, [pc, #644]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a388:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a38c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a390:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a394:	4a9d      	ldr	r2, [pc, #628]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a396:	430b      	orrs	r3, r1
 800a398:	6593      	str	r3, [r2, #88]	; 0x58
 800a39a:	e003      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a39c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a3a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a3a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ac:	f002 0308 	and.w	r3, r2, #8
 800a3b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a3ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a3be:	460b      	mov	r3, r1
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	d01e      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a3c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3d0:	d10c      	bne.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3d6:	3328      	adds	r3, #40	; 0x28
 800a3d8:	2102      	movs	r1, #2
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f001 fc7e 	bl	800bcdc <RCCEx_PLL3_Config>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d002      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a3ec:	4b87      	ldr	r3, [pc, #540]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a3ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3fc:	4a83      	ldr	r2, [pc, #524]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a3fe:	430b      	orrs	r3, r1
 800a400:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40a:	f002 0310 	and.w	r3, r2, #16
 800a40e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a412:	2300      	movs	r3, #0
 800a414:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a418:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a41c:	460b      	mov	r3, r1
 800a41e:	4313      	orrs	r3, r2
 800a420:	d01e      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a426:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a42a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a42e:	d10c      	bne.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a434:	3328      	adds	r3, #40	; 0x28
 800a436:	2102      	movs	r1, #2
 800a438:	4618      	mov	r0, r3
 800a43a:	f001 fc4f 	bl	800bcdc <RCCEx_PLL3_Config>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d002      	beq.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a44a:	4b70      	ldr	r3, [pc, #448]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a44c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a44e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a456:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a45a:	4a6c      	ldr	r2, [pc, #432]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a45c:	430b      	orrs	r3, r1
 800a45e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a468:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a46c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a470:	2300      	movs	r3, #0
 800a472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a476:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a47a:	460b      	mov	r3, r1
 800a47c:	4313      	orrs	r3, r2
 800a47e:	d03e      	beq.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a484:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a488:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a48c:	d022      	beq.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800a48e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a492:	d81b      	bhi.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a494:	2b00      	cmp	r3, #0
 800a496:	d003      	beq.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800a498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a49c:	d00b      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800a49e:	e015      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4a4:	3308      	adds	r3, #8
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f001 fb65 	bl	800bb78 <RCCEx_PLL2_Config>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a4b4:	e00f      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4ba:	3328      	adds	r3, #40	; 0x28
 800a4bc:	2102      	movs	r1, #2
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f001 fc0c 	bl	800bcdc <RCCEx_PLL3_Config>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a4ca:	e004      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a4d2:	e000      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800a4d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10b      	bne.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a4de:	4b4b      	ldr	r3, [pc, #300]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a4e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4e2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a4e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a4ee:	4a47      	ldr	r2, [pc, #284]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a4f0:	430b      	orrs	r3, r1
 800a4f2:	6593      	str	r3, [r2, #88]	; 0x58
 800a4f4:	e003      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a4fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a4fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a506:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a50a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a50c:	2300      	movs	r3, #0
 800a50e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a510:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a514:	460b      	mov	r3, r1
 800a516:	4313      	orrs	r3, r2
 800a518:	d03b      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a51a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a51e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a522:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a526:	d01f      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800a528:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a52c:	d818      	bhi.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a52e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a532:	d003      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800a534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a538:	d007      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800a53a:	e011      	b.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a53c:	4b33      	ldr	r3, [pc, #204]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a540:	4a32      	ldr	r2, [pc, #200]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a548:	e00f      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a54a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a54e:	3328      	adds	r3, #40	; 0x28
 800a550:	2101      	movs	r1, #1
 800a552:	4618      	mov	r0, r3
 800a554:	f001 fbc2 	bl	800bcdc <RCCEx_PLL3_Config>
 800a558:	4603      	mov	r3, r0
 800a55a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800a55e:	e004      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a566:	e000      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800a568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a56a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10b      	bne.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a572:	4b26      	ldr	r3, [pc, #152]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a576:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a57a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a582:	4a22      	ldr	r2, [pc, #136]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a584:	430b      	orrs	r3, r1
 800a586:	6553      	str	r3, [r2, #84]	; 0x54
 800a588:	e003      	b.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a58a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a58e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a59e:	673b      	str	r3, [r7, #112]	; 0x70
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	677b      	str	r3, [r7, #116]	; 0x74
 800a5a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	d034      	beq.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a5ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d003      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800a5b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5bc:	d007      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800a5be:	e011      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5c0:	4b12      	ldr	r3, [pc, #72]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c4:	4a11      	ldr	r2, [pc, #68]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a5c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a5cc:	e00e      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5d2:	3308      	adds	r3, #8
 800a5d4:	2102      	movs	r1, #2
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f001 face 	bl	800bb78 <RCCEx_PLL2_Config>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a5e2:	e003      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a5ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10d      	bne.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a5f4:	4b05      	ldr	r3, [pc, #20]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a5f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a602:	4a02      	ldr	r2, [pc, #8]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a604:	430b      	orrs	r3, r1
 800a606:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a608:	e006      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800a60a:	bf00      	nop
 800a60c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a610:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a614:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a620:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a624:	66bb      	str	r3, [r7, #104]	; 0x68
 800a626:	2300      	movs	r3, #0
 800a628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a62a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a62e:	460b      	mov	r3, r1
 800a630:	4313      	orrs	r3, r2
 800a632:	d00c      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a638:	3328      	adds	r3, #40	; 0x28
 800a63a:	2102      	movs	r1, #2
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 fb4d 	bl	800bcdc <RCCEx_PLL3_Config>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d002      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a64e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a656:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a65a:	663b      	str	r3, [r7, #96]	; 0x60
 800a65c:	2300      	movs	r3, #0
 800a65e:	667b      	str	r3, [r7, #100]	; 0x64
 800a660:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a664:	460b      	mov	r3, r1
 800a666:	4313      	orrs	r3, r2
 800a668:	d038      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a66a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a66e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a676:	d018      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800a678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a67c:	d811      	bhi.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a67e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a682:	d014      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800a684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a688:	d80b      	bhi.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d011      	beq.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800a68e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a692:	d106      	bne.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a694:	4bc3      	ldr	r3, [pc, #780]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a698:	4ac2      	ldr	r2, [pc, #776]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a69a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a69e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a6a0:	e008      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a6a8:	e004      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a6aa:	bf00      	nop
 800a6ac:	e002      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a6ae:	bf00      	nop
 800a6b0:	e000      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a6b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10b      	bne.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a6bc:	4bb9      	ldr	r3, [pc, #740]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a6be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a6c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6cc:	4ab5      	ldr	r2, [pc, #724]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a6ce:	430b      	orrs	r3, r1
 800a6d0:	6553      	str	r3, [r2, #84]	; 0x54
 800a6d2:	e003      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a6d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a6dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a6e8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	d009      	beq.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a6f8:	4baa      	ldr	r3, [pc, #680]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a6fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a706:	4aa7      	ldr	r2, [pc, #668]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a708:	430b      	orrs	r3, r1
 800a70a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a70c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a714:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a718:	653b      	str	r3, [r7, #80]	; 0x50
 800a71a:	2300      	movs	r3, #0
 800a71c:	657b      	str	r3, [r7, #84]	; 0x54
 800a71e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a722:	460b      	mov	r3, r1
 800a724:	4313      	orrs	r3, r2
 800a726:	d009      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a728:	4b9e      	ldr	r3, [pc, #632]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a72c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a736:	4a9b      	ldr	r2, [pc, #620]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a738:	430b      	orrs	r3, r1
 800a73a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a73c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a744:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a748:	64bb      	str	r3, [r7, #72]	; 0x48
 800a74a:	2300      	movs	r3, #0
 800a74c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a74e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a752:	460b      	mov	r3, r1
 800a754:	4313      	orrs	r3, r2
 800a756:	d009      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a758:	4b92      	ldr	r3, [pc, #584]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a75a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a75c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800a760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a766:	4a8f      	ldr	r2, [pc, #572]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a768:	430b      	orrs	r3, r1
 800a76a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a76c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a778:	643b      	str	r3, [r7, #64]	; 0x40
 800a77a:	2300      	movs	r3, #0
 800a77c:	647b      	str	r3, [r7, #68]	; 0x44
 800a77e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a782:	460b      	mov	r3, r1
 800a784:	4313      	orrs	r3, r2
 800a786:	d00e      	beq.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a788:	4b86      	ldr	r3, [pc, #536]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	4a85      	ldr	r2, [pc, #532]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a78e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a792:	6113      	str	r3, [r2, #16]
 800a794:	4b83      	ldr	r3, [pc, #524]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a796:	6919      	ldr	r1, [r3, #16]
 800a798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a79c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a7a0:	4a80      	ldr	r2, [pc, #512]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a7a2:	430b      	orrs	r3, r1
 800a7a4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a7a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a7b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7b8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	d009      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a7c2:	4b78      	ldr	r3, [pc, #480]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a7c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7c6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a7ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a7ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d0:	4a74      	ldr	r2, [pc, #464]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a7d2:	430b      	orrs	r3, r1
 800a7d4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a7d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7de:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a7e2:	633b      	str	r3, [r7, #48]	; 0x30
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a7e8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	d00a      	beq.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a7f2:	4b6c      	ldr	r3, [pc, #432]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a7f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a7fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a7fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a802:	4a68      	ldr	r2, [pc, #416]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a804:	430b      	orrs	r3, r1
 800a806:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a810:	2100      	movs	r1, #0
 800a812:	62b9      	str	r1, [r7, #40]	; 0x28
 800a814:	f003 0301 	and.w	r3, r3, #1
 800a818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a81a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a81e:	460b      	mov	r3, r1
 800a820:	4313      	orrs	r3, r2
 800a822:	d011      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a828:	3308      	adds	r3, #8
 800a82a:	2100      	movs	r1, #0
 800a82c:	4618      	mov	r0, r3
 800a82e:	f001 f9a3 	bl	800bb78 <RCCEx_PLL2_Config>
 800a832:	4603      	mov	r3, r0
 800a834:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800a838:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d003      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a840:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a844:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a850:	2100      	movs	r1, #0
 800a852:	6239      	str	r1, [r7, #32]
 800a854:	f003 0302 	and.w	r3, r3, #2
 800a858:	627b      	str	r3, [r7, #36]	; 0x24
 800a85a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a85e:	460b      	mov	r3, r1
 800a860:	4313      	orrs	r3, r2
 800a862:	d011      	beq.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a868:	3308      	adds	r3, #8
 800a86a:	2101      	movs	r1, #1
 800a86c:	4618      	mov	r0, r3
 800a86e:	f001 f983 	bl	800bb78 <RCCEx_PLL2_Config>
 800a872:	4603      	mov	r3, r0
 800a874:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800a878:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d003      	beq.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a880:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a884:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a890:	2100      	movs	r1, #0
 800a892:	61b9      	str	r1, [r7, #24]
 800a894:	f003 0304 	and.w	r3, r3, #4
 800a898:	61fb      	str	r3, [r7, #28]
 800a89a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a89e:	460b      	mov	r3, r1
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	d011      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	2102      	movs	r1, #2
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f001 f963 	bl	800bb78 <RCCEx_PLL2_Config>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800a8b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d003      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a8c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a8c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	6139      	str	r1, [r7, #16]
 800a8d4:	f003 0308 	and.w	r3, r3, #8
 800a8d8:	617b      	str	r3, [r7, #20]
 800a8da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	d011      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a8e8:	3328      	adds	r3, #40	; 0x28
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f001 f9f5 	bl	800bcdc <RCCEx_PLL3_Config>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800a8f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d003      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a900:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a904:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a910:	2100      	movs	r1, #0
 800a912:	60b9      	str	r1, [r7, #8]
 800a914:	f003 0310 	and.w	r3, r3, #16
 800a918:	60fb      	str	r3, [r7, #12]
 800a91a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a91e:	460b      	mov	r3, r1
 800a920:	4313      	orrs	r3, r2
 800a922:	d011      	beq.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a924:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a928:	3328      	adds	r3, #40	; 0x28
 800a92a:	2101      	movs	r1, #1
 800a92c:	4618      	mov	r0, r3
 800a92e:	f001 f9d5 	bl	800bcdc <RCCEx_PLL3_Config>
 800a932:	4603      	mov	r3, r0
 800a934:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800a938:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d003      	beq.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a940:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a944:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	2100      	movs	r1, #0
 800a952:	6039      	str	r1, [r7, #0]
 800a954:	f003 0320 	and.w	r3, r3, #32
 800a958:	607b      	str	r3, [r7, #4]
 800a95a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a95e:	460b      	mov	r3, r1
 800a960:	4313      	orrs	r3, r2
 800a962:	d011      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a968:	3328      	adds	r3, #40	; 0x28
 800a96a:	2102      	movs	r1, #2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f001 f9b5 	bl	800bcdc <RCCEx_PLL3_Config>
 800a972:	4603      	mov	r3, r0
 800a974:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800a978:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d003      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a980:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a984:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800a988:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d101      	bne.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	e000      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800a994:	2301      	movs	r3, #1
}
 800a996:	4618      	mov	r0, r3
 800a998:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800a99c:	46bd      	mov	sp, r7
 800a99e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9a2:	bf00      	nop
 800a9a4:	58024400 	.word	0x58024400

0800a9a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b090      	sub	sp, #64	; 0x40
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a9b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9b6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a9ba:	430b      	orrs	r3, r1
 800a9bc:	f040 8094 	bne.w	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a9c0:	4b97      	ldr	r3, [pc, #604]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c4:	f003 0307 	and.w	r3, r3, #7
 800a9c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9cc:	2b04      	cmp	r3, #4
 800a9ce:	f200 8087 	bhi.w	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a9d2:	a201      	add	r2, pc, #4	; (adr r2, 800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d8:	0800a9ed 	.word	0x0800a9ed
 800a9dc:	0800aa15 	.word	0x0800aa15
 800a9e0:	0800aa3d 	.word	0x0800aa3d
 800a9e4:	0800aad9 	.word	0x0800aad9
 800a9e8:	0800aa65 	.word	0x0800aa65
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9ec:	4b8c      	ldr	r3, [pc, #560]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9f8:	d108      	bne.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 ff68 	bl	800b8d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa08:	f000 bc97 	b.w	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa10:	f000 bc93 	b.w	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa14:	4b82      	ldr	r3, [pc, #520]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa20:	d108      	bne.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa22:	f107 0318 	add.w	r3, r7, #24
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 fcac 	bl	800b384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa30:	f000 bc83 	b.w	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aa34:	2300      	movs	r3, #0
 800aa36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa38:	f000 bc7f 	b.w	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa3c:	4b78      	ldr	r3, [pc, #480]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa48:	d108      	bne.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa4a:	f107 030c 	add.w	r3, r7, #12
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 fdec 	bl	800b62c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa58:	f000 bc6f 	b.w	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa60:	f000 bc6b 	b.w	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa64:	4b6e      	ldr	r3, [pc, #440]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa6c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa6e:	4b6c      	ldr	r3, [pc, #432]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0304 	and.w	r3, r3, #4
 800aa76:	2b04      	cmp	r3, #4
 800aa78:	d10c      	bne.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800aa7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d109      	bne.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa80:	4b67      	ldr	r3, [pc, #412]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	08db      	lsrs	r3, r3, #3
 800aa86:	f003 0303 	and.w	r3, r3, #3
 800aa8a:	4a66      	ldr	r2, [pc, #408]	; (800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800aa8c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa92:	e01f      	b.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa94:	4b62      	ldr	r3, [pc, #392]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaa0:	d106      	bne.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800aaa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aaa8:	d102      	bne.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aaaa:	4b5f      	ldr	r3, [pc, #380]	; (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800aaac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaae:	e011      	b.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aab0:	4b5b      	ldr	r3, [pc, #364]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aabc:	d106      	bne.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800aabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aac4:	d102      	bne.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aac6:	4b59      	ldr	r3, [pc, #356]	; (800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800aac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaca:	e003      	b.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aad0:	f000 bc33 	b.w	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800aad4:	f000 bc31 	b.w	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aad8:	4b55      	ldr	r3, [pc, #340]	; (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aadc:	f000 bc2d 	b.w	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800aae0:	2300      	movs	r3, #0
 800aae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aae4:	f000 bc29 	b.w	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800aae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaec:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800aaf0:	430b      	orrs	r3, r1
 800aaf2:	f040 809f 	bne.w	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800aaf6:	4b4a      	ldr	r3, [pc, #296]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aaf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aafa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800aafe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab06:	d04d      	beq.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800ab08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab0e:	f200 8084 	bhi.w	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	2bc0      	cmp	r3, #192	; 0xc0
 800ab16:	d07d      	beq.n	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800ab18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1a:	2bc0      	cmp	r3, #192	; 0xc0
 800ab1c:	d87d      	bhi.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	2b80      	cmp	r3, #128	; 0x80
 800ab22:	d02d      	beq.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800ab24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab26:	2b80      	cmp	r3, #128	; 0x80
 800ab28:	d877      	bhi.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d003      	beq.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	2b40      	cmp	r3, #64	; 0x40
 800ab34:	d012      	beq.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800ab36:	e070      	b.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab38:	4b39      	ldr	r3, [pc, #228]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab44:	d107      	bne.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f000 fec2 	bl	800b8d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab54:	e3f1      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab5a:	e3ee      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab5c:	4b30      	ldr	r3, [pc, #192]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab68:	d107      	bne.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab6a:	f107 0318 	add.w	r3, r7, #24
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 fc08 	bl	800b384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab78:	e3df      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab7e:	e3dc      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab80:	4b27      	ldr	r3, [pc, #156]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab8c:	d107      	bne.n	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab8e:	f107 030c 	add.w	r3, r7, #12
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 fd4a 	bl	800b62c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab9c:	e3cd      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba2:	e3ca      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aba4:	4b1e      	ldr	r3, [pc, #120]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aba8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abae:	4b1c      	ldr	r3, [pc, #112]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0304 	and.w	r3, r3, #4
 800abb6:	2b04      	cmp	r3, #4
 800abb8:	d10c      	bne.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800abba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d109      	bne.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abc0:	4b17      	ldr	r3, [pc, #92]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	08db      	lsrs	r3, r3, #3
 800abc6:	f003 0303 	and.w	r3, r3, #3
 800abca:	4a16      	ldr	r2, [pc, #88]	; (800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800abcc:	fa22 f303 	lsr.w	r3, r2, r3
 800abd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abd2:	e01e      	b.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abd4:	4b12      	ldr	r3, [pc, #72]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe0:	d106      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800abe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abe8:	d102      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800abea:	4b0f      	ldr	r3, [pc, #60]	; (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800abec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abee:	e010      	b.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abf0:	4b0b      	ldr	r3, [pc, #44]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abfc:	d106      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800abfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac04:	d102      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac06:	4b09      	ldr	r3, [pc, #36]	; (800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800ac08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac0a:	e002      	b.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac10:	e393      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ac12:	e392      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac14:	4b06      	ldr	r3, [pc, #24]	; (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac18:	e38f      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac1e:	e38c      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ac20:	58024400 	.word	0x58024400
 800ac24:	03d09000 	.word	0x03d09000
 800ac28:	003d0900 	.word	0x003d0900
 800ac2c:	016e3600 	.word	0x016e3600
 800ac30:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800ac34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac38:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ac3c:	430b      	orrs	r3, r1
 800ac3e:	f040 809c 	bne.w	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800ac42:	4b9e      	ldr	r3, [pc, #632]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ac44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac46:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800ac4a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac52:	d054      	beq.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800ac54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac5a:	f200 808b 	bhi.w	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ac64:	f000 8083 	beq.w	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800ac68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ac6e:	f200 8081 	bhi.w	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800ac72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac78:	d02f      	beq.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac80:	d878      	bhi.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800ac82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d004      	beq.n	800ac92 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800ac88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac8e:	d012      	beq.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800ac90:	e070      	b.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac92:	4b8a      	ldr	r3, [pc, #552]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac9e:	d107      	bne.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aca4:	4618      	mov	r0, r3
 800aca6:	f000 fe15 	bl	800b8d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acae:	e344      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acb4:	e341      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acb6:	4b81      	ldr	r3, [pc, #516]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acc2:	d107      	bne.n	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acc4:	f107 0318 	add.w	r3, r7, #24
 800acc8:	4618      	mov	r0, r3
 800acca:	f000 fb5b 	bl	800b384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acd2:	e332      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acd8:	e32f      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acda:	4b78      	ldr	r3, [pc, #480]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ace2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ace6:	d107      	bne.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ace8:	f107 030c 	add.w	r3, r7, #12
 800acec:	4618      	mov	r0, r3
 800acee:	f000 fc9d 	bl	800b62c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf6:	e320      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acfc:	e31d      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acfe:	4b6f      	ldr	r3, [pc, #444]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ad00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad06:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad08:	4b6c      	ldr	r3, [pc, #432]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 0304 	and.w	r3, r3, #4
 800ad10:	2b04      	cmp	r3, #4
 800ad12:	d10c      	bne.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800ad14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d109      	bne.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad1a:	4b68      	ldr	r3, [pc, #416]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	08db      	lsrs	r3, r3, #3
 800ad20:	f003 0303 	and.w	r3, r3, #3
 800ad24:	4a66      	ldr	r2, [pc, #408]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800ad26:	fa22 f303 	lsr.w	r3, r2, r3
 800ad2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad2c:	e01e      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad2e:	4b63      	ldr	r3, [pc, #396]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad3a:	d106      	bne.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ad3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad42:	d102      	bne.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad44:	4b5f      	ldr	r3, [pc, #380]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800ad46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad48:	e010      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad4a:	4b5c      	ldr	r3, [pc, #368]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad56:	d106      	bne.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ad58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad5e:	d102      	bne.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad60:	4b59      	ldr	r3, [pc, #356]	; (800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800ad62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad64:	e002      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800ad6a:	e2e6      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ad6c:	e2e5      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad6e:	4b57      	ldr	r3, [pc, #348]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad72:	e2e2      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ad74:	2300      	movs	r3, #0
 800ad76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad78:	e2df      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ad7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad7e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ad82:	430b      	orrs	r3, r1
 800ad84:	f040 80a7 	bne.w	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ad88:	4b4c      	ldr	r3, [pc, #304]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ad8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad8c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ad90:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ad92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad98:	d055      	beq.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ada0:	f200 8096 	bhi.w	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ada4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800adaa:	f000 8084 	beq.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800adae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800adb4:	f200 808c 	bhi.w	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800adb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adbe:	d030      	beq.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adc6:	f200 8083 	bhi.w	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800adca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d004      	beq.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800add0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800add6:	d012      	beq.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800add8:	e07a      	b.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adda:	4b38      	ldr	r3, [pc, #224]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ade2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ade6:	d107      	bne.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ade8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adec:	4618      	mov	r0, r3
 800adee:	f000 fd71 	bl	800b8d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf6:	e2a0      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adfc:	e29d      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adfe:	4b2f      	ldr	r3, [pc, #188]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae0a:	d107      	bne.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae0c:	f107 0318 	add.w	r3, r7, #24
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 fab7 	bl	800b384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae1a:	e28e      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae20:	e28b      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae22:	4b26      	ldr	r3, [pc, #152]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae2e:	d107      	bne.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae30:	f107 030c 	add.w	r3, r7, #12
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 fbf9 	bl	800b62c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae3e:	e27c      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ae40:	2300      	movs	r3, #0
 800ae42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae44:	e279      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae46:	4b1d      	ldr	r3, [pc, #116]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ae48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae4e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae50:	4b1a      	ldr	r3, [pc, #104]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0304 	and.w	r3, r3, #4
 800ae58:	2b04      	cmp	r3, #4
 800ae5a:	d10c      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800ae5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d109      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae62:	4b16      	ldr	r3, [pc, #88]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	08db      	lsrs	r3, r3, #3
 800ae68:	f003 0303 	and.w	r3, r3, #3
 800ae6c:	4a14      	ldr	r2, [pc, #80]	; (800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800ae6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae74:	e01e      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae76:	4b11      	ldr	r3, [pc, #68]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae82:	d106      	bne.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ae84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae8a:	d102      	bne.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae8c:	4b0d      	ldr	r3, [pc, #52]	; (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800ae8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae90:	e010      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae92:	4b0a      	ldr	r3, [pc, #40]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae9e:	d106      	bne.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800aea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aea6:	d102      	bne.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aea8:	4b07      	ldr	r3, [pc, #28]	; (800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeac:	e002      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aeb2:	e242      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800aeb4:	e241      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aeb6:	4b05      	ldr	r3, [pc, #20]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aeb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeba:	e23e      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800aebc:	58024400 	.word	0x58024400
 800aec0:	03d09000 	.word	0x03d09000
 800aec4:	003d0900 	.word	0x003d0900
 800aec8:	016e3600 	.word	0x016e3600
 800aecc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed4:	e231      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800aed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeda:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800aede:	430b      	orrs	r3, r1
 800aee0:	f040 8085 	bne.w	800afee <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aee4:	4b9c      	ldr	r3, [pc, #624]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800aeec:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800aeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aef4:	d06b      	beq.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800aef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aefc:	d874      	bhi.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800aefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af04:	d056      	beq.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800af06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af0c:	d86c      	bhi.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800af0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af14:	d03b      	beq.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800af16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af1c:	d864      	bhi.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800af1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af24:	d021      	beq.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800af26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af2c:	d85c      	bhi.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800af2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af30:	2b00      	cmp	r3, #0
 800af32:	d004      	beq.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800af34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af3a:	d004      	beq.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800af3c:	e054      	b.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800af3e:	f7fe fb49 	bl	80095d4 <HAL_RCC_GetPCLK1Freq>
 800af42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af44:	e1f9      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af46:	4b84      	ldr	r3, [pc, #528]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af52:	d107      	bne.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af54:	f107 0318 	add.w	r3, r7, #24
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 fa13 	bl	800b384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af62:	e1ea      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af68:	e1e7      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af6a:	4b7b      	ldr	r3, [pc, #492]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af76:	d107      	bne.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af78:	f107 030c 	add.w	r3, r7, #12
 800af7c:	4618      	mov	r0, r3
 800af7e:	f000 fb55 	bl	800b62c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af86:	e1d8      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af8c:	e1d5      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af8e:	4b72      	ldr	r3, [pc, #456]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 0304 	and.w	r3, r3, #4
 800af96:	2b04      	cmp	r3, #4
 800af98:	d109      	bne.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af9a:	4b6f      	ldr	r3, [pc, #444]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	08db      	lsrs	r3, r3, #3
 800afa0:	f003 0303 	and.w	r3, r3, #3
 800afa4:	4a6d      	ldr	r2, [pc, #436]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800afa6:	fa22 f303 	lsr.w	r3, r2, r3
 800afaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afac:	e1c5      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800afae:	2300      	movs	r3, #0
 800afb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afb2:	e1c2      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800afb4:	4b68      	ldr	r3, [pc, #416]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afc0:	d102      	bne.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800afc2:	4b67      	ldr	r3, [pc, #412]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800afc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afc6:	e1b8      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afcc:	e1b5      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800afce:	4b62      	ldr	r3, [pc, #392]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afda:	d102      	bne.n	800afe2 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800afdc:	4b61      	ldr	r3, [pc, #388]	; (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800afde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afe0:	e1ab      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800afe2:	2300      	movs	r3, #0
 800afe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afe6:	e1a8      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800afe8:	2300      	movs	r3, #0
 800afea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afec:	e1a5      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800afee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aff2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800aff6:	430b      	orrs	r3, r1
 800aff8:	d173      	bne.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800affa:	4b57      	ldr	r3, [pc, #348]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800affc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800affe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b002:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b00a:	d02f      	beq.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800b00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b012:	d863      	bhi.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	2b00      	cmp	r3, #0
 800b018:	d004      	beq.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b020:	d012      	beq.n	800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800b022:	e05b      	b.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b024:	4b4c      	ldr	r3, [pc, #304]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b02c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b030:	d107      	bne.n	800b042 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b032:	f107 0318 	add.w	r3, r7, #24
 800b036:	4618      	mov	r0, r3
 800b038:	f000 f9a4 	bl	800b384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b040:	e17b      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b042:	2300      	movs	r3, #0
 800b044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b046:	e178      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b048:	4b43      	ldr	r3, [pc, #268]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b054:	d107      	bne.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b056:	f107 030c 	add.w	r3, r7, #12
 800b05a:	4618      	mov	r0, r3
 800b05c:	f000 fae6 	bl	800b62c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b064:	e169      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b066:	2300      	movs	r3, #0
 800b068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b06a:	e166      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b06c:	4b3a      	ldr	r3, [pc, #232]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b06e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b070:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b074:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b076:	4b38      	ldr	r3, [pc, #224]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f003 0304 	and.w	r3, r3, #4
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d10c      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800b082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b084:	2b00      	cmp	r3, #0
 800b086:	d109      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b088:	4b33      	ldr	r3, [pc, #204]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	08db      	lsrs	r3, r3, #3
 800b08e:	f003 0303 	and.w	r3, r3, #3
 800b092:	4a32      	ldr	r2, [pc, #200]	; (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b094:	fa22 f303 	lsr.w	r3, r2, r3
 800b098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b09a:	e01e      	b.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b09c:	4b2e      	ldr	r3, [pc, #184]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0a8:	d106      	bne.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800b0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0b0:	d102      	bne.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b0b2:	4b2b      	ldr	r3, [pc, #172]	; (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0b6:	e010      	b.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0b8:	4b27      	ldr	r3, [pc, #156]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0c4:	d106      	bne.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800b0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0cc:	d102      	bne.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0ce:	4b25      	ldr	r3, [pc, #148]	; (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800b0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0d2:	e002      	b.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b0d8:	e12f      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800b0da:	e12e      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0e0:	e12b      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b0e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0e6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b0ea:	430b      	orrs	r3, r1
 800b0ec:	d13c      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b0ee:	4b1a      	ldr	r3, [pc, #104]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0f6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d004      	beq.n	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b104:	d012      	beq.n	800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800b106:	e023      	b.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b108:	4b13      	ldr	r3, [pc, #76]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b114:	d107      	bne.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b11a:	4618      	mov	r0, r3
 800b11c:	f000 fbda 	bl	800b8d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b122:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b124:	e109      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b12a:	e106      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b12c:	4b0a      	ldr	r3, [pc, #40]	; (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b134:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b138:	d107      	bne.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b13a:	f107 0318 	add.w	r3, r7, #24
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 f920 	bl	800b384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b144:	6a3b      	ldr	r3, [r7, #32]
 800b146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b148:	e0f7      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b14a:	2300      	movs	r3, #0
 800b14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b14e:	e0f4      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800b150:	2300      	movs	r3, #0
 800b152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b154:	e0f1      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800b156:	bf00      	nop
 800b158:	58024400 	.word	0x58024400
 800b15c:	03d09000 	.word	0x03d09000
 800b160:	003d0900 	.word	0x003d0900
 800b164:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b16c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b170:	430b      	orrs	r3, r1
 800b172:	f040 8091 	bne.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b176:	4b73      	ldr	r3, [pc, #460]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b17a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b17e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b182:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b186:	f000 8081 	beq.w	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b190:	d87f      	bhi.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800b192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b198:	d06b      	beq.n	800b272 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800b19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1a0:	d877      	bhi.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1a8:	d056      	beq.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1b0:	d86f      	bhi.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800b1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1b8:	d03b      	beq.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800b1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1c0:	d867      	bhi.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1c8:	d021      	beq.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1d0:	d85f      	bhi.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d004      	beq.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1de:	d004      	beq.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800b1e0:	e057      	b.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b1e2:	f000 f8b9 	bl	800b358 <HAL_RCCEx_GetD3PCLK1Freq>
 800b1e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1e8:	e0a7      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1ea:	4b56      	ldr	r3, [pc, #344]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1f6:	d107      	bne.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1f8:	f107 0318 	add.w	r3, r7, #24
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f000 f8c1 	bl	800b384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b206:	e098      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b208:	2300      	movs	r3, #0
 800b20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b20c:	e095      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b20e:	4b4d      	ldr	r3, [pc, #308]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b21a:	d107      	bne.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b21c:	f107 030c 	add.w	r3, r7, #12
 800b220:	4618      	mov	r0, r3
 800b222:	f000 fa03 	bl	800b62c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b22a:	e086      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b230:	e083      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b232:	4b44      	ldr	r3, [pc, #272]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f003 0304 	and.w	r3, r3, #4
 800b23a:	2b04      	cmp	r3, #4
 800b23c:	d109      	bne.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b23e:	4b41      	ldr	r3, [pc, #260]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	08db      	lsrs	r3, r3, #3
 800b244:	f003 0303 	and.w	r3, r3, #3
 800b248:	4a3f      	ldr	r2, [pc, #252]	; (800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b24a:	fa22 f303 	lsr.w	r3, r2, r3
 800b24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b250:	e073      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b252:	2300      	movs	r3, #0
 800b254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b256:	e070      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b258:	4b3a      	ldr	r3, [pc, #232]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b264:	d102      	bne.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800b266:	4b39      	ldr	r3, [pc, #228]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800b268:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b26a:	e066      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b26c:	2300      	movs	r3, #0
 800b26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b270:	e063      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b272:	4b34      	ldr	r3, [pc, #208]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b27a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b27e:	d102      	bne.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800b280:	4b33      	ldr	r3, [pc, #204]	; (800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800b282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b284:	e059      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b28a:	e056      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b28c:	4b31      	ldr	r3, [pc, #196]	; (800b354 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800b28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b290:	e053      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b296:	e050      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b29c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b2a0:	430b      	orrs	r3, r1
 800b2a2:	d148      	bne.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b2a4:	4b27      	ldr	r3, [pc, #156]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2b4:	d02a      	beq.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800b2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2bc:	d838      	bhi.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d004      	beq.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2ca:	d00d      	beq.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800b2cc:	e030      	b.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b2ce:	4b1d      	ldr	r3, [pc, #116]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2da:	d102      	bne.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800b2dc:	4b1c      	ldr	r3, [pc, #112]	; (800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800b2de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2e0:	e02b      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2e6:	e028      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2e8:	4b16      	ldr	r3, [pc, #88]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2f4:	d107      	bne.n	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 faea 	bl	800b8d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b304:	e019      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b30a:	e016      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b30c:	4b0d      	ldr	r3, [pc, #52]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b314:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b318:	d107      	bne.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b31a:	f107 0318 	add.w	r3, r7, #24
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 f830 	bl	800b384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b328:	e007      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b32a:	2300      	movs	r3, #0
 800b32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b32e:	e004      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800b330:	2300      	movs	r3, #0
 800b332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b334:	e001      	b.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800b336:	2300      	movs	r3, #0
 800b338:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3740      	adds	r7, #64	; 0x40
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	58024400 	.word	0x58024400
 800b348:	03d09000 	.word	0x03d09000
 800b34c:	003d0900 	.word	0x003d0900
 800b350:	016e3600 	.word	0x016e3600
 800b354:	00bb8000 	.word	0x00bb8000

0800b358 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800b35c:	f7fe f90a 	bl	8009574 <HAL_RCC_GetHCLKFreq>
 800b360:	4602      	mov	r2, r0
 800b362:	4b06      	ldr	r3, [pc, #24]	; (800b37c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	091b      	lsrs	r3, r3, #4
 800b368:	f003 0307 	and.w	r3, r3, #7
 800b36c:	4904      	ldr	r1, [pc, #16]	; (800b380 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b36e:	5ccb      	ldrb	r3, [r1, r3]
 800b370:	f003 031f 	and.w	r3, r3, #31
 800b374:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b378:	4618      	mov	r0, r3
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	58024400 	.word	0x58024400
 800b380:	08015cec 	.word	0x08015cec

0800b384 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b384:	b480      	push	{r7}
 800b386:	b089      	sub	sp, #36	; 0x24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b38c:	4ba1      	ldr	r3, [pc, #644]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b390:	f003 0303 	and.w	r3, r3, #3
 800b394:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b396:	4b9f      	ldr	r3, [pc, #636]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b39a:	0b1b      	lsrs	r3, r3, #12
 800b39c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b3a2:	4b9c      	ldr	r3, [pc, #624]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a6:	091b      	lsrs	r3, r3, #4
 800b3a8:	f003 0301 	and.w	r3, r3, #1
 800b3ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b3ae:	4b99      	ldr	r3, [pc, #612]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3b2:	08db      	lsrs	r3, r3, #3
 800b3b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	fb02 f303 	mul.w	r3, r2, r3
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f000 8111 	beq.w	800b5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	f000 8083 	beq.w	800b4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	f200 80a1 	bhi.w	800b524 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d003      	beq.n	800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d056      	beq.n	800b49c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b3ee:	e099      	b.n	800b524 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3f0:	4b88      	ldr	r3, [pc, #544]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0320 	and.w	r3, r3, #32
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d02d      	beq.n	800b458 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3fc:	4b85      	ldr	r3, [pc, #532]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	08db      	lsrs	r3, r3, #3
 800b402:	f003 0303 	and.w	r3, r3, #3
 800b406:	4a84      	ldr	r2, [pc, #528]	; (800b618 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b408:	fa22 f303 	lsr.w	r3, r2, r3
 800b40c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	ee07 3a90 	vmov	s15, r3
 800b414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	ee07 3a90 	vmov	s15, r3
 800b41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b426:	4b7b      	ldr	r3, [pc, #492]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b42a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b42e:	ee07 3a90 	vmov	s15, r3
 800b432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b436:	ed97 6a03 	vldr	s12, [r7, #12]
 800b43a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b61c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b43e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b44a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b452:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b456:	e087      	b.n	800b568 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	ee07 3a90 	vmov	s15, r3
 800b45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b462:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b620 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b46a:	4b6a      	ldr	r3, [pc, #424]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b472:	ee07 3a90 	vmov	s15, r3
 800b476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b47a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b47e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b61c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b48a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b48e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b492:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b49a:	e065      	b.n	800b568 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	ee07 3a90 	vmov	s15, r3
 800b4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b4aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ae:	4b59      	ldr	r3, [pc, #356]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4b6:	ee07 3a90 	vmov	s15, r3
 800b4ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b61c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4de:	e043      	b.n	800b568 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	ee07 3a90 	vmov	s15, r3
 800b4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b4ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4f2:	4b48      	ldr	r3, [pc, #288]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4fa:	ee07 3a90 	vmov	s15, r3
 800b4fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b502:	ed97 6a03 	vldr	s12, [r7, #12]
 800b506:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b61c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b50a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b50e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b51a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b51e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b522:	e021      	b.n	800b568 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	ee07 3a90 	vmov	s15, r3
 800b52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b52e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b536:	4b37      	ldr	r3, [pc, #220]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b53e:	ee07 3a90 	vmov	s15, r3
 800b542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b546:	ed97 6a03 	vldr	s12, [r7, #12]
 800b54a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b61c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b54e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b55a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b566:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b568:	4b2a      	ldr	r3, [pc, #168]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56c:	0a5b      	lsrs	r3, r3, #9
 800b56e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b572:	ee07 3a90 	vmov	s15, r3
 800b576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b57a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b57e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b582:	edd7 6a07 	vldr	s13, [r7, #28]
 800b586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b58a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b58e:	ee17 2a90 	vmov	r2, s15
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b596:	4b1f      	ldr	r3, [pc, #124]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59a:	0c1b      	lsrs	r3, r3, #16
 800b59c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5a0:	ee07 3a90 	vmov	s15, r3
 800b5a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5bc:	ee17 2a90 	vmov	r2, s15
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b5c4:	4b13      	ldr	r3, [pc, #76]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c8:	0e1b      	lsrs	r3, r3, #24
 800b5ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5ce:	ee07 3a90 	vmov	s15, r3
 800b5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ea:	ee17 2a90 	vmov	r2, s15
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b5f2:	e008      	b.n	800b606 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	609a      	str	r2, [r3, #8]
}
 800b606:	bf00      	nop
 800b608:	3724      	adds	r7, #36	; 0x24
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	58024400 	.word	0x58024400
 800b618:	03d09000 	.word	0x03d09000
 800b61c:	46000000 	.word	0x46000000
 800b620:	4c742400 	.word	0x4c742400
 800b624:	4a742400 	.word	0x4a742400
 800b628:	4bb71b00 	.word	0x4bb71b00

0800b62c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b089      	sub	sp, #36	; 0x24
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b634:	4ba1      	ldr	r3, [pc, #644]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b638:	f003 0303 	and.w	r3, r3, #3
 800b63c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b63e:	4b9f      	ldr	r3, [pc, #636]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b642:	0d1b      	lsrs	r3, r3, #20
 800b644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b648:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b64a:	4b9c      	ldr	r3, [pc, #624]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64e:	0a1b      	lsrs	r3, r3, #8
 800b650:	f003 0301 	and.w	r3, r3, #1
 800b654:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b656:	4b99      	ldr	r3, [pc, #612]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b65a:	08db      	lsrs	r3, r3, #3
 800b65c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	fb02 f303 	mul.w	r3, r2, r3
 800b666:	ee07 3a90 	vmov	s15, r3
 800b66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b66e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2b00      	cmp	r3, #0
 800b676:	f000 8111 	beq.w	800b89c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	f000 8083 	beq.w	800b788 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	2b02      	cmp	r3, #2
 800b686:	f200 80a1 	bhi.w	800b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d003      	beq.n	800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	2b01      	cmp	r3, #1
 800b694:	d056      	beq.n	800b744 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b696:	e099      	b.n	800b7cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b698:	4b88      	ldr	r3, [pc, #544]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 0320 	and.w	r3, r3, #32
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d02d      	beq.n	800b700 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6a4:	4b85      	ldr	r3, [pc, #532]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	08db      	lsrs	r3, r3, #3
 800b6aa:	f003 0303 	and.w	r3, r3, #3
 800b6ae:	4a84      	ldr	r2, [pc, #528]	; (800b8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b6b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	ee07 3a90 	vmov	s15, r3
 800b6bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	ee07 3a90 	vmov	s15, r3
 800b6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ce:	4b7b      	ldr	r3, [pc, #492]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6d6:	ee07 3a90 	vmov	s15, r3
 800b6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6de:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b6fe:	e087      	b.n	800b810 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	ee07 3a90 	vmov	s15, r3
 800b706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b70a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b70e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b712:	4b6a      	ldr	r3, [pc, #424]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b71a:	ee07 3a90 	vmov	s15, r3
 800b71e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b722:	ed97 6a03 	vldr	s12, [r7, #12]
 800b726:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b72a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b72e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b73a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b73e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b742:	e065      	b.n	800b810 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	ee07 3a90 	vmov	s15, r3
 800b74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b74e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b8cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b756:	4b59      	ldr	r3, [pc, #356]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b75a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b75e:	ee07 3a90 	vmov	s15, r3
 800b762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b766:	ed97 6a03 	vldr	s12, [r7, #12]
 800b76a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b76e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b77a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b77e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b786:	e043      	b.n	800b810 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	ee07 3a90 	vmov	s15, r3
 800b78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b792:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b79a:	4b48      	ldr	r3, [pc, #288]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7a2:	ee07 3a90 	vmov	s15, r3
 800b7a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b7b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7ca:	e021      	b.n	800b810 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	ee07 3a90 	vmov	s15, r3
 800b7d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b8cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b7da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7de:	4b37      	ldr	r3, [pc, #220]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7e6:	ee07 3a90 	vmov	s15, r3
 800b7ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b7f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b80a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b80e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b810:	4b2a      	ldr	r3, [pc, #168]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b814:	0a5b      	lsrs	r3, r3, #9
 800b816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b81a:	ee07 3a90 	vmov	s15, r3
 800b81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b82a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b82e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b836:	ee17 2a90 	vmov	r2, s15
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b83e:	4b1f      	ldr	r3, [pc, #124]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b842:	0c1b      	lsrs	r3, r3, #16
 800b844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b848:	ee07 3a90 	vmov	s15, r3
 800b84c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b854:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b858:	edd7 6a07 	vldr	s13, [r7, #28]
 800b85c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b864:	ee17 2a90 	vmov	r2, s15
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b86c:	4b13      	ldr	r3, [pc, #76]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b870:	0e1b      	lsrs	r3, r3, #24
 800b872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b876:	ee07 3a90 	vmov	s15, r3
 800b87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b87e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b882:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b886:	edd7 6a07 	vldr	s13, [r7, #28]
 800b88a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b88e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b892:	ee17 2a90 	vmov	r2, s15
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b89a:	e008      	b.n	800b8ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	609a      	str	r2, [r3, #8]
}
 800b8ae:	bf00      	nop
 800b8b0:	3724      	adds	r7, #36	; 0x24
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	58024400 	.word	0x58024400
 800b8c0:	03d09000 	.word	0x03d09000
 800b8c4:	46000000 	.word	0x46000000
 800b8c8:	4c742400 	.word	0x4c742400
 800b8cc:	4a742400 	.word	0x4a742400
 800b8d0:	4bb71b00 	.word	0x4bb71b00

0800b8d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b089      	sub	sp, #36	; 0x24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8dc:	4ba0      	ldr	r3, [pc, #640]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e0:	f003 0303 	and.w	r3, r3, #3
 800b8e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b8e6:	4b9e      	ldr	r3, [pc, #632]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ea:	091b      	lsrs	r3, r3, #4
 800b8ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b8f2:	4b9b      	ldr	r3, [pc, #620]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f6:	f003 0301 	and.w	r3, r3, #1
 800b8fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b8fc:	4b98      	ldr	r3, [pc, #608]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b900:	08db      	lsrs	r3, r3, #3
 800b902:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b906:	693a      	ldr	r2, [r7, #16]
 800b908:	fb02 f303 	mul.w	r3, r2, r3
 800b90c:	ee07 3a90 	vmov	s15, r3
 800b910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b914:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f000 8111 	beq.w	800bb42 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	2b02      	cmp	r3, #2
 800b924:	f000 8083 	beq.w	800ba2e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	f200 80a1 	bhi.w	800ba72 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d056      	beq.n	800b9ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b93c:	e099      	b.n	800ba72 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b93e:	4b88      	ldr	r3, [pc, #544]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f003 0320 	and.w	r3, r3, #32
 800b946:	2b00      	cmp	r3, #0
 800b948:	d02d      	beq.n	800b9a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b94a:	4b85      	ldr	r3, [pc, #532]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	08db      	lsrs	r3, r3, #3
 800b950:	f003 0303 	and.w	r3, r3, #3
 800b954:	4a83      	ldr	r2, [pc, #524]	; (800bb64 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b956:	fa22 f303 	lsr.w	r3, r2, r3
 800b95a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	ee07 3a90 	vmov	s15, r3
 800b962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	ee07 3a90 	vmov	s15, r3
 800b96c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b974:	4b7a      	ldr	r3, [pc, #488]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b97c:	ee07 3a90 	vmov	s15, r3
 800b980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b984:	ed97 6a03 	vldr	s12, [r7, #12]
 800b988:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bb68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b98c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b99c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b9a4:	e087      	b.n	800bab6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	ee07 3a90 	vmov	s15, r3
 800b9ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bb6c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b9b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9b8:	4b69      	ldr	r3, [pc, #420]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9c0:	ee07 3a90 	vmov	s15, r3
 800b9c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bb68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9e8:	e065      	b.n	800bab6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	ee07 3a90 	vmov	s15, r3
 800b9f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bb70 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b9f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9fc:	4b58      	ldr	r3, [pc, #352]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba04:	ee07 3a90 	vmov	s15, r3
 800ba08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba0c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba10:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bb68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba2c:	e043      	b.n	800bab6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	ee07 3a90 	vmov	s15, r3
 800ba34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba38:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ba3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba40:	4b47      	ldr	r3, [pc, #284]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba48:	ee07 3a90 	vmov	s15, r3
 800ba4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba50:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba54:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bb68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba70:	e021      	b.n	800bab6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	ee07 3a90 	vmov	s15, r3
 800ba78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba7c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bb6c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ba80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba84:	4b36      	ldr	r3, [pc, #216]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba8c:	ee07 3a90 	vmov	s15, r3
 800ba90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba94:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba98:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bb68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bab0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bab4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bab6:	4b2a      	ldr	r3, [pc, #168]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baba:	0a5b      	lsrs	r3, r3, #9
 800babc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bac0:	ee07 3a90 	vmov	s15, r3
 800bac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bacc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bad0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800badc:	ee17 2a90 	vmov	r2, s15
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bae4:	4b1e      	ldr	r3, [pc, #120]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae8:	0c1b      	lsrs	r3, r3, #16
 800baea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baee:	ee07 3a90 	vmov	s15, r3
 800baf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bafa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bafe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb0a:	ee17 2a90 	vmov	r2, s15
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bb12:	4b13      	ldr	r3, [pc, #76]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb16:	0e1b      	lsrs	r3, r3, #24
 800bb18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb1c:	ee07 3a90 	vmov	s15, r3
 800bb20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb38:	ee17 2a90 	vmov	r2, s15
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bb40:	e008      	b.n	800bb54 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	609a      	str	r2, [r3, #8]
}
 800bb54:	bf00      	nop
 800bb56:	3724      	adds	r7, #36	; 0x24
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	58024400 	.word	0x58024400
 800bb64:	03d09000 	.word	0x03d09000
 800bb68:	46000000 	.word	0x46000000
 800bb6c:	4c742400 	.word	0x4c742400
 800bb70:	4a742400 	.word	0x4a742400
 800bb74:	4bb71b00 	.word	0x4bb71b00

0800bb78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb86:	4b53      	ldr	r3, [pc, #332]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bb88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8a:	f003 0303 	and.w	r3, r3, #3
 800bb8e:	2b03      	cmp	r3, #3
 800bb90:	d101      	bne.n	800bb96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	e099      	b.n	800bcca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bb96:	4b4f      	ldr	r3, [pc, #316]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a4e      	ldr	r2, [pc, #312]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bb9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bba2:	f7f7 fe41 	bl	8003828 <HAL_GetTick>
 800bba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bba8:	e008      	b.n	800bbbc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bbaa:	f7f7 fe3d 	bl	8003828 <HAL_GetTick>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d901      	bls.n	800bbbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bbb8:	2303      	movs	r3, #3
 800bbba:	e086      	b.n	800bcca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bbbc:	4b45      	ldr	r3, [pc, #276]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d1f0      	bne.n	800bbaa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bbc8:	4b42      	ldr	r3, [pc, #264]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	031b      	lsls	r3, r3, #12
 800bbd6:	493f      	ldr	r1, [pc, #252]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	628b      	str	r3, [r1, #40]	; 0x28
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	3b01      	subs	r3, #1
 800bbec:	025b      	lsls	r3, r3, #9
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	431a      	orrs	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	041b      	lsls	r3, r3, #16
 800bbfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bbfe:	431a      	orrs	r2, r3
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	3b01      	subs	r3, #1
 800bc06:	061b      	lsls	r3, r3, #24
 800bc08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bc0c:	4931      	ldr	r1, [pc, #196]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bc12:	4b30      	ldr	r3, [pc, #192]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	492d      	ldr	r1, [pc, #180]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc20:	4313      	orrs	r3, r2
 800bc22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bc24:	4b2b      	ldr	r3, [pc, #172]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc28:	f023 0220 	bic.w	r2, r3, #32
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	4928      	ldr	r1, [pc, #160]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc32:	4313      	orrs	r3, r2
 800bc34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bc36:	4b27      	ldr	r3, [pc, #156]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3a:	4a26      	ldr	r2, [pc, #152]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc3c:	f023 0310 	bic.w	r3, r3, #16
 800bc40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bc42:	4b24      	ldr	r3, [pc, #144]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc46:	4b24      	ldr	r3, [pc, #144]	; (800bcd8 <RCCEx_PLL2_Config+0x160>)
 800bc48:	4013      	ands	r3, r2
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	69d2      	ldr	r2, [r2, #28]
 800bc4e:	00d2      	lsls	r2, r2, #3
 800bc50:	4920      	ldr	r1, [pc, #128]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc52:	4313      	orrs	r3, r2
 800bc54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bc56:	4b1f      	ldr	r3, [pc, #124]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5a:	4a1e      	ldr	r2, [pc, #120]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc5c:	f043 0310 	orr.w	r3, r3, #16
 800bc60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d106      	bne.n	800bc76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc68:	4b1a      	ldr	r3, [pc, #104]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6c:	4a19      	ldr	r2, [pc, #100]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc72:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc74:	e00f      	b.n	800bc96 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d106      	bne.n	800bc8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bc7c:	4b15      	ldr	r3, [pc, #84]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc80:	4a14      	ldr	r2, [pc, #80]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc86:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc88:	e005      	b.n	800bc96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bc8a:	4b12      	ldr	r3, [pc, #72]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8e:	4a11      	ldr	r2, [pc, #68]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bc96:	4b0f      	ldr	r3, [pc, #60]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a0e      	ldr	r2, [pc, #56]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bc9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bca2:	f7f7 fdc1 	bl	8003828 <HAL_GetTick>
 800bca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bca8:	e008      	b.n	800bcbc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bcaa:	f7f7 fdbd 	bl	8003828 <HAL_GetTick>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d901      	bls.n	800bcbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	e006      	b.n	800bcca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bcbc:	4b05      	ldr	r3, [pc, #20]	; (800bcd4 <RCCEx_PLL2_Config+0x15c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d0f0      	beq.n	800bcaa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bcc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	58024400 	.word	0x58024400
 800bcd8:	ffff0007 	.word	0xffff0007

0800bcdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bce6:	2300      	movs	r3, #0
 800bce8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bcea:	4b53      	ldr	r3, [pc, #332]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bcec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcee:	f003 0303 	and.w	r3, r3, #3
 800bcf2:	2b03      	cmp	r3, #3
 800bcf4:	d101      	bne.n	800bcfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e099      	b.n	800be2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bcfa:	4b4f      	ldr	r3, [pc, #316]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a4e      	ldr	r2, [pc, #312]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bd00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd06:	f7f7 fd8f 	bl	8003828 <HAL_GetTick>
 800bd0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bd0c:	e008      	b.n	800bd20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bd0e:	f7f7 fd8b 	bl	8003828 <HAL_GetTick>
 800bd12:	4602      	mov	r2, r0
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	1ad3      	subs	r3, r2, r3
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d901      	bls.n	800bd20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bd1c:	2303      	movs	r3, #3
 800bd1e:	e086      	b.n	800be2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bd20:	4b45      	ldr	r3, [pc, #276]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1f0      	bne.n	800bd0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bd2c:	4b42      	ldr	r3, [pc, #264]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bd2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	051b      	lsls	r3, r3, #20
 800bd3a:	493f      	ldr	r1, [pc, #252]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	628b      	str	r3, [r1, #40]	; 0x28
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	3b01      	subs	r3, #1
 800bd46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	025b      	lsls	r3, r3, #9
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	431a      	orrs	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	041b      	lsls	r3, r3, #16
 800bd5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bd62:	431a      	orrs	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	061b      	lsls	r3, r3, #24
 800bd6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd70:	4931      	ldr	r1, [pc, #196]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bd72:	4313      	orrs	r3, r2
 800bd74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bd76:	4b30      	ldr	r3, [pc, #192]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	695b      	ldr	r3, [r3, #20]
 800bd82:	492d      	ldr	r1, [pc, #180]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bd84:	4313      	orrs	r3, r2
 800bd86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bd88:	4b2b      	ldr	r3, [pc, #172]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	699b      	ldr	r3, [r3, #24]
 800bd94:	4928      	ldr	r1, [pc, #160]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bd96:	4313      	orrs	r3, r2
 800bd98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bd9a:	4b27      	ldr	r3, [pc, #156]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9e:	4a26      	ldr	r2, [pc, #152]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bda0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bda4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bda6:	4b24      	ldr	r3, [pc, #144]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bda8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdaa:	4b24      	ldr	r3, [pc, #144]	; (800be3c <RCCEx_PLL3_Config+0x160>)
 800bdac:	4013      	ands	r3, r2
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	69d2      	ldr	r2, [r2, #28]
 800bdb2:	00d2      	lsls	r2, r2, #3
 800bdb4:	4920      	ldr	r1, [pc, #128]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bdba:	4b1f      	ldr	r3, [pc, #124]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bdbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdbe:	4a1e      	ldr	r2, [pc, #120]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bdc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d106      	bne.n	800bdda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bdcc:	4b1a      	ldr	r3, [pc, #104]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bdce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd0:	4a19      	ldr	r2, [pc, #100]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bdd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bdd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bdd8:	e00f      	b.n	800bdfa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d106      	bne.n	800bdee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bde0:	4b15      	ldr	r3, [pc, #84]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde4:	4a14      	ldr	r2, [pc, #80]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bde6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bdea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bdec:	e005      	b.n	800bdfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bdee:	4b12      	ldr	r3, [pc, #72]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bdf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf2:	4a11      	ldr	r2, [pc, #68]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bdf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdf8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bdfa:	4b0f      	ldr	r3, [pc, #60]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a0e      	ldr	r2, [pc, #56]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800be00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be06:	f7f7 fd0f 	bl	8003828 <HAL_GetTick>
 800be0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800be0c:	e008      	b.n	800be20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800be0e:	f7f7 fd0b 	bl	8003828 <HAL_GetTick>
 800be12:	4602      	mov	r2, r0
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d901      	bls.n	800be20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800be1c:	2303      	movs	r3, #3
 800be1e:	e006      	b.n	800be2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800be20:	4b05      	ldr	r3, [pc, #20]	; (800be38 <RCCEx_PLL3_Config+0x15c>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d0f0      	beq.n	800be0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800be2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	58024400 	.word	0x58024400
 800be3c:	ffff0007 	.word	0xffff0007

0800be40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d101      	bne.n	800be52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800be4e:	2301      	movs	r3, #1
 800be50:	e049      	b.n	800bee6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d106      	bne.n	800be6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7f7 f872 	bl	8002f50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2202      	movs	r2, #2
 800be70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	3304      	adds	r3, #4
 800be7c:	4619      	mov	r1, r3
 800be7e:	4610      	mov	r0, r2
 800be80:	f000 fa58 	bl	800c334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2201      	movs	r2, #1
 800be88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2201      	movs	r2, #1
 800be90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2201      	movs	r2, #1
 800be98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2201      	movs	r2, #1
 800bed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
	...

0800bef0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d109      	bne.n	800bf14 <HAL_TIM_PWM_Start+0x24>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	bf14      	ite	ne
 800bf0c:	2301      	movne	r3, #1
 800bf0e:	2300      	moveq	r3, #0
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	e03c      	b.n	800bf8e <HAL_TIM_PWM_Start+0x9e>
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	2b04      	cmp	r3, #4
 800bf18:	d109      	bne.n	800bf2e <HAL_TIM_PWM_Start+0x3e>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	bf14      	ite	ne
 800bf26:	2301      	movne	r3, #1
 800bf28:	2300      	moveq	r3, #0
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	e02f      	b.n	800bf8e <HAL_TIM_PWM_Start+0x9e>
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2b08      	cmp	r3, #8
 800bf32:	d109      	bne.n	800bf48 <HAL_TIM_PWM_Start+0x58>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	bf14      	ite	ne
 800bf40:	2301      	movne	r3, #1
 800bf42:	2300      	moveq	r3, #0
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	e022      	b.n	800bf8e <HAL_TIM_PWM_Start+0x9e>
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	2b0c      	cmp	r3, #12
 800bf4c:	d109      	bne.n	800bf62 <HAL_TIM_PWM_Start+0x72>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	bf14      	ite	ne
 800bf5a:	2301      	movne	r3, #1
 800bf5c:	2300      	moveq	r3, #0
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	e015      	b.n	800bf8e <HAL_TIM_PWM_Start+0x9e>
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	2b10      	cmp	r3, #16
 800bf66:	d109      	bne.n	800bf7c <HAL_TIM_PWM_Start+0x8c>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	bf14      	ite	ne
 800bf74:	2301      	movne	r3, #1
 800bf76:	2300      	moveq	r3, #0
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	e008      	b.n	800bf8e <HAL_TIM_PWM_Start+0x9e>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	bf14      	ite	ne
 800bf88:	2301      	movne	r3, #1
 800bf8a:	2300      	moveq	r3, #0
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d001      	beq.n	800bf96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	e0a1      	b.n	800c0da <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d104      	bne.n	800bfa6 <HAL_TIM_PWM_Start+0xb6>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2202      	movs	r2, #2
 800bfa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bfa4:	e023      	b.n	800bfee <HAL_TIM_PWM_Start+0xfe>
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2b04      	cmp	r3, #4
 800bfaa:	d104      	bne.n	800bfb6 <HAL_TIM_PWM_Start+0xc6>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2202      	movs	r2, #2
 800bfb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bfb4:	e01b      	b.n	800bfee <HAL_TIM_PWM_Start+0xfe>
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	2b08      	cmp	r3, #8
 800bfba:	d104      	bne.n	800bfc6 <HAL_TIM_PWM_Start+0xd6>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfc4:	e013      	b.n	800bfee <HAL_TIM_PWM_Start+0xfe>
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b0c      	cmp	r3, #12
 800bfca:	d104      	bne.n	800bfd6 <HAL_TIM_PWM_Start+0xe6>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2202      	movs	r2, #2
 800bfd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bfd4:	e00b      	b.n	800bfee <HAL_TIM_PWM_Start+0xfe>
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b10      	cmp	r3, #16
 800bfda:	d104      	bne.n	800bfe6 <HAL_TIM_PWM_Start+0xf6>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2202      	movs	r2, #2
 800bfe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bfe4:	e003      	b.n	800bfee <HAL_TIM_PWM_Start+0xfe>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2202      	movs	r2, #2
 800bfea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2201      	movs	r2, #1
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f000 fd0c 	bl	800ca14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a38      	ldr	r2, [pc, #224]	; (800c0e4 <HAL_TIM_PWM_Start+0x1f4>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d013      	beq.n	800c02e <HAL_TIM_PWM_Start+0x13e>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a37      	ldr	r2, [pc, #220]	; (800c0e8 <HAL_TIM_PWM_Start+0x1f8>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d00e      	beq.n	800c02e <HAL_TIM_PWM_Start+0x13e>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a35      	ldr	r2, [pc, #212]	; (800c0ec <HAL_TIM_PWM_Start+0x1fc>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d009      	beq.n	800c02e <HAL_TIM_PWM_Start+0x13e>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a34      	ldr	r2, [pc, #208]	; (800c0f0 <HAL_TIM_PWM_Start+0x200>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d004      	beq.n	800c02e <HAL_TIM_PWM_Start+0x13e>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a32      	ldr	r2, [pc, #200]	; (800c0f4 <HAL_TIM_PWM_Start+0x204>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d101      	bne.n	800c032 <HAL_TIM_PWM_Start+0x142>
 800c02e:	2301      	movs	r3, #1
 800c030:	e000      	b.n	800c034 <HAL_TIM_PWM_Start+0x144>
 800c032:	2300      	movs	r3, #0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d007      	beq.n	800c048 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c046:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a25      	ldr	r2, [pc, #148]	; (800c0e4 <HAL_TIM_PWM_Start+0x1f4>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d022      	beq.n	800c098 <HAL_TIM_PWM_Start+0x1a8>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c05a:	d01d      	beq.n	800c098 <HAL_TIM_PWM_Start+0x1a8>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a25      	ldr	r2, [pc, #148]	; (800c0f8 <HAL_TIM_PWM_Start+0x208>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d018      	beq.n	800c098 <HAL_TIM_PWM_Start+0x1a8>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a24      	ldr	r2, [pc, #144]	; (800c0fc <HAL_TIM_PWM_Start+0x20c>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d013      	beq.n	800c098 <HAL_TIM_PWM_Start+0x1a8>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4a22      	ldr	r2, [pc, #136]	; (800c100 <HAL_TIM_PWM_Start+0x210>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d00e      	beq.n	800c098 <HAL_TIM_PWM_Start+0x1a8>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a1a      	ldr	r2, [pc, #104]	; (800c0e8 <HAL_TIM_PWM_Start+0x1f8>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d009      	beq.n	800c098 <HAL_TIM_PWM_Start+0x1a8>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a1e      	ldr	r2, [pc, #120]	; (800c104 <HAL_TIM_PWM_Start+0x214>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d004      	beq.n	800c098 <HAL_TIM_PWM_Start+0x1a8>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a16      	ldr	r2, [pc, #88]	; (800c0ec <HAL_TIM_PWM_Start+0x1fc>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d115      	bne.n	800c0c4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	689a      	ldr	r2, [r3, #8]
 800c09e:	4b1a      	ldr	r3, [pc, #104]	; (800c108 <HAL_TIM_PWM_Start+0x218>)
 800c0a0:	4013      	ands	r3, r2
 800c0a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2b06      	cmp	r3, #6
 800c0a8:	d015      	beq.n	800c0d6 <HAL_TIM_PWM_Start+0x1e6>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0b0:	d011      	beq.n	800c0d6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f042 0201 	orr.w	r2, r2, #1
 800c0c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0c2:	e008      	b.n	800c0d6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f042 0201 	orr.w	r2, r2, #1
 800c0d2:	601a      	str	r2, [r3, #0]
 800c0d4:	e000      	b.n	800c0d8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	40010000 	.word	0x40010000
 800c0e8:	40010400 	.word	0x40010400
 800c0ec:	40014000 	.word	0x40014000
 800c0f0:	40014400 	.word	0x40014400
 800c0f4:	40014800 	.word	0x40014800
 800c0f8:	40000400 	.word	0x40000400
 800c0fc:	40000800 	.word	0x40000800
 800c100:	40000c00 	.word	0x40000c00
 800c104:	40001800 	.word	0x40001800
 800c108:	00010007 	.word	0x00010007

0800c10c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b086      	sub	sp, #24
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c118:	2300      	movs	r3, #0
 800c11a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c122:	2b01      	cmp	r3, #1
 800c124:	d101      	bne.n	800c12a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c126:	2302      	movs	r3, #2
 800c128:	e0ff      	b.n	800c32a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2201      	movs	r2, #1
 800c12e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2b14      	cmp	r3, #20
 800c136:	f200 80f0 	bhi.w	800c31a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c13a:	a201      	add	r2, pc, #4	; (adr r2, 800c140 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c140:	0800c195 	.word	0x0800c195
 800c144:	0800c31b 	.word	0x0800c31b
 800c148:	0800c31b 	.word	0x0800c31b
 800c14c:	0800c31b 	.word	0x0800c31b
 800c150:	0800c1d5 	.word	0x0800c1d5
 800c154:	0800c31b 	.word	0x0800c31b
 800c158:	0800c31b 	.word	0x0800c31b
 800c15c:	0800c31b 	.word	0x0800c31b
 800c160:	0800c217 	.word	0x0800c217
 800c164:	0800c31b 	.word	0x0800c31b
 800c168:	0800c31b 	.word	0x0800c31b
 800c16c:	0800c31b 	.word	0x0800c31b
 800c170:	0800c257 	.word	0x0800c257
 800c174:	0800c31b 	.word	0x0800c31b
 800c178:	0800c31b 	.word	0x0800c31b
 800c17c:	0800c31b 	.word	0x0800c31b
 800c180:	0800c299 	.word	0x0800c299
 800c184:	0800c31b 	.word	0x0800c31b
 800c188:	0800c31b 	.word	0x0800c31b
 800c18c:	0800c31b 	.word	0x0800c31b
 800c190:	0800c2d9 	.word	0x0800c2d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68b9      	ldr	r1, [r7, #8]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f000 f964 	bl	800c468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	699a      	ldr	r2, [r3, #24]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f042 0208 	orr.w	r2, r2, #8
 800c1ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	699a      	ldr	r2, [r3, #24]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f022 0204 	bic.w	r2, r2, #4
 800c1be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	6999      	ldr	r1, [r3, #24]
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	691a      	ldr	r2, [r3, #16]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	430a      	orrs	r2, r1
 800c1d0:	619a      	str	r2, [r3, #24]
      break;
 800c1d2:	e0a5      	b.n	800c320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	68b9      	ldr	r1, [r7, #8]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f000 f9d4 	bl	800c588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	699a      	ldr	r2, [r3, #24]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	699a      	ldr	r2, [r3, #24]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6999      	ldr	r1, [r3, #24]
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	021a      	lsls	r2, r3, #8
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	430a      	orrs	r2, r1
 800c212:	619a      	str	r2, [r3, #24]
      break;
 800c214:	e084      	b.n	800c320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	68b9      	ldr	r1, [r7, #8]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 fa3d 	bl	800c69c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	69da      	ldr	r2, [r3, #28]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f042 0208 	orr.w	r2, r2, #8
 800c230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	69da      	ldr	r2, [r3, #28]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f022 0204 	bic.w	r2, r2, #4
 800c240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	69d9      	ldr	r1, [r3, #28]
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	691a      	ldr	r2, [r3, #16]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	430a      	orrs	r2, r1
 800c252:	61da      	str	r2, [r3, #28]
      break;
 800c254:	e064      	b.n	800c320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	68b9      	ldr	r1, [r7, #8]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 faa5 	bl	800c7ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	69da      	ldr	r2, [r3, #28]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	69da      	ldr	r2, [r3, #28]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	69d9      	ldr	r1, [r3, #28]
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	691b      	ldr	r3, [r3, #16]
 800c28c:	021a      	lsls	r2, r3, #8
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	430a      	orrs	r2, r1
 800c294:	61da      	str	r2, [r3, #28]
      break;
 800c296:	e043      	b.n	800c320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68b9      	ldr	r1, [r7, #8]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 faee 	bl	800c880 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f042 0208 	orr.w	r2, r2, #8
 800c2b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f022 0204 	bic.w	r2, r2, #4
 800c2c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	691a      	ldr	r2, [r3, #16]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	430a      	orrs	r2, r1
 800c2d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c2d6:	e023      	b.n	800c320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68b9      	ldr	r1, [r7, #8]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 fb32 	bl	800c948 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c302:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	691b      	ldr	r3, [r3, #16]
 800c30e:	021a      	lsls	r2, r3, #8
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	430a      	orrs	r2, r1
 800c316:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c318:	e002      	b.n	800c320 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	75fb      	strb	r3, [r7, #23]
      break;
 800c31e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2200      	movs	r2, #0
 800c324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c328:	7dfb      	ldrb	r3, [r7, #23]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3718      	adds	r7, #24
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop

0800c334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a40      	ldr	r2, [pc, #256]	; (800c448 <TIM_Base_SetConfig+0x114>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d013      	beq.n	800c374 <TIM_Base_SetConfig+0x40>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c352:	d00f      	beq.n	800c374 <TIM_Base_SetConfig+0x40>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4a3d      	ldr	r2, [pc, #244]	; (800c44c <TIM_Base_SetConfig+0x118>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d00b      	beq.n	800c374 <TIM_Base_SetConfig+0x40>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a3c      	ldr	r2, [pc, #240]	; (800c450 <TIM_Base_SetConfig+0x11c>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d007      	beq.n	800c374 <TIM_Base_SetConfig+0x40>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4a3b      	ldr	r2, [pc, #236]	; (800c454 <TIM_Base_SetConfig+0x120>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d003      	beq.n	800c374 <TIM_Base_SetConfig+0x40>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a3a      	ldr	r2, [pc, #232]	; (800c458 <TIM_Base_SetConfig+0x124>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d108      	bne.n	800c386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c37a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	68fa      	ldr	r2, [r7, #12]
 800c382:	4313      	orrs	r3, r2
 800c384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a2f      	ldr	r2, [pc, #188]	; (800c448 <TIM_Base_SetConfig+0x114>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d01f      	beq.n	800c3ce <TIM_Base_SetConfig+0x9a>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c394:	d01b      	beq.n	800c3ce <TIM_Base_SetConfig+0x9a>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4a2c      	ldr	r2, [pc, #176]	; (800c44c <TIM_Base_SetConfig+0x118>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d017      	beq.n	800c3ce <TIM_Base_SetConfig+0x9a>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a2b      	ldr	r2, [pc, #172]	; (800c450 <TIM_Base_SetConfig+0x11c>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d013      	beq.n	800c3ce <TIM_Base_SetConfig+0x9a>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4a2a      	ldr	r2, [pc, #168]	; (800c454 <TIM_Base_SetConfig+0x120>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d00f      	beq.n	800c3ce <TIM_Base_SetConfig+0x9a>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4a29      	ldr	r2, [pc, #164]	; (800c458 <TIM_Base_SetConfig+0x124>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d00b      	beq.n	800c3ce <TIM_Base_SetConfig+0x9a>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4a28      	ldr	r2, [pc, #160]	; (800c45c <TIM_Base_SetConfig+0x128>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d007      	beq.n	800c3ce <TIM_Base_SetConfig+0x9a>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4a27      	ldr	r2, [pc, #156]	; (800c460 <TIM_Base_SetConfig+0x12c>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d003      	beq.n	800c3ce <TIM_Base_SetConfig+0x9a>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4a26      	ldr	r2, [pc, #152]	; (800c464 <TIM_Base_SetConfig+0x130>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d108      	bne.n	800c3e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	689a      	ldr	r2, [r3, #8]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	4a10      	ldr	r2, [pc, #64]	; (800c448 <TIM_Base_SetConfig+0x114>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d00f      	beq.n	800c42c <TIM_Base_SetConfig+0xf8>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	4a12      	ldr	r2, [pc, #72]	; (800c458 <TIM_Base_SetConfig+0x124>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d00b      	beq.n	800c42c <TIM_Base_SetConfig+0xf8>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a11      	ldr	r2, [pc, #68]	; (800c45c <TIM_Base_SetConfig+0x128>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d007      	beq.n	800c42c <TIM_Base_SetConfig+0xf8>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a10      	ldr	r2, [pc, #64]	; (800c460 <TIM_Base_SetConfig+0x12c>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d003      	beq.n	800c42c <TIM_Base_SetConfig+0xf8>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a0f      	ldr	r2, [pc, #60]	; (800c464 <TIM_Base_SetConfig+0x130>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d103      	bne.n	800c434 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	691a      	ldr	r2, [r3, #16]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	615a      	str	r2, [r3, #20]
}
 800c43a:	bf00      	nop
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	40010000 	.word	0x40010000
 800c44c:	40000400 	.word	0x40000400
 800c450:	40000800 	.word	0x40000800
 800c454:	40000c00 	.word	0x40000c00
 800c458:	40010400 	.word	0x40010400
 800c45c:	40014000 	.word	0x40014000
 800c460:	40014400 	.word	0x40014400
 800c464:	40014800 	.word	0x40014800

0800c468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c468:	b480      	push	{r7}
 800c46a:	b087      	sub	sp, #28
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6a1b      	ldr	r3, [r3, #32]
 800c476:	f023 0201 	bic.w	r2, r3, #1
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	699b      	ldr	r3, [r3, #24]
 800c48e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	4b37      	ldr	r3, [pc, #220]	; (800c570 <TIM_OC1_SetConfig+0x108>)
 800c494:	4013      	ands	r3, r2
 800c496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f023 0303 	bic.w	r3, r3, #3
 800c49e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	f023 0302 	bic.w	r3, r3, #2
 800c4b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	697a      	ldr	r2, [r7, #20]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	4a2d      	ldr	r2, [pc, #180]	; (800c574 <TIM_OC1_SetConfig+0x10c>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d00f      	beq.n	800c4e4 <TIM_OC1_SetConfig+0x7c>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4a2c      	ldr	r2, [pc, #176]	; (800c578 <TIM_OC1_SetConfig+0x110>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d00b      	beq.n	800c4e4 <TIM_OC1_SetConfig+0x7c>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4a2b      	ldr	r2, [pc, #172]	; (800c57c <TIM_OC1_SetConfig+0x114>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d007      	beq.n	800c4e4 <TIM_OC1_SetConfig+0x7c>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4a2a      	ldr	r2, [pc, #168]	; (800c580 <TIM_OC1_SetConfig+0x118>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d003      	beq.n	800c4e4 <TIM_OC1_SetConfig+0x7c>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4a29      	ldr	r2, [pc, #164]	; (800c584 <TIM_OC1_SetConfig+0x11c>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d10c      	bne.n	800c4fe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	f023 0308 	bic.w	r3, r3, #8
 800c4ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	697a      	ldr	r2, [r7, #20]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	f023 0304 	bic.w	r3, r3, #4
 800c4fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4a1c      	ldr	r2, [pc, #112]	; (800c574 <TIM_OC1_SetConfig+0x10c>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d00f      	beq.n	800c526 <TIM_OC1_SetConfig+0xbe>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4a1b      	ldr	r2, [pc, #108]	; (800c578 <TIM_OC1_SetConfig+0x110>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d00b      	beq.n	800c526 <TIM_OC1_SetConfig+0xbe>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4a1a      	ldr	r2, [pc, #104]	; (800c57c <TIM_OC1_SetConfig+0x114>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d007      	beq.n	800c526 <TIM_OC1_SetConfig+0xbe>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	4a19      	ldr	r2, [pc, #100]	; (800c580 <TIM_OC1_SetConfig+0x118>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d003      	beq.n	800c526 <TIM_OC1_SetConfig+0xbe>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4a18      	ldr	r2, [pc, #96]	; (800c584 <TIM_OC1_SetConfig+0x11c>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d111      	bne.n	800c54a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c52c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	695b      	ldr	r3, [r3, #20]
 800c53a:	693a      	ldr	r2, [r7, #16]
 800c53c:	4313      	orrs	r3, r2
 800c53e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	699b      	ldr	r3, [r3, #24]
 800c544:	693a      	ldr	r2, [r7, #16]
 800c546:	4313      	orrs	r3, r2
 800c548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	693a      	ldr	r2, [r7, #16]
 800c54e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	685a      	ldr	r2, [r3, #4]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	697a      	ldr	r2, [r7, #20]
 800c562:	621a      	str	r2, [r3, #32]
}
 800c564:	bf00      	nop
 800c566:	371c      	adds	r7, #28
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	fffeff8f 	.word	0xfffeff8f
 800c574:	40010000 	.word	0x40010000
 800c578:	40010400 	.word	0x40010400
 800c57c:	40014000 	.word	0x40014000
 800c580:	40014400 	.word	0x40014400
 800c584:	40014800 	.word	0x40014800

0800c588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c588:	b480      	push	{r7}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6a1b      	ldr	r3, [r3, #32]
 800c596:	f023 0210 	bic.w	r2, r3, #16
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6a1b      	ldr	r3, [r3, #32]
 800c5a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	699b      	ldr	r3, [r3, #24]
 800c5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c5b0:	68fa      	ldr	r2, [r7, #12]
 800c5b2:	4b34      	ldr	r3, [pc, #208]	; (800c684 <TIM_OC2_SetConfig+0xfc>)
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	021b      	lsls	r3, r3, #8
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	f023 0320 	bic.w	r3, r3, #32
 800c5d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	011b      	lsls	r3, r3, #4
 800c5da:	697a      	ldr	r2, [r7, #20]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a29      	ldr	r2, [pc, #164]	; (800c688 <TIM_OC2_SetConfig+0x100>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d003      	beq.n	800c5f0 <TIM_OC2_SetConfig+0x68>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a28      	ldr	r2, [pc, #160]	; (800c68c <TIM_OC2_SetConfig+0x104>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d10d      	bne.n	800c60c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	011b      	lsls	r3, r3, #4
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	4313      	orrs	r3, r2
 800c602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c60a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a1e      	ldr	r2, [pc, #120]	; (800c688 <TIM_OC2_SetConfig+0x100>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d00f      	beq.n	800c634 <TIM_OC2_SetConfig+0xac>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4a1d      	ldr	r2, [pc, #116]	; (800c68c <TIM_OC2_SetConfig+0x104>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d00b      	beq.n	800c634 <TIM_OC2_SetConfig+0xac>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4a1c      	ldr	r2, [pc, #112]	; (800c690 <TIM_OC2_SetConfig+0x108>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d007      	beq.n	800c634 <TIM_OC2_SetConfig+0xac>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a1b      	ldr	r2, [pc, #108]	; (800c694 <TIM_OC2_SetConfig+0x10c>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d003      	beq.n	800c634 <TIM_OC2_SetConfig+0xac>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a1a      	ldr	r2, [pc, #104]	; (800c698 <TIM_OC2_SetConfig+0x110>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d113      	bne.n	800c65c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c63a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	695b      	ldr	r3, [r3, #20]
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	693a      	ldr	r2, [r7, #16]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	699b      	ldr	r3, [r3, #24]
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	693a      	ldr	r2, [r7, #16]
 800c658:	4313      	orrs	r3, r2
 800c65a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	693a      	ldr	r2, [r7, #16]
 800c660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	685a      	ldr	r2, [r3, #4]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	621a      	str	r2, [r3, #32]
}
 800c676:	bf00      	nop
 800c678:	371c      	adds	r7, #28
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	feff8fff 	.word	0xfeff8fff
 800c688:	40010000 	.word	0x40010000
 800c68c:	40010400 	.word	0x40010400
 800c690:	40014000 	.word	0x40014000
 800c694:	40014400 	.word	0x40014400
 800c698:	40014800 	.word	0x40014800

0800c69c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b087      	sub	sp, #28
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6a1b      	ldr	r3, [r3, #32]
 800c6aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a1b      	ldr	r3, [r3, #32]
 800c6b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	69db      	ldr	r3, [r3, #28]
 800c6c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	4b33      	ldr	r3, [pc, #204]	; (800c794 <TIM_OC3_SetConfig+0xf8>)
 800c6c8:	4013      	ands	r3, r2
 800c6ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f023 0303 	bic.w	r3, r3, #3
 800c6d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	021b      	lsls	r3, r3, #8
 800c6ec:	697a      	ldr	r2, [r7, #20]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4a28      	ldr	r2, [pc, #160]	; (800c798 <TIM_OC3_SetConfig+0xfc>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d003      	beq.n	800c702 <TIM_OC3_SetConfig+0x66>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4a27      	ldr	r2, [pc, #156]	; (800c79c <TIM_OC3_SetConfig+0x100>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d10d      	bne.n	800c71e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	021b      	lsls	r3, r3, #8
 800c710:	697a      	ldr	r2, [r7, #20]
 800c712:	4313      	orrs	r3, r2
 800c714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c71c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a1d      	ldr	r2, [pc, #116]	; (800c798 <TIM_OC3_SetConfig+0xfc>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d00f      	beq.n	800c746 <TIM_OC3_SetConfig+0xaa>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4a1c      	ldr	r2, [pc, #112]	; (800c79c <TIM_OC3_SetConfig+0x100>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d00b      	beq.n	800c746 <TIM_OC3_SetConfig+0xaa>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4a1b      	ldr	r2, [pc, #108]	; (800c7a0 <TIM_OC3_SetConfig+0x104>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d007      	beq.n	800c746 <TIM_OC3_SetConfig+0xaa>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	4a1a      	ldr	r2, [pc, #104]	; (800c7a4 <TIM_OC3_SetConfig+0x108>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d003      	beq.n	800c746 <TIM_OC3_SetConfig+0xaa>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	4a19      	ldr	r2, [pc, #100]	; (800c7a8 <TIM_OC3_SetConfig+0x10c>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d113      	bne.n	800c76e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c74c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	695b      	ldr	r3, [r3, #20]
 800c75a:	011b      	lsls	r3, r3, #4
 800c75c:	693a      	ldr	r2, [r7, #16]
 800c75e:	4313      	orrs	r3, r2
 800c760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	699b      	ldr	r3, [r3, #24]
 800c766:	011b      	lsls	r3, r3, #4
 800c768:	693a      	ldr	r2, [r7, #16]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	693a      	ldr	r2, [r7, #16]
 800c772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	685a      	ldr	r2, [r3, #4]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	697a      	ldr	r2, [r7, #20]
 800c786:	621a      	str	r2, [r3, #32]
}
 800c788:	bf00      	nop
 800c78a:	371c      	adds	r7, #28
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr
 800c794:	fffeff8f 	.word	0xfffeff8f
 800c798:	40010000 	.word	0x40010000
 800c79c:	40010400 	.word	0x40010400
 800c7a0:	40014000 	.word	0x40014000
 800c7a4:	40014400 	.word	0x40014400
 800c7a8:	40014800 	.word	0x40014800

0800c7ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b087      	sub	sp, #28
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6a1b      	ldr	r3, [r3, #32]
 800c7ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6a1b      	ldr	r3, [r3, #32]
 800c7c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	69db      	ldr	r3, [r3, #28]
 800c7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c7d4:	68fa      	ldr	r2, [r7, #12]
 800c7d6:	4b24      	ldr	r3, [pc, #144]	; (800c868 <TIM_OC4_SetConfig+0xbc>)
 800c7d8:	4013      	ands	r3, r2
 800c7da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	021b      	lsls	r3, r3, #8
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	031b      	lsls	r3, r3, #12
 800c7fe:	693a      	ldr	r2, [r7, #16]
 800c800:	4313      	orrs	r3, r2
 800c802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4a19      	ldr	r2, [pc, #100]	; (800c86c <TIM_OC4_SetConfig+0xc0>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d00f      	beq.n	800c82c <TIM_OC4_SetConfig+0x80>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a18      	ldr	r2, [pc, #96]	; (800c870 <TIM_OC4_SetConfig+0xc4>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d00b      	beq.n	800c82c <TIM_OC4_SetConfig+0x80>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a17      	ldr	r2, [pc, #92]	; (800c874 <TIM_OC4_SetConfig+0xc8>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d007      	beq.n	800c82c <TIM_OC4_SetConfig+0x80>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	4a16      	ldr	r2, [pc, #88]	; (800c878 <TIM_OC4_SetConfig+0xcc>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d003      	beq.n	800c82c <TIM_OC4_SetConfig+0x80>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a15      	ldr	r2, [pc, #84]	; (800c87c <TIM_OC4_SetConfig+0xd0>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d109      	bne.n	800c840 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	019b      	lsls	r3, r3, #6
 800c83a:	697a      	ldr	r2, [r7, #20]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	697a      	ldr	r2, [r7, #20]
 800c844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	685a      	ldr	r2, [r3, #4]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	693a      	ldr	r2, [r7, #16]
 800c858:	621a      	str	r2, [r3, #32]
}
 800c85a:	bf00      	nop
 800c85c:	371c      	adds	r7, #28
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	feff8fff 	.word	0xfeff8fff
 800c86c:	40010000 	.word	0x40010000
 800c870:	40010400 	.word	0x40010400
 800c874:	40014000 	.word	0x40014000
 800c878:	40014400 	.word	0x40014400
 800c87c:	40014800 	.word	0x40014800

0800c880 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c880:	b480      	push	{r7}
 800c882:	b087      	sub	sp, #28
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a1b      	ldr	r3, [r3, #32]
 800c88e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a1b      	ldr	r3, [r3, #32]
 800c89a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	4b21      	ldr	r3, [pc, #132]	; (800c930 <TIM_OC5_SetConfig+0xb0>)
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c8c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	041b      	lsls	r3, r3, #16
 800c8c8:	693a      	ldr	r2, [r7, #16]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	4a18      	ldr	r2, [pc, #96]	; (800c934 <TIM_OC5_SetConfig+0xb4>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d00f      	beq.n	800c8f6 <TIM_OC5_SetConfig+0x76>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4a17      	ldr	r2, [pc, #92]	; (800c938 <TIM_OC5_SetConfig+0xb8>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d00b      	beq.n	800c8f6 <TIM_OC5_SetConfig+0x76>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4a16      	ldr	r2, [pc, #88]	; (800c93c <TIM_OC5_SetConfig+0xbc>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d007      	beq.n	800c8f6 <TIM_OC5_SetConfig+0x76>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4a15      	ldr	r2, [pc, #84]	; (800c940 <TIM_OC5_SetConfig+0xc0>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d003      	beq.n	800c8f6 <TIM_OC5_SetConfig+0x76>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4a14      	ldr	r2, [pc, #80]	; (800c944 <TIM_OC5_SetConfig+0xc4>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d109      	bne.n	800c90a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	695b      	ldr	r3, [r3, #20]
 800c902:	021b      	lsls	r3, r3, #8
 800c904:	697a      	ldr	r2, [r7, #20]
 800c906:	4313      	orrs	r3, r2
 800c908:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	697a      	ldr	r2, [r7, #20]
 800c90e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	68fa      	ldr	r2, [r7, #12]
 800c914:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	685a      	ldr	r2, [r3, #4]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	693a      	ldr	r2, [r7, #16]
 800c922:	621a      	str	r2, [r3, #32]
}
 800c924:	bf00      	nop
 800c926:	371c      	adds	r7, #28
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr
 800c930:	fffeff8f 	.word	0xfffeff8f
 800c934:	40010000 	.word	0x40010000
 800c938:	40010400 	.word	0x40010400
 800c93c:	40014000 	.word	0x40014000
 800c940:	40014400 	.word	0x40014400
 800c944:	40014800 	.word	0x40014800

0800c948 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c948:	b480      	push	{r7}
 800c94a:	b087      	sub	sp, #28
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a1b      	ldr	r3, [r3, #32]
 800c956:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	4b22      	ldr	r3, [pc, #136]	; (800c9fc <TIM_OC6_SetConfig+0xb4>)
 800c974:	4013      	ands	r3, r2
 800c976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	021b      	lsls	r3, r3, #8
 800c97e:	68fa      	ldr	r2, [r7, #12]
 800c980:	4313      	orrs	r3, r2
 800c982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c98a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	051b      	lsls	r3, r3, #20
 800c992:	693a      	ldr	r2, [r7, #16]
 800c994:	4313      	orrs	r3, r2
 800c996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4a19      	ldr	r2, [pc, #100]	; (800ca00 <TIM_OC6_SetConfig+0xb8>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d00f      	beq.n	800c9c0 <TIM_OC6_SetConfig+0x78>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4a18      	ldr	r2, [pc, #96]	; (800ca04 <TIM_OC6_SetConfig+0xbc>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d00b      	beq.n	800c9c0 <TIM_OC6_SetConfig+0x78>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a17      	ldr	r2, [pc, #92]	; (800ca08 <TIM_OC6_SetConfig+0xc0>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d007      	beq.n	800c9c0 <TIM_OC6_SetConfig+0x78>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a16      	ldr	r2, [pc, #88]	; (800ca0c <TIM_OC6_SetConfig+0xc4>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d003      	beq.n	800c9c0 <TIM_OC6_SetConfig+0x78>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a15      	ldr	r2, [pc, #84]	; (800ca10 <TIM_OC6_SetConfig+0xc8>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d109      	bne.n	800c9d4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c9c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	695b      	ldr	r3, [r3, #20]
 800c9cc:	029b      	lsls	r3, r3, #10
 800c9ce:	697a      	ldr	r2, [r7, #20]
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	697a      	ldr	r2, [r7, #20]
 800c9d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	693a      	ldr	r2, [r7, #16]
 800c9ec:	621a      	str	r2, [r3, #32]
}
 800c9ee:	bf00      	nop
 800c9f0:	371c      	adds	r7, #28
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	feff8fff 	.word	0xfeff8fff
 800ca00:	40010000 	.word	0x40010000
 800ca04:	40010400 	.word	0x40010400
 800ca08:	40014000 	.word	0x40014000
 800ca0c:	40014400 	.word	0x40014400
 800ca10:	40014800 	.word	0x40014800

0800ca14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b087      	sub	sp, #28
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	f003 031f 	and.w	r3, r3, #31
 800ca26:	2201      	movs	r2, #1
 800ca28:	fa02 f303 	lsl.w	r3, r2, r3
 800ca2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6a1a      	ldr	r2, [r3, #32]
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	43db      	mvns	r3, r3
 800ca36:	401a      	ands	r2, r3
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6a1a      	ldr	r2, [r3, #32]
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	f003 031f 	and.w	r3, r3, #31
 800ca46:	6879      	ldr	r1, [r7, #4]
 800ca48:	fa01 f303 	lsl.w	r3, r1, r3
 800ca4c:	431a      	orrs	r2, r3
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	621a      	str	r2, [r3, #32]
}
 800ca52:	bf00      	nop
 800ca54:	371c      	adds	r7, #28
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
	...

0800ca60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d101      	bne.n	800ca78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca74:	2302      	movs	r3, #2
 800ca76:	e06d      	b.n	800cb54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2202      	movs	r2, #2
 800ca84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a30      	ldr	r2, [pc, #192]	; (800cb60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d004      	beq.n	800caac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a2f      	ldr	r2, [pc, #188]	; (800cb64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d108      	bne.n	800cabe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cab2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	68fa      	ldr	r2, [r7, #12]
 800caba:	4313      	orrs	r3, r2
 800cabc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cac4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	4313      	orrs	r3, r2
 800cace:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	68fa      	ldr	r2, [r7, #12]
 800cad6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a20      	ldr	r2, [pc, #128]	; (800cb60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d022      	beq.n	800cb28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caea:	d01d      	beq.n	800cb28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a1d      	ldr	r2, [pc, #116]	; (800cb68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d018      	beq.n	800cb28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a1c      	ldr	r2, [pc, #112]	; (800cb6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d013      	beq.n	800cb28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a1a      	ldr	r2, [pc, #104]	; (800cb70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d00e      	beq.n	800cb28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a15      	ldr	r2, [pc, #84]	; (800cb64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d009      	beq.n	800cb28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a16      	ldr	r2, [pc, #88]	; (800cb74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d004      	beq.n	800cb28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	4a15      	ldr	r2, [pc, #84]	; (800cb78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d10c      	bne.n	800cb42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	68ba      	ldr	r2, [r7, #8]
 800cb36:	4313      	orrs	r3, r2
 800cb38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	68ba      	ldr	r2, [r7, #8]
 800cb40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2201      	movs	r2, #1
 800cb46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb52:	2300      	movs	r3, #0
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3714      	adds	r7, #20
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr
 800cb60:	40010000 	.word	0x40010000
 800cb64:	40010400 	.word	0x40010400
 800cb68:	40000400 	.word	0x40000400
 800cb6c:	40000800 	.word	0x40000800
 800cb70:	40000c00 	.word	0x40000c00
 800cb74:	40001800 	.word	0x40001800
 800cb78:	40014000 	.word	0x40014000

0800cb7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d101      	bne.n	800cb8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e042      	b.n	800cc14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d106      	bne.n	800cba6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f7f6 fa91 	bl	80030c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2224      	movs	r2, #36	; 0x24
 800cbaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f022 0201 	bic.w	r2, r2, #1
 800cbbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 fcf4 	bl	800d5ac <UART_SetConfig>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d101      	bne.n	800cbce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e022      	b.n	800cc14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d002      	beq.n	800cbdc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f001 fb54 	bl	800e284 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	685a      	ldr	r2, [r3, #4]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	689a      	ldr	r2, [r3, #8]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f042 0201 	orr.w	r2, r2, #1
 800cc0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f001 fbdb 	bl	800e3c8 <UART_CheckIdleState>
 800cc12:	4603      	mov	r3, r0
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b08a      	sub	sp, #40	; 0x28
 800cc20:	af02      	add	r7, sp, #8
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	603b      	str	r3, [r7, #0]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc32:	2b20      	cmp	r3, #32
 800cc34:	d17b      	bne.n	800cd2e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <HAL_UART_Transmit+0x26>
 800cc3c:	88fb      	ldrh	r3, [r7, #6]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d101      	bne.n	800cc46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	e074      	b.n	800cd30 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2221      	movs	r2, #33	; 0x21
 800cc52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc56:	f7f6 fde7 	bl	8003828 <HAL_GetTick>
 800cc5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	88fa      	ldrh	r2, [r7, #6]
 800cc60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	88fa      	ldrh	r2, [r7, #6]
 800cc68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc74:	d108      	bne.n	800cc88 <HAL_UART_Transmit+0x6c>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d104      	bne.n	800cc88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	61bb      	str	r3, [r7, #24]
 800cc86:	e003      	b.n	800cc90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cc90:	e030      	b.n	800ccf4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	2180      	movs	r1, #128	; 0x80
 800cc9c:	68f8      	ldr	r0, [r7, #12]
 800cc9e:	f001 fc3d 	bl	800e51c <UART_WaitOnFlagUntilTimeout>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d005      	beq.n	800ccb4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2220      	movs	r2, #32
 800ccac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ccb0:	2303      	movs	r3, #3
 800ccb2:	e03d      	b.n	800cd30 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10b      	bne.n	800ccd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	881b      	ldrh	r3, [r3, #0]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	3302      	adds	r3, #2
 800ccce:	61bb      	str	r3, [r7, #24]
 800ccd0:	e007      	b.n	800cce2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	781a      	ldrb	r2, [r3, #0]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	3301      	adds	r3, #1
 800cce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	3b01      	subs	r3, #1
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d1c8      	bne.n	800cc92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	2200      	movs	r2, #0
 800cd08:	2140      	movs	r1, #64	; 0x40
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f001 fc06 	bl	800e51c <UART_WaitOnFlagUntilTimeout>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d005      	beq.n	800cd22 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2220      	movs	r2, #32
 800cd1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800cd1e:	2303      	movs	r3, #3
 800cd20:	e006      	b.n	800cd30 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2220      	movs	r2, #32
 800cd26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	e000      	b.n	800cd30 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cd2e:	2302      	movs	r3, #2
  }
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3720      	adds	r7, #32
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b08a      	sub	sp, #40	; 0x28
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	4613      	mov	r3, r2
 800cd44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd4c:	2b20      	cmp	r3, #32
 800cd4e:	d137      	bne.n	800cdc0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d002      	beq.n	800cd5c <HAL_UART_Receive_DMA+0x24>
 800cd56:	88fb      	ldrh	r3, [r7, #6]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d101      	bne.n	800cd60 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e030      	b.n	800cdc2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2200      	movs	r2, #0
 800cd64:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a18      	ldr	r2, [pc, #96]	; (800cdcc <HAL_UART_Receive_DMA+0x94>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d01f      	beq.n	800cdb0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d018      	beq.n	800cdb0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	e853 3f00 	ldrex	r3, [r3]
 800cd8a:	613b      	str	r3, [r7, #16]
   return(result);
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd92:	627b      	str	r3, [r7, #36]	; 0x24
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	461a      	mov	r2, r3
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9c:	623b      	str	r3, [r7, #32]
 800cd9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda0:	69f9      	ldr	r1, [r7, #28]
 800cda2:	6a3a      	ldr	r2, [r7, #32]
 800cda4:	e841 2300 	strex	r3, r2, [r1]
 800cda8:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1e6      	bne.n	800cd7e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cdb0:	88fb      	ldrh	r3, [r7, #6]
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	68b9      	ldr	r1, [r7, #8]
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f001 fc18 	bl	800e5ec <UART_Start_Receive_DMA>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	e000      	b.n	800cdc2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cdc0:	2302      	movs	r3, #2
  }
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3728      	adds	r7, #40	; 0x28
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	58000c00 	.word	0x58000c00

0800cdd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b0ba      	sub	sp, #232	; 0xe8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	69db      	ldr	r3, [r3, #28]
 800cdde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	689b      	ldr	r3, [r3, #8]
 800cdf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cdf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cdfa:	f640 030f 	movw	r3, #2063	; 0x80f
 800cdfe:	4013      	ands	r3, r2
 800ce00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ce04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d11b      	bne.n	800ce44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ce0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce10:	f003 0320 	and.w	r3, r3, #32
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d015      	beq.n	800ce44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ce18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce1c:	f003 0320 	and.w	r3, r3, #32
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d105      	bne.n	800ce30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d009      	beq.n	800ce44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f000 8377 	beq.w	800d528 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	4798      	blx	r3
      }
      return;
 800ce42:	e371      	b.n	800d528 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ce44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f000 8123 	beq.w	800d094 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ce4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ce52:	4b8d      	ldr	r3, [pc, #564]	; (800d088 <HAL_UART_IRQHandler+0x2b8>)
 800ce54:	4013      	ands	r3, r2
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d106      	bne.n	800ce68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ce5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ce5e:	4b8b      	ldr	r3, [pc, #556]	; (800d08c <HAL_UART_IRQHandler+0x2bc>)
 800ce60:	4013      	ands	r3, r2
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f000 8116 	beq.w	800d094 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce6c:	f003 0301 	and.w	r3, r3, #1
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d011      	beq.n	800ce98 <HAL_UART_IRQHandler+0xc8>
 800ce74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00b      	beq.n	800ce98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2201      	movs	r2, #1
 800ce86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce8e:	f043 0201 	orr.w	r2, r3, #1
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce9c:	f003 0302 	and.w	r3, r3, #2
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d011      	beq.n	800cec8 <HAL_UART_IRQHandler+0xf8>
 800cea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cea8:	f003 0301 	and.w	r3, r3, #1
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00b      	beq.n	800cec8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	2202      	movs	r2, #2
 800ceb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cebe:	f043 0204 	orr.w	r2, r3, #4
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cecc:	f003 0304 	and.w	r3, r3, #4
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d011      	beq.n	800cef8 <HAL_UART_IRQHandler+0x128>
 800ced4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ced8:	f003 0301 	and.w	r3, r3, #1
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00b      	beq.n	800cef8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2204      	movs	r2, #4
 800cee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceee:	f043 0202 	orr.w	r2, r3, #2
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cefc:	f003 0308 	and.w	r3, r3, #8
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d017      	beq.n	800cf34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf08:	f003 0320 	and.w	r3, r3, #32
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d105      	bne.n	800cf1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cf10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf14:	4b5c      	ldr	r3, [pc, #368]	; (800d088 <HAL_UART_IRQHandler+0x2b8>)
 800cf16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00b      	beq.n	800cf34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2208      	movs	r2, #8
 800cf22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf2a:	f043 0208 	orr.w	r2, r3, #8
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cf34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d012      	beq.n	800cf66 <HAL_UART_IRQHandler+0x196>
 800cf40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00c      	beq.n	800cf66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf5c:	f043 0220 	orr.w	r2, r3, #32
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	f000 82dd 	beq.w	800d52c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cf72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf76:	f003 0320 	and.w	r3, r3, #32
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d013      	beq.n	800cfa6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cf7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf82:	f003 0320 	and.w	r3, r3, #32
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d105      	bne.n	800cf96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d007      	beq.n	800cfa6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d003      	beq.n	800cfa6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfba:	2b40      	cmp	r3, #64	; 0x40
 800cfbc:	d005      	beq.n	800cfca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cfbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cfc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d054      	beq.n	800d074 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f001 fbf6 	bl	800e7bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	689b      	ldr	r3, [r3, #8]
 800cfd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfda:	2b40      	cmp	r3, #64	; 0x40
 800cfdc:	d146      	bne.n	800d06c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3308      	adds	r3, #8
 800cfe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cfec:	e853 3f00 	ldrex	r3, [r3]
 800cff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	3308      	adds	r3, #8
 800d006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d00a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d00e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d01a:	e841 2300 	strex	r3, r2, [r1]
 800d01e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1d9      	bne.n	800cfde <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d030:	2b00      	cmp	r3, #0
 800d032:	d017      	beq.n	800d064 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d03a:	4a15      	ldr	r2, [pc, #84]	; (800d090 <HAL_UART_IRQHandler+0x2c0>)
 800d03c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d044:	4618      	mov	r0, r3
 800d046:	f7f9 fb2f 	bl	80066a8 <HAL_DMA_Abort_IT>
 800d04a:	4603      	mov	r3, r0
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d019      	beq.n	800d084 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d05e:	4610      	mov	r0, r2
 800d060:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d062:	e00f      	b.n	800d084 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 fa8b 	bl	800d580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d06a:	e00b      	b.n	800d084 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 fa87 	bl	800d580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d072:	e007      	b.n	800d084 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 fa83 	bl	800d580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d082:	e253      	b.n	800d52c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d084:	bf00      	nop
    return;
 800d086:	e251      	b.n	800d52c <HAL_UART_IRQHandler+0x75c>
 800d088:	10000001 	.word	0x10000001
 800d08c:	04000120 	.word	0x04000120
 800d090:	0800ea6f 	.word	0x0800ea6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d098:	2b01      	cmp	r3, #1
 800d09a:	f040 81e7 	bne.w	800d46c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d09e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0a2:	f003 0310 	and.w	r3, r3, #16
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f000 81e0 	beq.w	800d46c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d0ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0b0:	f003 0310 	and.w	r3, r3, #16
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f000 81d9 	beq.w	800d46c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2210      	movs	r2, #16
 800d0c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0cc:	2b40      	cmp	r3, #64	; 0x40
 800d0ce:	f040 8151 	bne.w	800d374 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a96      	ldr	r2, [pc, #600]	; (800d334 <HAL_UART_IRQHandler+0x564>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d068      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a93      	ldr	r2, [pc, #588]	; (800d338 <HAL_UART_IRQHandler+0x568>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d061      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4a91      	ldr	r2, [pc, #580]	; (800d33c <HAL_UART_IRQHandler+0x56c>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d05a      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a8e      	ldr	r2, [pc, #568]	; (800d340 <HAL_UART_IRQHandler+0x570>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d053      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4a8c      	ldr	r2, [pc, #560]	; (800d344 <HAL_UART_IRQHandler+0x574>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d04c      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a89      	ldr	r2, [pc, #548]	; (800d348 <HAL_UART_IRQHandler+0x578>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d045      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4a87      	ldr	r2, [pc, #540]	; (800d34c <HAL_UART_IRQHandler+0x57c>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d03e      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a84      	ldr	r2, [pc, #528]	; (800d350 <HAL_UART_IRQHandler+0x580>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d037      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4a82      	ldr	r2, [pc, #520]	; (800d354 <HAL_UART_IRQHandler+0x584>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d030      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a7f      	ldr	r2, [pc, #508]	; (800d358 <HAL_UART_IRQHandler+0x588>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d029      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	4a7d      	ldr	r2, [pc, #500]	; (800d35c <HAL_UART_IRQHandler+0x58c>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d022      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a7a      	ldr	r2, [pc, #488]	; (800d360 <HAL_UART_IRQHandler+0x590>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d01b      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a78      	ldr	r2, [pc, #480]	; (800d364 <HAL_UART_IRQHandler+0x594>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d014      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a75      	ldr	r2, [pc, #468]	; (800d368 <HAL_UART_IRQHandler+0x598>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d00d      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4a73      	ldr	r2, [pc, #460]	; (800d36c <HAL_UART_IRQHandler+0x59c>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d006      	beq.n	800d1b2 <HAL_UART_IRQHandler+0x3e2>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a70      	ldr	r2, [pc, #448]	; (800d370 <HAL_UART_IRQHandler+0x5a0>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d106      	bne.n	800d1c0 <HAL_UART_IRQHandler+0x3f0>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	e005      	b.n	800d1cc <HAL_UART_IRQHandler+0x3fc>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d1d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f000 81ab 	beq.w	800d530 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d1e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	f080 81a3 	bcs.w	800d530 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d1f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1fa:	69db      	ldr	r3, [r3, #28]
 800d1fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d200:	f000 8087 	beq.w	800d312 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d20c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d210:	e853 3f00 	ldrex	r3, [r3]
 800d214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d218:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d21c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	461a      	mov	r2, r3
 800d22a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d22e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d232:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d236:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d23a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d23e:	e841 2300 	strex	r3, r2, [r1]
 800d242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d1da      	bne.n	800d204 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	3308      	adds	r3, #8
 800d254:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d258:	e853 3f00 	ldrex	r3, [r3]
 800d25c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d25e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d260:	f023 0301 	bic.w	r3, r3, #1
 800d264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	3308      	adds	r3, #8
 800d26e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d272:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d276:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d278:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d27a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d27e:	e841 2300 	strex	r3, r2, [r1]
 800d282:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d286:	2b00      	cmp	r3, #0
 800d288:	d1e1      	bne.n	800d24e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	3308      	adds	r3, #8
 800d290:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d294:	e853 3f00 	ldrex	r3, [r3]
 800d298:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d29a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d29c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	3308      	adds	r3, #8
 800d2aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d2ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d2b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d2b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d2b6:	e841 2300 	strex	r3, r2, [r1]
 800d2ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d2bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d1e3      	bne.n	800d28a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2220      	movs	r2, #32
 800d2c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2d8:	e853 3f00 	ldrex	r3, [r3]
 800d2dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d2de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2e0:	f023 0310 	bic.w	r3, r3, #16
 800d2e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d2f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d2f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2fa:	e841 2300 	strex	r3, r2, [r1]
 800d2fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d302:	2b00      	cmp	r3, #0
 800d304:	d1e4      	bne.n	800d2d0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7f8 fead 	bl	800606c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2202      	movs	r2, #2
 800d316:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d324:	b29b      	uxth	r3, r3
 800d326:	1ad3      	subs	r3, r2, r3
 800d328:	b29b      	uxth	r3, r3
 800d32a:	4619      	mov	r1, r3
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 f931 	bl	800d594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d332:	e0fd      	b.n	800d530 <HAL_UART_IRQHandler+0x760>
 800d334:	40020010 	.word	0x40020010
 800d338:	40020028 	.word	0x40020028
 800d33c:	40020040 	.word	0x40020040
 800d340:	40020058 	.word	0x40020058
 800d344:	40020070 	.word	0x40020070
 800d348:	40020088 	.word	0x40020088
 800d34c:	400200a0 	.word	0x400200a0
 800d350:	400200b8 	.word	0x400200b8
 800d354:	40020410 	.word	0x40020410
 800d358:	40020428 	.word	0x40020428
 800d35c:	40020440 	.word	0x40020440
 800d360:	40020458 	.word	0x40020458
 800d364:	40020470 	.word	0x40020470
 800d368:	40020488 	.word	0x40020488
 800d36c:	400204a0 	.word	0x400204a0
 800d370:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d380:	b29b      	uxth	r3, r3
 800d382:	1ad3      	subs	r3, r2, r3
 800d384:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d38e:	b29b      	uxth	r3, r3
 800d390:	2b00      	cmp	r3, #0
 800d392:	f000 80cf 	beq.w	800d534 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d396:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	f000 80ca 	beq.w	800d534 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a8:	e853 3f00 	ldrex	r3, [r3]
 800d3ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d3b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	461a      	mov	r2, r3
 800d3be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d3c2:	647b      	str	r3, [r7, #68]	; 0x44
 800d3c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d3c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3ca:	e841 2300 	strex	r3, r2, [r1]
 800d3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d1e4      	bne.n	800d3a0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	3308      	adds	r3, #8
 800d3dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e0:	e853 3f00 	ldrex	r3, [r3]
 800d3e4:	623b      	str	r3, [r7, #32]
   return(result);
 800d3e6:	6a3a      	ldr	r2, [r7, #32]
 800d3e8:	4b55      	ldr	r3, [pc, #340]	; (800d540 <HAL_UART_IRQHandler+0x770>)
 800d3ea:	4013      	ands	r3, r2
 800d3ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	3308      	adds	r3, #8
 800d3f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d3fa:	633a      	str	r2, [r7, #48]	; 0x30
 800d3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d402:	e841 2300 	strex	r3, r2, [r1]
 800d406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1e3      	bne.n	800d3d6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2220      	movs	r2, #32
 800d412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	e853 3f00 	ldrex	r3, [r3]
 800d42e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f023 0310 	bic.w	r3, r3, #16
 800d436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	461a      	mov	r2, r3
 800d440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d444:	61fb      	str	r3, [r7, #28]
 800d446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d448:	69b9      	ldr	r1, [r7, #24]
 800d44a:	69fa      	ldr	r2, [r7, #28]
 800d44c:	e841 2300 	strex	r3, r2, [r1]
 800d450:	617b      	str	r3, [r7, #20]
   return(result);
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d1e4      	bne.n	800d422 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2202      	movs	r2, #2
 800d45c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d45e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d462:	4619      	mov	r1, r3
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 f895 	bl	800d594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d46a:	e063      	b.n	800d534 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d474:	2b00      	cmp	r3, #0
 800d476:	d00e      	beq.n	800d496 <HAL_UART_IRQHandler+0x6c6>
 800d478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d47c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d480:	2b00      	cmp	r3, #0
 800d482:	d008      	beq.n	800d496 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d48c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f001 fb2e 	bl	800eaf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d494:	e051      	b.n	800d53a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d49a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d014      	beq.n	800d4cc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d4a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d105      	bne.n	800d4ba <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d4ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d008      	beq.n	800d4cc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d03a      	beq.n	800d538 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	4798      	blx	r3
    }
    return;
 800d4ca:	e035      	b.n	800d538 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d4cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d009      	beq.n	800d4ec <HAL_UART_IRQHandler+0x71c>
 800d4d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d003      	beq.n	800d4ec <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f001 fad8 	bl	800ea9a <UART_EndTransmit_IT>
    return;
 800d4ea:	e026      	b.n	800d53a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d4ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d009      	beq.n	800d50c <HAL_UART_IRQHandler+0x73c>
 800d4f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d500:	2b00      	cmp	r3, #0
 800d502:	d003      	beq.n	800d50c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f001 fb07 	bl	800eb18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d50a:	e016      	b.n	800d53a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d50c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d514:	2b00      	cmp	r3, #0
 800d516:	d010      	beq.n	800d53a <HAL_UART_IRQHandler+0x76a>
 800d518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	da0c      	bge.n	800d53a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f001 faef 	bl	800eb04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d526:	e008      	b.n	800d53a <HAL_UART_IRQHandler+0x76a>
      return;
 800d528:	bf00      	nop
 800d52a:	e006      	b.n	800d53a <HAL_UART_IRQHandler+0x76a>
    return;
 800d52c:	bf00      	nop
 800d52e:	e004      	b.n	800d53a <HAL_UART_IRQHandler+0x76a>
      return;
 800d530:	bf00      	nop
 800d532:	e002      	b.n	800d53a <HAL_UART_IRQHandler+0x76a>
      return;
 800d534:	bf00      	nop
 800d536:	e000      	b.n	800d53a <HAL_UART_IRQHandler+0x76a>
    return;
 800d538:	bf00      	nop
  }
}
 800d53a:	37e8      	adds	r7, #232	; 0xe8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	effffffe 	.word	0xeffffffe

0800d544 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d54c:	bf00      	nop
 800d54e:	370c      	adds	r7, #12
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d560:	bf00      	nop
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b083      	sub	sp, #12
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d574:	bf00      	nop
 800d576:	370c      	adds	r7, #12
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr

0800d580 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d580:	b480      	push	{r7}
 800d582:	b083      	sub	sp, #12
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d588:	bf00      	nop
 800d58a:	370c      	adds	r7, #12
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	460b      	mov	r3, r1
 800d59e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d5a0:	bf00      	nop
 800d5a2:	370c      	adds	r7, #12
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d5ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d5b0:	b092      	sub	sp, #72	; 0x48
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	689a      	ldr	r2, [r3, #8]
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	431a      	orrs	r2, r3
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	695b      	ldr	r3, [r3, #20]
 800d5ca:	431a      	orrs	r2, r3
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	69db      	ldr	r3, [r3, #28]
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	4bbe      	ldr	r3, [pc, #760]	; (800d8d4 <UART_SetConfig+0x328>)
 800d5dc:	4013      	ands	r3, r2
 800d5de:	697a      	ldr	r2, [r7, #20]
 800d5e0:	6812      	ldr	r2, [r2, #0]
 800d5e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5e4:	430b      	orrs	r3, r1
 800d5e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	68da      	ldr	r2, [r3, #12]
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	430a      	orrs	r2, r1
 800d5fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	699b      	ldr	r3, [r3, #24]
 800d602:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4ab3      	ldr	r2, [pc, #716]	; (800d8d8 <UART_SetConfig+0x32c>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d004      	beq.n	800d618 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	6a1b      	ldr	r3, [r3, #32]
 800d612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d614:	4313      	orrs	r3, r2
 800d616:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	689a      	ldr	r2, [r3, #8]
 800d61e:	4baf      	ldr	r3, [pc, #700]	; (800d8dc <UART_SetConfig+0x330>)
 800d620:	4013      	ands	r3, r2
 800d622:	697a      	ldr	r2, [r7, #20]
 800d624:	6812      	ldr	r2, [r2, #0]
 800d626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d628:	430b      	orrs	r3, r1
 800d62a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d632:	f023 010f 	bic.w	r1, r3, #15
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	430a      	orrs	r2, r1
 800d640:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4aa6      	ldr	r2, [pc, #664]	; (800d8e0 <UART_SetConfig+0x334>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d177      	bne.n	800d73c <UART_SetConfig+0x190>
 800d64c:	4ba5      	ldr	r3, [pc, #660]	; (800d8e4 <UART_SetConfig+0x338>)
 800d64e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d654:	2b28      	cmp	r3, #40	; 0x28
 800d656:	d86d      	bhi.n	800d734 <UART_SetConfig+0x188>
 800d658:	a201      	add	r2, pc, #4	; (adr r2, 800d660 <UART_SetConfig+0xb4>)
 800d65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d65e:	bf00      	nop
 800d660:	0800d705 	.word	0x0800d705
 800d664:	0800d735 	.word	0x0800d735
 800d668:	0800d735 	.word	0x0800d735
 800d66c:	0800d735 	.word	0x0800d735
 800d670:	0800d735 	.word	0x0800d735
 800d674:	0800d735 	.word	0x0800d735
 800d678:	0800d735 	.word	0x0800d735
 800d67c:	0800d735 	.word	0x0800d735
 800d680:	0800d70d 	.word	0x0800d70d
 800d684:	0800d735 	.word	0x0800d735
 800d688:	0800d735 	.word	0x0800d735
 800d68c:	0800d735 	.word	0x0800d735
 800d690:	0800d735 	.word	0x0800d735
 800d694:	0800d735 	.word	0x0800d735
 800d698:	0800d735 	.word	0x0800d735
 800d69c:	0800d735 	.word	0x0800d735
 800d6a0:	0800d715 	.word	0x0800d715
 800d6a4:	0800d735 	.word	0x0800d735
 800d6a8:	0800d735 	.word	0x0800d735
 800d6ac:	0800d735 	.word	0x0800d735
 800d6b0:	0800d735 	.word	0x0800d735
 800d6b4:	0800d735 	.word	0x0800d735
 800d6b8:	0800d735 	.word	0x0800d735
 800d6bc:	0800d735 	.word	0x0800d735
 800d6c0:	0800d71d 	.word	0x0800d71d
 800d6c4:	0800d735 	.word	0x0800d735
 800d6c8:	0800d735 	.word	0x0800d735
 800d6cc:	0800d735 	.word	0x0800d735
 800d6d0:	0800d735 	.word	0x0800d735
 800d6d4:	0800d735 	.word	0x0800d735
 800d6d8:	0800d735 	.word	0x0800d735
 800d6dc:	0800d735 	.word	0x0800d735
 800d6e0:	0800d725 	.word	0x0800d725
 800d6e4:	0800d735 	.word	0x0800d735
 800d6e8:	0800d735 	.word	0x0800d735
 800d6ec:	0800d735 	.word	0x0800d735
 800d6f0:	0800d735 	.word	0x0800d735
 800d6f4:	0800d735 	.word	0x0800d735
 800d6f8:	0800d735 	.word	0x0800d735
 800d6fc:	0800d735 	.word	0x0800d735
 800d700:	0800d72d 	.word	0x0800d72d
 800d704:	2301      	movs	r3, #1
 800d706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d70a:	e326      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d70c:	2304      	movs	r3, #4
 800d70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d712:	e322      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d714:	2308      	movs	r3, #8
 800d716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71a:	e31e      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d71c:	2310      	movs	r3, #16
 800d71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d722:	e31a      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d724:	2320      	movs	r3, #32
 800d726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72a:	e316      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d72c:	2340      	movs	r3, #64	; 0x40
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d732:	e312      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d734:	2380      	movs	r3, #128	; 0x80
 800d736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73a:	e30e      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4a69      	ldr	r2, [pc, #420]	; (800d8e8 <UART_SetConfig+0x33c>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d130      	bne.n	800d7a8 <UART_SetConfig+0x1fc>
 800d746:	4b67      	ldr	r3, [pc, #412]	; (800d8e4 <UART_SetConfig+0x338>)
 800d748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d74a:	f003 0307 	and.w	r3, r3, #7
 800d74e:	2b05      	cmp	r3, #5
 800d750:	d826      	bhi.n	800d7a0 <UART_SetConfig+0x1f4>
 800d752:	a201      	add	r2, pc, #4	; (adr r2, 800d758 <UART_SetConfig+0x1ac>)
 800d754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d758:	0800d771 	.word	0x0800d771
 800d75c:	0800d779 	.word	0x0800d779
 800d760:	0800d781 	.word	0x0800d781
 800d764:	0800d789 	.word	0x0800d789
 800d768:	0800d791 	.word	0x0800d791
 800d76c:	0800d799 	.word	0x0800d799
 800d770:	2300      	movs	r3, #0
 800d772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d776:	e2f0      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d778:	2304      	movs	r3, #4
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77e:	e2ec      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d780:	2308      	movs	r3, #8
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d786:	e2e8      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d788:	2310      	movs	r3, #16
 800d78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78e:	e2e4      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d790:	2320      	movs	r3, #32
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d796:	e2e0      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d798:	2340      	movs	r3, #64	; 0x40
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79e:	e2dc      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d7a0:	2380      	movs	r3, #128	; 0x80
 800d7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a6:	e2d8      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4a4f      	ldr	r2, [pc, #316]	; (800d8ec <UART_SetConfig+0x340>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d130      	bne.n	800d814 <UART_SetConfig+0x268>
 800d7b2:	4b4c      	ldr	r3, [pc, #304]	; (800d8e4 <UART_SetConfig+0x338>)
 800d7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7b6:	f003 0307 	and.w	r3, r3, #7
 800d7ba:	2b05      	cmp	r3, #5
 800d7bc:	d826      	bhi.n	800d80c <UART_SetConfig+0x260>
 800d7be:	a201      	add	r2, pc, #4	; (adr r2, 800d7c4 <UART_SetConfig+0x218>)
 800d7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c4:	0800d7dd 	.word	0x0800d7dd
 800d7c8:	0800d7e5 	.word	0x0800d7e5
 800d7cc:	0800d7ed 	.word	0x0800d7ed
 800d7d0:	0800d7f5 	.word	0x0800d7f5
 800d7d4:	0800d7fd 	.word	0x0800d7fd
 800d7d8:	0800d805 	.word	0x0800d805
 800d7dc:	2300      	movs	r3, #0
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7e2:	e2ba      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d7e4:	2304      	movs	r3, #4
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ea:	e2b6      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d7ec:	2308      	movs	r3, #8
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7f2:	e2b2      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d7f4:	2310      	movs	r3, #16
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fa:	e2ae      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d7fc:	2320      	movs	r3, #32
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d802:	e2aa      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d804:	2340      	movs	r3, #64	; 0x40
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80a:	e2a6      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d80c:	2380      	movs	r3, #128	; 0x80
 800d80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d812:	e2a2      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4a35      	ldr	r2, [pc, #212]	; (800d8f0 <UART_SetConfig+0x344>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d130      	bne.n	800d880 <UART_SetConfig+0x2d4>
 800d81e:	4b31      	ldr	r3, [pc, #196]	; (800d8e4 <UART_SetConfig+0x338>)
 800d820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d822:	f003 0307 	and.w	r3, r3, #7
 800d826:	2b05      	cmp	r3, #5
 800d828:	d826      	bhi.n	800d878 <UART_SetConfig+0x2cc>
 800d82a:	a201      	add	r2, pc, #4	; (adr r2, 800d830 <UART_SetConfig+0x284>)
 800d82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d830:	0800d849 	.word	0x0800d849
 800d834:	0800d851 	.word	0x0800d851
 800d838:	0800d859 	.word	0x0800d859
 800d83c:	0800d861 	.word	0x0800d861
 800d840:	0800d869 	.word	0x0800d869
 800d844:	0800d871 	.word	0x0800d871
 800d848:	2300      	movs	r3, #0
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d84e:	e284      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d850:	2304      	movs	r3, #4
 800d852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d856:	e280      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d858:	2308      	movs	r3, #8
 800d85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d85e:	e27c      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d860:	2310      	movs	r3, #16
 800d862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d866:	e278      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d868:	2320      	movs	r3, #32
 800d86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d86e:	e274      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d870:	2340      	movs	r3, #64	; 0x40
 800d872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d876:	e270      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d878:	2380      	movs	r3, #128	; 0x80
 800d87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d87e:	e26c      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a1b      	ldr	r2, [pc, #108]	; (800d8f4 <UART_SetConfig+0x348>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d142      	bne.n	800d910 <UART_SetConfig+0x364>
 800d88a:	4b16      	ldr	r3, [pc, #88]	; (800d8e4 <UART_SetConfig+0x338>)
 800d88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d88e:	f003 0307 	and.w	r3, r3, #7
 800d892:	2b05      	cmp	r3, #5
 800d894:	d838      	bhi.n	800d908 <UART_SetConfig+0x35c>
 800d896:	a201      	add	r2, pc, #4	; (adr r2, 800d89c <UART_SetConfig+0x2f0>)
 800d898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d89c:	0800d8b5 	.word	0x0800d8b5
 800d8a0:	0800d8bd 	.word	0x0800d8bd
 800d8a4:	0800d8c5 	.word	0x0800d8c5
 800d8a8:	0800d8cd 	.word	0x0800d8cd
 800d8ac:	0800d8f9 	.word	0x0800d8f9
 800d8b0:	0800d901 	.word	0x0800d901
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ba:	e24e      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d8bc:	2304      	movs	r3, #4
 800d8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8c2:	e24a      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d8c4:	2308      	movs	r3, #8
 800d8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ca:	e246      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d8cc:	2310      	movs	r3, #16
 800d8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8d2:	e242      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d8d4:	cfff69f3 	.word	0xcfff69f3
 800d8d8:	58000c00 	.word	0x58000c00
 800d8dc:	11fff4ff 	.word	0x11fff4ff
 800d8e0:	40011000 	.word	0x40011000
 800d8e4:	58024400 	.word	0x58024400
 800d8e8:	40004400 	.word	0x40004400
 800d8ec:	40004800 	.word	0x40004800
 800d8f0:	40004c00 	.word	0x40004c00
 800d8f4:	40005000 	.word	0x40005000
 800d8f8:	2320      	movs	r3, #32
 800d8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8fe:	e22c      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d900:	2340      	movs	r3, #64	; 0x40
 800d902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d906:	e228      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d908:	2380      	movs	r3, #128	; 0x80
 800d90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d90e:	e224      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4ab1      	ldr	r2, [pc, #708]	; (800dbdc <UART_SetConfig+0x630>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d176      	bne.n	800da08 <UART_SetConfig+0x45c>
 800d91a:	4bb1      	ldr	r3, [pc, #708]	; (800dbe0 <UART_SetConfig+0x634>)
 800d91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d91e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d922:	2b28      	cmp	r3, #40	; 0x28
 800d924:	d86c      	bhi.n	800da00 <UART_SetConfig+0x454>
 800d926:	a201      	add	r2, pc, #4	; (adr r2, 800d92c <UART_SetConfig+0x380>)
 800d928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d92c:	0800d9d1 	.word	0x0800d9d1
 800d930:	0800da01 	.word	0x0800da01
 800d934:	0800da01 	.word	0x0800da01
 800d938:	0800da01 	.word	0x0800da01
 800d93c:	0800da01 	.word	0x0800da01
 800d940:	0800da01 	.word	0x0800da01
 800d944:	0800da01 	.word	0x0800da01
 800d948:	0800da01 	.word	0x0800da01
 800d94c:	0800d9d9 	.word	0x0800d9d9
 800d950:	0800da01 	.word	0x0800da01
 800d954:	0800da01 	.word	0x0800da01
 800d958:	0800da01 	.word	0x0800da01
 800d95c:	0800da01 	.word	0x0800da01
 800d960:	0800da01 	.word	0x0800da01
 800d964:	0800da01 	.word	0x0800da01
 800d968:	0800da01 	.word	0x0800da01
 800d96c:	0800d9e1 	.word	0x0800d9e1
 800d970:	0800da01 	.word	0x0800da01
 800d974:	0800da01 	.word	0x0800da01
 800d978:	0800da01 	.word	0x0800da01
 800d97c:	0800da01 	.word	0x0800da01
 800d980:	0800da01 	.word	0x0800da01
 800d984:	0800da01 	.word	0x0800da01
 800d988:	0800da01 	.word	0x0800da01
 800d98c:	0800d9e9 	.word	0x0800d9e9
 800d990:	0800da01 	.word	0x0800da01
 800d994:	0800da01 	.word	0x0800da01
 800d998:	0800da01 	.word	0x0800da01
 800d99c:	0800da01 	.word	0x0800da01
 800d9a0:	0800da01 	.word	0x0800da01
 800d9a4:	0800da01 	.word	0x0800da01
 800d9a8:	0800da01 	.word	0x0800da01
 800d9ac:	0800d9f1 	.word	0x0800d9f1
 800d9b0:	0800da01 	.word	0x0800da01
 800d9b4:	0800da01 	.word	0x0800da01
 800d9b8:	0800da01 	.word	0x0800da01
 800d9bc:	0800da01 	.word	0x0800da01
 800d9c0:	0800da01 	.word	0x0800da01
 800d9c4:	0800da01 	.word	0x0800da01
 800d9c8:	0800da01 	.word	0x0800da01
 800d9cc:	0800d9f9 	.word	0x0800d9f9
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9d6:	e1c0      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d9d8:	2304      	movs	r3, #4
 800d9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9de:	e1bc      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d9e0:	2308      	movs	r3, #8
 800d9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9e6:	e1b8      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d9e8:	2310      	movs	r3, #16
 800d9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ee:	e1b4      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d9f0:	2320      	movs	r3, #32
 800d9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f6:	e1b0      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800d9f8:	2340      	movs	r3, #64	; 0x40
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fe:	e1ac      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800da00:	2380      	movs	r3, #128	; 0x80
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da06:	e1a8      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a75      	ldr	r2, [pc, #468]	; (800dbe4 <UART_SetConfig+0x638>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d130      	bne.n	800da74 <UART_SetConfig+0x4c8>
 800da12:	4b73      	ldr	r3, [pc, #460]	; (800dbe0 <UART_SetConfig+0x634>)
 800da14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da16:	f003 0307 	and.w	r3, r3, #7
 800da1a:	2b05      	cmp	r3, #5
 800da1c:	d826      	bhi.n	800da6c <UART_SetConfig+0x4c0>
 800da1e:	a201      	add	r2, pc, #4	; (adr r2, 800da24 <UART_SetConfig+0x478>)
 800da20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da24:	0800da3d 	.word	0x0800da3d
 800da28:	0800da45 	.word	0x0800da45
 800da2c:	0800da4d 	.word	0x0800da4d
 800da30:	0800da55 	.word	0x0800da55
 800da34:	0800da5d 	.word	0x0800da5d
 800da38:	0800da65 	.word	0x0800da65
 800da3c:	2300      	movs	r3, #0
 800da3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da42:	e18a      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800da44:	2304      	movs	r3, #4
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da4a:	e186      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800da4c:	2308      	movs	r3, #8
 800da4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da52:	e182      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800da54:	2310      	movs	r3, #16
 800da56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5a:	e17e      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800da5c:	2320      	movs	r3, #32
 800da5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da62:	e17a      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800da64:	2340      	movs	r3, #64	; 0x40
 800da66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6a:	e176      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800da6c:	2380      	movs	r3, #128	; 0x80
 800da6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da72:	e172      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a5b      	ldr	r2, [pc, #364]	; (800dbe8 <UART_SetConfig+0x63c>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d130      	bne.n	800dae0 <UART_SetConfig+0x534>
 800da7e:	4b58      	ldr	r3, [pc, #352]	; (800dbe0 <UART_SetConfig+0x634>)
 800da80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da82:	f003 0307 	and.w	r3, r3, #7
 800da86:	2b05      	cmp	r3, #5
 800da88:	d826      	bhi.n	800dad8 <UART_SetConfig+0x52c>
 800da8a:	a201      	add	r2, pc, #4	; (adr r2, 800da90 <UART_SetConfig+0x4e4>)
 800da8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da90:	0800daa9 	.word	0x0800daa9
 800da94:	0800dab1 	.word	0x0800dab1
 800da98:	0800dab9 	.word	0x0800dab9
 800da9c:	0800dac1 	.word	0x0800dac1
 800daa0:	0800dac9 	.word	0x0800dac9
 800daa4:	0800dad1 	.word	0x0800dad1
 800daa8:	2300      	movs	r3, #0
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daae:	e154      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dab0:	2304      	movs	r3, #4
 800dab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dab6:	e150      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dab8:	2308      	movs	r3, #8
 800daba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dabe:	e14c      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dac0:	2310      	movs	r3, #16
 800dac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dac6:	e148      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dac8:	2320      	movs	r3, #32
 800daca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dace:	e144      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dad0:	2340      	movs	r3, #64	; 0x40
 800dad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad6:	e140      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dad8:	2380      	movs	r3, #128	; 0x80
 800dada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dade:	e13c      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a41      	ldr	r2, [pc, #260]	; (800dbec <UART_SetConfig+0x640>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	f040 8082 	bne.w	800dbf0 <UART_SetConfig+0x644>
 800daec:	4b3c      	ldr	r3, [pc, #240]	; (800dbe0 <UART_SetConfig+0x634>)
 800daee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800daf4:	2b28      	cmp	r3, #40	; 0x28
 800daf6:	d86d      	bhi.n	800dbd4 <UART_SetConfig+0x628>
 800daf8:	a201      	add	r2, pc, #4	; (adr r2, 800db00 <UART_SetConfig+0x554>)
 800dafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dafe:	bf00      	nop
 800db00:	0800dba5 	.word	0x0800dba5
 800db04:	0800dbd5 	.word	0x0800dbd5
 800db08:	0800dbd5 	.word	0x0800dbd5
 800db0c:	0800dbd5 	.word	0x0800dbd5
 800db10:	0800dbd5 	.word	0x0800dbd5
 800db14:	0800dbd5 	.word	0x0800dbd5
 800db18:	0800dbd5 	.word	0x0800dbd5
 800db1c:	0800dbd5 	.word	0x0800dbd5
 800db20:	0800dbad 	.word	0x0800dbad
 800db24:	0800dbd5 	.word	0x0800dbd5
 800db28:	0800dbd5 	.word	0x0800dbd5
 800db2c:	0800dbd5 	.word	0x0800dbd5
 800db30:	0800dbd5 	.word	0x0800dbd5
 800db34:	0800dbd5 	.word	0x0800dbd5
 800db38:	0800dbd5 	.word	0x0800dbd5
 800db3c:	0800dbd5 	.word	0x0800dbd5
 800db40:	0800dbb5 	.word	0x0800dbb5
 800db44:	0800dbd5 	.word	0x0800dbd5
 800db48:	0800dbd5 	.word	0x0800dbd5
 800db4c:	0800dbd5 	.word	0x0800dbd5
 800db50:	0800dbd5 	.word	0x0800dbd5
 800db54:	0800dbd5 	.word	0x0800dbd5
 800db58:	0800dbd5 	.word	0x0800dbd5
 800db5c:	0800dbd5 	.word	0x0800dbd5
 800db60:	0800dbbd 	.word	0x0800dbbd
 800db64:	0800dbd5 	.word	0x0800dbd5
 800db68:	0800dbd5 	.word	0x0800dbd5
 800db6c:	0800dbd5 	.word	0x0800dbd5
 800db70:	0800dbd5 	.word	0x0800dbd5
 800db74:	0800dbd5 	.word	0x0800dbd5
 800db78:	0800dbd5 	.word	0x0800dbd5
 800db7c:	0800dbd5 	.word	0x0800dbd5
 800db80:	0800dbc5 	.word	0x0800dbc5
 800db84:	0800dbd5 	.word	0x0800dbd5
 800db88:	0800dbd5 	.word	0x0800dbd5
 800db8c:	0800dbd5 	.word	0x0800dbd5
 800db90:	0800dbd5 	.word	0x0800dbd5
 800db94:	0800dbd5 	.word	0x0800dbd5
 800db98:	0800dbd5 	.word	0x0800dbd5
 800db9c:	0800dbd5 	.word	0x0800dbd5
 800dba0:	0800dbcd 	.word	0x0800dbcd
 800dba4:	2301      	movs	r3, #1
 800dba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbaa:	e0d6      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dbac:	2304      	movs	r3, #4
 800dbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbb2:	e0d2      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dbb4:	2308      	movs	r3, #8
 800dbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbba:	e0ce      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dbbc:	2310      	movs	r3, #16
 800dbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbc2:	e0ca      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dbc4:	2320      	movs	r3, #32
 800dbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbca:	e0c6      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dbcc:	2340      	movs	r3, #64	; 0x40
 800dbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbd2:	e0c2      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dbd4:	2380      	movs	r3, #128	; 0x80
 800dbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbda:	e0be      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dbdc:	40011400 	.word	0x40011400
 800dbe0:	58024400 	.word	0x58024400
 800dbe4:	40007800 	.word	0x40007800
 800dbe8:	40007c00 	.word	0x40007c00
 800dbec:	40011800 	.word	0x40011800
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4aad      	ldr	r2, [pc, #692]	; (800deac <UART_SetConfig+0x900>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d176      	bne.n	800dce8 <UART_SetConfig+0x73c>
 800dbfa:	4bad      	ldr	r3, [pc, #692]	; (800deb0 <UART_SetConfig+0x904>)
 800dbfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc02:	2b28      	cmp	r3, #40	; 0x28
 800dc04:	d86c      	bhi.n	800dce0 <UART_SetConfig+0x734>
 800dc06:	a201      	add	r2, pc, #4	; (adr r2, 800dc0c <UART_SetConfig+0x660>)
 800dc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc0c:	0800dcb1 	.word	0x0800dcb1
 800dc10:	0800dce1 	.word	0x0800dce1
 800dc14:	0800dce1 	.word	0x0800dce1
 800dc18:	0800dce1 	.word	0x0800dce1
 800dc1c:	0800dce1 	.word	0x0800dce1
 800dc20:	0800dce1 	.word	0x0800dce1
 800dc24:	0800dce1 	.word	0x0800dce1
 800dc28:	0800dce1 	.word	0x0800dce1
 800dc2c:	0800dcb9 	.word	0x0800dcb9
 800dc30:	0800dce1 	.word	0x0800dce1
 800dc34:	0800dce1 	.word	0x0800dce1
 800dc38:	0800dce1 	.word	0x0800dce1
 800dc3c:	0800dce1 	.word	0x0800dce1
 800dc40:	0800dce1 	.word	0x0800dce1
 800dc44:	0800dce1 	.word	0x0800dce1
 800dc48:	0800dce1 	.word	0x0800dce1
 800dc4c:	0800dcc1 	.word	0x0800dcc1
 800dc50:	0800dce1 	.word	0x0800dce1
 800dc54:	0800dce1 	.word	0x0800dce1
 800dc58:	0800dce1 	.word	0x0800dce1
 800dc5c:	0800dce1 	.word	0x0800dce1
 800dc60:	0800dce1 	.word	0x0800dce1
 800dc64:	0800dce1 	.word	0x0800dce1
 800dc68:	0800dce1 	.word	0x0800dce1
 800dc6c:	0800dcc9 	.word	0x0800dcc9
 800dc70:	0800dce1 	.word	0x0800dce1
 800dc74:	0800dce1 	.word	0x0800dce1
 800dc78:	0800dce1 	.word	0x0800dce1
 800dc7c:	0800dce1 	.word	0x0800dce1
 800dc80:	0800dce1 	.word	0x0800dce1
 800dc84:	0800dce1 	.word	0x0800dce1
 800dc88:	0800dce1 	.word	0x0800dce1
 800dc8c:	0800dcd1 	.word	0x0800dcd1
 800dc90:	0800dce1 	.word	0x0800dce1
 800dc94:	0800dce1 	.word	0x0800dce1
 800dc98:	0800dce1 	.word	0x0800dce1
 800dc9c:	0800dce1 	.word	0x0800dce1
 800dca0:	0800dce1 	.word	0x0800dce1
 800dca4:	0800dce1 	.word	0x0800dce1
 800dca8:	0800dce1 	.word	0x0800dce1
 800dcac:	0800dcd9 	.word	0x0800dcd9
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb6:	e050      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dcb8:	2304      	movs	r3, #4
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcbe:	e04c      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dcc0:	2308      	movs	r3, #8
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc6:	e048      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dcc8:	2310      	movs	r3, #16
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcce:	e044      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dcd0:	2320      	movs	r3, #32
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd6:	e040      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dcd8:	2340      	movs	r3, #64	; 0x40
 800dcda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcde:	e03c      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dce0:	2380      	movs	r3, #128	; 0x80
 800dce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce6:	e038      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a71      	ldr	r2, [pc, #452]	; (800deb4 <UART_SetConfig+0x908>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d130      	bne.n	800dd54 <UART_SetConfig+0x7a8>
 800dcf2:	4b6f      	ldr	r3, [pc, #444]	; (800deb0 <UART_SetConfig+0x904>)
 800dcf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcf6:	f003 0307 	and.w	r3, r3, #7
 800dcfa:	2b05      	cmp	r3, #5
 800dcfc:	d826      	bhi.n	800dd4c <UART_SetConfig+0x7a0>
 800dcfe:	a201      	add	r2, pc, #4	; (adr r2, 800dd04 <UART_SetConfig+0x758>)
 800dd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd04:	0800dd1d 	.word	0x0800dd1d
 800dd08:	0800dd25 	.word	0x0800dd25
 800dd0c:	0800dd2d 	.word	0x0800dd2d
 800dd10:	0800dd35 	.word	0x0800dd35
 800dd14:	0800dd3d 	.word	0x0800dd3d
 800dd18:	0800dd45 	.word	0x0800dd45
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd22:	e01a      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dd24:	2304      	movs	r3, #4
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd2a:	e016      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dd2c:	2308      	movs	r3, #8
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd32:	e012      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dd34:	2310      	movs	r3, #16
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd3a:	e00e      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dd3c:	2320      	movs	r3, #32
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd42:	e00a      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dd44:	2340      	movs	r3, #64	; 0x40
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4a:	e006      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dd4c:	2380      	movs	r3, #128	; 0x80
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd52:	e002      	b.n	800dd5a <UART_SetConfig+0x7ae>
 800dd54:	2380      	movs	r3, #128	; 0x80
 800dd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a55      	ldr	r2, [pc, #340]	; (800deb4 <UART_SetConfig+0x908>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	f040 80f8 	bne.w	800df56 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dd66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dd6a:	2b20      	cmp	r3, #32
 800dd6c:	dc46      	bgt.n	800ddfc <UART_SetConfig+0x850>
 800dd6e:	2b02      	cmp	r3, #2
 800dd70:	db75      	blt.n	800de5e <UART_SetConfig+0x8b2>
 800dd72:	3b02      	subs	r3, #2
 800dd74:	2b1e      	cmp	r3, #30
 800dd76:	d872      	bhi.n	800de5e <UART_SetConfig+0x8b2>
 800dd78:	a201      	add	r2, pc, #4	; (adr r2, 800dd80 <UART_SetConfig+0x7d4>)
 800dd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd7e:	bf00      	nop
 800dd80:	0800de03 	.word	0x0800de03
 800dd84:	0800de5f 	.word	0x0800de5f
 800dd88:	0800de0b 	.word	0x0800de0b
 800dd8c:	0800de5f 	.word	0x0800de5f
 800dd90:	0800de5f 	.word	0x0800de5f
 800dd94:	0800de5f 	.word	0x0800de5f
 800dd98:	0800de1b 	.word	0x0800de1b
 800dd9c:	0800de5f 	.word	0x0800de5f
 800dda0:	0800de5f 	.word	0x0800de5f
 800dda4:	0800de5f 	.word	0x0800de5f
 800dda8:	0800de5f 	.word	0x0800de5f
 800ddac:	0800de5f 	.word	0x0800de5f
 800ddb0:	0800de5f 	.word	0x0800de5f
 800ddb4:	0800de5f 	.word	0x0800de5f
 800ddb8:	0800de2b 	.word	0x0800de2b
 800ddbc:	0800de5f 	.word	0x0800de5f
 800ddc0:	0800de5f 	.word	0x0800de5f
 800ddc4:	0800de5f 	.word	0x0800de5f
 800ddc8:	0800de5f 	.word	0x0800de5f
 800ddcc:	0800de5f 	.word	0x0800de5f
 800ddd0:	0800de5f 	.word	0x0800de5f
 800ddd4:	0800de5f 	.word	0x0800de5f
 800ddd8:	0800de5f 	.word	0x0800de5f
 800dddc:	0800de5f 	.word	0x0800de5f
 800dde0:	0800de5f 	.word	0x0800de5f
 800dde4:	0800de5f 	.word	0x0800de5f
 800dde8:	0800de5f 	.word	0x0800de5f
 800ddec:	0800de5f 	.word	0x0800de5f
 800ddf0:	0800de5f 	.word	0x0800de5f
 800ddf4:	0800de5f 	.word	0x0800de5f
 800ddf8:	0800de51 	.word	0x0800de51
 800ddfc:	2b40      	cmp	r3, #64	; 0x40
 800ddfe:	d02a      	beq.n	800de56 <UART_SetConfig+0x8aa>
 800de00:	e02d      	b.n	800de5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800de02:	f7fd faa9 	bl	800b358 <HAL_RCCEx_GetD3PCLK1Freq>
 800de06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de08:	e02f      	b.n	800de6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fd fab8 	bl	800b384 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de18:	e027      	b.n	800de6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de1a:	f107 0318 	add.w	r3, r7, #24
 800de1e:	4618      	mov	r0, r3
 800de20:	f7fd fc04 	bl	800b62c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de28:	e01f      	b.n	800de6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de2a:	4b21      	ldr	r3, [pc, #132]	; (800deb0 <UART_SetConfig+0x904>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f003 0320 	and.w	r3, r3, #32
 800de32:	2b00      	cmp	r3, #0
 800de34:	d009      	beq.n	800de4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de36:	4b1e      	ldr	r3, [pc, #120]	; (800deb0 <UART_SetConfig+0x904>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	08db      	lsrs	r3, r3, #3
 800de3c:	f003 0303 	and.w	r3, r3, #3
 800de40:	4a1d      	ldr	r2, [pc, #116]	; (800deb8 <UART_SetConfig+0x90c>)
 800de42:	fa22 f303 	lsr.w	r3, r2, r3
 800de46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de48:	e00f      	b.n	800de6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800de4a:	4b1b      	ldr	r3, [pc, #108]	; (800deb8 <UART_SetConfig+0x90c>)
 800de4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de4e:	e00c      	b.n	800de6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de50:	4b1a      	ldr	r3, [pc, #104]	; (800debc <UART_SetConfig+0x910>)
 800de52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de54:	e009      	b.n	800de6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de5c:	e005      	b.n	800de6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800de5e:	2300      	movs	r3, #0
 800de60:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800de62:	2301      	movs	r3, #1
 800de64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800de68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800de6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f000 81ee 	beq.w	800e24e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de76:	4a12      	ldr	r2, [pc, #72]	; (800dec0 <UART_SetConfig+0x914>)
 800de78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de7c:	461a      	mov	r2, r3
 800de7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de80:	fbb3 f3f2 	udiv	r3, r3, r2
 800de84:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	685a      	ldr	r2, [r3, #4]
 800de8a:	4613      	mov	r3, r2
 800de8c:	005b      	lsls	r3, r3, #1
 800de8e:	4413      	add	r3, r2
 800de90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de92:	429a      	cmp	r2, r3
 800de94:	d305      	bcc.n	800dea2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d910      	bls.n	800dec4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800dea2:	2301      	movs	r3, #1
 800dea4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dea8:	e1d1      	b.n	800e24e <UART_SetConfig+0xca2>
 800deaa:	bf00      	nop
 800deac:	40011c00 	.word	0x40011c00
 800deb0:	58024400 	.word	0x58024400
 800deb4:	58000c00 	.word	0x58000c00
 800deb8:	03d09000 	.word	0x03d09000
 800debc:	003d0900 	.word	0x003d0900
 800dec0:	08015d04 	.word	0x08015d04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dec6:	2200      	movs	r2, #0
 800dec8:	60bb      	str	r3, [r7, #8]
 800deca:	60fa      	str	r2, [r7, #12]
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded0:	4ac0      	ldr	r2, [pc, #768]	; (800e1d4 <UART_SetConfig+0xc28>)
 800ded2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	2200      	movs	r2, #0
 800deda:	603b      	str	r3, [r7, #0]
 800dedc:	607a      	str	r2, [r7, #4]
 800dede:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dee6:	f7f2 fc17 	bl	8000718 <__aeabi_uldivmod>
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	4610      	mov	r0, r2
 800def0:	4619      	mov	r1, r3
 800def2:	f04f 0200 	mov.w	r2, #0
 800def6:	f04f 0300 	mov.w	r3, #0
 800defa:	020b      	lsls	r3, r1, #8
 800defc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800df00:	0202      	lsls	r2, r0, #8
 800df02:	6979      	ldr	r1, [r7, #20]
 800df04:	6849      	ldr	r1, [r1, #4]
 800df06:	0849      	lsrs	r1, r1, #1
 800df08:	2000      	movs	r0, #0
 800df0a:	460c      	mov	r4, r1
 800df0c:	4605      	mov	r5, r0
 800df0e:	eb12 0804 	adds.w	r8, r2, r4
 800df12:	eb43 0905 	adc.w	r9, r3, r5
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	469a      	mov	sl, r3
 800df1e:	4693      	mov	fp, r2
 800df20:	4652      	mov	r2, sl
 800df22:	465b      	mov	r3, fp
 800df24:	4640      	mov	r0, r8
 800df26:	4649      	mov	r1, r9
 800df28:	f7f2 fbf6 	bl	8000718 <__aeabi_uldivmod>
 800df2c:	4602      	mov	r2, r0
 800df2e:	460b      	mov	r3, r1
 800df30:	4613      	mov	r3, r2
 800df32:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800df34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df3a:	d308      	bcc.n	800df4e <UART_SetConfig+0x9a2>
 800df3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df42:	d204      	bcs.n	800df4e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df4a:	60da      	str	r2, [r3, #12]
 800df4c:	e17f      	b.n	800e24e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800df54:	e17b      	b.n	800e24e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	69db      	ldr	r3, [r3, #28]
 800df5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df5e:	f040 80bd 	bne.w	800e0dc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800df62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800df66:	2b20      	cmp	r3, #32
 800df68:	dc48      	bgt.n	800dffc <UART_SetConfig+0xa50>
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	db7b      	blt.n	800e066 <UART_SetConfig+0xaba>
 800df6e:	2b20      	cmp	r3, #32
 800df70:	d879      	bhi.n	800e066 <UART_SetConfig+0xaba>
 800df72:	a201      	add	r2, pc, #4	; (adr r2, 800df78 <UART_SetConfig+0x9cc>)
 800df74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df78:	0800e003 	.word	0x0800e003
 800df7c:	0800e00b 	.word	0x0800e00b
 800df80:	0800e067 	.word	0x0800e067
 800df84:	0800e067 	.word	0x0800e067
 800df88:	0800e013 	.word	0x0800e013
 800df8c:	0800e067 	.word	0x0800e067
 800df90:	0800e067 	.word	0x0800e067
 800df94:	0800e067 	.word	0x0800e067
 800df98:	0800e023 	.word	0x0800e023
 800df9c:	0800e067 	.word	0x0800e067
 800dfa0:	0800e067 	.word	0x0800e067
 800dfa4:	0800e067 	.word	0x0800e067
 800dfa8:	0800e067 	.word	0x0800e067
 800dfac:	0800e067 	.word	0x0800e067
 800dfb0:	0800e067 	.word	0x0800e067
 800dfb4:	0800e067 	.word	0x0800e067
 800dfb8:	0800e033 	.word	0x0800e033
 800dfbc:	0800e067 	.word	0x0800e067
 800dfc0:	0800e067 	.word	0x0800e067
 800dfc4:	0800e067 	.word	0x0800e067
 800dfc8:	0800e067 	.word	0x0800e067
 800dfcc:	0800e067 	.word	0x0800e067
 800dfd0:	0800e067 	.word	0x0800e067
 800dfd4:	0800e067 	.word	0x0800e067
 800dfd8:	0800e067 	.word	0x0800e067
 800dfdc:	0800e067 	.word	0x0800e067
 800dfe0:	0800e067 	.word	0x0800e067
 800dfe4:	0800e067 	.word	0x0800e067
 800dfe8:	0800e067 	.word	0x0800e067
 800dfec:	0800e067 	.word	0x0800e067
 800dff0:	0800e067 	.word	0x0800e067
 800dff4:	0800e067 	.word	0x0800e067
 800dff8:	0800e059 	.word	0x0800e059
 800dffc:	2b40      	cmp	r3, #64	; 0x40
 800dffe:	d02e      	beq.n	800e05e <UART_SetConfig+0xab2>
 800e000:	e031      	b.n	800e066 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e002:	f7fb fae7 	bl	80095d4 <HAL_RCC_GetPCLK1Freq>
 800e006:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e008:	e033      	b.n	800e072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e00a:	f7fb faf9 	bl	8009600 <HAL_RCC_GetPCLK2Freq>
 800e00e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e010:	e02f      	b.n	800e072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e016:	4618      	mov	r0, r3
 800e018:	f7fd f9b4 	bl	800b384 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e020:	e027      	b.n	800e072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e022:	f107 0318 	add.w	r3, r7, #24
 800e026:	4618      	mov	r0, r3
 800e028:	f7fd fb00 	bl	800b62c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e030:	e01f      	b.n	800e072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e032:	4b69      	ldr	r3, [pc, #420]	; (800e1d8 <UART_SetConfig+0xc2c>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f003 0320 	and.w	r3, r3, #32
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d009      	beq.n	800e052 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e03e:	4b66      	ldr	r3, [pc, #408]	; (800e1d8 <UART_SetConfig+0xc2c>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	08db      	lsrs	r3, r3, #3
 800e044:	f003 0303 	and.w	r3, r3, #3
 800e048:	4a64      	ldr	r2, [pc, #400]	; (800e1dc <UART_SetConfig+0xc30>)
 800e04a:	fa22 f303 	lsr.w	r3, r2, r3
 800e04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e050:	e00f      	b.n	800e072 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e052:	4b62      	ldr	r3, [pc, #392]	; (800e1dc <UART_SetConfig+0xc30>)
 800e054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e056:	e00c      	b.n	800e072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e058:	4b61      	ldr	r3, [pc, #388]	; (800e1e0 <UART_SetConfig+0xc34>)
 800e05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e05c:	e009      	b.n	800e072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e05e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e064:	e005      	b.n	800e072 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e066:	2300      	movs	r3, #0
 800e068:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e074:	2b00      	cmp	r3, #0
 800e076:	f000 80ea 	beq.w	800e24e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07e:	4a55      	ldr	r2, [pc, #340]	; (800e1d4 <UART_SetConfig+0xc28>)
 800e080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e084:	461a      	mov	r2, r3
 800e086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e088:	fbb3 f3f2 	udiv	r3, r3, r2
 800e08c:	005a      	lsls	r2, r3, #1
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	085b      	lsrs	r3, r3, #1
 800e094:	441a      	add	r2, r3
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e09e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a2:	2b0f      	cmp	r3, #15
 800e0a4:	d916      	bls.n	800e0d4 <UART_SetConfig+0xb28>
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0ac:	d212      	bcs.n	800e0d4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	f023 030f 	bic.w	r3, r3, #15
 800e0b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ba:	085b      	lsrs	r3, r3, #1
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	f003 0307 	and.w	r3, r3, #7
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e0d0:	60da      	str	r2, [r3, #12]
 800e0d2:	e0bc      	b.n	800e24e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e0da:	e0b8      	b.n	800e24e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e0dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e0e0:	2b20      	cmp	r3, #32
 800e0e2:	dc4b      	bgt.n	800e17c <UART_SetConfig+0xbd0>
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f2c0 8087 	blt.w	800e1f8 <UART_SetConfig+0xc4c>
 800e0ea:	2b20      	cmp	r3, #32
 800e0ec:	f200 8084 	bhi.w	800e1f8 <UART_SetConfig+0xc4c>
 800e0f0:	a201      	add	r2, pc, #4	; (adr r2, 800e0f8 <UART_SetConfig+0xb4c>)
 800e0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f6:	bf00      	nop
 800e0f8:	0800e183 	.word	0x0800e183
 800e0fc:	0800e18b 	.word	0x0800e18b
 800e100:	0800e1f9 	.word	0x0800e1f9
 800e104:	0800e1f9 	.word	0x0800e1f9
 800e108:	0800e193 	.word	0x0800e193
 800e10c:	0800e1f9 	.word	0x0800e1f9
 800e110:	0800e1f9 	.word	0x0800e1f9
 800e114:	0800e1f9 	.word	0x0800e1f9
 800e118:	0800e1a3 	.word	0x0800e1a3
 800e11c:	0800e1f9 	.word	0x0800e1f9
 800e120:	0800e1f9 	.word	0x0800e1f9
 800e124:	0800e1f9 	.word	0x0800e1f9
 800e128:	0800e1f9 	.word	0x0800e1f9
 800e12c:	0800e1f9 	.word	0x0800e1f9
 800e130:	0800e1f9 	.word	0x0800e1f9
 800e134:	0800e1f9 	.word	0x0800e1f9
 800e138:	0800e1b3 	.word	0x0800e1b3
 800e13c:	0800e1f9 	.word	0x0800e1f9
 800e140:	0800e1f9 	.word	0x0800e1f9
 800e144:	0800e1f9 	.word	0x0800e1f9
 800e148:	0800e1f9 	.word	0x0800e1f9
 800e14c:	0800e1f9 	.word	0x0800e1f9
 800e150:	0800e1f9 	.word	0x0800e1f9
 800e154:	0800e1f9 	.word	0x0800e1f9
 800e158:	0800e1f9 	.word	0x0800e1f9
 800e15c:	0800e1f9 	.word	0x0800e1f9
 800e160:	0800e1f9 	.word	0x0800e1f9
 800e164:	0800e1f9 	.word	0x0800e1f9
 800e168:	0800e1f9 	.word	0x0800e1f9
 800e16c:	0800e1f9 	.word	0x0800e1f9
 800e170:	0800e1f9 	.word	0x0800e1f9
 800e174:	0800e1f9 	.word	0x0800e1f9
 800e178:	0800e1eb 	.word	0x0800e1eb
 800e17c:	2b40      	cmp	r3, #64	; 0x40
 800e17e:	d037      	beq.n	800e1f0 <UART_SetConfig+0xc44>
 800e180:	e03a      	b.n	800e1f8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e182:	f7fb fa27 	bl	80095d4 <HAL_RCC_GetPCLK1Freq>
 800e186:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e188:	e03c      	b.n	800e204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e18a:	f7fb fa39 	bl	8009600 <HAL_RCC_GetPCLK2Freq>
 800e18e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e190:	e038      	b.n	800e204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e196:	4618      	mov	r0, r3
 800e198:	f7fd f8f4 	bl	800b384 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1a0:	e030      	b.n	800e204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1a2:	f107 0318 	add.w	r3, r7, #24
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7fd fa40 	bl	800b62c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1b0:	e028      	b.n	800e204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1b2:	4b09      	ldr	r3, [pc, #36]	; (800e1d8 <UART_SetConfig+0xc2c>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	f003 0320 	and.w	r3, r3, #32
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d012      	beq.n	800e1e4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1be:	4b06      	ldr	r3, [pc, #24]	; (800e1d8 <UART_SetConfig+0xc2c>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	08db      	lsrs	r3, r3, #3
 800e1c4:	f003 0303 	and.w	r3, r3, #3
 800e1c8:	4a04      	ldr	r2, [pc, #16]	; (800e1dc <UART_SetConfig+0xc30>)
 800e1ca:	fa22 f303 	lsr.w	r3, r2, r3
 800e1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1d0:	e018      	b.n	800e204 <UART_SetConfig+0xc58>
 800e1d2:	bf00      	nop
 800e1d4:	08015d04 	.word	0x08015d04
 800e1d8:	58024400 	.word	0x58024400
 800e1dc:	03d09000 	.word	0x03d09000
 800e1e0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e1e4:	4b24      	ldr	r3, [pc, #144]	; (800e278 <UART_SetConfig+0xccc>)
 800e1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1e8:	e00c      	b.n	800e204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e1ea:	4b24      	ldr	r3, [pc, #144]	; (800e27c <UART_SetConfig+0xcd0>)
 800e1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1ee:	e009      	b.n	800e204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1f6:	e005      	b.n	800e204 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e202:	bf00      	nop
    }

    if (pclk != 0U)
 800e204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e206:	2b00      	cmp	r3, #0
 800e208:	d021      	beq.n	800e24e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e20e:	4a1c      	ldr	r2, [pc, #112]	; (800e280 <UART_SetConfig+0xcd4>)
 800e210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e214:	461a      	mov	r2, r3
 800e216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e218:	fbb3 f2f2 	udiv	r2, r3, r2
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	085b      	lsrs	r3, r3, #1
 800e222:	441a      	add	r2, r3
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	fbb2 f3f3 	udiv	r3, r2, r3
 800e22c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e230:	2b0f      	cmp	r3, #15
 800e232:	d909      	bls.n	800e248 <UART_SetConfig+0xc9c>
 800e234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e23a:	d205      	bcs.n	800e248 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23e:	b29a      	uxth	r2, r3
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	60da      	str	r2, [r3, #12]
 800e246:	e002      	b.n	800e24e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e248:	2301      	movs	r3, #1
 800e24a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	2201      	movs	r2, #1
 800e252:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	2201      	movs	r2, #1
 800e25a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	2200      	movs	r2, #0
 800e262:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	2200      	movs	r2, #0
 800e268:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e26a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3748      	adds	r7, #72	; 0x48
 800e272:	46bd      	mov	sp, r7
 800e274:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e278:	03d09000 	.word	0x03d09000
 800e27c:	003d0900 	.word	0x003d0900
 800e280:	08015d04 	.word	0x08015d04

0800e284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e284:	b480      	push	{r7}
 800e286:	b083      	sub	sp, #12
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e290:	f003 0301 	and.w	r3, r3, #1
 800e294:	2b00      	cmp	r3, #0
 800e296:	d00a      	beq.n	800e2ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	430a      	orrs	r2, r1
 800e2ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2b2:	f003 0302 	and.w	r3, r3, #2
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d00a      	beq.n	800e2d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	430a      	orrs	r2, r1
 800e2ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2d4:	f003 0304 	and.w	r3, r3, #4
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00a      	beq.n	800e2f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	430a      	orrs	r2, r1
 800e2f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2f6:	f003 0308 	and.w	r3, r3, #8
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00a      	beq.n	800e314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	430a      	orrs	r2, r1
 800e312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e318:	f003 0310 	and.w	r3, r3, #16
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d00a      	beq.n	800e336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	430a      	orrs	r2, r1
 800e334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e33a:	f003 0320 	and.w	r3, r3, #32
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00a      	beq.n	800e358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	430a      	orrs	r2, r1
 800e356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e360:	2b00      	cmp	r3, #0
 800e362:	d01a      	beq.n	800e39a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	430a      	orrs	r2, r1
 800e378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e37e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e382:	d10a      	bne.n	800e39a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	430a      	orrs	r2, r1
 800e398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d00a      	beq.n	800e3bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	430a      	orrs	r2, r1
 800e3ba:	605a      	str	r2, [r3, #4]
  }
}
 800e3bc:	bf00      	nop
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b098      	sub	sp, #96	; 0x60
 800e3cc:	af02      	add	r7, sp, #8
 800e3ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e3d8:	f7f5 fa26 	bl	8003828 <HAL_GetTick>
 800e3dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f003 0308 	and.w	r3, r3, #8
 800e3e8:	2b08      	cmp	r3, #8
 800e3ea:	d12f      	bne.n	800e44c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 f88e 	bl	800e51c <UART_WaitOnFlagUntilTimeout>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d022      	beq.n	800e44c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40e:	e853 3f00 	ldrex	r3, [r3]
 800e412:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e41a:	653b      	str	r3, [r7, #80]	; 0x50
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	461a      	mov	r2, r3
 800e422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e424:	647b      	str	r3, [r7, #68]	; 0x44
 800e426:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e428:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e42a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e42c:	e841 2300 	strex	r3, r2, [r1]
 800e430:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e434:	2b00      	cmp	r3, #0
 800e436:	d1e6      	bne.n	800e406 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2220      	movs	r2, #32
 800e43c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2200      	movs	r2, #0
 800e444:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e448:	2303      	movs	r3, #3
 800e44a:	e063      	b.n	800e514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f003 0304 	and.w	r3, r3, #4
 800e456:	2b04      	cmp	r3, #4
 800e458:	d149      	bne.n	800e4ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e45a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e45e:	9300      	str	r3, [sp, #0]
 800e460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e462:	2200      	movs	r2, #0
 800e464:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f000 f857 	bl	800e51c <UART_WaitOnFlagUntilTimeout>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	d03c      	beq.n	800e4ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47c:	e853 3f00 	ldrex	r3, [r3]
 800e480:	623b      	str	r3, [r7, #32]
   return(result);
 800e482:	6a3b      	ldr	r3, [r7, #32]
 800e484:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e488:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	461a      	mov	r2, r3
 800e490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e492:	633b      	str	r3, [r7, #48]	; 0x30
 800e494:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e496:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e49a:	e841 2300 	strex	r3, r2, [r1]
 800e49e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d1e6      	bne.n	800e474 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	3308      	adds	r3, #8
 800e4ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	e853 3f00 	ldrex	r3, [r3]
 800e4b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f023 0301 	bic.w	r3, r3, #1
 800e4bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	3308      	adds	r3, #8
 800e4c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4c6:	61fa      	str	r2, [r7, #28]
 800e4c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ca:	69b9      	ldr	r1, [r7, #24]
 800e4cc:	69fa      	ldr	r2, [r7, #28]
 800e4ce:	e841 2300 	strex	r3, r2, [r1]
 800e4d2:	617b      	str	r3, [r7, #20]
   return(result);
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1e5      	bne.n	800e4a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2220      	movs	r2, #32
 800e4de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4ea:	2303      	movs	r3, #3
 800e4ec:	e012      	b.n	800e514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2220      	movs	r2, #32
 800e4f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2220      	movs	r2, #32
 800e4fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2200      	movs	r2, #0
 800e502:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2200      	movs	r2, #0
 800e508:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2200      	movs	r2, #0
 800e50e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e512:	2300      	movs	r3, #0
}
 800e514:	4618      	mov	r0, r3
 800e516:	3758      	adds	r7, #88	; 0x58
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	603b      	str	r3, [r7, #0]
 800e528:	4613      	mov	r3, r2
 800e52a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e52c:	e049      	b.n	800e5c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e534:	d045      	beq.n	800e5c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e536:	f7f5 f977 	bl	8003828 <HAL_GetTick>
 800e53a:	4602      	mov	r2, r0
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	1ad3      	subs	r3, r2, r3
 800e540:	69ba      	ldr	r2, [r7, #24]
 800e542:	429a      	cmp	r2, r3
 800e544:	d302      	bcc.n	800e54c <UART_WaitOnFlagUntilTimeout+0x30>
 800e546:	69bb      	ldr	r3, [r7, #24]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d101      	bne.n	800e550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e54c:	2303      	movs	r3, #3
 800e54e:	e048      	b.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f003 0304 	and.w	r3, r3, #4
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d031      	beq.n	800e5c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	69db      	ldr	r3, [r3, #28]
 800e564:	f003 0308 	and.w	r3, r3, #8
 800e568:	2b08      	cmp	r3, #8
 800e56a:	d110      	bne.n	800e58e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2208      	movs	r2, #8
 800e572:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e574:	68f8      	ldr	r0, [r7, #12]
 800e576:	f000 f921 	bl	800e7bc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2208      	movs	r2, #8
 800e57e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2200      	movs	r2, #0
 800e586:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e58a:	2301      	movs	r3, #1
 800e58c:	e029      	b.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	69db      	ldr	r3, [r3, #28]
 800e594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e59c:	d111      	bne.n	800e5c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f000 f907 	bl	800e7bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2220      	movs	r2, #32
 800e5b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e5be:	2303      	movs	r3, #3
 800e5c0:	e00f      	b.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	69da      	ldr	r2, [r3, #28]
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	4013      	ands	r3, r2
 800e5cc:	68ba      	ldr	r2, [r7, #8]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	bf0c      	ite	eq
 800e5d2:	2301      	moveq	r3, #1
 800e5d4:	2300      	movne	r3, #0
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	461a      	mov	r2, r3
 800e5da:	79fb      	ldrb	r3, [r7, #7]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d0a6      	beq.n	800e52e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e5e0:	2300      	movs	r3, #0
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3710      	adds	r7, #16
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
	...

0800e5ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b096      	sub	sp, #88	; 0x58
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	88fa      	ldrh	r2, [r7, #6]
 800e604:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2200      	movs	r2, #0
 800e60c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2222      	movs	r2, #34	; 0x22
 800e614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d02d      	beq.n	800e67e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e628:	4a40      	ldr	r2, [pc, #256]	; (800e72c <UART_Start_Receive_DMA+0x140>)
 800e62a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e632:	4a3f      	ldr	r2, [pc, #252]	; (800e730 <UART_Start_Receive_DMA+0x144>)
 800e634:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e63c:	4a3d      	ldr	r2, [pc, #244]	; (800e734 <UART_Start_Receive_DMA+0x148>)
 800e63e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e646:	2200      	movs	r2, #0
 800e648:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	3324      	adds	r3, #36	; 0x24
 800e656:	4619      	mov	r1, r3
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e65c:	461a      	mov	r2, r3
 800e65e:	88fb      	ldrh	r3, [r7, #6]
 800e660:	f7f7 fa9a 	bl	8005b98 <HAL_DMA_Start_IT>
 800e664:	4603      	mov	r3, r0
 800e666:	2b00      	cmp	r3, #0
 800e668:	d009      	beq.n	800e67e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2210      	movs	r2, #16
 800e66e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2220      	movs	r2, #32
 800e676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800e67a:	2301      	movs	r3, #1
 800e67c:	e051      	b.n	800e722 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	691b      	ldr	r3, [r3, #16]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d018      	beq.n	800e6b8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e68e:	e853 3f00 	ldrex	r3, [r3]
 800e692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e69a:	657b      	str	r3, [r7, #84]	; 0x54
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6a6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6ac:	e841 2300 	strex	r3, r2, [r1]
 800e6b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e6b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d1e6      	bne.n	800e686 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	3308      	adds	r3, #8
 800e6be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c2:	e853 3f00 	ldrex	r3, [r3]
 800e6c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ca:	f043 0301 	orr.w	r3, r3, #1
 800e6ce:	653b      	str	r3, [r7, #80]	; 0x50
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	3308      	adds	r3, #8
 800e6d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6d8:	637a      	str	r2, [r7, #52]	; 0x34
 800e6da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e6de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6e0:	e841 2300 	strex	r3, r2, [r1]
 800e6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d1e5      	bne.n	800e6b8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	3308      	adds	r3, #8
 800e6f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	e853 3f00 	ldrex	r3, [r3]
 800e6fa:	613b      	str	r3, [r7, #16]
   return(result);
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e702:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	3308      	adds	r3, #8
 800e70a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e70c:	623a      	str	r2, [r7, #32]
 800e70e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e710:	69f9      	ldr	r1, [r7, #28]
 800e712:	6a3a      	ldr	r2, [r7, #32]
 800e714:	e841 2300 	strex	r3, r2, [r1]
 800e718:	61bb      	str	r3, [r7, #24]
   return(result);
 800e71a:	69bb      	ldr	r3, [r7, #24]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1e5      	bne.n	800e6ec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e720:	2300      	movs	r3, #0
}
 800e722:	4618      	mov	r0, r3
 800e724:	3758      	adds	r7, #88	; 0x58
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	0800e889 	.word	0x0800e889
 800e730:	0800e9b1 	.word	0x0800e9b1
 800e734:	0800e9ef 	.word	0x0800e9ef

0800e738 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e738:	b480      	push	{r7}
 800e73a:	b08f      	sub	sp, #60	; 0x3c
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e746:	6a3b      	ldr	r3, [r7, #32]
 800e748:	e853 3f00 	ldrex	r3, [r3]
 800e74c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e754:	637b      	str	r3, [r7, #52]	; 0x34
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	461a      	mov	r2, r3
 800e75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e75e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e760:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e766:	e841 2300 	strex	r3, r2, [r1]
 800e76a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1e6      	bne.n	800e740 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3308      	adds	r3, #8
 800e778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	e853 3f00 	ldrex	r3, [r3]
 800e780:	60bb      	str	r3, [r7, #8]
   return(result);
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e788:	633b      	str	r3, [r7, #48]	; 0x30
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	3308      	adds	r3, #8
 800e790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e792:	61ba      	str	r2, [r7, #24]
 800e794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e796:	6979      	ldr	r1, [r7, #20]
 800e798:	69ba      	ldr	r2, [r7, #24]
 800e79a:	e841 2300 	strex	r3, r2, [r1]
 800e79e:	613b      	str	r3, [r7, #16]
   return(result);
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d1e5      	bne.n	800e772 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2220      	movs	r2, #32
 800e7aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800e7ae:	bf00      	nop
 800e7b0:	373c      	adds	r7, #60	; 0x3c
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
	...

0800e7bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b095      	sub	sp, #84	; 0x54
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7cc:	e853 3f00 	ldrex	r3, [r3]
 800e7d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7e2:	643b      	str	r3, [r7, #64]	; 0x40
 800e7e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e7e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e7ea:	e841 2300 	strex	r3, r2, [r1]
 800e7ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1e6      	bne.n	800e7c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	3308      	adds	r3, #8
 800e7fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7fe:	6a3b      	ldr	r3, [r7, #32]
 800e800:	e853 3f00 	ldrex	r3, [r3]
 800e804:	61fb      	str	r3, [r7, #28]
   return(result);
 800e806:	69fa      	ldr	r2, [r7, #28]
 800e808:	4b1e      	ldr	r3, [pc, #120]	; (800e884 <UART_EndRxTransfer+0xc8>)
 800e80a:	4013      	ands	r3, r2
 800e80c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	3308      	adds	r3, #8
 800e814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e816:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e818:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e81e:	e841 2300 	strex	r3, r2, [r1]
 800e822:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1e5      	bne.n	800e7f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e82e:	2b01      	cmp	r3, #1
 800e830:	d118      	bne.n	800e864 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	e853 3f00 	ldrex	r3, [r3]
 800e83e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	f023 0310 	bic.w	r3, r3, #16
 800e846:	647b      	str	r3, [r7, #68]	; 0x44
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	461a      	mov	r2, r3
 800e84e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e850:	61bb      	str	r3, [r7, #24]
 800e852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e854:	6979      	ldr	r1, [r7, #20]
 800e856:	69ba      	ldr	r2, [r7, #24]
 800e858:	e841 2300 	strex	r3, r2, [r1]
 800e85c:	613b      	str	r3, [r7, #16]
   return(result);
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d1e6      	bne.n	800e832 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2220      	movs	r2, #32
 800e868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2200      	movs	r2, #0
 800e870:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2200      	movs	r2, #0
 800e876:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e878:	bf00      	nop
 800e87a:	3754      	adds	r7, #84	; 0x54
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr
 800e884:	effffffe 	.word	0xeffffffe

0800e888 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b09c      	sub	sp, #112	; 0x70
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e894:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	69db      	ldr	r3, [r3, #28]
 800e89a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e89e:	d071      	beq.n	800e984 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e8a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8b0:	e853 3f00 	ldrex	r3, [r3]
 800e8b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e8b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800e8be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800e8c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8ce:	e841 2300 	strex	r3, r2, [r1]
 800e8d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e8d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1e6      	bne.n	800e8a8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	3308      	adds	r3, #8
 800e8e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e4:	e853 3f00 	ldrex	r3, [r3]
 800e8e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8ec:	f023 0301 	bic.w	r3, r3, #1
 800e8f0:	667b      	str	r3, [r7, #100]	; 0x64
 800e8f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	3308      	adds	r3, #8
 800e8f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e8fa:	647a      	str	r2, [r7, #68]	; 0x44
 800e8fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e902:	e841 2300 	strex	r3, r2, [r1]
 800e906:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d1e5      	bne.n	800e8da <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e90e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	3308      	adds	r3, #8
 800e914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e918:	e853 3f00 	ldrex	r3, [r3]
 800e91c:	623b      	str	r3, [r7, #32]
   return(result);
 800e91e:	6a3b      	ldr	r3, [r7, #32]
 800e920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e924:	663b      	str	r3, [r7, #96]	; 0x60
 800e926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	3308      	adds	r3, #8
 800e92c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e92e:	633a      	str	r2, [r7, #48]	; 0x30
 800e930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e936:	e841 2300 	strex	r3, r2, [r1]
 800e93a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d1e5      	bne.n	800e90e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e944:	2220      	movs	r2, #32
 800e946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e94a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e94c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d118      	bne.n	800e984 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	e853 3f00 	ldrex	r3, [r3]
 800e95e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f023 0310 	bic.w	r3, r3, #16
 800e966:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	461a      	mov	r2, r3
 800e96e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e970:	61fb      	str	r3, [r7, #28]
 800e972:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e974:	69b9      	ldr	r1, [r7, #24]
 800e976:	69fa      	ldr	r2, [r7, #28]
 800e978:	e841 2300 	strex	r3, r2, [r1]
 800e97c:	617b      	str	r3, [r7, #20]
   return(result);
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d1e6      	bne.n	800e952 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e986:	2200      	movs	r2, #0
 800e988:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e98a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e98c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e98e:	2b01      	cmp	r3, #1
 800e990:	d107      	bne.n	800e9a2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e994:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e998:	4619      	mov	r1, r3
 800e99a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e99c:	f7fe fdfa 	bl	800d594 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e9a0:	e002      	b.n	800e9a8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e9a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e9a4:	f7fe fdd8 	bl	800d558 <HAL_UART_RxCpltCallback>
}
 800e9a8:	bf00      	nop
 800e9aa:	3770      	adds	r7, #112	; 0x70
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d109      	bne.n	800e9e0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e9d2:	085b      	lsrs	r3, r3, #1
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f7fe fddb 	bl	800d594 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e9de:	e002      	b.n	800e9e6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	f7fe fdc3 	bl	800d56c <HAL_UART_RxHalfCpltCallback>
}
 800e9e6:	bf00      	nop
 800e9e8:	3710      	adds	r7, #16
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b086      	sub	sp, #24
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea02:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea0a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	689b      	ldr	r3, [r3, #8]
 800ea12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea16:	2b80      	cmp	r3, #128	; 0x80
 800ea18:	d109      	bne.n	800ea2e <UART_DMAError+0x40>
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	2b21      	cmp	r3, #33	; 0x21
 800ea1e:	d106      	bne.n	800ea2e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	2200      	movs	r2, #0
 800ea24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ea28:	6978      	ldr	r0, [r7, #20]
 800ea2a:	f7ff fe85 	bl	800e738 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea38:	2b40      	cmp	r3, #64	; 0x40
 800ea3a:	d109      	bne.n	800ea50 <UART_DMAError+0x62>
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2b22      	cmp	r3, #34	; 0x22
 800ea40:	d106      	bne.n	800ea50 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	2200      	movs	r2, #0
 800ea46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ea4a:	6978      	ldr	r0, [r7, #20]
 800ea4c:	f7ff feb6 	bl	800e7bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea56:	f043 0210 	orr.w	r2, r3, #16
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea60:	6978      	ldr	r0, [r7, #20]
 800ea62:	f7fe fd8d 	bl	800d580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea66:	bf00      	nop
 800ea68:	3718      	adds	r7, #24
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	b084      	sub	sp, #16
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2200      	movs	r2, #0
 800ea88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea8c:	68f8      	ldr	r0, [r7, #12]
 800ea8e:	f7fe fd77 	bl	800d580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea92:	bf00      	nop
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b088      	sub	sp, #32
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	e853 3f00 	ldrex	r3, [r3]
 800eaae:	60bb      	str	r3, [r7, #8]
   return(result);
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eab6:	61fb      	str	r3, [r7, #28]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	461a      	mov	r2, r3
 800eabe:	69fb      	ldr	r3, [r7, #28]
 800eac0:	61bb      	str	r3, [r7, #24]
 800eac2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac4:	6979      	ldr	r1, [r7, #20]
 800eac6:	69ba      	ldr	r2, [r7, #24]
 800eac8:	e841 2300 	strex	r3, r2, [r1]
 800eacc:	613b      	str	r3, [r7, #16]
   return(result);
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d1e6      	bne.n	800eaa2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2220      	movs	r2, #32
 800ead8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f7fe fd2e 	bl	800d544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eae8:	bf00      	nop
 800eaea:	3720      	adds	r7, #32
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eaf8:	bf00      	nop
 800eafa:	370c      	adds	r7, #12
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr

0800eb04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eb0c:	bf00      	nop
 800eb0e:	370c      	adds	r7, #12
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr

0800eb18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eb20:	bf00      	nop
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b085      	sub	sp, #20
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	d101      	bne.n	800eb42 <HAL_UARTEx_DisableFifoMode+0x16>
 800eb3e:	2302      	movs	r3, #2
 800eb40:	e027      	b.n	800eb92 <HAL_UARTEx_DisableFifoMode+0x66>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2201      	movs	r2, #1
 800eb46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2224      	movs	r2, #36	; 0x24
 800eb4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f022 0201 	bic.w	r2, r2, #1
 800eb68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eb70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2200      	movs	r2, #0
 800eb76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	68fa      	ldr	r2, [r7, #12]
 800eb7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2220      	movs	r2, #32
 800eb84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3714      	adds	r7, #20
 800eb96:	46bd      	mov	sp, r7
 800eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9c:	4770      	bx	lr

0800eb9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b084      	sub	sp, #16
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
 800eba6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d101      	bne.n	800ebb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ebb2:	2302      	movs	r3, #2
 800ebb4:	e02d      	b.n	800ec12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2201      	movs	r2, #1
 800ebba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2224      	movs	r2, #36	; 0x24
 800ebc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f022 0201 	bic.w	r2, r2, #1
 800ebdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	683a      	ldr	r2, [r7, #0]
 800ebee:	430a      	orrs	r2, r1
 800ebf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f000 f850 	bl	800ec98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	68fa      	ldr	r2, [r7, #12]
 800ebfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2220      	movs	r2, #32
 800ec04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ec10:	2300      	movs	r3, #0
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3710      	adds	r7, #16
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b084      	sub	sp, #16
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
 800ec22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d101      	bne.n	800ec32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ec2e:	2302      	movs	r3, #2
 800ec30:	e02d      	b.n	800ec8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2201      	movs	r2, #1
 800ec36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2224      	movs	r2, #36	; 0x24
 800ec3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f022 0201 	bic.w	r2, r2, #1
 800ec58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	689b      	ldr	r3, [r3, #8]
 800ec60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	683a      	ldr	r2, [r7, #0]
 800ec6a:	430a      	orrs	r2, r1
 800ec6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f000 f812 	bl	800ec98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2220      	movs	r2, #32
 800ec80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ec8c:	2300      	movs	r3, #0
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
	...

0800ec98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d108      	bne.n	800ecba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ecb8:	e031      	b.n	800ed1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ecba:	2310      	movs	r3, #16
 800ecbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ecbe:	2310      	movs	r3, #16
 800ecc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	689b      	ldr	r3, [r3, #8]
 800ecc8:	0e5b      	lsrs	r3, r3, #25
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	f003 0307 	and.w	r3, r3, #7
 800ecd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	689b      	ldr	r3, [r3, #8]
 800ecd8:	0f5b      	lsrs	r3, r3, #29
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	f003 0307 	and.w	r3, r3, #7
 800ece0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ece2:	7bbb      	ldrb	r3, [r7, #14]
 800ece4:	7b3a      	ldrb	r2, [r7, #12]
 800ece6:	4911      	ldr	r1, [pc, #68]	; (800ed2c <UARTEx_SetNbDataToProcess+0x94>)
 800ece8:	5c8a      	ldrb	r2, [r1, r2]
 800ecea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ecee:	7b3a      	ldrb	r2, [r7, #12]
 800ecf0:	490f      	ldr	r1, [pc, #60]	; (800ed30 <UARTEx_SetNbDataToProcess+0x98>)
 800ecf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ecf4:	fb93 f3f2 	sdiv	r3, r3, r2
 800ecf8:	b29a      	uxth	r2, r3
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed00:	7bfb      	ldrb	r3, [r7, #15]
 800ed02:	7b7a      	ldrb	r2, [r7, #13]
 800ed04:	4909      	ldr	r1, [pc, #36]	; (800ed2c <UARTEx_SetNbDataToProcess+0x94>)
 800ed06:	5c8a      	ldrb	r2, [r1, r2]
 800ed08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ed0c:	7b7a      	ldrb	r2, [r7, #13]
 800ed0e:	4908      	ldr	r1, [pc, #32]	; (800ed30 <UARTEx_SetNbDataToProcess+0x98>)
 800ed10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed12:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed16:	b29a      	uxth	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ed1e:	bf00      	nop
 800ed20:	3714      	adds	r7, #20
 800ed22:	46bd      	mov	sp, r7
 800ed24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed28:	4770      	bx	lr
 800ed2a:	bf00      	nop
 800ed2c:	08015d1c 	.word	0x08015d1c
 800ed30:	08015d24 	.word	0x08015d24

0800ed34 <__NVIC_SetPriority>:
{
 800ed34:	b480      	push	{r7}
 800ed36:	b083      	sub	sp, #12
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	6039      	str	r1, [r7, #0]
 800ed3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ed40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	db0a      	blt.n	800ed5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	b2da      	uxtb	r2, r3
 800ed4c:	490c      	ldr	r1, [pc, #48]	; (800ed80 <__NVIC_SetPriority+0x4c>)
 800ed4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ed52:	0112      	lsls	r2, r2, #4
 800ed54:	b2d2      	uxtb	r2, r2
 800ed56:	440b      	add	r3, r1
 800ed58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ed5c:	e00a      	b.n	800ed74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	4908      	ldr	r1, [pc, #32]	; (800ed84 <__NVIC_SetPriority+0x50>)
 800ed64:	88fb      	ldrh	r3, [r7, #6]
 800ed66:	f003 030f 	and.w	r3, r3, #15
 800ed6a:	3b04      	subs	r3, #4
 800ed6c:	0112      	lsls	r2, r2, #4
 800ed6e:	b2d2      	uxtb	r2, r2
 800ed70:	440b      	add	r3, r1
 800ed72:	761a      	strb	r2, [r3, #24]
}
 800ed74:	bf00      	nop
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr
 800ed80:	e000e100 	.word	0xe000e100
 800ed84:	e000ed00 	.word	0xe000ed00

0800ed88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	f06f 0004 	mvn.w	r0, #4
 800ed92:	f7ff ffcf 	bl	800ed34 <__NVIC_SetPriority>
#endif
}
 800ed96:	bf00      	nop
 800ed98:	bd80      	pop	{r7, pc}
	...

0800ed9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eda2:	f3ef 8305 	mrs	r3, IPSR
 800eda6:	603b      	str	r3, [r7, #0]
  return(result);
 800eda8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d003      	beq.n	800edb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800edae:	f06f 0305 	mvn.w	r3, #5
 800edb2:	607b      	str	r3, [r7, #4]
 800edb4:	e00c      	b.n	800edd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800edb6:	4b0a      	ldr	r3, [pc, #40]	; (800ede0 <osKernelInitialize+0x44>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d105      	bne.n	800edca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800edbe:	4b08      	ldr	r3, [pc, #32]	; (800ede0 <osKernelInitialize+0x44>)
 800edc0:	2201      	movs	r2, #1
 800edc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800edc4:	2300      	movs	r3, #0
 800edc6:	607b      	str	r3, [r7, #4]
 800edc8:	e002      	b.n	800edd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800edca:	f04f 33ff 	mov.w	r3, #4294967295
 800edce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800edd0:	687b      	ldr	r3, [r7, #4]
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	370c      	adds	r7, #12
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	240016c8 	.word	0x240016c8

0800ede4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edea:	f3ef 8305 	mrs	r3, IPSR
 800edee:	603b      	str	r3, [r7, #0]
  return(result);
 800edf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d003      	beq.n	800edfe <osKernelStart+0x1a>
    stat = osErrorISR;
 800edf6:	f06f 0305 	mvn.w	r3, #5
 800edfa:	607b      	str	r3, [r7, #4]
 800edfc:	e010      	b.n	800ee20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800edfe:	4b0b      	ldr	r3, [pc, #44]	; (800ee2c <osKernelStart+0x48>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	d109      	bne.n	800ee1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ee06:	f7ff ffbf 	bl	800ed88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ee0a:	4b08      	ldr	r3, [pc, #32]	; (800ee2c <osKernelStart+0x48>)
 800ee0c:	2202      	movs	r2, #2
 800ee0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ee10:	f001 f866 	bl	800fee0 <vTaskStartScheduler>
      stat = osOK;
 800ee14:	2300      	movs	r3, #0
 800ee16:	607b      	str	r3, [r7, #4]
 800ee18:	e002      	b.n	800ee20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ee1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ee20:	687b      	ldr	r3, [r7, #4]
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3708      	adds	r7, #8
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	240016c8 	.word	0x240016c8

0800ee30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b08e      	sub	sp, #56	; 0x38
 800ee34:	af04      	add	r7, sp, #16
 800ee36:	60f8      	str	r0, [r7, #12]
 800ee38:	60b9      	str	r1, [r7, #8]
 800ee3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee40:	f3ef 8305 	mrs	r3, IPSR
 800ee44:	617b      	str	r3, [r7, #20]
  return(result);
 800ee46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d17e      	bne.n	800ef4a <osThreadNew+0x11a>
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d07b      	beq.n	800ef4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ee52:	2380      	movs	r3, #128	; 0x80
 800ee54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ee56:	2318      	movs	r3, #24
 800ee58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ee5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d045      	beq.n	800eef6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d002      	beq.n	800ee78 <osThreadNew+0x48>
        name = attr->name;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	699b      	ldr	r3, [r3, #24]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d002      	beq.n	800ee86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	699b      	ldr	r3, [r3, #24]
 800ee84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ee86:	69fb      	ldr	r3, [r7, #28]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d008      	beq.n	800ee9e <osThreadNew+0x6e>
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	2b38      	cmp	r3, #56	; 0x38
 800ee90:	d805      	bhi.n	800ee9e <osThreadNew+0x6e>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	f003 0301 	and.w	r3, r3, #1
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d001      	beq.n	800eea2 <osThreadNew+0x72>
        return (NULL);
 800ee9e:	2300      	movs	r3, #0
 800eea0:	e054      	b.n	800ef4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	695b      	ldr	r3, [r3, #20]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d003      	beq.n	800eeb2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	695b      	ldr	r3, [r3, #20]
 800eeae:	089b      	lsrs	r3, r3, #2
 800eeb0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	689b      	ldr	r3, [r3, #8]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d00e      	beq.n	800eed8 <osThreadNew+0xa8>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	2b5b      	cmp	r3, #91	; 0x5b
 800eec0:	d90a      	bls.n	800eed8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d006      	beq.n	800eed8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	695b      	ldr	r3, [r3, #20]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d002      	beq.n	800eed8 <osThreadNew+0xa8>
        mem = 1;
 800eed2:	2301      	movs	r3, #1
 800eed4:	61bb      	str	r3, [r7, #24]
 800eed6:	e010      	b.n	800eefa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	689b      	ldr	r3, [r3, #8]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10c      	bne.n	800eefa <osThreadNew+0xca>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d108      	bne.n	800eefa <osThreadNew+0xca>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	691b      	ldr	r3, [r3, #16]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d104      	bne.n	800eefa <osThreadNew+0xca>
          mem = 0;
 800eef0:	2300      	movs	r3, #0
 800eef2:	61bb      	str	r3, [r7, #24]
 800eef4:	e001      	b.n	800eefa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800eef6:	2300      	movs	r3, #0
 800eef8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800eefa:	69bb      	ldr	r3, [r7, #24]
 800eefc:	2b01      	cmp	r3, #1
 800eefe:	d110      	bne.n	800ef22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ef08:	9202      	str	r2, [sp, #8]
 800ef0a:	9301      	str	r3, [sp, #4]
 800ef0c:	69fb      	ldr	r3, [r7, #28]
 800ef0e:	9300      	str	r3, [sp, #0]
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	6a3a      	ldr	r2, [r7, #32]
 800ef14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f000 fe0c 	bl	800fb34 <xTaskCreateStatic>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	613b      	str	r3, [r7, #16]
 800ef20:	e013      	b.n	800ef4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ef22:	69bb      	ldr	r3, [r7, #24]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d110      	bne.n	800ef4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ef28:	6a3b      	ldr	r3, [r7, #32]
 800ef2a:	b29a      	uxth	r2, r3
 800ef2c:	f107 0310 	add.w	r3, r7, #16
 800ef30:	9301      	str	r3, [sp, #4]
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	9300      	str	r3, [sp, #0]
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f000 fe57 	bl	800fbee <xTaskCreate>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b01      	cmp	r3, #1
 800ef44:	d001      	beq.n	800ef4a <osThreadNew+0x11a>
            hTask = NULL;
 800ef46:	2300      	movs	r3, #0
 800ef48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ef4a:	693b      	ldr	r3, [r7, #16]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3728      	adds	r7, #40	; 0x28
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef5c:	f3ef 8305 	mrs	r3, IPSR
 800ef60:	60bb      	str	r3, [r7, #8]
  return(result);
 800ef62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d003      	beq.n	800ef70 <osDelay+0x1c>
    stat = osErrorISR;
 800ef68:	f06f 0305 	mvn.w	r3, #5
 800ef6c:	60fb      	str	r3, [r7, #12]
 800ef6e:	e007      	b.n	800ef80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ef70:	2300      	movs	r3, #0
 800ef72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d002      	beq.n	800ef80 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 ff7c 	bl	800fe78 <vTaskDelay>
    }
  }

  return (stat);
 800ef80:	68fb      	ldr	r3, [r7, #12]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
	...

0800ef8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ef8c:	b480      	push	{r7}
 800ef8e:	b085      	sub	sp, #20
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	4a07      	ldr	r2, [pc, #28]	; (800efb8 <vApplicationGetIdleTaskMemory+0x2c>)
 800ef9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	4a06      	ldr	r2, [pc, #24]	; (800efbc <vApplicationGetIdleTaskMemory+0x30>)
 800efa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2280      	movs	r2, #128	; 0x80
 800efa8:	601a      	str	r2, [r3, #0]
}
 800efaa:	bf00      	nop
 800efac:	3714      	adds	r7, #20
 800efae:	46bd      	mov	sp, r7
 800efb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb4:	4770      	bx	lr
 800efb6:	bf00      	nop
 800efb8:	240016cc 	.word	0x240016cc
 800efbc:	24001728 	.word	0x24001728

0800efc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800efc0:	b480      	push	{r7}
 800efc2:	b085      	sub	sp, #20
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	4a07      	ldr	r2, [pc, #28]	; (800efec <vApplicationGetTimerTaskMemory+0x2c>)
 800efd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	4a06      	ldr	r2, [pc, #24]	; (800eff0 <vApplicationGetTimerTaskMemory+0x30>)
 800efd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f44f 7280 	mov.w	r2, #256	; 0x100
 800efde:	601a      	str	r2, [r3, #0]
}
 800efe0:	bf00      	nop
 800efe2:	3714      	adds	r7, #20
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr
 800efec:	24001928 	.word	0x24001928
 800eff0:	24001984 	.word	0x24001984

0800eff4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eff4:	b480      	push	{r7}
 800eff6:	b083      	sub	sp, #12
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f103 0208 	add.w	r2, r3, #8
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f04f 32ff 	mov.w	r2, #4294967295
 800f00c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f103 0208 	add.w	r2, r3, #8
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f103 0208 	add.w	r2, r3, #8
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2200      	movs	r2, #0
 800f026:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f028:	bf00      	nop
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f034:	b480      	push	{r7}
 800f036:	b083      	sub	sp, #12
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2200      	movs	r2, #0
 800f040:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f042:	bf00      	nop
 800f044:	370c      	adds	r7, #12
 800f046:	46bd      	mov	sp, r7
 800f048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04c:	4770      	bx	lr

0800f04e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f04e:	b480      	push	{r7}
 800f050:	b085      	sub	sp, #20
 800f052:	af00      	add	r7, sp, #0
 800f054:	6078      	str	r0, [r7, #4]
 800f056:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	689a      	ldr	r2, [r3, #8]
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	689b      	ldr	r3, [r3, #8]
 800f070:	683a      	ldr	r2, [r7, #0]
 800f072:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	683a      	ldr	r2, [r7, #0]
 800f078:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	1c5a      	adds	r2, r3, #1
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	601a      	str	r2, [r3, #0]
}
 800f08a:	bf00      	nop
 800f08c:	3714      	adds	r7, #20
 800f08e:	46bd      	mov	sp, r7
 800f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f094:	4770      	bx	lr

0800f096 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f096:	b480      	push	{r7}
 800f098:	b085      	sub	sp, #20
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
 800f09e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ac:	d103      	bne.n	800f0b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	60fb      	str	r3, [r7, #12]
 800f0b4:	e00c      	b.n	800f0d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	3308      	adds	r3, #8
 800f0ba:	60fb      	str	r3, [r7, #12]
 800f0bc:	e002      	b.n	800f0c4 <vListInsert+0x2e>
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	685b      	ldr	r3, [r3, #4]
 800f0c2:	60fb      	str	r3, [r7, #12]
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	68ba      	ldr	r2, [r7, #8]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d2f6      	bcs.n	800f0be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	685a      	ldr	r2, [r3, #4]
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	683a      	ldr	r2, [r7, #0]
 800f0de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	683a      	ldr	r2, [r7, #0]
 800f0ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	687a      	ldr	r2, [r7, #4]
 800f0f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	1c5a      	adds	r2, r3, #1
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	601a      	str	r2, [r3, #0]
}
 800f0fc:	bf00      	nop
 800f0fe:	3714      	adds	r7, #20
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr

0800f108 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f108:	b480      	push	{r7}
 800f10a:	b085      	sub	sp, #20
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	691b      	ldr	r3, [r3, #16]
 800f114:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	6892      	ldr	r2, [r2, #8]
 800f11e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	6852      	ldr	r2, [r2, #4]
 800f128:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	429a      	cmp	r2, r3
 800f132:	d103      	bne.n	800f13c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	689a      	ldr	r2, [r3, #8]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2200      	movs	r2, #0
 800f140:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	1e5a      	subs	r2, r3, #1
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
}
 800f150:	4618      	mov	r0, r3
 800f152:	3714      	adds	r7, #20
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr

0800f15c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d10a      	bne.n	800f186 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f174:	f383 8811 	msr	BASEPRI, r3
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f182:	bf00      	nop
 800f184:	e7fe      	b.n	800f184 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f186:	f002 f84d 	bl	8011224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f192:	68f9      	ldr	r1, [r7, #12]
 800f194:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f196:	fb01 f303 	mul.w	r3, r1, r3
 800f19a:	441a      	add	r2, r3
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1b6:	3b01      	subs	r3, #1
 800f1b8:	68f9      	ldr	r1, [r7, #12]
 800f1ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f1bc:	fb01 f303 	mul.w	r3, r1, r3
 800f1c0:	441a      	add	r2, r3
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	22ff      	movs	r2, #255	; 0xff
 800f1ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	22ff      	movs	r2, #255	; 0xff
 800f1d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d114      	bne.n	800f206 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	691b      	ldr	r3, [r3, #16]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d01a      	beq.n	800f21a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	3310      	adds	r3, #16
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f001 f903 	bl	80103f4 <xTaskRemoveFromEventList>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d012      	beq.n	800f21a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f1f4:	4b0c      	ldr	r3, [pc, #48]	; (800f228 <xQueueGenericReset+0xcc>)
 800f1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1fa:	601a      	str	r2, [r3, #0]
 800f1fc:	f3bf 8f4f 	dsb	sy
 800f200:	f3bf 8f6f 	isb	sy
 800f204:	e009      	b.n	800f21a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	3310      	adds	r3, #16
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7ff fef2 	bl	800eff4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	3324      	adds	r3, #36	; 0x24
 800f214:	4618      	mov	r0, r3
 800f216:	f7ff feed 	bl	800eff4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f21a:	f002 f833 	bl	8011284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f21e:	2301      	movs	r3, #1
}
 800f220:	4618      	mov	r0, r3
 800f222:	3710      	adds	r7, #16
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	e000ed04 	.word	0xe000ed04

0800f22c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b08e      	sub	sp, #56	; 0x38
 800f230:	af02      	add	r7, sp, #8
 800f232:	60f8      	str	r0, [r7, #12]
 800f234:	60b9      	str	r1, [r7, #8]
 800f236:	607a      	str	r2, [r7, #4]
 800f238:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d10a      	bne.n	800f256 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f244:	f383 8811 	msr	BASEPRI, r3
 800f248:	f3bf 8f6f 	isb	sy
 800f24c:	f3bf 8f4f 	dsb	sy
 800f250:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f252:	bf00      	nop
 800f254:	e7fe      	b.n	800f254 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d10a      	bne.n	800f272 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f260:	f383 8811 	msr	BASEPRI, r3
 800f264:	f3bf 8f6f 	isb	sy
 800f268:	f3bf 8f4f 	dsb	sy
 800f26c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f26e:	bf00      	nop
 800f270:	e7fe      	b.n	800f270 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d002      	beq.n	800f27e <xQueueGenericCreateStatic+0x52>
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d001      	beq.n	800f282 <xQueueGenericCreateStatic+0x56>
 800f27e:	2301      	movs	r3, #1
 800f280:	e000      	b.n	800f284 <xQueueGenericCreateStatic+0x58>
 800f282:	2300      	movs	r3, #0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d10a      	bne.n	800f29e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	623b      	str	r3, [r7, #32]
}
 800f29a:	bf00      	nop
 800f29c:	e7fe      	b.n	800f29c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d102      	bne.n	800f2aa <xQueueGenericCreateStatic+0x7e>
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d101      	bne.n	800f2ae <xQueueGenericCreateStatic+0x82>
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	e000      	b.n	800f2b0 <xQueueGenericCreateStatic+0x84>
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d10a      	bne.n	800f2ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b8:	f383 8811 	msr	BASEPRI, r3
 800f2bc:	f3bf 8f6f 	isb	sy
 800f2c0:	f3bf 8f4f 	dsb	sy
 800f2c4:	61fb      	str	r3, [r7, #28]
}
 800f2c6:	bf00      	nop
 800f2c8:	e7fe      	b.n	800f2c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f2ca:	2350      	movs	r3, #80	; 0x50
 800f2cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	2b50      	cmp	r3, #80	; 0x50
 800f2d2:	d00a      	beq.n	800f2ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d8:	f383 8811 	msr	BASEPRI, r3
 800f2dc:	f3bf 8f6f 	isb	sy
 800f2e0:	f3bf 8f4f 	dsb	sy
 800f2e4:	61bb      	str	r3, [r7, #24]
}
 800f2e6:	bf00      	nop
 800f2e8:	e7fe      	b.n	800f2e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f2ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d00d      	beq.n	800f312 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f2fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f304:	9300      	str	r3, [sp, #0]
 800f306:	4613      	mov	r3, r2
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	68b9      	ldr	r1, [r7, #8]
 800f30c:	68f8      	ldr	r0, [r7, #12]
 800f30e:	f000 f805 	bl	800f31c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f314:	4618      	mov	r0, r3
 800f316:	3730      	adds	r7, #48	; 0x30
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	60b9      	str	r1, [r7, #8]
 800f326:	607a      	str	r2, [r7, #4]
 800f328:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d103      	bne.n	800f338 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	69ba      	ldr	r2, [r7, #24]
 800f334:	601a      	str	r2, [r3, #0]
 800f336:	e002      	b.n	800f33e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f338:	69bb      	ldr	r3, [r7, #24]
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	68fa      	ldr	r2, [r7, #12]
 800f342:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f344:	69bb      	ldr	r3, [r7, #24]
 800f346:	68ba      	ldr	r2, [r7, #8]
 800f348:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f34a:	2101      	movs	r1, #1
 800f34c:	69b8      	ldr	r0, [r7, #24]
 800f34e:	f7ff ff05 	bl	800f15c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	78fa      	ldrb	r2, [r7, #3]
 800f356:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f35a:	bf00      	nop
 800f35c:	3710      	adds	r7, #16
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
	...

0800f364 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b08e      	sub	sp, #56	; 0x38
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
 800f370:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f372:	2300      	movs	r3, #0
 800f374:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d10a      	bne.n	800f396 <xQueueGenericSend+0x32>
	__asm volatile
 800f380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f384:	f383 8811 	msr	BASEPRI, r3
 800f388:	f3bf 8f6f 	isb	sy
 800f38c:	f3bf 8f4f 	dsb	sy
 800f390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f392:	bf00      	nop
 800f394:	e7fe      	b.n	800f394 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d103      	bne.n	800f3a4 <xQueueGenericSend+0x40>
 800f39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d101      	bne.n	800f3a8 <xQueueGenericSend+0x44>
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e000      	b.n	800f3aa <xQueueGenericSend+0x46>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d10a      	bne.n	800f3c4 <xQueueGenericSend+0x60>
	__asm volatile
 800f3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b2:	f383 8811 	msr	BASEPRI, r3
 800f3b6:	f3bf 8f6f 	isb	sy
 800f3ba:	f3bf 8f4f 	dsb	sy
 800f3be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f3c0:	bf00      	nop
 800f3c2:	e7fe      	b.n	800f3c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	2b02      	cmp	r3, #2
 800f3c8:	d103      	bne.n	800f3d2 <xQueueGenericSend+0x6e>
 800f3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3ce:	2b01      	cmp	r3, #1
 800f3d0:	d101      	bne.n	800f3d6 <xQueueGenericSend+0x72>
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	e000      	b.n	800f3d8 <xQueueGenericSend+0x74>
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d10a      	bne.n	800f3f2 <xQueueGenericSend+0x8e>
	__asm volatile
 800f3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e0:	f383 8811 	msr	BASEPRI, r3
 800f3e4:	f3bf 8f6f 	isb	sy
 800f3e8:	f3bf 8f4f 	dsb	sy
 800f3ec:	623b      	str	r3, [r7, #32]
}
 800f3ee:	bf00      	nop
 800f3f0:	e7fe      	b.n	800f3f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f3f2:	f001 f9bd 	bl	8010770 <xTaskGetSchedulerState>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d102      	bne.n	800f402 <xQueueGenericSend+0x9e>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d101      	bne.n	800f406 <xQueueGenericSend+0xa2>
 800f402:	2301      	movs	r3, #1
 800f404:	e000      	b.n	800f408 <xQueueGenericSend+0xa4>
 800f406:	2300      	movs	r3, #0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d10a      	bne.n	800f422 <xQueueGenericSend+0xbe>
	__asm volatile
 800f40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f410:	f383 8811 	msr	BASEPRI, r3
 800f414:	f3bf 8f6f 	isb	sy
 800f418:	f3bf 8f4f 	dsb	sy
 800f41c:	61fb      	str	r3, [r7, #28]
}
 800f41e:	bf00      	nop
 800f420:	e7fe      	b.n	800f420 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f422:	f001 feff 	bl	8011224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f42e:	429a      	cmp	r2, r3
 800f430:	d302      	bcc.n	800f438 <xQueueGenericSend+0xd4>
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	2b02      	cmp	r3, #2
 800f436:	d129      	bne.n	800f48c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f438:	683a      	ldr	r2, [r7, #0]
 800f43a:	68b9      	ldr	r1, [r7, #8]
 800f43c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f43e:	f000 fa0b 	bl	800f858 <prvCopyDataToQueue>
 800f442:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d010      	beq.n	800f46e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44e:	3324      	adds	r3, #36	; 0x24
 800f450:	4618      	mov	r0, r3
 800f452:	f000 ffcf 	bl	80103f4 <xTaskRemoveFromEventList>
 800f456:	4603      	mov	r3, r0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d013      	beq.n	800f484 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f45c:	4b3f      	ldr	r3, [pc, #252]	; (800f55c <xQueueGenericSend+0x1f8>)
 800f45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f462:	601a      	str	r2, [r3, #0]
 800f464:	f3bf 8f4f 	dsb	sy
 800f468:	f3bf 8f6f 	isb	sy
 800f46c:	e00a      	b.n	800f484 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f470:	2b00      	cmp	r3, #0
 800f472:	d007      	beq.n	800f484 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f474:	4b39      	ldr	r3, [pc, #228]	; (800f55c <xQueueGenericSend+0x1f8>)
 800f476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f47a:	601a      	str	r2, [r3, #0]
 800f47c:	f3bf 8f4f 	dsb	sy
 800f480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f484:	f001 fefe 	bl	8011284 <vPortExitCritical>
				return pdPASS;
 800f488:	2301      	movs	r3, #1
 800f48a:	e063      	b.n	800f554 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d103      	bne.n	800f49a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f492:	f001 fef7 	bl	8011284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f496:	2300      	movs	r3, #0
 800f498:	e05c      	b.n	800f554 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d106      	bne.n	800f4ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f4a0:	f107 0314 	add.w	r3, r7, #20
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f001 f809 	bl	80104bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f4ae:	f001 fee9 	bl	8011284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f4b2:	f000 fd7b 	bl	800ffac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f4b6:	f001 feb5 	bl	8011224 <vPortEnterCritical>
 800f4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4c0:	b25b      	sxtb	r3, r3
 800f4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4c6:	d103      	bne.n	800f4d0 <xQueueGenericSend+0x16c>
 800f4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4d6:	b25b      	sxtb	r3, r3
 800f4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4dc:	d103      	bne.n	800f4e6 <xQueueGenericSend+0x182>
 800f4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4e6:	f001 fecd 	bl	8011284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4ea:	1d3a      	adds	r2, r7, #4
 800f4ec:	f107 0314 	add.w	r3, r7, #20
 800f4f0:	4611      	mov	r1, r2
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f000 fff8 	bl	80104e8 <xTaskCheckForTimeOut>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d124      	bne.n	800f548 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f4fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f500:	f000 faa2 	bl	800fa48 <prvIsQueueFull>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d018      	beq.n	800f53c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f50c:	3310      	adds	r3, #16
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	4611      	mov	r1, r2
 800f512:	4618      	mov	r0, r3
 800f514:	f000 ff1e 	bl	8010354 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f51a:	f000 fa2d 	bl	800f978 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f51e:	f000 fd53 	bl	800ffc8 <xTaskResumeAll>
 800f522:	4603      	mov	r3, r0
 800f524:	2b00      	cmp	r3, #0
 800f526:	f47f af7c 	bne.w	800f422 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f52a:	4b0c      	ldr	r3, [pc, #48]	; (800f55c <xQueueGenericSend+0x1f8>)
 800f52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f530:	601a      	str	r2, [r3, #0]
 800f532:	f3bf 8f4f 	dsb	sy
 800f536:	f3bf 8f6f 	isb	sy
 800f53a:	e772      	b.n	800f422 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f53c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f53e:	f000 fa1b 	bl	800f978 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f542:	f000 fd41 	bl	800ffc8 <xTaskResumeAll>
 800f546:	e76c      	b.n	800f422 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f54a:	f000 fa15 	bl	800f978 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f54e:	f000 fd3b 	bl	800ffc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f552:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f554:	4618      	mov	r0, r3
 800f556:	3738      	adds	r7, #56	; 0x38
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	e000ed04 	.word	0xe000ed04

0800f560 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b090      	sub	sp, #64	; 0x40
 800f564:	af00      	add	r7, sp, #0
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	607a      	str	r2, [r7, #4]
 800f56c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f574:	2b00      	cmp	r3, #0
 800f576:	d10a      	bne.n	800f58e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f57c:	f383 8811 	msr	BASEPRI, r3
 800f580:	f3bf 8f6f 	isb	sy
 800f584:	f3bf 8f4f 	dsb	sy
 800f588:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f58a:	bf00      	nop
 800f58c:	e7fe      	b.n	800f58c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d103      	bne.n	800f59c <xQueueGenericSendFromISR+0x3c>
 800f594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d101      	bne.n	800f5a0 <xQueueGenericSendFromISR+0x40>
 800f59c:	2301      	movs	r3, #1
 800f59e:	e000      	b.n	800f5a2 <xQueueGenericSendFromISR+0x42>
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d10a      	bne.n	800f5bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5aa:	f383 8811 	msr	BASEPRI, r3
 800f5ae:	f3bf 8f6f 	isb	sy
 800f5b2:	f3bf 8f4f 	dsb	sy
 800f5b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f5b8:	bf00      	nop
 800f5ba:	e7fe      	b.n	800f5ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	2b02      	cmp	r3, #2
 800f5c0:	d103      	bne.n	800f5ca <xQueueGenericSendFromISR+0x6a>
 800f5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5c6:	2b01      	cmp	r3, #1
 800f5c8:	d101      	bne.n	800f5ce <xQueueGenericSendFromISR+0x6e>
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e000      	b.n	800f5d0 <xQueueGenericSendFromISR+0x70>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d10a      	bne.n	800f5ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d8:	f383 8811 	msr	BASEPRI, r3
 800f5dc:	f3bf 8f6f 	isb	sy
 800f5e0:	f3bf 8f4f 	dsb	sy
 800f5e4:	623b      	str	r3, [r7, #32]
}
 800f5e6:	bf00      	nop
 800f5e8:	e7fe      	b.n	800f5e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f5ea:	f001 fefd 	bl	80113e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f5ee:	f3ef 8211 	mrs	r2, BASEPRI
 800f5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f6:	f383 8811 	msr	BASEPRI, r3
 800f5fa:	f3bf 8f6f 	isb	sy
 800f5fe:	f3bf 8f4f 	dsb	sy
 800f602:	61fa      	str	r2, [r7, #28]
 800f604:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f606:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f608:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f60c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f612:	429a      	cmp	r2, r3
 800f614:	d302      	bcc.n	800f61c <xQueueGenericSendFromISR+0xbc>
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	2b02      	cmp	r3, #2
 800f61a:	d12f      	bne.n	800f67c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f62a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f62c:	683a      	ldr	r2, [r7, #0]
 800f62e:	68b9      	ldr	r1, [r7, #8]
 800f630:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f632:	f000 f911 	bl	800f858 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f636:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f63e:	d112      	bne.n	800f666 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f644:	2b00      	cmp	r3, #0
 800f646:	d016      	beq.n	800f676 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64a:	3324      	adds	r3, #36	; 0x24
 800f64c:	4618      	mov	r0, r3
 800f64e:	f000 fed1 	bl	80103f4 <xTaskRemoveFromEventList>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d00e      	beq.n	800f676 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00b      	beq.n	800f676 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2201      	movs	r2, #1
 800f662:	601a      	str	r2, [r3, #0]
 800f664:	e007      	b.n	800f676 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f666:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f66a:	3301      	adds	r3, #1
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	b25a      	sxtb	r2, r3
 800f670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f676:	2301      	movs	r3, #1
 800f678:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f67a:	e001      	b.n	800f680 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f67c:	2300      	movs	r3, #0
 800f67e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f682:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f68a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3740      	adds	r7, #64	; 0x40
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
	...

0800f698 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b08c      	sub	sp, #48	; 0x30
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d10a      	bne.n	800f6c8 <xQueueReceive+0x30>
	__asm volatile
 800f6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b6:	f383 8811 	msr	BASEPRI, r3
 800f6ba:	f3bf 8f6f 	isb	sy
 800f6be:	f3bf 8f4f 	dsb	sy
 800f6c2:	623b      	str	r3, [r7, #32]
}
 800f6c4:	bf00      	nop
 800f6c6:	e7fe      	b.n	800f6c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d103      	bne.n	800f6d6 <xQueueReceive+0x3e>
 800f6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d101      	bne.n	800f6da <xQueueReceive+0x42>
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	e000      	b.n	800f6dc <xQueueReceive+0x44>
 800f6da:	2300      	movs	r3, #0
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d10a      	bne.n	800f6f6 <xQueueReceive+0x5e>
	__asm volatile
 800f6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e4:	f383 8811 	msr	BASEPRI, r3
 800f6e8:	f3bf 8f6f 	isb	sy
 800f6ec:	f3bf 8f4f 	dsb	sy
 800f6f0:	61fb      	str	r3, [r7, #28]
}
 800f6f2:	bf00      	nop
 800f6f4:	e7fe      	b.n	800f6f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6f6:	f001 f83b 	bl	8010770 <xTaskGetSchedulerState>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d102      	bne.n	800f706 <xQueueReceive+0x6e>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d101      	bne.n	800f70a <xQueueReceive+0x72>
 800f706:	2301      	movs	r3, #1
 800f708:	e000      	b.n	800f70c <xQueueReceive+0x74>
 800f70a:	2300      	movs	r3, #0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d10a      	bne.n	800f726 <xQueueReceive+0x8e>
	__asm volatile
 800f710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f714:	f383 8811 	msr	BASEPRI, r3
 800f718:	f3bf 8f6f 	isb	sy
 800f71c:	f3bf 8f4f 	dsb	sy
 800f720:	61bb      	str	r3, [r7, #24]
}
 800f722:	bf00      	nop
 800f724:	e7fe      	b.n	800f724 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f726:	f001 fd7d 	bl	8011224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f72e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f732:	2b00      	cmp	r3, #0
 800f734:	d01f      	beq.n	800f776 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f736:	68b9      	ldr	r1, [r7, #8]
 800f738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f73a:	f000 f8f7 	bl	800f92c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f740:	1e5a      	subs	r2, r3, #1
 800f742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f744:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f748:	691b      	ldr	r3, [r3, #16]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d00f      	beq.n	800f76e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f750:	3310      	adds	r3, #16
 800f752:	4618      	mov	r0, r3
 800f754:	f000 fe4e 	bl	80103f4 <xTaskRemoveFromEventList>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d007      	beq.n	800f76e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f75e:	4b3d      	ldr	r3, [pc, #244]	; (800f854 <xQueueReceive+0x1bc>)
 800f760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f764:	601a      	str	r2, [r3, #0]
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f76e:	f001 fd89 	bl	8011284 <vPortExitCritical>
				return pdPASS;
 800f772:	2301      	movs	r3, #1
 800f774:	e069      	b.n	800f84a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d103      	bne.n	800f784 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f77c:	f001 fd82 	bl	8011284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f780:	2300      	movs	r3, #0
 800f782:	e062      	b.n	800f84a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f786:	2b00      	cmp	r3, #0
 800f788:	d106      	bne.n	800f798 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f78a:	f107 0310 	add.w	r3, r7, #16
 800f78e:	4618      	mov	r0, r3
 800f790:	f000 fe94 	bl	80104bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f794:	2301      	movs	r3, #1
 800f796:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f798:	f001 fd74 	bl	8011284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f79c:	f000 fc06 	bl	800ffac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f7a0:	f001 fd40 	bl	8011224 <vPortEnterCritical>
 800f7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7aa:	b25b      	sxtb	r3, r3
 800f7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7b0:	d103      	bne.n	800f7ba <xQueueReceive+0x122>
 800f7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7c0:	b25b      	sxtb	r3, r3
 800f7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7c6:	d103      	bne.n	800f7d0 <xQueueReceive+0x138>
 800f7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f7d0:	f001 fd58 	bl	8011284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7d4:	1d3a      	adds	r2, r7, #4
 800f7d6:	f107 0310 	add.w	r3, r7, #16
 800f7da:	4611      	mov	r1, r2
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f000 fe83 	bl	80104e8 <xTaskCheckForTimeOut>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d123      	bne.n	800f830 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f7e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7ea:	f000 f917 	bl	800fa1c <prvIsQueueEmpty>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d017      	beq.n	800f824 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f6:	3324      	adds	r3, #36	; 0x24
 800f7f8:	687a      	ldr	r2, [r7, #4]
 800f7fa:	4611      	mov	r1, r2
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f000 fda9 	bl	8010354 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f804:	f000 f8b8 	bl	800f978 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f808:	f000 fbde 	bl	800ffc8 <xTaskResumeAll>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d189      	bne.n	800f726 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f812:	4b10      	ldr	r3, [pc, #64]	; (800f854 <xQueueReceive+0x1bc>)
 800f814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f818:	601a      	str	r2, [r3, #0]
 800f81a:	f3bf 8f4f 	dsb	sy
 800f81e:	f3bf 8f6f 	isb	sy
 800f822:	e780      	b.n	800f726 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f826:	f000 f8a7 	bl	800f978 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f82a:	f000 fbcd 	bl	800ffc8 <xTaskResumeAll>
 800f82e:	e77a      	b.n	800f726 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f832:	f000 f8a1 	bl	800f978 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f836:	f000 fbc7 	bl	800ffc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f83a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f83c:	f000 f8ee 	bl	800fa1c <prvIsQueueEmpty>
 800f840:	4603      	mov	r3, r0
 800f842:	2b00      	cmp	r3, #0
 800f844:	f43f af6f 	beq.w	800f726 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f848:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3730      	adds	r7, #48	; 0x30
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	e000ed04 	.word	0xe000ed04

0800f858 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b086      	sub	sp, #24
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f864:	2300      	movs	r3, #0
 800f866:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f86c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f872:	2b00      	cmp	r3, #0
 800f874:	d10d      	bne.n	800f892 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d14d      	bne.n	800f91a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	689b      	ldr	r3, [r3, #8]
 800f882:	4618      	mov	r0, r3
 800f884:	f000 ff92 	bl	80107ac <xTaskPriorityDisinherit>
 800f888:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2200      	movs	r2, #0
 800f88e:	609a      	str	r2, [r3, #8]
 800f890:	e043      	b.n	800f91a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d119      	bne.n	800f8cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	6858      	ldr	r0, [r3, #4]
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	68b9      	ldr	r1, [r7, #8]
 800f8a4:	f001 fffc 	bl	80118a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	685a      	ldr	r2, [r3, #4]
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8b0:	441a      	add	r2, r3
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	685a      	ldr	r2, [r3, #4]
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	689b      	ldr	r3, [r3, #8]
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d32b      	bcc.n	800f91a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	605a      	str	r2, [r3, #4]
 800f8ca:	e026      	b.n	800f91a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	68d8      	ldr	r0, [r3, #12]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	68b9      	ldr	r1, [r7, #8]
 800f8d8:	f001 ffe2 	bl	80118a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	68da      	ldr	r2, [r3, #12]
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8e4:	425b      	negs	r3, r3
 800f8e6:	441a      	add	r2, r3
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	68da      	ldr	r2, [r3, #12]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d207      	bcs.n	800f908 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	689a      	ldr	r2, [r3, #8]
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f900:	425b      	negs	r3, r3
 800f902:	441a      	add	r2, r3
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2b02      	cmp	r3, #2
 800f90c:	d105      	bne.n	800f91a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d002      	beq.n	800f91a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	3b01      	subs	r3, #1
 800f918:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	1c5a      	adds	r2, r3, #1
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f922:	697b      	ldr	r3, [r7, #20]
}
 800f924:	4618      	mov	r0, r3
 800f926:	3718      	adds	r7, #24
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d018      	beq.n	800f970 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	68da      	ldr	r2, [r3, #12]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f946:	441a      	add	r2, r3
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	68da      	ldr	r2, [r3, #12]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	689b      	ldr	r3, [r3, #8]
 800f954:	429a      	cmp	r2, r3
 800f956:	d303      	bcc.n	800f960 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681a      	ldr	r2, [r3, #0]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	68d9      	ldr	r1, [r3, #12]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f968:	461a      	mov	r2, r3
 800f96a:	6838      	ldr	r0, [r7, #0]
 800f96c:	f001 ff98 	bl	80118a0 <memcpy>
	}
}
 800f970:	bf00      	nop
 800f972:	3708      	adds	r7, #8
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f980:	f001 fc50 	bl	8011224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f98a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f98c:	e011      	b.n	800f9b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f992:	2b00      	cmp	r3, #0
 800f994:	d012      	beq.n	800f9bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	3324      	adds	r3, #36	; 0x24
 800f99a:	4618      	mov	r0, r3
 800f99c:	f000 fd2a 	bl	80103f4 <xTaskRemoveFromEventList>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d001      	beq.n	800f9aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f9a6:	f000 fe01 	bl	80105ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f9aa:	7bfb      	ldrb	r3, [r7, #15]
 800f9ac:	3b01      	subs	r3, #1
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f9b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	dce9      	bgt.n	800f98e <prvUnlockQueue+0x16>
 800f9ba:	e000      	b.n	800f9be <prvUnlockQueue+0x46>
					break;
 800f9bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	22ff      	movs	r2, #255	; 0xff
 800f9c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f9c6:	f001 fc5d 	bl	8011284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f9ca:	f001 fc2b 	bl	8011224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9d6:	e011      	b.n	800f9fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	691b      	ldr	r3, [r3, #16]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d012      	beq.n	800fa06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	3310      	adds	r3, #16
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f000 fd05 	bl	80103f4 <xTaskRemoveFromEventList>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d001      	beq.n	800f9f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f9f0:	f000 fddc 	bl	80105ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f9f4:	7bbb      	ldrb	r3, [r7, #14]
 800f9f6:	3b01      	subs	r3, #1
 800f9f8:	b2db      	uxtb	r3, r3
 800f9fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	dce9      	bgt.n	800f9d8 <prvUnlockQueue+0x60>
 800fa04:	e000      	b.n	800fa08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fa06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	22ff      	movs	r2, #255	; 0xff
 800fa0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fa10:	f001 fc38 	bl	8011284 <vPortExitCritical>
}
 800fa14:	bf00      	nop
 800fa16:	3710      	adds	r7, #16
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa24:	f001 fbfe 	bl	8011224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d102      	bne.n	800fa36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fa30:	2301      	movs	r3, #1
 800fa32:	60fb      	str	r3, [r7, #12]
 800fa34:	e001      	b.n	800fa3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fa36:	2300      	movs	r3, #0
 800fa38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa3a:	f001 fc23 	bl	8011284 <vPortExitCritical>

	return xReturn;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3710      	adds	r7, #16
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b084      	sub	sp, #16
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa50:	f001 fbe8 	bl	8011224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d102      	bne.n	800fa66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fa60:	2301      	movs	r3, #1
 800fa62:	60fb      	str	r3, [r7, #12]
 800fa64:	e001      	b.n	800fa6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fa66:	2300      	movs	r3, #0
 800fa68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa6a:	f001 fc0b 	bl	8011284 <vPortExitCritical>

	return xReturn;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3710      	adds	r7, #16
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fa78:	b480      	push	{r7}
 800fa7a:	b085      	sub	sp, #20
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa82:	2300      	movs	r3, #0
 800fa84:	60fb      	str	r3, [r7, #12]
 800fa86:	e014      	b.n	800fab2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fa88:	4a0f      	ldr	r2, [pc, #60]	; (800fac8 <vQueueAddToRegistry+0x50>)
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d10b      	bne.n	800faac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fa94:	490c      	ldr	r1, [pc, #48]	; (800fac8 <vQueueAddToRegistry+0x50>)
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	683a      	ldr	r2, [r7, #0]
 800fa9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fa9e:	4a0a      	ldr	r2, [pc, #40]	; (800fac8 <vQueueAddToRegistry+0x50>)
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	00db      	lsls	r3, r3, #3
 800faa4:	4413      	add	r3, r2
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800faaa:	e006      	b.n	800faba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	3301      	adds	r3, #1
 800fab0:	60fb      	str	r3, [r7, #12]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	2b07      	cmp	r3, #7
 800fab6:	d9e7      	bls.n	800fa88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fab8:	bf00      	nop
 800faba:	bf00      	nop
 800fabc:	3714      	adds	r7, #20
 800fabe:	46bd      	mov	sp, r7
 800fac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac4:	4770      	bx	lr
 800fac6:	bf00      	nop
 800fac8:	24001d84 	.word	0x24001d84

0800facc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800facc:	b580      	push	{r7, lr}
 800face:	b086      	sub	sp, #24
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	60f8      	str	r0, [r7, #12]
 800fad4:	60b9      	str	r1, [r7, #8]
 800fad6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fadc:	f001 fba2 	bl	8011224 <vPortEnterCritical>
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fae6:	b25b      	sxtb	r3, r3
 800fae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faec:	d103      	bne.n	800faf6 <vQueueWaitForMessageRestricted+0x2a>
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	2200      	movs	r2, #0
 800faf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fafc:	b25b      	sxtb	r3, r3
 800fafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb02:	d103      	bne.n	800fb0c <vQueueWaitForMessageRestricted+0x40>
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	2200      	movs	r2, #0
 800fb08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb0c:	f001 fbba 	bl	8011284 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d106      	bne.n	800fb26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	3324      	adds	r3, #36	; 0x24
 800fb1c:	687a      	ldr	r2, [r7, #4]
 800fb1e:	68b9      	ldr	r1, [r7, #8]
 800fb20:	4618      	mov	r0, r3
 800fb22:	f000 fc3b 	bl	801039c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fb26:	6978      	ldr	r0, [r7, #20]
 800fb28:	f7ff ff26 	bl	800f978 <prvUnlockQueue>
	}
 800fb2c:	bf00      	nop
 800fb2e:	3718      	adds	r7, #24
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b08e      	sub	sp, #56	; 0x38
 800fb38:	af04      	add	r7, sp, #16
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	607a      	str	r2, [r7, #4]
 800fb40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fb42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d10a      	bne.n	800fb5e <xTaskCreateStatic+0x2a>
	__asm volatile
 800fb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb4c:	f383 8811 	msr	BASEPRI, r3
 800fb50:	f3bf 8f6f 	isb	sy
 800fb54:	f3bf 8f4f 	dsb	sy
 800fb58:	623b      	str	r3, [r7, #32]
}
 800fb5a:	bf00      	nop
 800fb5c:	e7fe      	b.n	800fb5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d10a      	bne.n	800fb7a <xTaskCreateStatic+0x46>
	__asm volatile
 800fb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb68:	f383 8811 	msr	BASEPRI, r3
 800fb6c:	f3bf 8f6f 	isb	sy
 800fb70:	f3bf 8f4f 	dsb	sy
 800fb74:	61fb      	str	r3, [r7, #28]
}
 800fb76:	bf00      	nop
 800fb78:	e7fe      	b.n	800fb78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fb7a:	235c      	movs	r3, #92	; 0x5c
 800fb7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	2b5c      	cmp	r3, #92	; 0x5c
 800fb82:	d00a      	beq.n	800fb9a <xTaskCreateStatic+0x66>
	__asm volatile
 800fb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb88:	f383 8811 	msr	BASEPRI, r3
 800fb8c:	f3bf 8f6f 	isb	sy
 800fb90:	f3bf 8f4f 	dsb	sy
 800fb94:	61bb      	str	r3, [r7, #24]
}
 800fb96:	bf00      	nop
 800fb98:	e7fe      	b.n	800fb98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fb9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d01e      	beq.n	800fbe0 <xTaskCreateStatic+0xac>
 800fba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d01b      	beq.n	800fbe0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbaa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbb0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb4:	2202      	movs	r2, #2
 800fbb6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fbba:	2300      	movs	r3, #0
 800fbbc:	9303      	str	r3, [sp, #12]
 800fbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc0:	9302      	str	r3, [sp, #8]
 800fbc2:	f107 0314 	add.w	r3, r7, #20
 800fbc6:	9301      	str	r3, [sp, #4]
 800fbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbca:	9300      	str	r3, [sp, #0]
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	68b9      	ldr	r1, [r7, #8]
 800fbd2:	68f8      	ldr	r0, [r7, #12]
 800fbd4:	f000 f850 	bl	800fc78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fbd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbda:	f000 f8dd 	bl	800fd98 <prvAddNewTaskToReadyList>
 800fbde:	e001      	b.n	800fbe4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fbe4:	697b      	ldr	r3, [r7, #20]
	}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3728      	adds	r7, #40	; 0x28
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}

0800fbee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fbee:	b580      	push	{r7, lr}
 800fbf0:	b08c      	sub	sp, #48	; 0x30
 800fbf2:	af04      	add	r7, sp, #16
 800fbf4:	60f8      	str	r0, [r7, #12]
 800fbf6:	60b9      	str	r1, [r7, #8]
 800fbf8:	603b      	str	r3, [r7, #0]
 800fbfa:	4613      	mov	r3, r2
 800fbfc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fbfe:	88fb      	ldrh	r3, [r7, #6]
 800fc00:	009b      	lsls	r3, r3, #2
 800fc02:	4618      	mov	r0, r3
 800fc04:	f001 fc30 	bl	8011468 <pvPortMalloc>
 800fc08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d00e      	beq.n	800fc2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fc10:	205c      	movs	r0, #92	; 0x5c
 800fc12:	f001 fc29 	bl	8011468 <pvPortMalloc>
 800fc16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d003      	beq.n	800fc26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fc1e:	69fb      	ldr	r3, [r7, #28]
 800fc20:	697a      	ldr	r2, [r7, #20]
 800fc22:	631a      	str	r2, [r3, #48]	; 0x30
 800fc24:	e005      	b.n	800fc32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fc26:	6978      	ldr	r0, [r7, #20]
 800fc28:	f001 fcea 	bl	8011600 <vPortFree>
 800fc2c:	e001      	b.n	800fc32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fc32:	69fb      	ldr	r3, [r7, #28]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d017      	beq.n	800fc68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fc40:	88fa      	ldrh	r2, [r7, #6]
 800fc42:	2300      	movs	r3, #0
 800fc44:	9303      	str	r3, [sp, #12]
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	9302      	str	r3, [sp, #8]
 800fc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc4c:	9301      	str	r3, [sp, #4]
 800fc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc50:	9300      	str	r3, [sp, #0]
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	68b9      	ldr	r1, [r7, #8]
 800fc56:	68f8      	ldr	r0, [r7, #12]
 800fc58:	f000 f80e 	bl	800fc78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc5c:	69f8      	ldr	r0, [r7, #28]
 800fc5e:	f000 f89b 	bl	800fd98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fc62:	2301      	movs	r3, #1
 800fc64:	61bb      	str	r3, [r7, #24]
 800fc66:	e002      	b.n	800fc6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fc68:	f04f 33ff 	mov.w	r3, #4294967295
 800fc6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fc6e:	69bb      	ldr	r3, [r7, #24]
	}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3720      	adds	r7, #32
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b088      	sub	sp, #32
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	60b9      	str	r1, [r7, #8]
 800fc82:	607a      	str	r2, [r7, #4]
 800fc84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	009b      	lsls	r3, r3, #2
 800fc8e:	461a      	mov	r2, r3
 800fc90:	21a5      	movs	r1, #165	; 0xa5
 800fc92:	f001 fe13 	bl	80118bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc9a:	6879      	ldr	r1, [r7, #4]
 800fc9c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fca0:	440b      	add	r3, r1
 800fca2:	009b      	lsls	r3, r3, #2
 800fca4:	4413      	add	r3, r2
 800fca6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	f023 0307 	bic.w	r3, r3, #7
 800fcae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	f003 0307 	and.w	r3, r3, #7
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00a      	beq.n	800fcd0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800fcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcbe:	f383 8811 	msr	BASEPRI, r3
 800fcc2:	f3bf 8f6f 	isb	sy
 800fcc6:	f3bf 8f4f 	dsb	sy
 800fcca:	617b      	str	r3, [r7, #20]
}
 800fccc:	bf00      	nop
 800fcce:	e7fe      	b.n	800fcce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d01f      	beq.n	800fd16 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	61fb      	str	r3, [r7, #28]
 800fcda:	e012      	b.n	800fd02 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fcdc:	68ba      	ldr	r2, [r7, #8]
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	4413      	add	r3, r2
 800fce2:	7819      	ldrb	r1, [r3, #0]
 800fce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fce6:	69fb      	ldr	r3, [r7, #28]
 800fce8:	4413      	add	r3, r2
 800fcea:	3334      	adds	r3, #52	; 0x34
 800fcec:	460a      	mov	r2, r1
 800fcee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fcf0:	68ba      	ldr	r2, [r7, #8]
 800fcf2:	69fb      	ldr	r3, [r7, #28]
 800fcf4:	4413      	add	r3, r2
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d006      	beq.n	800fd0a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcfc:	69fb      	ldr	r3, [r7, #28]
 800fcfe:	3301      	adds	r3, #1
 800fd00:	61fb      	str	r3, [r7, #28]
 800fd02:	69fb      	ldr	r3, [r7, #28]
 800fd04:	2b0f      	cmp	r3, #15
 800fd06:	d9e9      	bls.n	800fcdc <prvInitialiseNewTask+0x64>
 800fd08:	e000      	b.n	800fd0c <prvInitialiseNewTask+0x94>
			{
				break;
 800fd0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0e:	2200      	movs	r2, #0
 800fd10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fd14:	e003      	b.n	800fd1e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd18:	2200      	movs	r2, #0
 800fd1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd20:	2b37      	cmp	r3, #55	; 0x37
 800fd22:	d901      	bls.n	800fd28 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fd24:	2337      	movs	r3, #55	; 0x37
 800fd26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd36:	2200      	movs	r2, #0
 800fd38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3c:	3304      	adds	r3, #4
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7ff f978 	bl	800f034 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd46:	3318      	adds	r3, #24
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7ff f973 	bl	800f034 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd66:	2200      	movs	r2, #0
 800fd68:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fd72:	683a      	ldr	r2, [r7, #0]
 800fd74:	68f9      	ldr	r1, [r7, #12]
 800fd76:	69b8      	ldr	r0, [r7, #24]
 800fd78:	f001 f928 	bl	8010fcc <pxPortInitialiseStack>
 800fd7c:	4602      	mov	r2, r0
 800fd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d002      	beq.n	800fd8e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd8e:	bf00      	nop
 800fd90:	3720      	adds	r7, #32
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}
	...

0800fd98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fda0:	f001 fa40 	bl	8011224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fda4:	4b2d      	ldr	r3, [pc, #180]	; (800fe5c <prvAddNewTaskToReadyList+0xc4>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	3301      	adds	r3, #1
 800fdaa:	4a2c      	ldr	r2, [pc, #176]	; (800fe5c <prvAddNewTaskToReadyList+0xc4>)
 800fdac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fdae:	4b2c      	ldr	r3, [pc, #176]	; (800fe60 <prvAddNewTaskToReadyList+0xc8>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d109      	bne.n	800fdca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fdb6:	4a2a      	ldr	r2, [pc, #168]	; (800fe60 <prvAddNewTaskToReadyList+0xc8>)
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fdbc:	4b27      	ldr	r3, [pc, #156]	; (800fe5c <prvAddNewTaskToReadyList+0xc4>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d110      	bne.n	800fde6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fdc4:	f000 fc16 	bl	80105f4 <prvInitialiseTaskLists>
 800fdc8:	e00d      	b.n	800fde6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fdca:	4b26      	ldr	r3, [pc, #152]	; (800fe64 <prvAddNewTaskToReadyList+0xcc>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d109      	bne.n	800fde6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fdd2:	4b23      	ldr	r3, [pc, #140]	; (800fe60 <prvAddNewTaskToReadyList+0xc8>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d802      	bhi.n	800fde6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fde0:	4a1f      	ldr	r2, [pc, #124]	; (800fe60 <prvAddNewTaskToReadyList+0xc8>)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fde6:	4b20      	ldr	r3, [pc, #128]	; (800fe68 <prvAddNewTaskToReadyList+0xd0>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	3301      	adds	r3, #1
 800fdec:	4a1e      	ldr	r2, [pc, #120]	; (800fe68 <prvAddNewTaskToReadyList+0xd0>)
 800fdee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fdf0:	4b1d      	ldr	r3, [pc, #116]	; (800fe68 <prvAddNewTaskToReadyList+0xd0>)
 800fdf2:	681a      	ldr	r2, [r3, #0]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdfc:	4b1b      	ldr	r3, [pc, #108]	; (800fe6c <prvAddNewTaskToReadyList+0xd4>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d903      	bls.n	800fe0c <prvAddNewTaskToReadyList+0x74>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe08:	4a18      	ldr	r2, [pc, #96]	; (800fe6c <prvAddNewTaskToReadyList+0xd4>)
 800fe0a:	6013      	str	r3, [r2, #0]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe10:	4613      	mov	r3, r2
 800fe12:	009b      	lsls	r3, r3, #2
 800fe14:	4413      	add	r3, r2
 800fe16:	009b      	lsls	r3, r3, #2
 800fe18:	4a15      	ldr	r2, [pc, #84]	; (800fe70 <prvAddNewTaskToReadyList+0xd8>)
 800fe1a:	441a      	add	r2, r3
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	3304      	adds	r3, #4
 800fe20:	4619      	mov	r1, r3
 800fe22:	4610      	mov	r0, r2
 800fe24:	f7ff f913 	bl	800f04e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fe28:	f001 fa2c 	bl	8011284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fe2c:	4b0d      	ldr	r3, [pc, #52]	; (800fe64 <prvAddNewTaskToReadyList+0xcc>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d00e      	beq.n	800fe52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fe34:	4b0a      	ldr	r3, [pc, #40]	; (800fe60 <prvAddNewTaskToReadyList+0xc8>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d207      	bcs.n	800fe52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fe42:	4b0c      	ldr	r3, [pc, #48]	; (800fe74 <prvAddNewTaskToReadyList+0xdc>)
 800fe44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe48:	601a      	str	r2, [r3, #0]
 800fe4a:	f3bf 8f4f 	dsb	sy
 800fe4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe52:	bf00      	nop
 800fe54:	3708      	adds	r7, #8
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	24002298 	.word	0x24002298
 800fe60:	24001dc4 	.word	0x24001dc4
 800fe64:	240022a4 	.word	0x240022a4
 800fe68:	240022b4 	.word	0x240022b4
 800fe6c:	240022a0 	.word	0x240022a0
 800fe70:	24001dc8 	.word	0x24001dc8
 800fe74:	e000ed04 	.word	0xe000ed04

0800fe78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fe80:	2300      	movs	r3, #0
 800fe82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d017      	beq.n	800feba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fe8a:	4b13      	ldr	r3, [pc, #76]	; (800fed8 <vTaskDelay+0x60>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d00a      	beq.n	800fea8 <vTaskDelay+0x30>
	__asm volatile
 800fe92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe96:	f383 8811 	msr	BASEPRI, r3
 800fe9a:	f3bf 8f6f 	isb	sy
 800fe9e:	f3bf 8f4f 	dsb	sy
 800fea2:	60bb      	str	r3, [r7, #8]
}
 800fea4:	bf00      	nop
 800fea6:	e7fe      	b.n	800fea6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fea8:	f000 f880 	bl	800ffac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800feac:	2100      	movs	r1, #0
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 fcea 	bl	8010888 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800feb4:	f000 f888 	bl	800ffc8 <xTaskResumeAll>
 800feb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d107      	bne.n	800fed0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fec0:	4b06      	ldr	r3, [pc, #24]	; (800fedc <vTaskDelay+0x64>)
 800fec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fec6:	601a      	str	r2, [r3, #0]
 800fec8:	f3bf 8f4f 	dsb	sy
 800fecc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fed0:	bf00      	nop
 800fed2:	3710      	adds	r7, #16
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}
 800fed8:	240022c0 	.word	0x240022c0
 800fedc:	e000ed04 	.word	0xe000ed04

0800fee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b08a      	sub	sp, #40	; 0x28
 800fee4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fee6:	2300      	movs	r3, #0
 800fee8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800feea:	2300      	movs	r3, #0
 800feec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800feee:	463a      	mov	r2, r7
 800fef0:	1d39      	adds	r1, r7, #4
 800fef2:	f107 0308 	add.w	r3, r7, #8
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7ff f848 	bl	800ef8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fefc:	6839      	ldr	r1, [r7, #0]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	68ba      	ldr	r2, [r7, #8]
 800ff02:	9202      	str	r2, [sp, #8]
 800ff04:	9301      	str	r3, [sp, #4]
 800ff06:	2300      	movs	r3, #0
 800ff08:	9300      	str	r3, [sp, #0]
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	460a      	mov	r2, r1
 800ff0e:	4921      	ldr	r1, [pc, #132]	; (800ff94 <vTaskStartScheduler+0xb4>)
 800ff10:	4821      	ldr	r0, [pc, #132]	; (800ff98 <vTaskStartScheduler+0xb8>)
 800ff12:	f7ff fe0f 	bl	800fb34 <xTaskCreateStatic>
 800ff16:	4603      	mov	r3, r0
 800ff18:	4a20      	ldr	r2, [pc, #128]	; (800ff9c <vTaskStartScheduler+0xbc>)
 800ff1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ff1c:	4b1f      	ldr	r3, [pc, #124]	; (800ff9c <vTaskStartScheduler+0xbc>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d002      	beq.n	800ff2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ff24:	2301      	movs	r3, #1
 800ff26:	617b      	str	r3, [r7, #20]
 800ff28:	e001      	b.n	800ff2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d102      	bne.n	800ff3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ff34:	f000 fcfc 	bl	8010930 <xTimerCreateTimerTask>
 800ff38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d116      	bne.n	800ff6e <vTaskStartScheduler+0x8e>
	__asm volatile
 800ff40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff44:	f383 8811 	msr	BASEPRI, r3
 800ff48:	f3bf 8f6f 	isb	sy
 800ff4c:	f3bf 8f4f 	dsb	sy
 800ff50:	613b      	str	r3, [r7, #16]
}
 800ff52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ff54:	4b12      	ldr	r3, [pc, #72]	; (800ffa0 <vTaskStartScheduler+0xc0>)
 800ff56:	f04f 32ff 	mov.w	r2, #4294967295
 800ff5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ff5c:	4b11      	ldr	r3, [pc, #68]	; (800ffa4 <vTaskStartScheduler+0xc4>)
 800ff5e:	2201      	movs	r2, #1
 800ff60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ff62:	4b11      	ldr	r3, [pc, #68]	; (800ffa8 <vTaskStartScheduler+0xc8>)
 800ff64:	2200      	movs	r2, #0
 800ff66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ff68:	f001 f8ba 	bl	80110e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ff6c:	e00e      	b.n	800ff8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff74:	d10a      	bne.n	800ff8c <vTaskStartScheduler+0xac>
	__asm volatile
 800ff76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff7a:	f383 8811 	msr	BASEPRI, r3
 800ff7e:	f3bf 8f6f 	isb	sy
 800ff82:	f3bf 8f4f 	dsb	sy
 800ff86:	60fb      	str	r3, [r7, #12]
}
 800ff88:	bf00      	nop
 800ff8a:	e7fe      	b.n	800ff8a <vTaskStartScheduler+0xaa>
}
 800ff8c:	bf00      	nop
 800ff8e:	3718      	adds	r7, #24
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}
 800ff94:	08015cb0 	.word	0x08015cb0
 800ff98:	080105c5 	.word	0x080105c5
 800ff9c:	240022bc 	.word	0x240022bc
 800ffa0:	240022b8 	.word	0x240022b8
 800ffa4:	240022a4 	.word	0x240022a4
 800ffa8:	2400229c 	.word	0x2400229c

0800ffac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ffac:	b480      	push	{r7}
 800ffae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ffb0:	4b04      	ldr	r3, [pc, #16]	; (800ffc4 <vTaskSuspendAll+0x18>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	4a03      	ldr	r2, [pc, #12]	; (800ffc4 <vTaskSuspendAll+0x18>)
 800ffb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ffba:	bf00      	nop
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr
 800ffc4:	240022c0 	.word	0x240022c0

0800ffc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ffd6:	4b42      	ldr	r3, [pc, #264]	; (80100e0 <xTaskResumeAll+0x118>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d10a      	bne.n	800fff4 <xTaskResumeAll+0x2c>
	__asm volatile
 800ffde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffe2:	f383 8811 	msr	BASEPRI, r3
 800ffe6:	f3bf 8f6f 	isb	sy
 800ffea:	f3bf 8f4f 	dsb	sy
 800ffee:	603b      	str	r3, [r7, #0]
}
 800fff0:	bf00      	nop
 800fff2:	e7fe      	b.n	800fff2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fff4:	f001 f916 	bl	8011224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fff8:	4b39      	ldr	r3, [pc, #228]	; (80100e0 <xTaskResumeAll+0x118>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	3b01      	subs	r3, #1
 800fffe:	4a38      	ldr	r2, [pc, #224]	; (80100e0 <xTaskResumeAll+0x118>)
 8010000:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010002:	4b37      	ldr	r3, [pc, #220]	; (80100e0 <xTaskResumeAll+0x118>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d162      	bne.n	80100d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801000a:	4b36      	ldr	r3, [pc, #216]	; (80100e4 <xTaskResumeAll+0x11c>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d05e      	beq.n	80100d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010012:	e02f      	b.n	8010074 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010014:	4b34      	ldr	r3, [pc, #208]	; (80100e8 <xTaskResumeAll+0x120>)
 8010016:	68db      	ldr	r3, [r3, #12]
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	3318      	adds	r3, #24
 8010020:	4618      	mov	r0, r3
 8010022:	f7ff f871 	bl	800f108 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	3304      	adds	r3, #4
 801002a:	4618      	mov	r0, r3
 801002c:	f7ff f86c 	bl	800f108 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010034:	4b2d      	ldr	r3, [pc, #180]	; (80100ec <xTaskResumeAll+0x124>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	429a      	cmp	r2, r3
 801003a:	d903      	bls.n	8010044 <xTaskResumeAll+0x7c>
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010040:	4a2a      	ldr	r2, [pc, #168]	; (80100ec <xTaskResumeAll+0x124>)
 8010042:	6013      	str	r3, [r2, #0]
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010048:	4613      	mov	r3, r2
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	4413      	add	r3, r2
 801004e:	009b      	lsls	r3, r3, #2
 8010050:	4a27      	ldr	r2, [pc, #156]	; (80100f0 <xTaskResumeAll+0x128>)
 8010052:	441a      	add	r2, r3
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	3304      	adds	r3, #4
 8010058:	4619      	mov	r1, r3
 801005a:	4610      	mov	r0, r2
 801005c:	f7fe fff7 	bl	800f04e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010064:	4b23      	ldr	r3, [pc, #140]	; (80100f4 <xTaskResumeAll+0x12c>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801006a:	429a      	cmp	r2, r3
 801006c:	d302      	bcc.n	8010074 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801006e:	4b22      	ldr	r3, [pc, #136]	; (80100f8 <xTaskResumeAll+0x130>)
 8010070:	2201      	movs	r2, #1
 8010072:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010074:	4b1c      	ldr	r3, [pc, #112]	; (80100e8 <xTaskResumeAll+0x120>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d1cb      	bne.n	8010014 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d001      	beq.n	8010086 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010082:	f000 fb55 	bl	8010730 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010086:	4b1d      	ldr	r3, [pc, #116]	; (80100fc <xTaskResumeAll+0x134>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d010      	beq.n	80100b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010092:	f000 f847 	bl	8010124 <xTaskIncrementTick>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	d002      	beq.n	80100a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801009c:	4b16      	ldr	r3, [pc, #88]	; (80100f8 <xTaskResumeAll+0x130>)
 801009e:	2201      	movs	r2, #1
 80100a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	3b01      	subs	r3, #1
 80100a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d1f1      	bne.n	8010092 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80100ae:	4b13      	ldr	r3, [pc, #76]	; (80100fc <xTaskResumeAll+0x134>)
 80100b0:	2200      	movs	r2, #0
 80100b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80100b4:	4b10      	ldr	r3, [pc, #64]	; (80100f8 <xTaskResumeAll+0x130>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d009      	beq.n	80100d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80100bc:	2301      	movs	r3, #1
 80100be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80100c0:	4b0f      	ldr	r3, [pc, #60]	; (8010100 <xTaskResumeAll+0x138>)
 80100c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100c6:	601a      	str	r2, [r3, #0]
 80100c8:	f3bf 8f4f 	dsb	sy
 80100cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80100d0:	f001 f8d8 	bl	8011284 <vPortExitCritical>

	return xAlreadyYielded;
 80100d4:	68bb      	ldr	r3, [r7, #8]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	240022c0 	.word	0x240022c0
 80100e4:	24002298 	.word	0x24002298
 80100e8:	24002258 	.word	0x24002258
 80100ec:	240022a0 	.word	0x240022a0
 80100f0:	24001dc8 	.word	0x24001dc8
 80100f4:	24001dc4 	.word	0x24001dc4
 80100f8:	240022ac 	.word	0x240022ac
 80100fc:	240022a8 	.word	0x240022a8
 8010100:	e000ed04 	.word	0xe000ed04

08010104 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801010a:	4b05      	ldr	r3, [pc, #20]	; (8010120 <xTaskGetTickCount+0x1c>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010110:	687b      	ldr	r3, [r7, #4]
}
 8010112:	4618      	mov	r0, r3
 8010114:	370c      	adds	r7, #12
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr
 801011e:	bf00      	nop
 8010120:	2400229c 	.word	0x2400229c

08010124 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b086      	sub	sp, #24
 8010128:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801012a:	2300      	movs	r3, #0
 801012c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801012e:	4b4f      	ldr	r3, [pc, #316]	; (801026c <xTaskIncrementTick+0x148>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	2b00      	cmp	r3, #0
 8010134:	f040 808f 	bne.w	8010256 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010138:	4b4d      	ldr	r3, [pc, #308]	; (8010270 <xTaskIncrementTick+0x14c>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	3301      	adds	r3, #1
 801013e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010140:	4a4b      	ldr	r2, [pc, #300]	; (8010270 <xTaskIncrementTick+0x14c>)
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d120      	bne.n	801018e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801014c:	4b49      	ldr	r3, [pc, #292]	; (8010274 <xTaskIncrementTick+0x150>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d00a      	beq.n	801016c <xTaskIncrementTick+0x48>
	__asm volatile
 8010156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801015a:	f383 8811 	msr	BASEPRI, r3
 801015e:	f3bf 8f6f 	isb	sy
 8010162:	f3bf 8f4f 	dsb	sy
 8010166:	603b      	str	r3, [r7, #0]
}
 8010168:	bf00      	nop
 801016a:	e7fe      	b.n	801016a <xTaskIncrementTick+0x46>
 801016c:	4b41      	ldr	r3, [pc, #260]	; (8010274 <xTaskIncrementTick+0x150>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	60fb      	str	r3, [r7, #12]
 8010172:	4b41      	ldr	r3, [pc, #260]	; (8010278 <xTaskIncrementTick+0x154>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4a3f      	ldr	r2, [pc, #252]	; (8010274 <xTaskIncrementTick+0x150>)
 8010178:	6013      	str	r3, [r2, #0]
 801017a:	4a3f      	ldr	r2, [pc, #252]	; (8010278 <xTaskIncrementTick+0x154>)
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	6013      	str	r3, [r2, #0]
 8010180:	4b3e      	ldr	r3, [pc, #248]	; (801027c <xTaskIncrementTick+0x158>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	3301      	adds	r3, #1
 8010186:	4a3d      	ldr	r2, [pc, #244]	; (801027c <xTaskIncrementTick+0x158>)
 8010188:	6013      	str	r3, [r2, #0]
 801018a:	f000 fad1 	bl	8010730 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801018e:	4b3c      	ldr	r3, [pc, #240]	; (8010280 <xTaskIncrementTick+0x15c>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	693a      	ldr	r2, [r7, #16]
 8010194:	429a      	cmp	r2, r3
 8010196:	d349      	bcc.n	801022c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010198:	4b36      	ldr	r3, [pc, #216]	; (8010274 <xTaskIncrementTick+0x150>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d104      	bne.n	80101ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101a2:	4b37      	ldr	r3, [pc, #220]	; (8010280 <xTaskIncrementTick+0x15c>)
 80101a4:	f04f 32ff 	mov.w	r2, #4294967295
 80101a8:	601a      	str	r2, [r3, #0]
					break;
 80101aa:	e03f      	b.n	801022c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101ac:	4b31      	ldr	r3, [pc, #196]	; (8010274 <xTaskIncrementTick+0x150>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	68db      	ldr	r3, [r3, #12]
 80101b2:	68db      	ldr	r3, [r3, #12]
 80101b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80101bc:	693a      	ldr	r2, [r7, #16]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d203      	bcs.n	80101cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80101c4:	4a2e      	ldr	r2, [pc, #184]	; (8010280 <xTaskIncrementTick+0x15c>)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80101ca:	e02f      	b.n	801022c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	3304      	adds	r3, #4
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fe ff99 	bl	800f108 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d004      	beq.n	80101e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	3318      	adds	r3, #24
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7fe ff90 	bl	800f108 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ec:	4b25      	ldr	r3, [pc, #148]	; (8010284 <xTaskIncrementTick+0x160>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d903      	bls.n	80101fc <xTaskIncrementTick+0xd8>
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101f8:	4a22      	ldr	r2, [pc, #136]	; (8010284 <xTaskIncrementTick+0x160>)
 80101fa:	6013      	str	r3, [r2, #0]
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010200:	4613      	mov	r3, r2
 8010202:	009b      	lsls	r3, r3, #2
 8010204:	4413      	add	r3, r2
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	4a1f      	ldr	r2, [pc, #124]	; (8010288 <xTaskIncrementTick+0x164>)
 801020a:	441a      	add	r2, r3
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	3304      	adds	r3, #4
 8010210:	4619      	mov	r1, r3
 8010212:	4610      	mov	r0, r2
 8010214:	f7fe ff1b 	bl	800f04e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801021c:	4b1b      	ldr	r3, [pc, #108]	; (801028c <xTaskIncrementTick+0x168>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010222:	429a      	cmp	r2, r3
 8010224:	d3b8      	bcc.n	8010198 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010226:	2301      	movs	r3, #1
 8010228:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801022a:	e7b5      	b.n	8010198 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801022c:	4b17      	ldr	r3, [pc, #92]	; (801028c <xTaskIncrementTick+0x168>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010232:	4915      	ldr	r1, [pc, #84]	; (8010288 <xTaskIncrementTick+0x164>)
 8010234:	4613      	mov	r3, r2
 8010236:	009b      	lsls	r3, r3, #2
 8010238:	4413      	add	r3, r2
 801023a:	009b      	lsls	r3, r3, #2
 801023c:	440b      	add	r3, r1
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2b01      	cmp	r3, #1
 8010242:	d901      	bls.n	8010248 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010244:	2301      	movs	r3, #1
 8010246:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010248:	4b11      	ldr	r3, [pc, #68]	; (8010290 <xTaskIncrementTick+0x16c>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d007      	beq.n	8010260 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010250:	2301      	movs	r3, #1
 8010252:	617b      	str	r3, [r7, #20]
 8010254:	e004      	b.n	8010260 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010256:	4b0f      	ldr	r3, [pc, #60]	; (8010294 <xTaskIncrementTick+0x170>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	3301      	adds	r3, #1
 801025c:	4a0d      	ldr	r2, [pc, #52]	; (8010294 <xTaskIncrementTick+0x170>)
 801025e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010260:	697b      	ldr	r3, [r7, #20]
}
 8010262:	4618      	mov	r0, r3
 8010264:	3718      	adds	r7, #24
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
 801026a:	bf00      	nop
 801026c:	240022c0 	.word	0x240022c0
 8010270:	2400229c 	.word	0x2400229c
 8010274:	24002250 	.word	0x24002250
 8010278:	24002254 	.word	0x24002254
 801027c:	240022b0 	.word	0x240022b0
 8010280:	240022b8 	.word	0x240022b8
 8010284:	240022a0 	.word	0x240022a0
 8010288:	24001dc8 	.word	0x24001dc8
 801028c:	24001dc4 	.word	0x24001dc4
 8010290:	240022ac 	.word	0x240022ac
 8010294:	240022a8 	.word	0x240022a8

08010298 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010298:	b480      	push	{r7}
 801029a:	b085      	sub	sp, #20
 801029c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801029e:	4b28      	ldr	r3, [pc, #160]	; (8010340 <vTaskSwitchContext+0xa8>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d003      	beq.n	80102ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80102a6:	4b27      	ldr	r3, [pc, #156]	; (8010344 <vTaskSwitchContext+0xac>)
 80102a8:	2201      	movs	r2, #1
 80102aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80102ac:	e041      	b.n	8010332 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80102ae:	4b25      	ldr	r3, [pc, #148]	; (8010344 <vTaskSwitchContext+0xac>)
 80102b0:	2200      	movs	r2, #0
 80102b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102b4:	4b24      	ldr	r3, [pc, #144]	; (8010348 <vTaskSwitchContext+0xb0>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	60fb      	str	r3, [r7, #12]
 80102ba:	e010      	b.n	80102de <vTaskSwitchContext+0x46>
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d10a      	bne.n	80102d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80102c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c6:	f383 8811 	msr	BASEPRI, r3
 80102ca:	f3bf 8f6f 	isb	sy
 80102ce:	f3bf 8f4f 	dsb	sy
 80102d2:	607b      	str	r3, [r7, #4]
}
 80102d4:	bf00      	nop
 80102d6:	e7fe      	b.n	80102d6 <vTaskSwitchContext+0x3e>
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	3b01      	subs	r3, #1
 80102dc:	60fb      	str	r3, [r7, #12]
 80102de:	491b      	ldr	r1, [pc, #108]	; (801034c <vTaskSwitchContext+0xb4>)
 80102e0:	68fa      	ldr	r2, [r7, #12]
 80102e2:	4613      	mov	r3, r2
 80102e4:	009b      	lsls	r3, r3, #2
 80102e6:	4413      	add	r3, r2
 80102e8:	009b      	lsls	r3, r3, #2
 80102ea:	440b      	add	r3, r1
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d0e4      	beq.n	80102bc <vTaskSwitchContext+0x24>
 80102f2:	68fa      	ldr	r2, [r7, #12]
 80102f4:	4613      	mov	r3, r2
 80102f6:	009b      	lsls	r3, r3, #2
 80102f8:	4413      	add	r3, r2
 80102fa:	009b      	lsls	r3, r3, #2
 80102fc:	4a13      	ldr	r2, [pc, #76]	; (801034c <vTaskSwitchContext+0xb4>)
 80102fe:	4413      	add	r3, r2
 8010300:	60bb      	str	r3, [r7, #8]
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	685a      	ldr	r2, [r3, #4]
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	605a      	str	r2, [r3, #4]
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	685a      	ldr	r2, [r3, #4]
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	3308      	adds	r3, #8
 8010314:	429a      	cmp	r2, r3
 8010316:	d104      	bne.n	8010322 <vTaskSwitchContext+0x8a>
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	685a      	ldr	r2, [r3, #4]
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	605a      	str	r2, [r3, #4]
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	685b      	ldr	r3, [r3, #4]
 8010326:	68db      	ldr	r3, [r3, #12]
 8010328:	4a09      	ldr	r2, [pc, #36]	; (8010350 <vTaskSwitchContext+0xb8>)
 801032a:	6013      	str	r3, [r2, #0]
 801032c:	4a06      	ldr	r2, [pc, #24]	; (8010348 <vTaskSwitchContext+0xb0>)
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	6013      	str	r3, [r2, #0]
}
 8010332:	bf00      	nop
 8010334:	3714      	adds	r7, #20
 8010336:	46bd      	mov	sp, r7
 8010338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033c:	4770      	bx	lr
 801033e:	bf00      	nop
 8010340:	240022c0 	.word	0x240022c0
 8010344:	240022ac 	.word	0x240022ac
 8010348:	240022a0 	.word	0x240022a0
 801034c:	24001dc8 	.word	0x24001dc8
 8010350:	24001dc4 	.word	0x24001dc4

08010354 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
 801035c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d10a      	bne.n	801037a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010368:	f383 8811 	msr	BASEPRI, r3
 801036c:	f3bf 8f6f 	isb	sy
 8010370:	f3bf 8f4f 	dsb	sy
 8010374:	60fb      	str	r3, [r7, #12]
}
 8010376:	bf00      	nop
 8010378:	e7fe      	b.n	8010378 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801037a:	4b07      	ldr	r3, [pc, #28]	; (8010398 <vTaskPlaceOnEventList+0x44>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	3318      	adds	r3, #24
 8010380:	4619      	mov	r1, r3
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f7fe fe87 	bl	800f096 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010388:	2101      	movs	r1, #1
 801038a:	6838      	ldr	r0, [r7, #0]
 801038c:	f000 fa7c 	bl	8010888 <prvAddCurrentTaskToDelayedList>
}
 8010390:	bf00      	nop
 8010392:	3710      	adds	r7, #16
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	24001dc4 	.word	0x24001dc4

0801039c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801039c:	b580      	push	{r7, lr}
 801039e:	b086      	sub	sp, #24
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	60f8      	str	r0, [r7, #12]
 80103a4:	60b9      	str	r1, [r7, #8]
 80103a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d10a      	bne.n	80103c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80103ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b2:	f383 8811 	msr	BASEPRI, r3
 80103b6:	f3bf 8f6f 	isb	sy
 80103ba:	f3bf 8f4f 	dsb	sy
 80103be:	617b      	str	r3, [r7, #20]
}
 80103c0:	bf00      	nop
 80103c2:	e7fe      	b.n	80103c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80103c4:	4b0a      	ldr	r3, [pc, #40]	; (80103f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	3318      	adds	r3, #24
 80103ca:	4619      	mov	r1, r3
 80103cc:	68f8      	ldr	r0, [r7, #12]
 80103ce:	f7fe fe3e 	bl	800f04e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d002      	beq.n	80103de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80103d8:	f04f 33ff 	mov.w	r3, #4294967295
 80103dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80103de:	6879      	ldr	r1, [r7, #4]
 80103e0:	68b8      	ldr	r0, [r7, #8]
 80103e2:	f000 fa51 	bl	8010888 <prvAddCurrentTaskToDelayedList>
	}
 80103e6:	bf00      	nop
 80103e8:	3718      	adds	r7, #24
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	24001dc4 	.word	0x24001dc4

080103f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b086      	sub	sp, #24
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	68db      	ldr	r3, [r3, #12]
 8010400:	68db      	ldr	r3, [r3, #12]
 8010402:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d10a      	bne.n	8010420 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801040a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801040e:	f383 8811 	msr	BASEPRI, r3
 8010412:	f3bf 8f6f 	isb	sy
 8010416:	f3bf 8f4f 	dsb	sy
 801041a:	60fb      	str	r3, [r7, #12]
}
 801041c:	bf00      	nop
 801041e:	e7fe      	b.n	801041e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	3318      	adds	r3, #24
 8010424:	4618      	mov	r0, r3
 8010426:	f7fe fe6f 	bl	800f108 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801042a:	4b1e      	ldr	r3, [pc, #120]	; (80104a4 <xTaskRemoveFromEventList+0xb0>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d11d      	bne.n	801046e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	3304      	adds	r3, #4
 8010436:	4618      	mov	r0, r3
 8010438:	f7fe fe66 	bl	800f108 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010440:	4b19      	ldr	r3, [pc, #100]	; (80104a8 <xTaskRemoveFromEventList+0xb4>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	429a      	cmp	r2, r3
 8010446:	d903      	bls.n	8010450 <xTaskRemoveFromEventList+0x5c>
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801044c:	4a16      	ldr	r2, [pc, #88]	; (80104a8 <xTaskRemoveFromEventList+0xb4>)
 801044e:	6013      	str	r3, [r2, #0]
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010454:	4613      	mov	r3, r2
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	4413      	add	r3, r2
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	4a13      	ldr	r2, [pc, #76]	; (80104ac <xTaskRemoveFromEventList+0xb8>)
 801045e:	441a      	add	r2, r3
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	3304      	adds	r3, #4
 8010464:	4619      	mov	r1, r3
 8010466:	4610      	mov	r0, r2
 8010468:	f7fe fdf1 	bl	800f04e <vListInsertEnd>
 801046c:	e005      	b.n	801047a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	3318      	adds	r3, #24
 8010472:	4619      	mov	r1, r3
 8010474:	480e      	ldr	r0, [pc, #56]	; (80104b0 <xTaskRemoveFromEventList+0xbc>)
 8010476:	f7fe fdea 	bl	800f04e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801047e:	4b0d      	ldr	r3, [pc, #52]	; (80104b4 <xTaskRemoveFromEventList+0xc0>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010484:	429a      	cmp	r2, r3
 8010486:	d905      	bls.n	8010494 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010488:	2301      	movs	r3, #1
 801048a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801048c:	4b0a      	ldr	r3, [pc, #40]	; (80104b8 <xTaskRemoveFromEventList+0xc4>)
 801048e:	2201      	movs	r2, #1
 8010490:	601a      	str	r2, [r3, #0]
 8010492:	e001      	b.n	8010498 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010494:	2300      	movs	r3, #0
 8010496:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010498:	697b      	ldr	r3, [r7, #20]
}
 801049a:	4618      	mov	r0, r3
 801049c:	3718      	adds	r7, #24
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	240022c0 	.word	0x240022c0
 80104a8:	240022a0 	.word	0x240022a0
 80104ac:	24001dc8 	.word	0x24001dc8
 80104b0:	24002258 	.word	0x24002258
 80104b4:	24001dc4 	.word	0x24001dc4
 80104b8:	240022ac 	.word	0x240022ac

080104bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80104c4:	4b06      	ldr	r3, [pc, #24]	; (80104e0 <vTaskInternalSetTimeOutState+0x24>)
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80104cc:	4b05      	ldr	r3, [pc, #20]	; (80104e4 <vTaskInternalSetTimeOutState+0x28>)
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	605a      	str	r2, [r3, #4]
}
 80104d4:	bf00      	nop
 80104d6:	370c      	adds	r7, #12
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr
 80104e0:	240022b0 	.word	0x240022b0
 80104e4:	2400229c 	.word	0x2400229c

080104e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b088      	sub	sp, #32
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d10a      	bne.n	801050e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80104f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104fc:	f383 8811 	msr	BASEPRI, r3
 8010500:	f3bf 8f6f 	isb	sy
 8010504:	f3bf 8f4f 	dsb	sy
 8010508:	613b      	str	r3, [r7, #16]
}
 801050a:	bf00      	nop
 801050c:	e7fe      	b.n	801050c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d10a      	bne.n	801052a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010518:	f383 8811 	msr	BASEPRI, r3
 801051c:	f3bf 8f6f 	isb	sy
 8010520:	f3bf 8f4f 	dsb	sy
 8010524:	60fb      	str	r3, [r7, #12]
}
 8010526:	bf00      	nop
 8010528:	e7fe      	b.n	8010528 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801052a:	f000 fe7b 	bl	8011224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801052e:	4b1d      	ldr	r3, [pc, #116]	; (80105a4 <xTaskCheckForTimeOut+0xbc>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	69ba      	ldr	r2, [r7, #24]
 801053a:	1ad3      	subs	r3, r2, r3
 801053c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010546:	d102      	bne.n	801054e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010548:	2300      	movs	r3, #0
 801054a:	61fb      	str	r3, [r7, #28]
 801054c:	e023      	b.n	8010596 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681a      	ldr	r2, [r3, #0]
 8010552:	4b15      	ldr	r3, [pc, #84]	; (80105a8 <xTaskCheckForTimeOut+0xc0>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	429a      	cmp	r2, r3
 8010558:	d007      	beq.n	801056a <xTaskCheckForTimeOut+0x82>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	685b      	ldr	r3, [r3, #4]
 801055e:	69ba      	ldr	r2, [r7, #24]
 8010560:	429a      	cmp	r2, r3
 8010562:	d302      	bcc.n	801056a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010564:	2301      	movs	r3, #1
 8010566:	61fb      	str	r3, [r7, #28]
 8010568:	e015      	b.n	8010596 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	697a      	ldr	r2, [r7, #20]
 8010570:	429a      	cmp	r2, r3
 8010572:	d20b      	bcs.n	801058c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	681a      	ldr	r2, [r3, #0]
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	1ad2      	subs	r2, r2, r3
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f7ff ff9b 	bl	80104bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010586:	2300      	movs	r3, #0
 8010588:	61fb      	str	r3, [r7, #28]
 801058a:	e004      	b.n	8010596 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	2200      	movs	r2, #0
 8010590:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010592:	2301      	movs	r3, #1
 8010594:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010596:	f000 fe75 	bl	8011284 <vPortExitCritical>

	return xReturn;
 801059a:	69fb      	ldr	r3, [r7, #28]
}
 801059c:	4618      	mov	r0, r3
 801059e:	3720      	adds	r7, #32
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}
 80105a4:	2400229c 	.word	0x2400229c
 80105a8:	240022b0 	.word	0x240022b0

080105ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80105ac:	b480      	push	{r7}
 80105ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80105b0:	4b03      	ldr	r3, [pc, #12]	; (80105c0 <vTaskMissedYield+0x14>)
 80105b2:	2201      	movs	r2, #1
 80105b4:	601a      	str	r2, [r3, #0]
}
 80105b6:	bf00      	nop
 80105b8:	46bd      	mov	sp, r7
 80105ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105be:	4770      	bx	lr
 80105c0:	240022ac 	.word	0x240022ac

080105c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80105cc:	f000 f852 	bl	8010674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80105d0:	4b06      	ldr	r3, [pc, #24]	; (80105ec <prvIdleTask+0x28>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d9f9      	bls.n	80105cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80105d8:	4b05      	ldr	r3, [pc, #20]	; (80105f0 <prvIdleTask+0x2c>)
 80105da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105de:	601a      	str	r2, [r3, #0]
 80105e0:	f3bf 8f4f 	dsb	sy
 80105e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80105e8:	e7f0      	b.n	80105cc <prvIdleTask+0x8>
 80105ea:	bf00      	nop
 80105ec:	24001dc8 	.word	0x24001dc8
 80105f0:	e000ed04 	.word	0xe000ed04

080105f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80105fa:	2300      	movs	r3, #0
 80105fc:	607b      	str	r3, [r7, #4]
 80105fe:	e00c      	b.n	801061a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	4613      	mov	r3, r2
 8010604:	009b      	lsls	r3, r3, #2
 8010606:	4413      	add	r3, r2
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	4a12      	ldr	r2, [pc, #72]	; (8010654 <prvInitialiseTaskLists+0x60>)
 801060c:	4413      	add	r3, r2
 801060e:	4618      	mov	r0, r3
 8010610:	f7fe fcf0 	bl	800eff4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	3301      	adds	r3, #1
 8010618:	607b      	str	r3, [r7, #4]
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2b37      	cmp	r3, #55	; 0x37
 801061e:	d9ef      	bls.n	8010600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010620:	480d      	ldr	r0, [pc, #52]	; (8010658 <prvInitialiseTaskLists+0x64>)
 8010622:	f7fe fce7 	bl	800eff4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010626:	480d      	ldr	r0, [pc, #52]	; (801065c <prvInitialiseTaskLists+0x68>)
 8010628:	f7fe fce4 	bl	800eff4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801062c:	480c      	ldr	r0, [pc, #48]	; (8010660 <prvInitialiseTaskLists+0x6c>)
 801062e:	f7fe fce1 	bl	800eff4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010632:	480c      	ldr	r0, [pc, #48]	; (8010664 <prvInitialiseTaskLists+0x70>)
 8010634:	f7fe fcde 	bl	800eff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010638:	480b      	ldr	r0, [pc, #44]	; (8010668 <prvInitialiseTaskLists+0x74>)
 801063a:	f7fe fcdb 	bl	800eff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801063e:	4b0b      	ldr	r3, [pc, #44]	; (801066c <prvInitialiseTaskLists+0x78>)
 8010640:	4a05      	ldr	r2, [pc, #20]	; (8010658 <prvInitialiseTaskLists+0x64>)
 8010642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010644:	4b0a      	ldr	r3, [pc, #40]	; (8010670 <prvInitialiseTaskLists+0x7c>)
 8010646:	4a05      	ldr	r2, [pc, #20]	; (801065c <prvInitialiseTaskLists+0x68>)
 8010648:	601a      	str	r2, [r3, #0]
}
 801064a:	bf00      	nop
 801064c:	3708      	adds	r7, #8
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}
 8010652:	bf00      	nop
 8010654:	24001dc8 	.word	0x24001dc8
 8010658:	24002228 	.word	0x24002228
 801065c:	2400223c 	.word	0x2400223c
 8010660:	24002258 	.word	0x24002258
 8010664:	2400226c 	.word	0x2400226c
 8010668:	24002284 	.word	0x24002284
 801066c:	24002250 	.word	0x24002250
 8010670:	24002254 	.word	0x24002254

08010674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b082      	sub	sp, #8
 8010678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801067a:	e019      	b.n	80106b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801067c:	f000 fdd2 	bl	8011224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010680:	4b10      	ldr	r3, [pc, #64]	; (80106c4 <prvCheckTasksWaitingTermination+0x50>)
 8010682:	68db      	ldr	r3, [r3, #12]
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	3304      	adds	r3, #4
 801068c:	4618      	mov	r0, r3
 801068e:	f7fe fd3b 	bl	800f108 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010692:	4b0d      	ldr	r3, [pc, #52]	; (80106c8 <prvCheckTasksWaitingTermination+0x54>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	3b01      	subs	r3, #1
 8010698:	4a0b      	ldr	r2, [pc, #44]	; (80106c8 <prvCheckTasksWaitingTermination+0x54>)
 801069a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801069c:	4b0b      	ldr	r3, [pc, #44]	; (80106cc <prvCheckTasksWaitingTermination+0x58>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	3b01      	subs	r3, #1
 80106a2:	4a0a      	ldr	r2, [pc, #40]	; (80106cc <prvCheckTasksWaitingTermination+0x58>)
 80106a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80106a6:	f000 fded 	bl	8011284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f000 f810 	bl	80106d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80106b0:	4b06      	ldr	r3, [pc, #24]	; (80106cc <prvCheckTasksWaitingTermination+0x58>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d1e1      	bne.n	801067c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80106b8:	bf00      	nop
 80106ba:	bf00      	nop
 80106bc:	3708      	adds	r7, #8
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
 80106c2:	bf00      	nop
 80106c4:	2400226c 	.word	0x2400226c
 80106c8:	24002298 	.word	0x24002298
 80106cc:	24002280 	.word	0x24002280

080106d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d108      	bne.n	80106f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106e6:	4618      	mov	r0, r3
 80106e8:	f000 ff8a 	bl	8011600 <vPortFree>
				vPortFree( pxTCB );
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f000 ff87 	bl	8011600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80106f2:	e018      	b.n	8010726 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80106fa:	2b01      	cmp	r3, #1
 80106fc:	d103      	bne.n	8010706 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f000 ff7e 	bl	8011600 <vPortFree>
	}
 8010704:	e00f      	b.n	8010726 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801070c:	2b02      	cmp	r3, #2
 801070e:	d00a      	beq.n	8010726 <prvDeleteTCB+0x56>
	__asm volatile
 8010710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010714:	f383 8811 	msr	BASEPRI, r3
 8010718:	f3bf 8f6f 	isb	sy
 801071c:	f3bf 8f4f 	dsb	sy
 8010720:	60fb      	str	r3, [r7, #12]
}
 8010722:	bf00      	nop
 8010724:	e7fe      	b.n	8010724 <prvDeleteTCB+0x54>
	}
 8010726:	bf00      	nop
 8010728:	3710      	adds	r7, #16
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
	...

08010730 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010730:	b480      	push	{r7}
 8010732:	b083      	sub	sp, #12
 8010734:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010736:	4b0c      	ldr	r3, [pc, #48]	; (8010768 <prvResetNextTaskUnblockTime+0x38>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d104      	bne.n	801074a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010740:	4b0a      	ldr	r3, [pc, #40]	; (801076c <prvResetNextTaskUnblockTime+0x3c>)
 8010742:	f04f 32ff 	mov.w	r2, #4294967295
 8010746:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010748:	e008      	b.n	801075c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801074a:	4b07      	ldr	r3, [pc, #28]	; (8010768 <prvResetNextTaskUnblockTime+0x38>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	68db      	ldr	r3, [r3, #12]
 8010750:	68db      	ldr	r3, [r3, #12]
 8010752:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	4a04      	ldr	r2, [pc, #16]	; (801076c <prvResetNextTaskUnblockTime+0x3c>)
 801075a:	6013      	str	r3, [r2, #0]
}
 801075c:	bf00      	nop
 801075e:	370c      	adds	r7, #12
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr
 8010768:	24002250 	.word	0x24002250
 801076c:	240022b8 	.word	0x240022b8

08010770 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010776:	4b0b      	ldr	r3, [pc, #44]	; (80107a4 <xTaskGetSchedulerState+0x34>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d102      	bne.n	8010784 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801077e:	2301      	movs	r3, #1
 8010780:	607b      	str	r3, [r7, #4]
 8010782:	e008      	b.n	8010796 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010784:	4b08      	ldr	r3, [pc, #32]	; (80107a8 <xTaskGetSchedulerState+0x38>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d102      	bne.n	8010792 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801078c:	2302      	movs	r3, #2
 801078e:	607b      	str	r3, [r7, #4]
 8010790:	e001      	b.n	8010796 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010792:	2300      	movs	r3, #0
 8010794:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010796:	687b      	ldr	r3, [r7, #4]
	}
 8010798:	4618      	mov	r0, r3
 801079a:	370c      	adds	r7, #12
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr
 80107a4:	240022a4 	.word	0x240022a4
 80107a8:	240022c0 	.word	0x240022c0

080107ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b086      	sub	sp, #24
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80107b8:	2300      	movs	r3, #0
 80107ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d056      	beq.n	8010870 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80107c2:	4b2e      	ldr	r3, [pc, #184]	; (801087c <xTaskPriorityDisinherit+0xd0>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	693a      	ldr	r2, [r7, #16]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d00a      	beq.n	80107e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80107cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d0:	f383 8811 	msr	BASEPRI, r3
 80107d4:	f3bf 8f6f 	isb	sy
 80107d8:	f3bf 8f4f 	dsb	sy
 80107dc:	60fb      	str	r3, [r7, #12]
}
 80107de:	bf00      	nop
 80107e0:	e7fe      	b.n	80107e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d10a      	bne.n	8010800 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80107ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ee:	f383 8811 	msr	BASEPRI, r3
 80107f2:	f3bf 8f6f 	isb	sy
 80107f6:	f3bf 8f4f 	dsb	sy
 80107fa:	60bb      	str	r3, [r7, #8]
}
 80107fc:	bf00      	nop
 80107fe:	e7fe      	b.n	80107fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010804:	1e5a      	subs	r2, r3, #1
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010812:	429a      	cmp	r2, r3
 8010814:	d02c      	beq.n	8010870 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010816:	693b      	ldr	r3, [r7, #16]
 8010818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801081a:	2b00      	cmp	r3, #0
 801081c:	d128      	bne.n	8010870 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	3304      	adds	r3, #4
 8010822:	4618      	mov	r0, r3
 8010824:	f7fe fc70 	bl	800f108 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010834:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010840:	4b0f      	ldr	r3, [pc, #60]	; (8010880 <xTaskPriorityDisinherit+0xd4>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	429a      	cmp	r2, r3
 8010846:	d903      	bls.n	8010850 <xTaskPriorityDisinherit+0xa4>
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801084c:	4a0c      	ldr	r2, [pc, #48]	; (8010880 <xTaskPriorityDisinherit+0xd4>)
 801084e:	6013      	str	r3, [r2, #0]
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010854:	4613      	mov	r3, r2
 8010856:	009b      	lsls	r3, r3, #2
 8010858:	4413      	add	r3, r2
 801085a:	009b      	lsls	r3, r3, #2
 801085c:	4a09      	ldr	r2, [pc, #36]	; (8010884 <xTaskPriorityDisinherit+0xd8>)
 801085e:	441a      	add	r2, r3
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	3304      	adds	r3, #4
 8010864:	4619      	mov	r1, r3
 8010866:	4610      	mov	r0, r2
 8010868:	f7fe fbf1 	bl	800f04e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801086c:	2301      	movs	r3, #1
 801086e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010870:	697b      	ldr	r3, [r7, #20]
	}
 8010872:	4618      	mov	r0, r3
 8010874:	3718      	adds	r7, #24
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	24001dc4 	.word	0x24001dc4
 8010880:	240022a0 	.word	0x240022a0
 8010884:	24001dc8 	.word	0x24001dc8

08010888 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010892:	4b21      	ldr	r3, [pc, #132]	; (8010918 <prvAddCurrentTaskToDelayedList+0x90>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010898:	4b20      	ldr	r3, [pc, #128]	; (801091c <prvAddCurrentTaskToDelayedList+0x94>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	3304      	adds	r3, #4
 801089e:	4618      	mov	r0, r3
 80108a0:	f7fe fc32 	bl	800f108 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108aa:	d10a      	bne.n	80108c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d007      	beq.n	80108c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108b2:	4b1a      	ldr	r3, [pc, #104]	; (801091c <prvAddCurrentTaskToDelayedList+0x94>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	3304      	adds	r3, #4
 80108b8:	4619      	mov	r1, r3
 80108ba:	4819      	ldr	r0, [pc, #100]	; (8010920 <prvAddCurrentTaskToDelayedList+0x98>)
 80108bc:	f7fe fbc7 	bl	800f04e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80108c0:	e026      	b.n	8010910 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80108c2:	68fa      	ldr	r2, [r7, #12]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	4413      	add	r3, r2
 80108c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80108ca:	4b14      	ldr	r3, [pc, #80]	; (801091c <prvAddCurrentTaskToDelayedList+0x94>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	68ba      	ldr	r2, [r7, #8]
 80108d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80108d2:	68ba      	ldr	r2, [r7, #8]
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d209      	bcs.n	80108ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108da:	4b12      	ldr	r3, [pc, #72]	; (8010924 <prvAddCurrentTaskToDelayedList+0x9c>)
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	4b0f      	ldr	r3, [pc, #60]	; (801091c <prvAddCurrentTaskToDelayedList+0x94>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	3304      	adds	r3, #4
 80108e4:	4619      	mov	r1, r3
 80108e6:	4610      	mov	r0, r2
 80108e8:	f7fe fbd5 	bl	800f096 <vListInsert>
}
 80108ec:	e010      	b.n	8010910 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108ee:	4b0e      	ldr	r3, [pc, #56]	; (8010928 <prvAddCurrentTaskToDelayedList+0xa0>)
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	4b0a      	ldr	r3, [pc, #40]	; (801091c <prvAddCurrentTaskToDelayedList+0x94>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	3304      	adds	r3, #4
 80108f8:	4619      	mov	r1, r3
 80108fa:	4610      	mov	r0, r2
 80108fc:	f7fe fbcb 	bl	800f096 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010900:	4b0a      	ldr	r3, [pc, #40]	; (801092c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	68ba      	ldr	r2, [r7, #8]
 8010906:	429a      	cmp	r2, r3
 8010908:	d202      	bcs.n	8010910 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801090a:	4a08      	ldr	r2, [pc, #32]	; (801092c <prvAddCurrentTaskToDelayedList+0xa4>)
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	6013      	str	r3, [r2, #0]
}
 8010910:	bf00      	nop
 8010912:	3710      	adds	r7, #16
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}
 8010918:	2400229c 	.word	0x2400229c
 801091c:	24001dc4 	.word	0x24001dc4
 8010920:	24002284 	.word	0x24002284
 8010924:	24002254 	.word	0x24002254
 8010928:	24002250 	.word	0x24002250
 801092c:	240022b8 	.word	0x240022b8

08010930 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b08a      	sub	sp, #40	; 0x28
 8010934:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010936:	2300      	movs	r3, #0
 8010938:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801093a:	f000 fb07 	bl	8010f4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801093e:	4b1c      	ldr	r3, [pc, #112]	; (80109b0 <xTimerCreateTimerTask+0x80>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d021      	beq.n	801098a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010946:	2300      	movs	r3, #0
 8010948:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801094a:	2300      	movs	r3, #0
 801094c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801094e:	1d3a      	adds	r2, r7, #4
 8010950:	f107 0108 	add.w	r1, r7, #8
 8010954:	f107 030c 	add.w	r3, r7, #12
 8010958:	4618      	mov	r0, r3
 801095a:	f7fe fb31 	bl	800efc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801095e:	6879      	ldr	r1, [r7, #4]
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	68fa      	ldr	r2, [r7, #12]
 8010964:	9202      	str	r2, [sp, #8]
 8010966:	9301      	str	r3, [sp, #4]
 8010968:	2302      	movs	r3, #2
 801096a:	9300      	str	r3, [sp, #0]
 801096c:	2300      	movs	r3, #0
 801096e:	460a      	mov	r2, r1
 8010970:	4910      	ldr	r1, [pc, #64]	; (80109b4 <xTimerCreateTimerTask+0x84>)
 8010972:	4811      	ldr	r0, [pc, #68]	; (80109b8 <xTimerCreateTimerTask+0x88>)
 8010974:	f7ff f8de 	bl	800fb34 <xTaskCreateStatic>
 8010978:	4603      	mov	r3, r0
 801097a:	4a10      	ldr	r2, [pc, #64]	; (80109bc <xTimerCreateTimerTask+0x8c>)
 801097c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801097e:	4b0f      	ldr	r3, [pc, #60]	; (80109bc <xTimerCreateTimerTask+0x8c>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d001      	beq.n	801098a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010986:	2301      	movs	r3, #1
 8010988:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d10a      	bne.n	80109a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	613b      	str	r3, [r7, #16]
}
 80109a2:	bf00      	nop
 80109a4:	e7fe      	b.n	80109a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80109a6:	697b      	ldr	r3, [r7, #20]
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3718      	adds	r7, #24
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	240022f4 	.word	0x240022f4
 80109b4:	08015cb8 	.word	0x08015cb8
 80109b8:	08010af5 	.word	0x08010af5
 80109bc:	240022f8 	.word	0x240022f8

080109c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b08a      	sub	sp, #40	; 0x28
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	60f8      	str	r0, [r7, #12]
 80109c8:	60b9      	str	r1, [r7, #8]
 80109ca:	607a      	str	r2, [r7, #4]
 80109cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80109ce:	2300      	movs	r3, #0
 80109d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d10a      	bne.n	80109ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80109d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109dc:	f383 8811 	msr	BASEPRI, r3
 80109e0:	f3bf 8f6f 	isb	sy
 80109e4:	f3bf 8f4f 	dsb	sy
 80109e8:	623b      	str	r3, [r7, #32]
}
 80109ea:	bf00      	nop
 80109ec:	e7fe      	b.n	80109ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80109ee:	4b1a      	ldr	r3, [pc, #104]	; (8010a58 <xTimerGenericCommand+0x98>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d02a      	beq.n	8010a4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	2b05      	cmp	r3, #5
 8010a06:	dc18      	bgt.n	8010a3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010a08:	f7ff feb2 	bl	8010770 <xTaskGetSchedulerState>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	2b02      	cmp	r3, #2
 8010a10:	d109      	bne.n	8010a26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010a12:	4b11      	ldr	r3, [pc, #68]	; (8010a58 <xTimerGenericCommand+0x98>)
 8010a14:	6818      	ldr	r0, [r3, #0]
 8010a16:	f107 0110 	add.w	r1, r7, #16
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a1e:	f7fe fca1 	bl	800f364 <xQueueGenericSend>
 8010a22:	6278      	str	r0, [r7, #36]	; 0x24
 8010a24:	e012      	b.n	8010a4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010a26:	4b0c      	ldr	r3, [pc, #48]	; (8010a58 <xTimerGenericCommand+0x98>)
 8010a28:	6818      	ldr	r0, [r3, #0]
 8010a2a:	f107 0110 	add.w	r1, r7, #16
 8010a2e:	2300      	movs	r3, #0
 8010a30:	2200      	movs	r2, #0
 8010a32:	f7fe fc97 	bl	800f364 <xQueueGenericSend>
 8010a36:	6278      	str	r0, [r7, #36]	; 0x24
 8010a38:	e008      	b.n	8010a4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010a3a:	4b07      	ldr	r3, [pc, #28]	; (8010a58 <xTimerGenericCommand+0x98>)
 8010a3c:	6818      	ldr	r0, [r3, #0]
 8010a3e:	f107 0110 	add.w	r1, r7, #16
 8010a42:	2300      	movs	r3, #0
 8010a44:	683a      	ldr	r2, [r7, #0]
 8010a46:	f7fe fd8b 	bl	800f560 <xQueueGenericSendFromISR>
 8010a4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3728      	adds	r7, #40	; 0x28
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	bf00      	nop
 8010a58:	240022f4 	.word	0x240022f4

08010a5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b088      	sub	sp, #32
 8010a60:	af02      	add	r7, sp, #8
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a66:	4b22      	ldr	r3, [pc, #136]	; (8010af0 <prvProcessExpiredTimer+0x94>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	68db      	ldr	r3, [r3, #12]
 8010a6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	3304      	adds	r3, #4
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7fe fb47 	bl	800f108 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a7a:	697b      	ldr	r3, [r7, #20]
 8010a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a80:	f003 0304 	and.w	r3, r3, #4
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d022      	beq.n	8010ace <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010a88:	697b      	ldr	r3, [r7, #20]
 8010a8a:	699a      	ldr	r2, [r3, #24]
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	18d1      	adds	r1, r2, r3
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	683a      	ldr	r2, [r7, #0]
 8010a94:	6978      	ldr	r0, [r7, #20]
 8010a96:	f000 f8d1 	bl	8010c3c <prvInsertTimerInActiveList>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d01f      	beq.n	8010ae0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	9300      	str	r3, [sp, #0]
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	2100      	movs	r1, #0
 8010aaa:	6978      	ldr	r0, [r7, #20]
 8010aac:	f7ff ff88 	bl	80109c0 <xTimerGenericCommand>
 8010ab0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d113      	bne.n	8010ae0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010abc:	f383 8811 	msr	BASEPRI, r3
 8010ac0:	f3bf 8f6f 	isb	sy
 8010ac4:	f3bf 8f4f 	dsb	sy
 8010ac8:	60fb      	str	r3, [r7, #12]
}
 8010aca:	bf00      	nop
 8010acc:	e7fe      	b.n	8010acc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ad4:	f023 0301 	bic.w	r3, r3, #1
 8010ad8:	b2da      	uxtb	r2, r3
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	6a1b      	ldr	r3, [r3, #32]
 8010ae4:	6978      	ldr	r0, [r7, #20]
 8010ae6:	4798      	blx	r3
}
 8010ae8:	bf00      	nop
 8010aea:	3718      	adds	r7, #24
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	240022ec 	.word	0x240022ec

08010af4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010afc:	f107 0308 	add.w	r3, r7, #8
 8010b00:	4618      	mov	r0, r3
 8010b02:	f000 f857 	bl	8010bb4 <prvGetNextExpireTime>
 8010b06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	68f8      	ldr	r0, [r7, #12]
 8010b0e:	f000 f803 	bl	8010b18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010b12:	f000 f8d5 	bl	8010cc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010b16:	e7f1      	b.n	8010afc <prvTimerTask+0x8>

08010b18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010b22:	f7ff fa43 	bl	800ffac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010b26:	f107 0308 	add.w	r3, r7, #8
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f000 f866 	bl	8010bfc <prvSampleTimeNow>
 8010b30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d130      	bne.n	8010b9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d10a      	bne.n	8010b54 <prvProcessTimerOrBlockTask+0x3c>
 8010b3e:	687a      	ldr	r2, [r7, #4]
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d806      	bhi.n	8010b54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010b46:	f7ff fa3f 	bl	800ffc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010b4a:	68f9      	ldr	r1, [r7, #12]
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f7ff ff85 	bl	8010a5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010b52:	e024      	b.n	8010b9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d008      	beq.n	8010b6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010b5a:	4b13      	ldr	r3, [pc, #76]	; (8010ba8 <prvProcessTimerOrBlockTask+0x90>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d101      	bne.n	8010b68 <prvProcessTimerOrBlockTask+0x50>
 8010b64:	2301      	movs	r3, #1
 8010b66:	e000      	b.n	8010b6a <prvProcessTimerOrBlockTask+0x52>
 8010b68:	2300      	movs	r3, #0
 8010b6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010b6c:	4b0f      	ldr	r3, [pc, #60]	; (8010bac <prvProcessTimerOrBlockTask+0x94>)
 8010b6e:	6818      	ldr	r0, [r3, #0]
 8010b70:	687a      	ldr	r2, [r7, #4]
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	1ad3      	subs	r3, r2, r3
 8010b76:	683a      	ldr	r2, [r7, #0]
 8010b78:	4619      	mov	r1, r3
 8010b7a:	f7fe ffa7 	bl	800facc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010b7e:	f7ff fa23 	bl	800ffc8 <xTaskResumeAll>
 8010b82:	4603      	mov	r3, r0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d10a      	bne.n	8010b9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010b88:	4b09      	ldr	r3, [pc, #36]	; (8010bb0 <prvProcessTimerOrBlockTask+0x98>)
 8010b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b8e:	601a      	str	r2, [r3, #0]
 8010b90:	f3bf 8f4f 	dsb	sy
 8010b94:	f3bf 8f6f 	isb	sy
}
 8010b98:	e001      	b.n	8010b9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010b9a:	f7ff fa15 	bl	800ffc8 <xTaskResumeAll>
}
 8010b9e:	bf00      	nop
 8010ba0:	3710      	adds	r7, #16
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	240022f0 	.word	0x240022f0
 8010bac:	240022f4 	.word	0x240022f4
 8010bb0:	e000ed04 	.word	0xe000ed04

08010bb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010bbc:	4b0e      	ldr	r3, [pc, #56]	; (8010bf8 <prvGetNextExpireTime+0x44>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d101      	bne.n	8010bca <prvGetNextExpireTime+0x16>
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	e000      	b.n	8010bcc <prvGetNextExpireTime+0x18>
 8010bca:	2200      	movs	r2, #0
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d105      	bne.n	8010be4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010bd8:	4b07      	ldr	r3, [pc, #28]	; (8010bf8 <prvGetNextExpireTime+0x44>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	60fb      	str	r3, [r7, #12]
 8010be2:	e001      	b.n	8010be8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010be4:	2300      	movs	r3, #0
 8010be6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010be8:	68fb      	ldr	r3, [r7, #12]
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3714      	adds	r7, #20
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf4:	4770      	bx	lr
 8010bf6:	bf00      	nop
 8010bf8:	240022ec 	.word	0x240022ec

08010bfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b084      	sub	sp, #16
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010c04:	f7ff fa7e 	bl	8010104 <xTaskGetTickCount>
 8010c08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010c0a:	4b0b      	ldr	r3, [pc, #44]	; (8010c38 <prvSampleTimeNow+0x3c>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	68fa      	ldr	r2, [r7, #12]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d205      	bcs.n	8010c20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010c14:	f000 f936 	bl	8010e84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	601a      	str	r2, [r3, #0]
 8010c1e:	e002      	b.n	8010c26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2200      	movs	r2, #0
 8010c24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010c26:	4a04      	ldr	r2, [pc, #16]	; (8010c38 <prvSampleTimeNow+0x3c>)
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	3710      	adds	r7, #16
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}
 8010c36:	bf00      	nop
 8010c38:	240022fc 	.word	0x240022fc

08010c3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b086      	sub	sp, #24
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	60f8      	str	r0, [r7, #12]
 8010c44:	60b9      	str	r1, [r7, #8]
 8010c46:	607a      	str	r2, [r7, #4]
 8010c48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	68ba      	ldr	r2, [r7, #8]
 8010c52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	68fa      	ldr	r2, [r7, #12]
 8010c58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010c5a:	68ba      	ldr	r2, [r7, #8]
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d812      	bhi.n	8010c88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	1ad2      	subs	r2, r2, r3
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	699b      	ldr	r3, [r3, #24]
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d302      	bcc.n	8010c76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010c70:	2301      	movs	r3, #1
 8010c72:	617b      	str	r3, [r7, #20]
 8010c74:	e01b      	b.n	8010cae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010c76:	4b10      	ldr	r3, [pc, #64]	; (8010cb8 <prvInsertTimerInActiveList+0x7c>)
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	3304      	adds	r3, #4
 8010c7e:	4619      	mov	r1, r3
 8010c80:	4610      	mov	r0, r2
 8010c82:	f7fe fa08 	bl	800f096 <vListInsert>
 8010c86:	e012      	b.n	8010cae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d206      	bcs.n	8010c9e <prvInsertTimerInActiveList+0x62>
 8010c90:	68ba      	ldr	r2, [r7, #8]
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d302      	bcc.n	8010c9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010c98:	2301      	movs	r3, #1
 8010c9a:	617b      	str	r3, [r7, #20]
 8010c9c:	e007      	b.n	8010cae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c9e:	4b07      	ldr	r3, [pc, #28]	; (8010cbc <prvInsertTimerInActiveList+0x80>)
 8010ca0:	681a      	ldr	r2, [r3, #0]
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	3304      	adds	r3, #4
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	4610      	mov	r0, r2
 8010caa:	f7fe f9f4 	bl	800f096 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010cae:	697b      	ldr	r3, [r7, #20]
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3718      	adds	r7, #24
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}
 8010cb8:	240022f0 	.word	0x240022f0
 8010cbc:	240022ec 	.word	0x240022ec

08010cc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b08e      	sub	sp, #56	; 0x38
 8010cc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010cc6:	e0ca      	b.n	8010e5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	da18      	bge.n	8010d00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010cce:	1d3b      	adds	r3, r7, #4
 8010cd0:	3304      	adds	r3, #4
 8010cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d10a      	bne.n	8010cf0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cde:	f383 8811 	msr	BASEPRI, r3
 8010ce2:	f3bf 8f6f 	isb	sy
 8010ce6:	f3bf 8f4f 	dsb	sy
 8010cea:	61fb      	str	r3, [r7, #28]
}
 8010cec:	bf00      	nop
 8010cee:	e7fe      	b.n	8010cee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cf6:	6850      	ldr	r0, [r2, #4]
 8010cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cfa:	6892      	ldr	r2, [r2, #8]
 8010cfc:	4611      	mov	r1, r2
 8010cfe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	f2c0 80aa 	blt.w	8010e5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0e:	695b      	ldr	r3, [r3, #20]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d004      	beq.n	8010d1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d16:	3304      	adds	r3, #4
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7fe f9f5 	bl	800f108 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d1e:	463b      	mov	r3, r7
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7ff ff6b 	bl	8010bfc <prvSampleTimeNow>
 8010d26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2b09      	cmp	r3, #9
 8010d2c:	f200 8097 	bhi.w	8010e5e <prvProcessReceivedCommands+0x19e>
 8010d30:	a201      	add	r2, pc, #4	; (adr r2, 8010d38 <prvProcessReceivedCommands+0x78>)
 8010d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d36:	bf00      	nop
 8010d38:	08010d61 	.word	0x08010d61
 8010d3c:	08010d61 	.word	0x08010d61
 8010d40:	08010d61 	.word	0x08010d61
 8010d44:	08010dd5 	.word	0x08010dd5
 8010d48:	08010de9 	.word	0x08010de9
 8010d4c:	08010e33 	.word	0x08010e33
 8010d50:	08010d61 	.word	0x08010d61
 8010d54:	08010d61 	.word	0x08010d61
 8010d58:	08010dd5 	.word	0x08010dd5
 8010d5c:	08010de9 	.word	0x08010de9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d66:	f043 0301 	orr.w	r3, r3, #1
 8010d6a:	b2da      	uxtb	r2, r3
 8010d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010d72:	68ba      	ldr	r2, [r7, #8]
 8010d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d76:	699b      	ldr	r3, [r3, #24]
 8010d78:	18d1      	adds	r1, r2, r3
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d80:	f7ff ff5c 	bl	8010c3c <prvInsertTimerInActiveList>
 8010d84:	4603      	mov	r3, r0
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d069      	beq.n	8010e5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d8c:	6a1b      	ldr	r3, [r3, #32]
 8010d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d98:	f003 0304 	and.w	r3, r3, #4
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d05e      	beq.n	8010e5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010da0:	68ba      	ldr	r2, [r7, #8]
 8010da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da4:	699b      	ldr	r3, [r3, #24]
 8010da6:	441a      	add	r2, r3
 8010da8:	2300      	movs	r3, #0
 8010daa:	9300      	str	r3, [sp, #0]
 8010dac:	2300      	movs	r3, #0
 8010dae:	2100      	movs	r1, #0
 8010db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010db2:	f7ff fe05 	bl	80109c0 <xTimerGenericCommand>
 8010db6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010db8:	6a3b      	ldr	r3, [r7, #32]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d14f      	bne.n	8010e5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc2:	f383 8811 	msr	BASEPRI, r3
 8010dc6:	f3bf 8f6f 	isb	sy
 8010dca:	f3bf 8f4f 	dsb	sy
 8010dce:	61bb      	str	r3, [r7, #24]
}
 8010dd0:	bf00      	nop
 8010dd2:	e7fe      	b.n	8010dd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dda:	f023 0301 	bic.w	r3, r3, #1
 8010dde:	b2da      	uxtb	r2, r3
 8010de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010de6:	e03a      	b.n	8010e5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dee:	f043 0301 	orr.w	r3, r3, #1
 8010df2:	b2da      	uxtb	r2, r3
 8010df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010dfa:	68ba      	ldr	r2, [r7, #8]
 8010dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dfe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e02:	699b      	ldr	r3, [r3, #24]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d10a      	bne.n	8010e1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0c:	f383 8811 	msr	BASEPRI, r3
 8010e10:	f3bf 8f6f 	isb	sy
 8010e14:	f3bf 8f4f 	dsb	sy
 8010e18:	617b      	str	r3, [r7, #20]
}
 8010e1a:	bf00      	nop
 8010e1c:	e7fe      	b.n	8010e1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e20:	699a      	ldr	r2, [r3, #24]
 8010e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e24:	18d1      	adds	r1, r2, r3
 8010e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e2c:	f7ff ff06 	bl	8010c3c <prvInsertTimerInActiveList>
					break;
 8010e30:	e015      	b.n	8010e5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e38:	f003 0302 	and.w	r3, r3, #2
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d103      	bne.n	8010e48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e42:	f000 fbdd 	bl	8011600 <vPortFree>
 8010e46:	e00a      	b.n	8010e5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e4e:	f023 0301 	bic.w	r3, r3, #1
 8010e52:	b2da      	uxtb	r2, r3
 8010e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010e5a:	e000      	b.n	8010e5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010e5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e5e:	4b08      	ldr	r3, [pc, #32]	; (8010e80 <prvProcessReceivedCommands+0x1c0>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	1d39      	adds	r1, r7, #4
 8010e64:	2200      	movs	r2, #0
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7fe fc16 	bl	800f698 <xQueueReceive>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f47f af2a 	bne.w	8010cc8 <prvProcessReceivedCommands+0x8>
	}
}
 8010e74:	bf00      	nop
 8010e76:	bf00      	nop
 8010e78:	3730      	adds	r7, #48	; 0x30
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}
 8010e7e:	bf00      	nop
 8010e80:	240022f4 	.word	0x240022f4

08010e84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b088      	sub	sp, #32
 8010e88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e8a:	e048      	b.n	8010f1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e8c:	4b2d      	ldr	r3, [pc, #180]	; (8010f44 <prvSwitchTimerLists+0xc0>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	68db      	ldr	r3, [r3, #12]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e96:	4b2b      	ldr	r3, [pc, #172]	; (8010f44 <prvSwitchTimerLists+0xc0>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	68db      	ldr	r3, [r3, #12]
 8010e9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	3304      	adds	r3, #4
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fe f92f 	bl	800f108 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	6a1b      	ldr	r3, [r3, #32]
 8010eae:	68f8      	ldr	r0, [r7, #12]
 8010eb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010eb8:	f003 0304 	and.w	r3, r3, #4
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d02e      	beq.n	8010f1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	699b      	ldr	r3, [r3, #24]
 8010ec4:	693a      	ldr	r2, [r7, #16]
 8010ec6:	4413      	add	r3, r2
 8010ec8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010eca:	68ba      	ldr	r2, [r7, #8]
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d90e      	bls.n	8010ef0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	68ba      	ldr	r2, [r7, #8]
 8010ed6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	68fa      	ldr	r2, [r7, #12]
 8010edc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010ede:	4b19      	ldr	r3, [pc, #100]	; (8010f44 <prvSwitchTimerLists+0xc0>)
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	3304      	adds	r3, #4
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	4610      	mov	r0, r2
 8010eea:	f7fe f8d4 	bl	800f096 <vListInsert>
 8010eee:	e016      	b.n	8010f1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	9300      	str	r3, [sp, #0]
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	693a      	ldr	r2, [r7, #16]
 8010ef8:	2100      	movs	r1, #0
 8010efa:	68f8      	ldr	r0, [r7, #12]
 8010efc:	f7ff fd60 	bl	80109c0 <xTimerGenericCommand>
 8010f00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d10a      	bne.n	8010f1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f0c:	f383 8811 	msr	BASEPRI, r3
 8010f10:	f3bf 8f6f 	isb	sy
 8010f14:	f3bf 8f4f 	dsb	sy
 8010f18:	603b      	str	r3, [r7, #0]
}
 8010f1a:	bf00      	nop
 8010f1c:	e7fe      	b.n	8010f1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010f1e:	4b09      	ldr	r3, [pc, #36]	; (8010f44 <prvSwitchTimerLists+0xc0>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d1b1      	bne.n	8010e8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010f28:	4b06      	ldr	r3, [pc, #24]	; (8010f44 <prvSwitchTimerLists+0xc0>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010f2e:	4b06      	ldr	r3, [pc, #24]	; (8010f48 <prvSwitchTimerLists+0xc4>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	4a04      	ldr	r2, [pc, #16]	; (8010f44 <prvSwitchTimerLists+0xc0>)
 8010f34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010f36:	4a04      	ldr	r2, [pc, #16]	; (8010f48 <prvSwitchTimerLists+0xc4>)
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	6013      	str	r3, [r2, #0]
}
 8010f3c:	bf00      	nop
 8010f3e:	3718      	adds	r7, #24
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	240022ec 	.word	0x240022ec
 8010f48:	240022f0 	.word	0x240022f0

08010f4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010f52:	f000 f967 	bl	8011224 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010f56:	4b15      	ldr	r3, [pc, #84]	; (8010fac <prvCheckForValidListAndQueue+0x60>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d120      	bne.n	8010fa0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010f5e:	4814      	ldr	r0, [pc, #80]	; (8010fb0 <prvCheckForValidListAndQueue+0x64>)
 8010f60:	f7fe f848 	bl	800eff4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010f64:	4813      	ldr	r0, [pc, #76]	; (8010fb4 <prvCheckForValidListAndQueue+0x68>)
 8010f66:	f7fe f845 	bl	800eff4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010f6a:	4b13      	ldr	r3, [pc, #76]	; (8010fb8 <prvCheckForValidListAndQueue+0x6c>)
 8010f6c:	4a10      	ldr	r2, [pc, #64]	; (8010fb0 <prvCheckForValidListAndQueue+0x64>)
 8010f6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010f70:	4b12      	ldr	r3, [pc, #72]	; (8010fbc <prvCheckForValidListAndQueue+0x70>)
 8010f72:	4a10      	ldr	r2, [pc, #64]	; (8010fb4 <prvCheckForValidListAndQueue+0x68>)
 8010f74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010f76:	2300      	movs	r3, #0
 8010f78:	9300      	str	r3, [sp, #0]
 8010f7a:	4b11      	ldr	r3, [pc, #68]	; (8010fc0 <prvCheckForValidListAndQueue+0x74>)
 8010f7c:	4a11      	ldr	r2, [pc, #68]	; (8010fc4 <prvCheckForValidListAndQueue+0x78>)
 8010f7e:	2110      	movs	r1, #16
 8010f80:	200a      	movs	r0, #10
 8010f82:	f7fe f953 	bl	800f22c <xQueueGenericCreateStatic>
 8010f86:	4603      	mov	r3, r0
 8010f88:	4a08      	ldr	r2, [pc, #32]	; (8010fac <prvCheckForValidListAndQueue+0x60>)
 8010f8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010f8c:	4b07      	ldr	r3, [pc, #28]	; (8010fac <prvCheckForValidListAndQueue+0x60>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d005      	beq.n	8010fa0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010f94:	4b05      	ldr	r3, [pc, #20]	; (8010fac <prvCheckForValidListAndQueue+0x60>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	490b      	ldr	r1, [pc, #44]	; (8010fc8 <prvCheckForValidListAndQueue+0x7c>)
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7fe fd6c 	bl	800fa78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010fa0:	f000 f970 	bl	8011284 <vPortExitCritical>
}
 8010fa4:	bf00      	nop
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}
 8010faa:	bf00      	nop
 8010fac:	240022f4 	.word	0x240022f4
 8010fb0:	240022c4 	.word	0x240022c4
 8010fb4:	240022d8 	.word	0x240022d8
 8010fb8:	240022ec 	.word	0x240022ec
 8010fbc:	240022f0 	.word	0x240022f0
 8010fc0:	240023a0 	.word	0x240023a0
 8010fc4:	24002300 	.word	0x24002300
 8010fc8:	08015cc0 	.word	0x08015cc0

08010fcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b085      	sub	sp, #20
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	60b9      	str	r1, [r7, #8]
 8010fd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	3b04      	subs	r3, #4
 8010fdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	3b04      	subs	r3, #4
 8010fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	f023 0201 	bic.w	r2, r3, #1
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	3b04      	subs	r3, #4
 8010ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010ffc:	4a0c      	ldr	r2, [pc, #48]	; (8011030 <pxPortInitialiseStack+0x64>)
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	3b14      	subs	r3, #20
 8011006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011008:	687a      	ldr	r2, [r7, #4]
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	3b04      	subs	r3, #4
 8011012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	f06f 0202 	mvn.w	r2, #2
 801101a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	3b20      	subs	r3, #32
 8011020:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011022:	68fb      	ldr	r3, [r7, #12]
}
 8011024:	4618      	mov	r0, r3
 8011026:	3714      	adds	r7, #20
 8011028:	46bd      	mov	sp, r7
 801102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102e:	4770      	bx	lr
 8011030:	08011035 	.word	0x08011035

08011034 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011034:	b480      	push	{r7}
 8011036:	b085      	sub	sp, #20
 8011038:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801103a:	2300      	movs	r3, #0
 801103c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801103e:	4b12      	ldr	r3, [pc, #72]	; (8011088 <prvTaskExitError+0x54>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011046:	d00a      	beq.n	801105e <prvTaskExitError+0x2a>
	__asm volatile
 8011048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801104c:	f383 8811 	msr	BASEPRI, r3
 8011050:	f3bf 8f6f 	isb	sy
 8011054:	f3bf 8f4f 	dsb	sy
 8011058:	60fb      	str	r3, [r7, #12]
}
 801105a:	bf00      	nop
 801105c:	e7fe      	b.n	801105c <prvTaskExitError+0x28>
	__asm volatile
 801105e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011062:	f383 8811 	msr	BASEPRI, r3
 8011066:	f3bf 8f6f 	isb	sy
 801106a:	f3bf 8f4f 	dsb	sy
 801106e:	60bb      	str	r3, [r7, #8]
}
 8011070:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011072:	bf00      	nop
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d0fc      	beq.n	8011074 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801107a:	bf00      	nop
 801107c:	bf00      	nop
 801107e:	3714      	adds	r7, #20
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr
 8011088:	240007a4 	.word	0x240007a4
 801108c:	00000000 	.word	0x00000000

08011090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011090:	4b07      	ldr	r3, [pc, #28]	; (80110b0 <pxCurrentTCBConst2>)
 8011092:	6819      	ldr	r1, [r3, #0]
 8011094:	6808      	ldr	r0, [r1, #0]
 8011096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801109a:	f380 8809 	msr	PSP, r0
 801109e:	f3bf 8f6f 	isb	sy
 80110a2:	f04f 0000 	mov.w	r0, #0
 80110a6:	f380 8811 	msr	BASEPRI, r0
 80110aa:	4770      	bx	lr
 80110ac:	f3af 8000 	nop.w

080110b0 <pxCurrentTCBConst2>:
 80110b0:	24001dc4 	.word	0x24001dc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80110b4:	bf00      	nop
 80110b6:	bf00      	nop

080110b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80110b8:	4808      	ldr	r0, [pc, #32]	; (80110dc <prvPortStartFirstTask+0x24>)
 80110ba:	6800      	ldr	r0, [r0, #0]
 80110bc:	6800      	ldr	r0, [r0, #0]
 80110be:	f380 8808 	msr	MSP, r0
 80110c2:	f04f 0000 	mov.w	r0, #0
 80110c6:	f380 8814 	msr	CONTROL, r0
 80110ca:	b662      	cpsie	i
 80110cc:	b661      	cpsie	f
 80110ce:	f3bf 8f4f 	dsb	sy
 80110d2:	f3bf 8f6f 	isb	sy
 80110d6:	df00      	svc	0
 80110d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80110da:	bf00      	nop
 80110dc:	e000ed08 	.word	0xe000ed08

080110e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b086      	sub	sp, #24
 80110e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80110e6:	4b46      	ldr	r3, [pc, #280]	; (8011200 <xPortStartScheduler+0x120>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	4a46      	ldr	r2, [pc, #280]	; (8011204 <xPortStartScheduler+0x124>)
 80110ec:	4293      	cmp	r3, r2
 80110ee:	d10a      	bne.n	8011106 <xPortStartScheduler+0x26>
	__asm volatile
 80110f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f4:	f383 8811 	msr	BASEPRI, r3
 80110f8:	f3bf 8f6f 	isb	sy
 80110fc:	f3bf 8f4f 	dsb	sy
 8011100:	613b      	str	r3, [r7, #16]
}
 8011102:	bf00      	nop
 8011104:	e7fe      	b.n	8011104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011106:	4b3e      	ldr	r3, [pc, #248]	; (8011200 <xPortStartScheduler+0x120>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4a3f      	ldr	r2, [pc, #252]	; (8011208 <xPortStartScheduler+0x128>)
 801110c:	4293      	cmp	r3, r2
 801110e:	d10a      	bne.n	8011126 <xPortStartScheduler+0x46>
	__asm volatile
 8011110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011114:	f383 8811 	msr	BASEPRI, r3
 8011118:	f3bf 8f6f 	isb	sy
 801111c:	f3bf 8f4f 	dsb	sy
 8011120:	60fb      	str	r3, [r7, #12]
}
 8011122:	bf00      	nop
 8011124:	e7fe      	b.n	8011124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011126:	4b39      	ldr	r3, [pc, #228]	; (801120c <xPortStartScheduler+0x12c>)
 8011128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	b2db      	uxtb	r3, r3
 8011130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	22ff      	movs	r2, #255	; 0xff
 8011136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	b2db      	uxtb	r3, r3
 801113e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011140:	78fb      	ldrb	r3, [r7, #3]
 8011142:	b2db      	uxtb	r3, r3
 8011144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011148:	b2da      	uxtb	r2, r3
 801114a:	4b31      	ldr	r3, [pc, #196]	; (8011210 <xPortStartScheduler+0x130>)
 801114c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801114e:	4b31      	ldr	r3, [pc, #196]	; (8011214 <xPortStartScheduler+0x134>)
 8011150:	2207      	movs	r2, #7
 8011152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011154:	e009      	b.n	801116a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011156:	4b2f      	ldr	r3, [pc, #188]	; (8011214 <xPortStartScheduler+0x134>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	3b01      	subs	r3, #1
 801115c:	4a2d      	ldr	r2, [pc, #180]	; (8011214 <xPortStartScheduler+0x134>)
 801115e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011160:	78fb      	ldrb	r3, [r7, #3]
 8011162:	b2db      	uxtb	r3, r3
 8011164:	005b      	lsls	r3, r3, #1
 8011166:	b2db      	uxtb	r3, r3
 8011168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801116a:	78fb      	ldrb	r3, [r7, #3]
 801116c:	b2db      	uxtb	r3, r3
 801116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011172:	2b80      	cmp	r3, #128	; 0x80
 8011174:	d0ef      	beq.n	8011156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011176:	4b27      	ldr	r3, [pc, #156]	; (8011214 <xPortStartScheduler+0x134>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f1c3 0307 	rsb	r3, r3, #7
 801117e:	2b04      	cmp	r3, #4
 8011180:	d00a      	beq.n	8011198 <xPortStartScheduler+0xb8>
	__asm volatile
 8011182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011186:	f383 8811 	msr	BASEPRI, r3
 801118a:	f3bf 8f6f 	isb	sy
 801118e:	f3bf 8f4f 	dsb	sy
 8011192:	60bb      	str	r3, [r7, #8]
}
 8011194:	bf00      	nop
 8011196:	e7fe      	b.n	8011196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011198:	4b1e      	ldr	r3, [pc, #120]	; (8011214 <xPortStartScheduler+0x134>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	021b      	lsls	r3, r3, #8
 801119e:	4a1d      	ldr	r2, [pc, #116]	; (8011214 <xPortStartScheduler+0x134>)
 80111a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80111a2:	4b1c      	ldr	r3, [pc, #112]	; (8011214 <xPortStartScheduler+0x134>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80111aa:	4a1a      	ldr	r2, [pc, #104]	; (8011214 <xPortStartScheduler+0x134>)
 80111ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	b2da      	uxtb	r2, r3
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80111b6:	4b18      	ldr	r3, [pc, #96]	; (8011218 <xPortStartScheduler+0x138>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	4a17      	ldr	r2, [pc, #92]	; (8011218 <xPortStartScheduler+0x138>)
 80111bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80111c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80111c2:	4b15      	ldr	r3, [pc, #84]	; (8011218 <xPortStartScheduler+0x138>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	4a14      	ldr	r2, [pc, #80]	; (8011218 <xPortStartScheduler+0x138>)
 80111c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80111cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80111ce:	f000 f8dd 	bl	801138c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80111d2:	4b12      	ldr	r3, [pc, #72]	; (801121c <xPortStartScheduler+0x13c>)
 80111d4:	2200      	movs	r2, #0
 80111d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80111d8:	f000 f8fc 	bl	80113d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80111dc:	4b10      	ldr	r3, [pc, #64]	; (8011220 <xPortStartScheduler+0x140>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	4a0f      	ldr	r2, [pc, #60]	; (8011220 <xPortStartScheduler+0x140>)
 80111e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80111e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80111e8:	f7ff ff66 	bl	80110b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80111ec:	f7ff f854 	bl	8010298 <vTaskSwitchContext>
	prvTaskExitError();
 80111f0:	f7ff ff20 	bl	8011034 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80111f4:	2300      	movs	r3, #0
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3718      	adds	r7, #24
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
 80111fe:	bf00      	nop
 8011200:	e000ed00 	.word	0xe000ed00
 8011204:	410fc271 	.word	0x410fc271
 8011208:	410fc270 	.word	0x410fc270
 801120c:	e000e400 	.word	0xe000e400
 8011210:	240023f0 	.word	0x240023f0
 8011214:	240023f4 	.word	0x240023f4
 8011218:	e000ed20 	.word	0xe000ed20
 801121c:	240007a4 	.word	0x240007a4
 8011220:	e000ef34 	.word	0xe000ef34

08011224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011224:	b480      	push	{r7}
 8011226:	b083      	sub	sp, #12
 8011228:	af00      	add	r7, sp, #0
	__asm volatile
 801122a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801122e:	f383 8811 	msr	BASEPRI, r3
 8011232:	f3bf 8f6f 	isb	sy
 8011236:	f3bf 8f4f 	dsb	sy
 801123a:	607b      	str	r3, [r7, #4]
}
 801123c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801123e:	4b0f      	ldr	r3, [pc, #60]	; (801127c <vPortEnterCritical+0x58>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	3301      	adds	r3, #1
 8011244:	4a0d      	ldr	r2, [pc, #52]	; (801127c <vPortEnterCritical+0x58>)
 8011246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011248:	4b0c      	ldr	r3, [pc, #48]	; (801127c <vPortEnterCritical+0x58>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	2b01      	cmp	r3, #1
 801124e:	d10f      	bne.n	8011270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011250:	4b0b      	ldr	r3, [pc, #44]	; (8011280 <vPortEnterCritical+0x5c>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	b2db      	uxtb	r3, r3
 8011256:	2b00      	cmp	r3, #0
 8011258:	d00a      	beq.n	8011270 <vPortEnterCritical+0x4c>
	__asm volatile
 801125a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801125e:	f383 8811 	msr	BASEPRI, r3
 8011262:	f3bf 8f6f 	isb	sy
 8011266:	f3bf 8f4f 	dsb	sy
 801126a:	603b      	str	r3, [r7, #0]
}
 801126c:	bf00      	nop
 801126e:	e7fe      	b.n	801126e <vPortEnterCritical+0x4a>
	}
}
 8011270:	bf00      	nop
 8011272:	370c      	adds	r7, #12
 8011274:	46bd      	mov	sp, r7
 8011276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127a:	4770      	bx	lr
 801127c:	240007a4 	.word	0x240007a4
 8011280:	e000ed04 	.word	0xe000ed04

08011284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011284:	b480      	push	{r7}
 8011286:	b083      	sub	sp, #12
 8011288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801128a:	4b12      	ldr	r3, [pc, #72]	; (80112d4 <vPortExitCritical+0x50>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d10a      	bne.n	80112a8 <vPortExitCritical+0x24>
	__asm volatile
 8011292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011296:	f383 8811 	msr	BASEPRI, r3
 801129a:	f3bf 8f6f 	isb	sy
 801129e:	f3bf 8f4f 	dsb	sy
 80112a2:	607b      	str	r3, [r7, #4]
}
 80112a4:	bf00      	nop
 80112a6:	e7fe      	b.n	80112a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80112a8:	4b0a      	ldr	r3, [pc, #40]	; (80112d4 <vPortExitCritical+0x50>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	3b01      	subs	r3, #1
 80112ae:	4a09      	ldr	r2, [pc, #36]	; (80112d4 <vPortExitCritical+0x50>)
 80112b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80112b2:	4b08      	ldr	r3, [pc, #32]	; (80112d4 <vPortExitCritical+0x50>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d105      	bne.n	80112c6 <vPortExitCritical+0x42>
 80112ba:	2300      	movs	r3, #0
 80112bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	f383 8811 	msr	BASEPRI, r3
}
 80112c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80112c6:	bf00      	nop
 80112c8:	370c      	adds	r7, #12
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr
 80112d2:	bf00      	nop
 80112d4:	240007a4 	.word	0x240007a4
	...

080112e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80112e0:	f3ef 8009 	mrs	r0, PSP
 80112e4:	f3bf 8f6f 	isb	sy
 80112e8:	4b15      	ldr	r3, [pc, #84]	; (8011340 <pxCurrentTCBConst>)
 80112ea:	681a      	ldr	r2, [r3, #0]
 80112ec:	f01e 0f10 	tst.w	lr, #16
 80112f0:	bf08      	it	eq
 80112f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80112f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112fa:	6010      	str	r0, [r2, #0]
 80112fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011304:	f380 8811 	msr	BASEPRI, r0
 8011308:	f3bf 8f4f 	dsb	sy
 801130c:	f3bf 8f6f 	isb	sy
 8011310:	f7fe ffc2 	bl	8010298 <vTaskSwitchContext>
 8011314:	f04f 0000 	mov.w	r0, #0
 8011318:	f380 8811 	msr	BASEPRI, r0
 801131c:	bc09      	pop	{r0, r3}
 801131e:	6819      	ldr	r1, [r3, #0]
 8011320:	6808      	ldr	r0, [r1, #0]
 8011322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011326:	f01e 0f10 	tst.w	lr, #16
 801132a:	bf08      	it	eq
 801132c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011330:	f380 8809 	msr	PSP, r0
 8011334:	f3bf 8f6f 	isb	sy
 8011338:	4770      	bx	lr
 801133a:	bf00      	nop
 801133c:	f3af 8000 	nop.w

08011340 <pxCurrentTCBConst>:
 8011340:	24001dc4 	.word	0x24001dc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011344:	bf00      	nop
 8011346:	bf00      	nop

08011348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	af00      	add	r7, sp, #0
	__asm volatile
 801134e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011352:	f383 8811 	msr	BASEPRI, r3
 8011356:	f3bf 8f6f 	isb	sy
 801135a:	f3bf 8f4f 	dsb	sy
 801135e:	607b      	str	r3, [r7, #4]
}
 8011360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011362:	f7fe fedf 	bl	8010124 <xTaskIncrementTick>
 8011366:	4603      	mov	r3, r0
 8011368:	2b00      	cmp	r3, #0
 801136a:	d003      	beq.n	8011374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801136c:	4b06      	ldr	r3, [pc, #24]	; (8011388 <xPortSysTickHandler+0x40>)
 801136e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011372:	601a      	str	r2, [r3, #0]
 8011374:	2300      	movs	r3, #0
 8011376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	f383 8811 	msr	BASEPRI, r3
}
 801137e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011380:	bf00      	nop
 8011382:	3708      	adds	r7, #8
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}
 8011388:	e000ed04 	.word	0xe000ed04

0801138c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801138c:	b480      	push	{r7}
 801138e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011390:	4b0b      	ldr	r3, [pc, #44]	; (80113c0 <vPortSetupTimerInterrupt+0x34>)
 8011392:	2200      	movs	r2, #0
 8011394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011396:	4b0b      	ldr	r3, [pc, #44]	; (80113c4 <vPortSetupTimerInterrupt+0x38>)
 8011398:	2200      	movs	r2, #0
 801139a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801139c:	4b0a      	ldr	r3, [pc, #40]	; (80113c8 <vPortSetupTimerInterrupt+0x3c>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	4a0a      	ldr	r2, [pc, #40]	; (80113cc <vPortSetupTimerInterrupt+0x40>)
 80113a2:	fba2 2303 	umull	r2, r3, r2, r3
 80113a6:	099b      	lsrs	r3, r3, #6
 80113a8:	4a09      	ldr	r2, [pc, #36]	; (80113d0 <vPortSetupTimerInterrupt+0x44>)
 80113aa:	3b01      	subs	r3, #1
 80113ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80113ae:	4b04      	ldr	r3, [pc, #16]	; (80113c0 <vPortSetupTimerInterrupt+0x34>)
 80113b0:	2207      	movs	r2, #7
 80113b2:	601a      	str	r2, [r3, #0]
}
 80113b4:	bf00      	nop
 80113b6:	46bd      	mov	sp, r7
 80113b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113bc:	4770      	bx	lr
 80113be:	bf00      	nop
 80113c0:	e000e010 	.word	0xe000e010
 80113c4:	e000e018 	.word	0xe000e018
 80113c8:	24000794 	.word	0x24000794
 80113cc:	10624dd3 	.word	0x10624dd3
 80113d0:	e000e014 	.word	0xe000e014

080113d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80113d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80113e4 <vPortEnableVFP+0x10>
 80113d8:	6801      	ldr	r1, [r0, #0]
 80113da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80113de:	6001      	str	r1, [r0, #0]
 80113e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80113e2:	bf00      	nop
 80113e4:	e000ed88 	.word	0xe000ed88

080113e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80113e8:	b480      	push	{r7}
 80113ea:	b085      	sub	sp, #20
 80113ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80113ee:	f3ef 8305 	mrs	r3, IPSR
 80113f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	2b0f      	cmp	r3, #15
 80113f8:	d914      	bls.n	8011424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80113fa:	4a17      	ldr	r2, [pc, #92]	; (8011458 <vPortValidateInterruptPriority+0x70>)
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	4413      	add	r3, r2
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011404:	4b15      	ldr	r3, [pc, #84]	; (801145c <vPortValidateInterruptPriority+0x74>)
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	7afa      	ldrb	r2, [r7, #11]
 801140a:	429a      	cmp	r2, r3
 801140c:	d20a      	bcs.n	8011424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801140e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011412:	f383 8811 	msr	BASEPRI, r3
 8011416:	f3bf 8f6f 	isb	sy
 801141a:	f3bf 8f4f 	dsb	sy
 801141e:	607b      	str	r3, [r7, #4]
}
 8011420:	bf00      	nop
 8011422:	e7fe      	b.n	8011422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011424:	4b0e      	ldr	r3, [pc, #56]	; (8011460 <vPortValidateInterruptPriority+0x78>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801142c:	4b0d      	ldr	r3, [pc, #52]	; (8011464 <vPortValidateInterruptPriority+0x7c>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	429a      	cmp	r2, r3
 8011432:	d90a      	bls.n	801144a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011438:	f383 8811 	msr	BASEPRI, r3
 801143c:	f3bf 8f6f 	isb	sy
 8011440:	f3bf 8f4f 	dsb	sy
 8011444:	603b      	str	r3, [r7, #0]
}
 8011446:	bf00      	nop
 8011448:	e7fe      	b.n	8011448 <vPortValidateInterruptPriority+0x60>
	}
 801144a:	bf00      	nop
 801144c:	3714      	adds	r7, #20
 801144e:	46bd      	mov	sp, r7
 8011450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011454:	4770      	bx	lr
 8011456:	bf00      	nop
 8011458:	e000e3f0 	.word	0xe000e3f0
 801145c:	240023f0 	.word	0x240023f0
 8011460:	e000ed0c 	.word	0xe000ed0c
 8011464:	240023f4 	.word	0x240023f4

08011468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b08a      	sub	sp, #40	; 0x28
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011470:	2300      	movs	r3, #0
 8011472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011474:	f7fe fd9a 	bl	800ffac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011478:	4b5b      	ldr	r3, [pc, #364]	; (80115e8 <pvPortMalloc+0x180>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d101      	bne.n	8011484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011480:	f000 f920 	bl	80116c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011484:	4b59      	ldr	r3, [pc, #356]	; (80115ec <pvPortMalloc+0x184>)
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	4013      	ands	r3, r2
 801148c:	2b00      	cmp	r3, #0
 801148e:	f040 8093 	bne.w	80115b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d01d      	beq.n	80114d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011498:	2208      	movs	r2, #8
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	4413      	add	r3, r2
 801149e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f003 0307 	and.w	r3, r3, #7
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d014      	beq.n	80114d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f023 0307 	bic.w	r3, r3, #7
 80114b0:	3308      	adds	r3, #8
 80114b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f003 0307 	and.w	r3, r3, #7
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d00a      	beq.n	80114d4 <pvPortMalloc+0x6c>
	__asm volatile
 80114be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c2:	f383 8811 	msr	BASEPRI, r3
 80114c6:	f3bf 8f6f 	isb	sy
 80114ca:	f3bf 8f4f 	dsb	sy
 80114ce:	617b      	str	r3, [r7, #20]
}
 80114d0:	bf00      	nop
 80114d2:	e7fe      	b.n	80114d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d06e      	beq.n	80115b8 <pvPortMalloc+0x150>
 80114da:	4b45      	ldr	r3, [pc, #276]	; (80115f0 <pvPortMalloc+0x188>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d869      	bhi.n	80115b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80114e4:	4b43      	ldr	r3, [pc, #268]	; (80115f4 <pvPortMalloc+0x18c>)
 80114e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80114e8:	4b42      	ldr	r3, [pc, #264]	; (80115f4 <pvPortMalloc+0x18c>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80114ee:	e004      	b.n	80114fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80114f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80114f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80114fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	429a      	cmp	r2, r3
 8011502:	d903      	bls.n	801150c <pvPortMalloc+0xa4>
 8011504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d1f1      	bne.n	80114f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801150c:	4b36      	ldr	r3, [pc, #216]	; (80115e8 <pvPortMalloc+0x180>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011512:	429a      	cmp	r2, r3
 8011514:	d050      	beq.n	80115b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011516:	6a3b      	ldr	r3, [r7, #32]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	2208      	movs	r2, #8
 801151c:	4413      	add	r3, r2
 801151e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011522:	681a      	ldr	r2, [r3, #0]
 8011524:	6a3b      	ldr	r3, [r7, #32]
 8011526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152a:	685a      	ldr	r2, [r3, #4]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	1ad2      	subs	r2, r2, r3
 8011530:	2308      	movs	r3, #8
 8011532:	005b      	lsls	r3, r3, #1
 8011534:	429a      	cmp	r2, r3
 8011536:	d91f      	bls.n	8011578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	4413      	add	r3, r2
 801153e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011540:	69bb      	ldr	r3, [r7, #24]
 8011542:	f003 0307 	and.w	r3, r3, #7
 8011546:	2b00      	cmp	r3, #0
 8011548:	d00a      	beq.n	8011560 <pvPortMalloc+0xf8>
	__asm volatile
 801154a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801154e:	f383 8811 	msr	BASEPRI, r3
 8011552:	f3bf 8f6f 	isb	sy
 8011556:	f3bf 8f4f 	dsb	sy
 801155a:	613b      	str	r3, [r7, #16]
}
 801155c:	bf00      	nop
 801155e:	e7fe      	b.n	801155e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011562:	685a      	ldr	r2, [r3, #4]
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	1ad2      	subs	r2, r2, r3
 8011568:	69bb      	ldr	r3, [r7, #24]
 801156a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156e:	687a      	ldr	r2, [r7, #4]
 8011570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011572:	69b8      	ldr	r0, [r7, #24]
 8011574:	f000 f908 	bl	8011788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011578:	4b1d      	ldr	r3, [pc, #116]	; (80115f0 <pvPortMalloc+0x188>)
 801157a:	681a      	ldr	r2, [r3, #0]
 801157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	1ad3      	subs	r3, r2, r3
 8011582:	4a1b      	ldr	r2, [pc, #108]	; (80115f0 <pvPortMalloc+0x188>)
 8011584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011586:	4b1a      	ldr	r3, [pc, #104]	; (80115f0 <pvPortMalloc+0x188>)
 8011588:	681a      	ldr	r2, [r3, #0]
 801158a:	4b1b      	ldr	r3, [pc, #108]	; (80115f8 <pvPortMalloc+0x190>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	429a      	cmp	r2, r3
 8011590:	d203      	bcs.n	801159a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011592:	4b17      	ldr	r3, [pc, #92]	; (80115f0 <pvPortMalloc+0x188>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	4a18      	ldr	r2, [pc, #96]	; (80115f8 <pvPortMalloc+0x190>)
 8011598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159c:	685a      	ldr	r2, [r3, #4]
 801159e:	4b13      	ldr	r3, [pc, #76]	; (80115ec <pvPortMalloc+0x184>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	431a      	orrs	r2, r3
 80115a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80115a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115aa:	2200      	movs	r2, #0
 80115ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80115ae:	4b13      	ldr	r3, [pc, #76]	; (80115fc <pvPortMalloc+0x194>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	3301      	adds	r3, #1
 80115b4:	4a11      	ldr	r2, [pc, #68]	; (80115fc <pvPortMalloc+0x194>)
 80115b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80115b8:	f7fe fd06 	bl	800ffc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	f003 0307 	and.w	r3, r3, #7
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d00a      	beq.n	80115dc <pvPortMalloc+0x174>
	__asm volatile
 80115c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ca:	f383 8811 	msr	BASEPRI, r3
 80115ce:	f3bf 8f6f 	isb	sy
 80115d2:	f3bf 8f4f 	dsb	sy
 80115d6:	60fb      	str	r3, [r7, #12]
}
 80115d8:	bf00      	nop
 80115da:	e7fe      	b.n	80115da <pvPortMalloc+0x172>
	return pvReturn;
 80115dc:	69fb      	ldr	r3, [r7, #28]
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3728      	adds	r7, #40	; 0x28
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}
 80115e6:	bf00      	nop
 80115e8:	24006000 	.word	0x24006000
 80115ec:	24006014 	.word	0x24006014
 80115f0:	24006004 	.word	0x24006004
 80115f4:	24005ff8 	.word	0x24005ff8
 80115f8:	24006008 	.word	0x24006008
 80115fc:	2400600c 	.word	0x2400600c

08011600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b086      	sub	sp, #24
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d04d      	beq.n	80116ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011612:	2308      	movs	r3, #8
 8011614:	425b      	negs	r3, r3
 8011616:	697a      	ldr	r2, [r7, #20]
 8011618:	4413      	add	r3, r2
 801161a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	685a      	ldr	r2, [r3, #4]
 8011624:	4b24      	ldr	r3, [pc, #144]	; (80116b8 <vPortFree+0xb8>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4013      	ands	r3, r2
 801162a:	2b00      	cmp	r3, #0
 801162c:	d10a      	bne.n	8011644 <vPortFree+0x44>
	__asm volatile
 801162e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011632:	f383 8811 	msr	BASEPRI, r3
 8011636:	f3bf 8f6f 	isb	sy
 801163a:	f3bf 8f4f 	dsb	sy
 801163e:	60fb      	str	r3, [r7, #12]
}
 8011640:	bf00      	nop
 8011642:	e7fe      	b.n	8011642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d00a      	beq.n	8011662 <vPortFree+0x62>
	__asm volatile
 801164c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011650:	f383 8811 	msr	BASEPRI, r3
 8011654:	f3bf 8f6f 	isb	sy
 8011658:	f3bf 8f4f 	dsb	sy
 801165c:	60bb      	str	r3, [r7, #8]
}
 801165e:	bf00      	nop
 8011660:	e7fe      	b.n	8011660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011662:	693b      	ldr	r3, [r7, #16]
 8011664:	685a      	ldr	r2, [r3, #4]
 8011666:	4b14      	ldr	r3, [pc, #80]	; (80116b8 <vPortFree+0xb8>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	4013      	ands	r3, r2
 801166c:	2b00      	cmp	r3, #0
 801166e:	d01e      	beq.n	80116ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d11a      	bne.n	80116ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	685a      	ldr	r2, [r3, #4]
 801167c:	4b0e      	ldr	r3, [pc, #56]	; (80116b8 <vPortFree+0xb8>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	43db      	mvns	r3, r3
 8011682:	401a      	ands	r2, r3
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011688:	f7fe fc90 	bl	800ffac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	685a      	ldr	r2, [r3, #4]
 8011690:	4b0a      	ldr	r3, [pc, #40]	; (80116bc <vPortFree+0xbc>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	4413      	add	r3, r2
 8011696:	4a09      	ldr	r2, [pc, #36]	; (80116bc <vPortFree+0xbc>)
 8011698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801169a:	6938      	ldr	r0, [r7, #16]
 801169c:	f000 f874 	bl	8011788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80116a0:	4b07      	ldr	r3, [pc, #28]	; (80116c0 <vPortFree+0xc0>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	3301      	adds	r3, #1
 80116a6:	4a06      	ldr	r2, [pc, #24]	; (80116c0 <vPortFree+0xc0>)
 80116a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80116aa:	f7fe fc8d 	bl	800ffc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80116ae:	bf00      	nop
 80116b0:	3718      	adds	r7, #24
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	24006014 	.word	0x24006014
 80116bc:	24006004 	.word	0x24006004
 80116c0:	24006010 	.word	0x24006010

080116c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80116c4:	b480      	push	{r7}
 80116c6:	b085      	sub	sp, #20
 80116c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80116ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80116ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80116d0:	4b27      	ldr	r3, [pc, #156]	; (8011770 <prvHeapInit+0xac>)
 80116d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	f003 0307 	and.w	r3, r3, #7
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d00c      	beq.n	80116f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	3307      	adds	r3, #7
 80116e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f023 0307 	bic.w	r3, r3, #7
 80116ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80116ec:	68ba      	ldr	r2, [r7, #8]
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	1ad3      	subs	r3, r2, r3
 80116f2:	4a1f      	ldr	r2, [pc, #124]	; (8011770 <prvHeapInit+0xac>)
 80116f4:	4413      	add	r3, r2
 80116f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80116fc:	4a1d      	ldr	r2, [pc, #116]	; (8011774 <prvHeapInit+0xb0>)
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011702:	4b1c      	ldr	r3, [pc, #112]	; (8011774 <prvHeapInit+0xb0>)
 8011704:	2200      	movs	r2, #0
 8011706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	68ba      	ldr	r2, [r7, #8]
 801170c:	4413      	add	r3, r2
 801170e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011710:	2208      	movs	r2, #8
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	1a9b      	subs	r3, r3, r2
 8011716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	f023 0307 	bic.w	r3, r3, #7
 801171e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	4a15      	ldr	r2, [pc, #84]	; (8011778 <prvHeapInit+0xb4>)
 8011724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011726:	4b14      	ldr	r3, [pc, #80]	; (8011778 <prvHeapInit+0xb4>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	2200      	movs	r2, #0
 801172c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801172e:	4b12      	ldr	r3, [pc, #72]	; (8011778 <prvHeapInit+0xb4>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	2200      	movs	r2, #0
 8011734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	68fa      	ldr	r2, [r7, #12]
 801173e:	1ad2      	subs	r2, r2, r3
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011744:	4b0c      	ldr	r3, [pc, #48]	; (8011778 <prvHeapInit+0xb4>)
 8011746:	681a      	ldr	r2, [r3, #0]
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	685b      	ldr	r3, [r3, #4]
 8011750:	4a0a      	ldr	r2, [pc, #40]	; (801177c <prvHeapInit+0xb8>)
 8011752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	4a09      	ldr	r2, [pc, #36]	; (8011780 <prvHeapInit+0xbc>)
 801175a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801175c:	4b09      	ldr	r3, [pc, #36]	; (8011784 <prvHeapInit+0xc0>)
 801175e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011762:	601a      	str	r2, [r3, #0]
}
 8011764:	bf00      	nop
 8011766:	3714      	adds	r7, #20
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr
 8011770:	240023f8 	.word	0x240023f8
 8011774:	24005ff8 	.word	0x24005ff8
 8011778:	24006000 	.word	0x24006000
 801177c:	24006008 	.word	0x24006008
 8011780:	24006004 	.word	0x24006004
 8011784:	24006014 	.word	0x24006014

08011788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011788:	b480      	push	{r7}
 801178a:	b085      	sub	sp, #20
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011790:	4b28      	ldr	r3, [pc, #160]	; (8011834 <prvInsertBlockIntoFreeList+0xac>)
 8011792:	60fb      	str	r3, [r7, #12]
 8011794:	e002      	b.n	801179c <prvInsertBlockIntoFreeList+0x14>
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	60fb      	str	r3, [r7, #12]
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	687a      	ldr	r2, [r7, #4]
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d8f7      	bhi.n	8011796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	685b      	ldr	r3, [r3, #4]
 80117ae:	68ba      	ldr	r2, [r7, #8]
 80117b0:	4413      	add	r3, r2
 80117b2:	687a      	ldr	r2, [r7, #4]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d108      	bne.n	80117ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	685a      	ldr	r2, [r3, #4]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	441a      	add	r2, r3
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	68ba      	ldr	r2, [r7, #8]
 80117d4:	441a      	add	r2, r3
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	429a      	cmp	r2, r3
 80117dc:	d118      	bne.n	8011810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	681a      	ldr	r2, [r3, #0]
 80117e2:	4b15      	ldr	r3, [pc, #84]	; (8011838 <prvInsertBlockIntoFreeList+0xb0>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	429a      	cmp	r2, r3
 80117e8:	d00d      	beq.n	8011806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	685a      	ldr	r2, [r3, #4]
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	441a      	add	r2, r3
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	681a      	ldr	r2, [r3, #0]
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	601a      	str	r2, [r3, #0]
 8011804:	e008      	b.n	8011818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011806:	4b0c      	ldr	r3, [pc, #48]	; (8011838 <prvInsertBlockIntoFreeList+0xb0>)
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	601a      	str	r2, [r3, #0]
 801180e:	e003      	b.n	8011818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011818:	68fa      	ldr	r2, [r7, #12]
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	429a      	cmp	r2, r3
 801181e:	d002      	beq.n	8011826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	687a      	ldr	r2, [r7, #4]
 8011824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011826:	bf00      	nop
 8011828:	3714      	adds	r7, #20
 801182a:	46bd      	mov	sp, r7
 801182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011830:	4770      	bx	lr
 8011832:	bf00      	nop
 8011834:	24005ff8 	.word	0x24005ff8
 8011838:	24006000 	.word	0x24006000

0801183c <atof>:
 801183c:	2100      	movs	r1, #0
 801183e:	f001 baad 	b.w	8012d9c <strtod>

08011842 <atoi>:
 8011842:	220a      	movs	r2, #10
 8011844:	2100      	movs	r1, #0
 8011846:	f001 bb37 	b.w	8012eb8 <strtol>
	...

0801184c <__errno>:
 801184c:	4b01      	ldr	r3, [pc, #4]	; (8011854 <__errno+0x8>)
 801184e:	6818      	ldr	r0, [r3, #0]
 8011850:	4770      	bx	lr
 8011852:	bf00      	nop
 8011854:	240007a8 	.word	0x240007a8

08011858 <__libc_init_array>:
 8011858:	b570      	push	{r4, r5, r6, lr}
 801185a:	4d0d      	ldr	r5, [pc, #52]	; (8011890 <__libc_init_array+0x38>)
 801185c:	4c0d      	ldr	r4, [pc, #52]	; (8011894 <__libc_init_array+0x3c>)
 801185e:	1b64      	subs	r4, r4, r5
 8011860:	10a4      	asrs	r4, r4, #2
 8011862:	2600      	movs	r6, #0
 8011864:	42a6      	cmp	r6, r4
 8011866:	d109      	bne.n	801187c <__libc_init_array+0x24>
 8011868:	4d0b      	ldr	r5, [pc, #44]	; (8011898 <__libc_init_array+0x40>)
 801186a:	4c0c      	ldr	r4, [pc, #48]	; (801189c <__libc_init_array+0x44>)
 801186c:	f004 f9c0 	bl	8015bf0 <_init>
 8011870:	1b64      	subs	r4, r4, r5
 8011872:	10a4      	asrs	r4, r4, #2
 8011874:	2600      	movs	r6, #0
 8011876:	42a6      	cmp	r6, r4
 8011878:	d105      	bne.n	8011886 <__libc_init_array+0x2e>
 801187a:	bd70      	pop	{r4, r5, r6, pc}
 801187c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011880:	4798      	blx	r3
 8011882:	3601      	adds	r6, #1
 8011884:	e7ee      	b.n	8011864 <__libc_init_array+0xc>
 8011886:	f855 3b04 	ldr.w	r3, [r5], #4
 801188a:	4798      	blx	r3
 801188c:	3601      	adds	r6, #1
 801188e:	e7f2      	b.n	8011876 <__libc_init_array+0x1e>
 8011890:	080161d4 	.word	0x080161d4
 8011894:	080161d4 	.word	0x080161d4
 8011898:	080161d4 	.word	0x080161d4
 801189c:	080161d8 	.word	0x080161d8

080118a0 <memcpy>:
 80118a0:	440a      	add	r2, r1
 80118a2:	4291      	cmp	r1, r2
 80118a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80118a8:	d100      	bne.n	80118ac <memcpy+0xc>
 80118aa:	4770      	bx	lr
 80118ac:	b510      	push	{r4, lr}
 80118ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118b6:	4291      	cmp	r1, r2
 80118b8:	d1f9      	bne.n	80118ae <memcpy+0xe>
 80118ba:	bd10      	pop	{r4, pc}

080118bc <memset>:
 80118bc:	4402      	add	r2, r0
 80118be:	4603      	mov	r3, r0
 80118c0:	4293      	cmp	r3, r2
 80118c2:	d100      	bne.n	80118c6 <memset+0xa>
 80118c4:	4770      	bx	lr
 80118c6:	f803 1b01 	strb.w	r1, [r3], #1
 80118ca:	e7f9      	b.n	80118c0 <memset+0x4>

080118cc <__cvt>:
 80118cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118ce:	ed2d 8b02 	vpush	{d8}
 80118d2:	eeb0 8b40 	vmov.f64	d8, d0
 80118d6:	b085      	sub	sp, #20
 80118d8:	4617      	mov	r7, r2
 80118da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80118dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80118de:	ee18 2a90 	vmov	r2, s17
 80118e2:	f025 0520 	bic.w	r5, r5, #32
 80118e6:	2a00      	cmp	r2, #0
 80118e8:	bfb6      	itet	lt
 80118ea:	222d      	movlt	r2, #45	; 0x2d
 80118ec:	2200      	movge	r2, #0
 80118ee:	eeb1 8b40 	vneglt.f64	d8, d0
 80118f2:	2d46      	cmp	r5, #70	; 0x46
 80118f4:	460c      	mov	r4, r1
 80118f6:	701a      	strb	r2, [r3, #0]
 80118f8:	d004      	beq.n	8011904 <__cvt+0x38>
 80118fa:	2d45      	cmp	r5, #69	; 0x45
 80118fc:	d100      	bne.n	8011900 <__cvt+0x34>
 80118fe:	3401      	adds	r4, #1
 8011900:	2102      	movs	r1, #2
 8011902:	e000      	b.n	8011906 <__cvt+0x3a>
 8011904:	2103      	movs	r1, #3
 8011906:	ab03      	add	r3, sp, #12
 8011908:	9301      	str	r3, [sp, #4]
 801190a:	ab02      	add	r3, sp, #8
 801190c:	9300      	str	r3, [sp, #0]
 801190e:	4622      	mov	r2, r4
 8011910:	4633      	mov	r3, r6
 8011912:	eeb0 0b48 	vmov.f64	d0, d8
 8011916:	f001 fb67 	bl	8012fe8 <_dtoa_r>
 801191a:	2d47      	cmp	r5, #71	; 0x47
 801191c:	d101      	bne.n	8011922 <__cvt+0x56>
 801191e:	07fb      	lsls	r3, r7, #31
 8011920:	d51a      	bpl.n	8011958 <__cvt+0x8c>
 8011922:	2d46      	cmp	r5, #70	; 0x46
 8011924:	eb00 0204 	add.w	r2, r0, r4
 8011928:	d10c      	bne.n	8011944 <__cvt+0x78>
 801192a:	7803      	ldrb	r3, [r0, #0]
 801192c:	2b30      	cmp	r3, #48	; 0x30
 801192e:	d107      	bne.n	8011940 <__cvt+0x74>
 8011930:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011938:	bf1c      	itt	ne
 801193a:	f1c4 0401 	rsbne	r4, r4, #1
 801193e:	6034      	strne	r4, [r6, #0]
 8011940:	6833      	ldr	r3, [r6, #0]
 8011942:	441a      	add	r2, r3
 8011944:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801194c:	bf08      	it	eq
 801194e:	9203      	streq	r2, [sp, #12]
 8011950:	2130      	movs	r1, #48	; 0x30
 8011952:	9b03      	ldr	r3, [sp, #12]
 8011954:	4293      	cmp	r3, r2
 8011956:	d307      	bcc.n	8011968 <__cvt+0x9c>
 8011958:	9b03      	ldr	r3, [sp, #12]
 801195a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801195c:	1a1b      	subs	r3, r3, r0
 801195e:	6013      	str	r3, [r2, #0]
 8011960:	b005      	add	sp, #20
 8011962:	ecbd 8b02 	vpop	{d8}
 8011966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011968:	1c5c      	adds	r4, r3, #1
 801196a:	9403      	str	r4, [sp, #12]
 801196c:	7019      	strb	r1, [r3, #0]
 801196e:	e7f0      	b.n	8011952 <__cvt+0x86>

08011970 <__exponent>:
 8011970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011972:	4603      	mov	r3, r0
 8011974:	2900      	cmp	r1, #0
 8011976:	bfb8      	it	lt
 8011978:	4249      	neglt	r1, r1
 801197a:	f803 2b02 	strb.w	r2, [r3], #2
 801197e:	bfb4      	ite	lt
 8011980:	222d      	movlt	r2, #45	; 0x2d
 8011982:	222b      	movge	r2, #43	; 0x2b
 8011984:	2909      	cmp	r1, #9
 8011986:	7042      	strb	r2, [r0, #1]
 8011988:	dd2a      	ble.n	80119e0 <__exponent+0x70>
 801198a:	f10d 0407 	add.w	r4, sp, #7
 801198e:	46a4      	mov	ip, r4
 8011990:	270a      	movs	r7, #10
 8011992:	46a6      	mov	lr, r4
 8011994:	460a      	mov	r2, r1
 8011996:	fb91 f6f7 	sdiv	r6, r1, r7
 801199a:	fb07 1516 	mls	r5, r7, r6, r1
 801199e:	3530      	adds	r5, #48	; 0x30
 80119a0:	2a63      	cmp	r2, #99	; 0x63
 80119a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80119a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80119aa:	4631      	mov	r1, r6
 80119ac:	dcf1      	bgt.n	8011992 <__exponent+0x22>
 80119ae:	3130      	adds	r1, #48	; 0x30
 80119b0:	f1ae 0502 	sub.w	r5, lr, #2
 80119b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80119b8:	1c44      	adds	r4, r0, #1
 80119ba:	4629      	mov	r1, r5
 80119bc:	4561      	cmp	r1, ip
 80119be:	d30a      	bcc.n	80119d6 <__exponent+0x66>
 80119c0:	f10d 0209 	add.w	r2, sp, #9
 80119c4:	eba2 020e 	sub.w	r2, r2, lr
 80119c8:	4565      	cmp	r5, ip
 80119ca:	bf88      	it	hi
 80119cc:	2200      	movhi	r2, #0
 80119ce:	4413      	add	r3, r2
 80119d0:	1a18      	subs	r0, r3, r0
 80119d2:	b003      	add	sp, #12
 80119d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80119de:	e7ed      	b.n	80119bc <__exponent+0x4c>
 80119e0:	2330      	movs	r3, #48	; 0x30
 80119e2:	3130      	adds	r1, #48	; 0x30
 80119e4:	7083      	strb	r3, [r0, #2]
 80119e6:	70c1      	strb	r1, [r0, #3]
 80119e8:	1d03      	adds	r3, r0, #4
 80119ea:	e7f1      	b.n	80119d0 <__exponent+0x60>
 80119ec:	0000      	movs	r0, r0
	...

080119f0 <_printf_float>:
 80119f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f4:	b08b      	sub	sp, #44	; 0x2c
 80119f6:	460c      	mov	r4, r1
 80119f8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80119fc:	4616      	mov	r6, r2
 80119fe:	461f      	mov	r7, r3
 8011a00:	4605      	mov	r5, r0
 8011a02:	f002 fbcf 	bl	80141a4 <_localeconv_r>
 8011a06:	f8d0 b000 	ldr.w	fp, [r0]
 8011a0a:	4658      	mov	r0, fp
 8011a0c:	f7ee fc70 	bl	80002f0 <strlen>
 8011a10:	2300      	movs	r3, #0
 8011a12:	9308      	str	r3, [sp, #32]
 8011a14:	f8d8 3000 	ldr.w	r3, [r8]
 8011a18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011a1c:	6822      	ldr	r2, [r4, #0]
 8011a1e:	3307      	adds	r3, #7
 8011a20:	f023 0307 	bic.w	r3, r3, #7
 8011a24:	f103 0108 	add.w	r1, r3, #8
 8011a28:	f8c8 1000 	str.w	r1, [r8]
 8011a2c:	4682      	mov	sl, r0
 8011a2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011a32:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011a36:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011c98 <_printf_float+0x2a8>
 8011a3a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011a3e:	eeb0 6bc0 	vabs.f64	d6, d0
 8011a42:	eeb4 6b47 	vcmp.f64	d6, d7
 8011a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a4a:	dd24      	ble.n	8011a96 <_printf_float+0xa6>
 8011a4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a54:	d502      	bpl.n	8011a5c <_printf_float+0x6c>
 8011a56:	232d      	movs	r3, #45	; 0x2d
 8011a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a5c:	4b90      	ldr	r3, [pc, #576]	; (8011ca0 <_printf_float+0x2b0>)
 8011a5e:	4891      	ldr	r0, [pc, #580]	; (8011ca4 <_printf_float+0x2b4>)
 8011a60:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011a64:	bf94      	ite	ls
 8011a66:	4698      	movls	r8, r3
 8011a68:	4680      	movhi	r8, r0
 8011a6a:	2303      	movs	r3, #3
 8011a6c:	6123      	str	r3, [r4, #16]
 8011a6e:	f022 0204 	bic.w	r2, r2, #4
 8011a72:	2300      	movs	r3, #0
 8011a74:	6022      	str	r2, [r4, #0]
 8011a76:	9304      	str	r3, [sp, #16]
 8011a78:	9700      	str	r7, [sp, #0]
 8011a7a:	4633      	mov	r3, r6
 8011a7c:	aa09      	add	r2, sp, #36	; 0x24
 8011a7e:	4621      	mov	r1, r4
 8011a80:	4628      	mov	r0, r5
 8011a82:	f000 f9d3 	bl	8011e2c <_printf_common>
 8011a86:	3001      	adds	r0, #1
 8011a88:	f040 808a 	bne.w	8011ba0 <_printf_float+0x1b0>
 8011a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a90:	b00b      	add	sp, #44	; 0x2c
 8011a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a96:	eeb4 0b40 	vcmp.f64	d0, d0
 8011a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9e:	d709      	bvc.n	8011ab4 <_printf_float+0xc4>
 8011aa0:	ee10 3a90 	vmov	r3, s1
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	bfbc      	itt	lt
 8011aa8:	232d      	movlt	r3, #45	; 0x2d
 8011aaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011aae:	487e      	ldr	r0, [pc, #504]	; (8011ca8 <_printf_float+0x2b8>)
 8011ab0:	4b7e      	ldr	r3, [pc, #504]	; (8011cac <_printf_float+0x2bc>)
 8011ab2:	e7d5      	b.n	8011a60 <_printf_float+0x70>
 8011ab4:	6863      	ldr	r3, [r4, #4]
 8011ab6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011aba:	9104      	str	r1, [sp, #16]
 8011abc:	1c59      	adds	r1, r3, #1
 8011abe:	d13c      	bne.n	8011b3a <_printf_float+0x14a>
 8011ac0:	2306      	movs	r3, #6
 8011ac2:	6063      	str	r3, [r4, #4]
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	9303      	str	r3, [sp, #12]
 8011ac8:	ab08      	add	r3, sp, #32
 8011aca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011ace:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011ad2:	ab07      	add	r3, sp, #28
 8011ad4:	6861      	ldr	r1, [r4, #4]
 8011ad6:	9300      	str	r3, [sp, #0]
 8011ad8:	6022      	str	r2, [r4, #0]
 8011ada:	f10d 031b 	add.w	r3, sp, #27
 8011ade:	4628      	mov	r0, r5
 8011ae0:	f7ff fef4 	bl	80118cc <__cvt>
 8011ae4:	9b04      	ldr	r3, [sp, #16]
 8011ae6:	9907      	ldr	r1, [sp, #28]
 8011ae8:	2b47      	cmp	r3, #71	; 0x47
 8011aea:	4680      	mov	r8, r0
 8011aec:	d108      	bne.n	8011b00 <_printf_float+0x110>
 8011aee:	1cc8      	adds	r0, r1, #3
 8011af0:	db02      	blt.n	8011af8 <_printf_float+0x108>
 8011af2:	6863      	ldr	r3, [r4, #4]
 8011af4:	4299      	cmp	r1, r3
 8011af6:	dd41      	ble.n	8011b7c <_printf_float+0x18c>
 8011af8:	f1a9 0902 	sub.w	r9, r9, #2
 8011afc:	fa5f f989 	uxtb.w	r9, r9
 8011b00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011b04:	d820      	bhi.n	8011b48 <_printf_float+0x158>
 8011b06:	3901      	subs	r1, #1
 8011b08:	464a      	mov	r2, r9
 8011b0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011b0e:	9107      	str	r1, [sp, #28]
 8011b10:	f7ff ff2e 	bl	8011970 <__exponent>
 8011b14:	9a08      	ldr	r2, [sp, #32]
 8011b16:	9004      	str	r0, [sp, #16]
 8011b18:	1813      	adds	r3, r2, r0
 8011b1a:	2a01      	cmp	r2, #1
 8011b1c:	6123      	str	r3, [r4, #16]
 8011b1e:	dc02      	bgt.n	8011b26 <_printf_float+0x136>
 8011b20:	6822      	ldr	r2, [r4, #0]
 8011b22:	07d2      	lsls	r2, r2, #31
 8011b24:	d501      	bpl.n	8011b2a <_printf_float+0x13a>
 8011b26:	3301      	adds	r3, #1
 8011b28:	6123      	str	r3, [r4, #16]
 8011b2a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d0a2      	beq.n	8011a78 <_printf_float+0x88>
 8011b32:	232d      	movs	r3, #45	; 0x2d
 8011b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b38:	e79e      	b.n	8011a78 <_printf_float+0x88>
 8011b3a:	9904      	ldr	r1, [sp, #16]
 8011b3c:	2947      	cmp	r1, #71	; 0x47
 8011b3e:	d1c1      	bne.n	8011ac4 <_printf_float+0xd4>
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d1bf      	bne.n	8011ac4 <_printf_float+0xd4>
 8011b44:	2301      	movs	r3, #1
 8011b46:	e7bc      	b.n	8011ac2 <_printf_float+0xd2>
 8011b48:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011b4c:	d118      	bne.n	8011b80 <_printf_float+0x190>
 8011b4e:	2900      	cmp	r1, #0
 8011b50:	6863      	ldr	r3, [r4, #4]
 8011b52:	dd0b      	ble.n	8011b6c <_printf_float+0x17c>
 8011b54:	6121      	str	r1, [r4, #16]
 8011b56:	b913      	cbnz	r3, 8011b5e <_printf_float+0x16e>
 8011b58:	6822      	ldr	r2, [r4, #0]
 8011b5a:	07d0      	lsls	r0, r2, #31
 8011b5c:	d502      	bpl.n	8011b64 <_printf_float+0x174>
 8011b5e:	3301      	adds	r3, #1
 8011b60:	440b      	add	r3, r1
 8011b62:	6123      	str	r3, [r4, #16]
 8011b64:	2300      	movs	r3, #0
 8011b66:	65a1      	str	r1, [r4, #88]	; 0x58
 8011b68:	9304      	str	r3, [sp, #16]
 8011b6a:	e7de      	b.n	8011b2a <_printf_float+0x13a>
 8011b6c:	b913      	cbnz	r3, 8011b74 <_printf_float+0x184>
 8011b6e:	6822      	ldr	r2, [r4, #0]
 8011b70:	07d2      	lsls	r2, r2, #31
 8011b72:	d501      	bpl.n	8011b78 <_printf_float+0x188>
 8011b74:	3302      	adds	r3, #2
 8011b76:	e7f4      	b.n	8011b62 <_printf_float+0x172>
 8011b78:	2301      	movs	r3, #1
 8011b7a:	e7f2      	b.n	8011b62 <_printf_float+0x172>
 8011b7c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011b80:	9b08      	ldr	r3, [sp, #32]
 8011b82:	4299      	cmp	r1, r3
 8011b84:	db05      	blt.n	8011b92 <_printf_float+0x1a2>
 8011b86:	6823      	ldr	r3, [r4, #0]
 8011b88:	6121      	str	r1, [r4, #16]
 8011b8a:	07d8      	lsls	r0, r3, #31
 8011b8c:	d5ea      	bpl.n	8011b64 <_printf_float+0x174>
 8011b8e:	1c4b      	adds	r3, r1, #1
 8011b90:	e7e7      	b.n	8011b62 <_printf_float+0x172>
 8011b92:	2900      	cmp	r1, #0
 8011b94:	bfd4      	ite	le
 8011b96:	f1c1 0202 	rsble	r2, r1, #2
 8011b9a:	2201      	movgt	r2, #1
 8011b9c:	4413      	add	r3, r2
 8011b9e:	e7e0      	b.n	8011b62 <_printf_float+0x172>
 8011ba0:	6823      	ldr	r3, [r4, #0]
 8011ba2:	055a      	lsls	r2, r3, #21
 8011ba4:	d407      	bmi.n	8011bb6 <_printf_float+0x1c6>
 8011ba6:	6923      	ldr	r3, [r4, #16]
 8011ba8:	4642      	mov	r2, r8
 8011baa:	4631      	mov	r1, r6
 8011bac:	4628      	mov	r0, r5
 8011bae:	47b8      	blx	r7
 8011bb0:	3001      	adds	r0, #1
 8011bb2:	d12a      	bne.n	8011c0a <_printf_float+0x21a>
 8011bb4:	e76a      	b.n	8011a8c <_printf_float+0x9c>
 8011bb6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011bba:	f240 80e2 	bls.w	8011d82 <_printf_float+0x392>
 8011bbe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011bc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bca:	d133      	bne.n	8011c34 <_printf_float+0x244>
 8011bcc:	4a38      	ldr	r2, [pc, #224]	; (8011cb0 <_printf_float+0x2c0>)
 8011bce:	2301      	movs	r3, #1
 8011bd0:	4631      	mov	r1, r6
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	47b8      	blx	r7
 8011bd6:	3001      	adds	r0, #1
 8011bd8:	f43f af58 	beq.w	8011a8c <_printf_float+0x9c>
 8011bdc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	db02      	blt.n	8011bea <_printf_float+0x1fa>
 8011be4:	6823      	ldr	r3, [r4, #0]
 8011be6:	07d8      	lsls	r0, r3, #31
 8011be8:	d50f      	bpl.n	8011c0a <_printf_float+0x21a>
 8011bea:	4653      	mov	r3, sl
 8011bec:	465a      	mov	r2, fp
 8011bee:	4631      	mov	r1, r6
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	47b8      	blx	r7
 8011bf4:	3001      	adds	r0, #1
 8011bf6:	f43f af49 	beq.w	8011a8c <_printf_float+0x9c>
 8011bfa:	f04f 0800 	mov.w	r8, #0
 8011bfe:	f104 091a 	add.w	r9, r4, #26
 8011c02:	9b08      	ldr	r3, [sp, #32]
 8011c04:	3b01      	subs	r3, #1
 8011c06:	4543      	cmp	r3, r8
 8011c08:	dc09      	bgt.n	8011c1e <_printf_float+0x22e>
 8011c0a:	6823      	ldr	r3, [r4, #0]
 8011c0c:	079b      	lsls	r3, r3, #30
 8011c0e:	f100 8108 	bmi.w	8011e22 <_printf_float+0x432>
 8011c12:	68e0      	ldr	r0, [r4, #12]
 8011c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c16:	4298      	cmp	r0, r3
 8011c18:	bfb8      	it	lt
 8011c1a:	4618      	movlt	r0, r3
 8011c1c:	e738      	b.n	8011a90 <_printf_float+0xa0>
 8011c1e:	2301      	movs	r3, #1
 8011c20:	464a      	mov	r2, r9
 8011c22:	4631      	mov	r1, r6
 8011c24:	4628      	mov	r0, r5
 8011c26:	47b8      	blx	r7
 8011c28:	3001      	adds	r0, #1
 8011c2a:	f43f af2f 	beq.w	8011a8c <_printf_float+0x9c>
 8011c2e:	f108 0801 	add.w	r8, r8, #1
 8011c32:	e7e6      	b.n	8011c02 <_printf_float+0x212>
 8011c34:	9b07      	ldr	r3, [sp, #28]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	dc3c      	bgt.n	8011cb4 <_printf_float+0x2c4>
 8011c3a:	4a1d      	ldr	r2, [pc, #116]	; (8011cb0 <_printf_float+0x2c0>)
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	4631      	mov	r1, r6
 8011c40:	4628      	mov	r0, r5
 8011c42:	47b8      	blx	r7
 8011c44:	3001      	adds	r0, #1
 8011c46:	f43f af21 	beq.w	8011a8c <_printf_float+0x9c>
 8011c4a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011c4e:	4313      	orrs	r3, r2
 8011c50:	d102      	bne.n	8011c58 <_printf_float+0x268>
 8011c52:	6823      	ldr	r3, [r4, #0]
 8011c54:	07d9      	lsls	r1, r3, #31
 8011c56:	d5d8      	bpl.n	8011c0a <_printf_float+0x21a>
 8011c58:	4653      	mov	r3, sl
 8011c5a:	465a      	mov	r2, fp
 8011c5c:	4631      	mov	r1, r6
 8011c5e:	4628      	mov	r0, r5
 8011c60:	47b8      	blx	r7
 8011c62:	3001      	adds	r0, #1
 8011c64:	f43f af12 	beq.w	8011a8c <_printf_float+0x9c>
 8011c68:	f04f 0900 	mov.w	r9, #0
 8011c6c:	f104 0a1a 	add.w	sl, r4, #26
 8011c70:	9b07      	ldr	r3, [sp, #28]
 8011c72:	425b      	negs	r3, r3
 8011c74:	454b      	cmp	r3, r9
 8011c76:	dc01      	bgt.n	8011c7c <_printf_float+0x28c>
 8011c78:	9b08      	ldr	r3, [sp, #32]
 8011c7a:	e795      	b.n	8011ba8 <_printf_float+0x1b8>
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	4652      	mov	r2, sl
 8011c80:	4631      	mov	r1, r6
 8011c82:	4628      	mov	r0, r5
 8011c84:	47b8      	blx	r7
 8011c86:	3001      	adds	r0, #1
 8011c88:	f43f af00 	beq.w	8011a8c <_printf_float+0x9c>
 8011c8c:	f109 0901 	add.w	r9, r9, #1
 8011c90:	e7ee      	b.n	8011c70 <_printf_float+0x280>
 8011c92:	bf00      	nop
 8011c94:	f3af 8000 	nop.w
 8011c98:	ffffffff 	.word	0xffffffff
 8011c9c:	7fefffff 	.word	0x7fefffff
 8011ca0:	08015d30 	.word	0x08015d30
 8011ca4:	08015d34 	.word	0x08015d34
 8011ca8:	08015d3c 	.word	0x08015d3c
 8011cac:	08015d38 	.word	0x08015d38
 8011cb0:	08015d40 	.word	0x08015d40
 8011cb4:	9a08      	ldr	r2, [sp, #32]
 8011cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	bfa8      	it	ge
 8011cbc:	461a      	movge	r2, r3
 8011cbe:	2a00      	cmp	r2, #0
 8011cc0:	4691      	mov	r9, r2
 8011cc2:	dc38      	bgt.n	8011d36 <_printf_float+0x346>
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	9305      	str	r3, [sp, #20]
 8011cc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ccc:	f104 021a 	add.w	r2, r4, #26
 8011cd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011cd2:	9905      	ldr	r1, [sp, #20]
 8011cd4:	9304      	str	r3, [sp, #16]
 8011cd6:	eba3 0309 	sub.w	r3, r3, r9
 8011cda:	428b      	cmp	r3, r1
 8011cdc:	dc33      	bgt.n	8011d46 <_printf_float+0x356>
 8011cde:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	db3c      	blt.n	8011d60 <_printf_float+0x370>
 8011ce6:	6823      	ldr	r3, [r4, #0]
 8011ce8:	07da      	lsls	r2, r3, #31
 8011cea:	d439      	bmi.n	8011d60 <_printf_float+0x370>
 8011cec:	9b08      	ldr	r3, [sp, #32]
 8011cee:	9a04      	ldr	r2, [sp, #16]
 8011cf0:	9907      	ldr	r1, [sp, #28]
 8011cf2:	1a9a      	subs	r2, r3, r2
 8011cf4:	eba3 0901 	sub.w	r9, r3, r1
 8011cf8:	4591      	cmp	r9, r2
 8011cfa:	bfa8      	it	ge
 8011cfc:	4691      	movge	r9, r2
 8011cfe:	f1b9 0f00 	cmp.w	r9, #0
 8011d02:	dc35      	bgt.n	8011d70 <_printf_float+0x380>
 8011d04:	f04f 0800 	mov.w	r8, #0
 8011d08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d0c:	f104 0a1a 	add.w	sl, r4, #26
 8011d10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011d14:	1a9b      	subs	r3, r3, r2
 8011d16:	eba3 0309 	sub.w	r3, r3, r9
 8011d1a:	4543      	cmp	r3, r8
 8011d1c:	f77f af75 	ble.w	8011c0a <_printf_float+0x21a>
 8011d20:	2301      	movs	r3, #1
 8011d22:	4652      	mov	r2, sl
 8011d24:	4631      	mov	r1, r6
 8011d26:	4628      	mov	r0, r5
 8011d28:	47b8      	blx	r7
 8011d2a:	3001      	adds	r0, #1
 8011d2c:	f43f aeae 	beq.w	8011a8c <_printf_float+0x9c>
 8011d30:	f108 0801 	add.w	r8, r8, #1
 8011d34:	e7ec      	b.n	8011d10 <_printf_float+0x320>
 8011d36:	4613      	mov	r3, r2
 8011d38:	4631      	mov	r1, r6
 8011d3a:	4642      	mov	r2, r8
 8011d3c:	4628      	mov	r0, r5
 8011d3e:	47b8      	blx	r7
 8011d40:	3001      	adds	r0, #1
 8011d42:	d1bf      	bne.n	8011cc4 <_printf_float+0x2d4>
 8011d44:	e6a2      	b.n	8011a8c <_printf_float+0x9c>
 8011d46:	2301      	movs	r3, #1
 8011d48:	4631      	mov	r1, r6
 8011d4a:	4628      	mov	r0, r5
 8011d4c:	9204      	str	r2, [sp, #16]
 8011d4e:	47b8      	blx	r7
 8011d50:	3001      	adds	r0, #1
 8011d52:	f43f ae9b 	beq.w	8011a8c <_printf_float+0x9c>
 8011d56:	9b05      	ldr	r3, [sp, #20]
 8011d58:	9a04      	ldr	r2, [sp, #16]
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	9305      	str	r3, [sp, #20]
 8011d5e:	e7b7      	b.n	8011cd0 <_printf_float+0x2e0>
 8011d60:	4653      	mov	r3, sl
 8011d62:	465a      	mov	r2, fp
 8011d64:	4631      	mov	r1, r6
 8011d66:	4628      	mov	r0, r5
 8011d68:	47b8      	blx	r7
 8011d6a:	3001      	adds	r0, #1
 8011d6c:	d1be      	bne.n	8011cec <_printf_float+0x2fc>
 8011d6e:	e68d      	b.n	8011a8c <_printf_float+0x9c>
 8011d70:	9a04      	ldr	r2, [sp, #16]
 8011d72:	464b      	mov	r3, r9
 8011d74:	4442      	add	r2, r8
 8011d76:	4631      	mov	r1, r6
 8011d78:	4628      	mov	r0, r5
 8011d7a:	47b8      	blx	r7
 8011d7c:	3001      	adds	r0, #1
 8011d7e:	d1c1      	bne.n	8011d04 <_printf_float+0x314>
 8011d80:	e684      	b.n	8011a8c <_printf_float+0x9c>
 8011d82:	9a08      	ldr	r2, [sp, #32]
 8011d84:	2a01      	cmp	r2, #1
 8011d86:	dc01      	bgt.n	8011d8c <_printf_float+0x39c>
 8011d88:	07db      	lsls	r3, r3, #31
 8011d8a:	d537      	bpl.n	8011dfc <_printf_float+0x40c>
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	4642      	mov	r2, r8
 8011d90:	4631      	mov	r1, r6
 8011d92:	4628      	mov	r0, r5
 8011d94:	47b8      	blx	r7
 8011d96:	3001      	adds	r0, #1
 8011d98:	f43f ae78 	beq.w	8011a8c <_printf_float+0x9c>
 8011d9c:	4653      	mov	r3, sl
 8011d9e:	465a      	mov	r2, fp
 8011da0:	4631      	mov	r1, r6
 8011da2:	4628      	mov	r0, r5
 8011da4:	47b8      	blx	r7
 8011da6:	3001      	adds	r0, #1
 8011da8:	f43f ae70 	beq.w	8011a8c <_printf_float+0x9c>
 8011dac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011db0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db8:	d01b      	beq.n	8011df2 <_printf_float+0x402>
 8011dba:	9b08      	ldr	r3, [sp, #32]
 8011dbc:	f108 0201 	add.w	r2, r8, #1
 8011dc0:	3b01      	subs	r3, #1
 8011dc2:	4631      	mov	r1, r6
 8011dc4:	4628      	mov	r0, r5
 8011dc6:	47b8      	blx	r7
 8011dc8:	3001      	adds	r0, #1
 8011dca:	d10e      	bne.n	8011dea <_printf_float+0x3fa>
 8011dcc:	e65e      	b.n	8011a8c <_printf_float+0x9c>
 8011dce:	2301      	movs	r3, #1
 8011dd0:	464a      	mov	r2, r9
 8011dd2:	4631      	mov	r1, r6
 8011dd4:	4628      	mov	r0, r5
 8011dd6:	47b8      	blx	r7
 8011dd8:	3001      	adds	r0, #1
 8011dda:	f43f ae57 	beq.w	8011a8c <_printf_float+0x9c>
 8011dde:	f108 0801 	add.w	r8, r8, #1
 8011de2:	9b08      	ldr	r3, [sp, #32]
 8011de4:	3b01      	subs	r3, #1
 8011de6:	4543      	cmp	r3, r8
 8011de8:	dcf1      	bgt.n	8011dce <_printf_float+0x3de>
 8011dea:	9b04      	ldr	r3, [sp, #16]
 8011dec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011df0:	e6db      	b.n	8011baa <_printf_float+0x1ba>
 8011df2:	f04f 0800 	mov.w	r8, #0
 8011df6:	f104 091a 	add.w	r9, r4, #26
 8011dfa:	e7f2      	b.n	8011de2 <_printf_float+0x3f2>
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	4642      	mov	r2, r8
 8011e00:	e7df      	b.n	8011dc2 <_printf_float+0x3d2>
 8011e02:	2301      	movs	r3, #1
 8011e04:	464a      	mov	r2, r9
 8011e06:	4631      	mov	r1, r6
 8011e08:	4628      	mov	r0, r5
 8011e0a:	47b8      	blx	r7
 8011e0c:	3001      	adds	r0, #1
 8011e0e:	f43f ae3d 	beq.w	8011a8c <_printf_float+0x9c>
 8011e12:	f108 0801 	add.w	r8, r8, #1
 8011e16:	68e3      	ldr	r3, [r4, #12]
 8011e18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e1a:	1a5b      	subs	r3, r3, r1
 8011e1c:	4543      	cmp	r3, r8
 8011e1e:	dcf0      	bgt.n	8011e02 <_printf_float+0x412>
 8011e20:	e6f7      	b.n	8011c12 <_printf_float+0x222>
 8011e22:	f04f 0800 	mov.w	r8, #0
 8011e26:	f104 0919 	add.w	r9, r4, #25
 8011e2a:	e7f4      	b.n	8011e16 <_printf_float+0x426>

08011e2c <_printf_common>:
 8011e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e30:	4616      	mov	r6, r2
 8011e32:	4699      	mov	r9, r3
 8011e34:	688a      	ldr	r2, [r1, #8]
 8011e36:	690b      	ldr	r3, [r1, #16]
 8011e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	bfb8      	it	lt
 8011e40:	4613      	movlt	r3, r2
 8011e42:	6033      	str	r3, [r6, #0]
 8011e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e48:	4607      	mov	r7, r0
 8011e4a:	460c      	mov	r4, r1
 8011e4c:	b10a      	cbz	r2, 8011e52 <_printf_common+0x26>
 8011e4e:	3301      	adds	r3, #1
 8011e50:	6033      	str	r3, [r6, #0]
 8011e52:	6823      	ldr	r3, [r4, #0]
 8011e54:	0699      	lsls	r1, r3, #26
 8011e56:	bf42      	ittt	mi
 8011e58:	6833      	ldrmi	r3, [r6, #0]
 8011e5a:	3302      	addmi	r3, #2
 8011e5c:	6033      	strmi	r3, [r6, #0]
 8011e5e:	6825      	ldr	r5, [r4, #0]
 8011e60:	f015 0506 	ands.w	r5, r5, #6
 8011e64:	d106      	bne.n	8011e74 <_printf_common+0x48>
 8011e66:	f104 0a19 	add.w	sl, r4, #25
 8011e6a:	68e3      	ldr	r3, [r4, #12]
 8011e6c:	6832      	ldr	r2, [r6, #0]
 8011e6e:	1a9b      	subs	r3, r3, r2
 8011e70:	42ab      	cmp	r3, r5
 8011e72:	dc26      	bgt.n	8011ec2 <_printf_common+0x96>
 8011e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e78:	1e13      	subs	r3, r2, #0
 8011e7a:	6822      	ldr	r2, [r4, #0]
 8011e7c:	bf18      	it	ne
 8011e7e:	2301      	movne	r3, #1
 8011e80:	0692      	lsls	r2, r2, #26
 8011e82:	d42b      	bmi.n	8011edc <_printf_common+0xb0>
 8011e84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e88:	4649      	mov	r1, r9
 8011e8a:	4638      	mov	r0, r7
 8011e8c:	47c0      	blx	r8
 8011e8e:	3001      	adds	r0, #1
 8011e90:	d01e      	beq.n	8011ed0 <_printf_common+0xa4>
 8011e92:	6823      	ldr	r3, [r4, #0]
 8011e94:	68e5      	ldr	r5, [r4, #12]
 8011e96:	6832      	ldr	r2, [r6, #0]
 8011e98:	f003 0306 	and.w	r3, r3, #6
 8011e9c:	2b04      	cmp	r3, #4
 8011e9e:	bf08      	it	eq
 8011ea0:	1aad      	subeq	r5, r5, r2
 8011ea2:	68a3      	ldr	r3, [r4, #8]
 8011ea4:	6922      	ldr	r2, [r4, #16]
 8011ea6:	bf0c      	ite	eq
 8011ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011eac:	2500      	movne	r5, #0
 8011eae:	4293      	cmp	r3, r2
 8011eb0:	bfc4      	itt	gt
 8011eb2:	1a9b      	subgt	r3, r3, r2
 8011eb4:	18ed      	addgt	r5, r5, r3
 8011eb6:	2600      	movs	r6, #0
 8011eb8:	341a      	adds	r4, #26
 8011eba:	42b5      	cmp	r5, r6
 8011ebc:	d11a      	bne.n	8011ef4 <_printf_common+0xc8>
 8011ebe:	2000      	movs	r0, #0
 8011ec0:	e008      	b.n	8011ed4 <_printf_common+0xa8>
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	4652      	mov	r2, sl
 8011ec6:	4649      	mov	r1, r9
 8011ec8:	4638      	mov	r0, r7
 8011eca:	47c0      	blx	r8
 8011ecc:	3001      	adds	r0, #1
 8011ece:	d103      	bne.n	8011ed8 <_printf_common+0xac>
 8011ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ed8:	3501      	adds	r5, #1
 8011eda:	e7c6      	b.n	8011e6a <_printf_common+0x3e>
 8011edc:	18e1      	adds	r1, r4, r3
 8011ede:	1c5a      	adds	r2, r3, #1
 8011ee0:	2030      	movs	r0, #48	; 0x30
 8011ee2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ee6:	4422      	add	r2, r4
 8011ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011ef0:	3302      	adds	r3, #2
 8011ef2:	e7c7      	b.n	8011e84 <_printf_common+0x58>
 8011ef4:	2301      	movs	r3, #1
 8011ef6:	4622      	mov	r2, r4
 8011ef8:	4649      	mov	r1, r9
 8011efa:	4638      	mov	r0, r7
 8011efc:	47c0      	blx	r8
 8011efe:	3001      	adds	r0, #1
 8011f00:	d0e6      	beq.n	8011ed0 <_printf_common+0xa4>
 8011f02:	3601      	adds	r6, #1
 8011f04:	e7d9      	b.n	8011eba <_printf_common+0x8e>
	...

08011f08 <_printf_i>:
 8011f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f0c:	7e0f      	ldrb	r7, [r1, #24]
 8011f0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011f10:	2f78      	cmp	r7, #120	; 0x78
 8011f12:	4691      	mov	r9, r2
 8011f14:	4680      	mov	r8, r0
 8011f16:	460c      	mov	r4, r1
 8011f18:	469a      	mov	sl, r3
 8011f1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011f1e:	d807      	bhi.n	8011f30 <_printf_i+0x28>
 8011f20:	2f62      	cmp	r7, #98	; 0x62
 8011f22:	d80a      	bhi.n	8011f3a <_printf_i+0x32>
 8011f24:	2f00      	cmp	r7, #0
 8011f26:	f000 80d8 	beq.w	80120da <_printf_i+0x1d2>
 8011f2a:	2f58      	cmp	r7, #88	; 0x58
 8011f2c:	f000 80a3 	beq.w	8012076 <_printf_i+0x16e>
 8011f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011f38:	e03a      	b.n	8011fb0 <_printf_i+0xa8>
 8011f3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f3e:	2b15      	cmp	r3, #21
 8011f40:	d8f6      	bhi.n	8011f30 <_printf_i+0x28>
 8011f42:	a101      	add	r1, pc, #4	; (adr r1, 8011f48 <_printf_i+0x40>)
 8011f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f48:	08011fa1 	.word	0x08011fa1
 8011f4c:	08011fb5 	.word	0x08011fb5
 8011f50:	08011f31 	.word	0x08011f31
 8011f54:	08011f31 	.word	0x08011f31
 8011f58:	08011f31 	.word	0x08011f31
 8011f5c:	08011f31 	.word	0x08011f31
 8011f60:	08011fb5 	.word	0x08011fb5
 8011f64:	08011f31 	.word	0x08011f31
 8011f68:	08011f31 	.word	0x08011f31
 8011f6c:	08011f31 	.word	0x08011f31
 8011f70:	08011f31 	.word	0x08011f31
 8011f74:	080120c1 	.word	0x080120c1
 8011f78:	08011fe5 	.word	0x08011fe5
 8011f7c:	080120a3 	.word	0x080120a3
 8011f80:	08011f31 	.word	0x08011f31
 8011f84:	08011f31 	.word	0x08011f31
 8011f88:	080120e3 	.word	0x080120e3
 8011f8c:	08011f31 	.word	0x08011f31
 8011f90:	08011fe5 	.word	0x08011fe5
 8011f94:	08011f31 	.word	0x08011f31
 8011f98:	08011f31 	.word	0x08011f31
 8011f9c:	080120ab 	.word	0x080120ab
 8011fa0:	682b      	ldr	r3, [r5, #0]
 8011fa2:	1d1a      	adds	r2, r3, #4
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	602a      	str	r2, [r5, #0]
 8011fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011fb0:	2301      	movs	r3, #1
 8011fb2:	e0a3      	b.n	80120fc <_printf_i+0x1f4>
 8011fb4:	6820      	ldr	r0, [r4, #0]
 8011fb6:	6829      	ldr	r1, [r5, #0]
 8011fb8:	0606      	lsls	r6, r0, #24
 8011fba:	f101 0304 	add.w	r3, r1, #4
 8011fbe:	d50a      	bpl.n	8011fd6 <_printf_i+0xce>
 8011fc0:	680e      	ldr	r6, [r1, #0]
 8011fc2:	602b      	str	r3, [r5, #0]
 8011fc4:	2e00      	cmp	r6, #0
 8011fc6:	da03      	bge.n	8011fd0 <_printf_i+0xc8>
 8011fc8:	232d      	movs	r3, #45	; 0x2d
 8011fca:	4276      	negs	r6, r6
 8011fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fd0:	485e      	ldr	r0, [pc, #376]	; (801214c <_printf_i+0x244>)
 8011fd2:	230a      	movs	r3, #10
 8011fd4:	e019      	b.n	801200a <_printf_i+0x102>
 8011fd6:	680e      	ldr	r6, [r1, #0]
 8011fd8:	602b      	str	r3, [r5, #0]
 8011fda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011fde:	bf18      	it	ne
 8011fe0:	b236      	sxthne	r6, r6
 8011fe2:	e7ef      	b.n	8011fc4 <_printf_i+0xbc>
 8011fe4:	682b      	ldr	r3, [r5, #0]
 8011fe6:	6820      	ldr	r0, [r4, #0]
 8011fe8:	1d19      	adds	r1, r3, #4
 8011fea:	6029      	str	r1, [r5, #0]
 8011fec:	0601      	lsls	r1, r0, #24
 8011fee:	d501      	bpl.n	8011ff4 <_printf_i+0xec>
 8011ff0:	681e      	ldr	r6, [r3, #0]
 8011ff2:	e002      	b.n	8011ffa <_printf_i+0xf2>
 8011ff4:	0646      	lsls	r6, r0, #25
 8011ff6:	d5fb      	bpl.n	8011ff0 <_printf_i+0xe8>
 8011ff8:	881e      	ldrh	r6, [r3, #0]
 8011ffa:	4854      	ldr	r0, [pc, #336]	; (801214c <_printf_i+0x244>)
 8011ffc:	2f6f      	cmp	r7, #111	; 0x6f
 8011ffe:	bf0c      	ite	eq
 8012000:	2308      	moveq	r3, #8
 8012002:	230a      	movne	r3, #10
 8012004:	2100      	movs	r1, #0
 8012006:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801200a:	6865      	ldr	r5, [r4, #4]
 801200c:	60a5      	str	r5, [r4, #8]
 801200e:	2d00      	cmp	r5, #0
 8012010:	bfa2      	ittt	ge
 8012012:	6821      	ldrge	r1, [r4, #0]
 8012014:	f021 0104 	bicge.w	r1, r1, #4
 8012018:	6021      	strge	r1, [r4, #0]
 801201a:	b90e      	cbnz	r6, 8012020 <_printf_i+0x118>
 801201c:	2d00      	cmp	r5, #0
 801201e:	d04d      	beq.n	80120bc <_printf_i+0x1b4>
 8012020:	4615      	mov	r5, r2
 8012022:	fbb6 f1f3 	udiv	r1, r6, r3
 8012026:	fb03 6711 	mls	r7, r3, r1, r6
 801202a:	5dc7      	ldrb	r7, [r0, r7]
 801202c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012030:	4637      	mov	r7, r6
 8012032:	42bb      	cmp	r3, r7
 8012034:	460e      	mov	r6, r1
 8012036:	d9f4      	bls.n	8012022 <_printf_i+0x11a>
 8012038:	2b08      	cmp	r3, #8
 801203a:	d10b      	bne.n	8012054 <_printf_i+0x14c>
 801203c:	6823      	ldr	r3, [r4, #0]
 801203e:	07de      	lsls	r6, r3, #31
 8012040:	d508      	bpl.n	8012054 <_printf_i+0x14c>
 8012042:	6923      	ldr	r3, [r4, #16]
 8012044:	6861      	ldr	r1, [r4, #4]
 8012046:	4299      	cmp	r1, r3
 8012048:	bfde      	ittt	le
 801204a:	2330      	movle	r3, #48	; 0x30
 801204c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012050:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012054:	1b52      	subs	r2, r2, r5
 8012056:	6122      	str	r2, [r4, #16]
 8012058:	f8cd a000 	str.w	sl, [sp]
 801205c:	464b      	mov	r3, r9
 801205e:	aa03      	add	r2, sp, #12
 8012060:	4621      	mov	r1, r4
 8012062:	4640      	mov	r0, r8
 8012064:	f7ff fee2 	bl	8011e2c <_printf_common>
 8012068:	3001      	adds	r0, #1
 801206a:	d14c      	bne.n	8012106 <_printf_i+0x1fe>
 801206c:	f04f 30ff 	mov.w	r0, #4294967295
 8012070:	b004      	add	sp, #16
 8012072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012076:	4835      	ldr	r0, [pc, #212]	; (801214c <_printf_i+0x244>)
 8012078:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801207c:	6829      	ldr	r1, [r5, #0]
 801207e:	6823      	ldr	r3, [r4, #0]
 8012080:	f851 6b04 	ldr.w	r6, [r1], #4
 8012084:	6029      	str	r1, [r5, #0]
 8012086:	061d      	lsls	r5, r3, #24
 8012088:	d514      	bpl.n	80120b4 <_printf_i+0x1ac>
 801208a:	07df      	lsls	r7, r3, #31
 801208c:	bf44      	itt	mi
 801208e:	f043 0320 	orrmi.w	r3, r3, #32
 8012092:	6023      	strmi	r3, [r4, #0]
 8012094:	b91e      	cbnz	r6, 801209e <_printf_i+0x196>
 8012096:	6823      	ldr	r3, [r4, #0]
 8012098:	f023 0320 	bic.w	r3, r3, #32
 801209c:	6023      	str	r3, [r4, #0]
 801209e:	2310      	movs	r3, #16
 80120a0:	e7b0      	b.n	8012004 <_printf_i+0xfc>
 80120a2:	6823      	ldr	r3, [r4, #0]
 80120a4:	f043 0320 	orr.w	r3, r3, #32
 80120a8:	6023      	str	r3, [r4, #0]
 80120aa:	2378      	movs	r3, #120	; 0x78
 80120ac:	4828      	ldr	r0, [pc, #160]	; (8012150 <_printf_i+0x248>)
 80120ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80120b2:	e7e3      	b.n	801207c <_printf_i+0x174>
 80120b4:	0659      	lsls	r1, r3, #25
 80120b6:	bf48      	it	mi
 80120b8:	b2b6      	uxthmi	r6, r6
 80120ba:	e7e6      	b.n	801208a <_printf_i+0x182>
 80120bc:	4615      	mov	r5, r2
 80120be:	e7bb      	b.n	8012038 <_printf_i+0x130>
 80120c0:	682b      	ldr	r3, [r5, #0]
 80120c2:	6826      	ldr	r6, [r4, #0]
 80120c4:	6961      	ldr	r1, [r4, #20]
 80120c6:	1d18      	adds	r0, r3, #4
 80120c8:	6028      	str	r0, [r5, #0]
 80120ca:	0635      	lsls	r5, r6, #24
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	d501      	bpl.n	80120d4 <_printf_i+0x1cc>
 80120d0:	6019      	str	r1, [r3, #0]
 80120d2:	e002      	b.n	80120da <_printf_i+0x1d2>
 80120d4:	0670      	lsls	r0, r6, #25
 80120d6:	d5fb      	bpl.n	80120d0 <_printf_i+0x1c8>
 80120d8:	8019      	strh	r1, [r3, #0]
 80120da:	2300      	movs	r3, #0
 80120dc:	6123      	str	r3, [r4, #16]
 80120de:	4615      	mov	r5, r2
 80120e0:	e7ba      	b.n	8012058 <_printf_i+0x150>
 80120e2:	682b      	ldr	r3, [r5, #0]
 80120e4:	1d1a      	adds	r2, r3, #4
 80120e6:	602a      	str	r2, [r5, #0]
 80120e8:	681d      	ldr	r5, [r3, #0]
 80120ea:	6862      	ldr	r2, [r4, #4]
 80120ec:	2100      	movs	r1, #0
 80120ee:	4628      	mov	r0, r5
 80120f0:	f7ee f906 	bl	8000300 <memchr>
 80120f4:	b108      	cbz	r0, 80120fa <_printf_i+0x1f2>
 80120f6:	1b40      	subs	r0, r0, r5
 80120f8:	6060      	str	r0, [r4, #4]
 80120fa:	6863      	ldr	r3, [r4, #4]
 80120fc:	6123      	str	r3, [r4, #16]
 80120fe:	2300      	movs	r3, #0
 8012100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012104:	e7a8      	b.n	8012058 <_printf_i+0x150>
 8012106:	6923      	ldr	r3, [r4, #16]
 8012108:	462a      	mov	r2, r5
 801210a:	4649      	mov	r1, r9
 801210c:	4640      	mov	r0, r8
 801210e:	47d0      	blx	sl
 8012110:	3001      	adds	r0, #1
 8012112:	d0ab      	beq.n	801206c <_printf_i+0x164>
 8012114:	6823      	ldr	r3, [r4, #0]
 8012116:	079b      	lsls	r3, r3, #30
 8012118:	d413      	bmi.n	8012142 <_printf_i+0x23a>
 801211a:	68e0      	ldr	r0, [r4, #12]
 801211c:	9b03      	ldr	r3, [sp, #12]
 801211e:	4298      	cmp	r0, r3
 8012120:	bfb8      	it	lt
 8012122:	4618      	movlt	r0, r3
 8012124:	e7a4      	b.n	8012070 <_printf_i+0x168>
 8012126:	2301      	movs	r3, #1
 8012128:	4632      	mov	r2, r6
 801212a:	4649      	mov	r1, r9
 801212c:	4640      	mov	r0, r8
 801212e:	47d0      	blx	sl
 8012130:	3001      	adds	r0, #1
 8012132:	d09b      	beq.n	801206c <_printf_i+0x164>
 8012134:	3501      	adds	r5, #1
 8012136:	68e3      	ldr	r3, [r4, #12]
 8012138:	9903      	ldr	r1, [sp, #12]
 801213a:	1a5b      	subs	r3, r3, r1
 801213c:	42ab      	cmp	r3, r5
 801213e:	dcf2      	bgt.n	8012126 <_printf_i+0x21e>
 8012140:	e7eb      	b.n	801211a <_printf_i+0x212>
 8012142:	2500      	movs	r5, #0
 8012144:	f104 0619 	add.w	r6, r4, #25
 8012148:	e7f5      	b.n	8012136 <_printf_i+0x22e>
 801214a:	bf00      	nop
 801214c:	08015d42 	.word	0x08015d42
 8012150:	08015d53 	.word	0x08015d53

08012154 <siprintf>:
 8012154:	b40e      	push	{r1, r2, r3}
 8012156:	b500      	push	{lr}
 8012158:	b09c      	sub	sp, #112	; 0x70
 801215a:	ab1d      	add	r3, sp, #116	; 0x74
 801215c:	9002      	str	r0, [sp, #8]
 801215e:	9006      	str	r0, [sp, #24]
 8012160:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012164:	4809      	ldr	r0, [pc, #36]	; (801218c <siprintf+0x38>)
 8012166:	9107      	str	r1, [sp, #28]
 8012168:	9104      	str	r1, [sp, #16]
 801216a:	4909      	ldr	r1, [pc, #36]	; (8012190 <siprintf+0x3c>)
 801216c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012170:	9105      	str	r1, [sp, #20]
 8012172:	6800      	ldr	r0, [r0, #0]
 8012174:	9301      	str	r3, [sp, #4]
 8012176:	a902      	add	r1, sp, #8
 8012178:	f002 fe42 	bl	8014e00 <_svfiprintf_r>
 801217c:	9b02      	ldr	r3, [sp, #8]
 801217e:	2200      	movs	r2, #0
 8012180:	701a      	strb	r2, [r3, #0]
 8012182:	b01c      	add	sp, #112	; 0x70
 8012184:	f85d eb04 	ldr.w	lr, [sp], #4
 8012188:	b003      	add	sp, #12
 801218a:	4770      	bx	lr
 801218c:	240007a8 	.word	0x240007a8
 8012190:	ffff0208 	.word	0xffff0208

08012194 <strcpy>:
 8012194:	4603      	mov	r3, r0
 8012196:	f811 2b01 	ldrb.w	r2, [r1], #1
 801219a:	f803 2b01 	strb.w	r2, [r3], #1
 801219e:	2a00      	cmp	r2, #0
 80121a0:	d1f9      	bne.n	8012196 <strcpy+0x2>
 80121a2:	4770      	bx	lr

080121a4 <strncpy>:
 80121a4:	b510      	push	{r4, lr}
 80121a6:	3901      	subs	r1, #1
 80121a8:	4603      	mov	r3, r0
 80121aa:	b132      	cbz	r2, 80121ba <strncpy+0x16>
 80121ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80121b0:	f803 4b01 	strb.w	r4, [r3], #1
 80121b4:	3a01      	subs	r2, #1
 80121b6:	2c00      	cmp	r4, #0
 80121b8:	d1f7      	bne.n	80121aa <strncpy+0x6>
 80121ba:	441a      	add	r2, r3
 80121bc:	2100      	movs	r1, #0
 80121be:	4293      	cmp	r3, r2
 80121c0:	d100      	bne.n	80121c4 <strncpy+0x20>
 80121c2:	bd10      	pop	{r4, pc}
 80121c4:	f803 1b01 	strb.w	r1, [r3], #1
 80121c8:	e7f9      	b.n	80121be <strncpy+0x1a>

080121ca <strstr>:
 80121ca:	780a      	ldrb	r2, [r1, #0]
 80121cc:	b570      	push	{r4, r5, r6, lr}
 80121ce:	b96a      	cbnz	r2, 80121ec <strstr+0x22>
 80121d0:	bd70      	pop	{r4, r5, r6, pc}
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d109      	bne.n	80121ea <strstr+0x20>
 80121d6:	460c      	mov	r4, r1
 80121d8:	4605      	mov	r5, r0
 80121da:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d0f6      	beq.n	80121d0 <strstr+0x6>
 80121e2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80121e6:	429e      	cmp	r6, r3
 80121e8:	d0f7      	beq.n	80121da <strstr+0x10>
 80121ea:	3001      	adds	r0, #1
 80121ec:	7803      	ldrb	r3, [r0, #0]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d1ef      	bne.n	80121d2 <strstr+0x8>
 80121f2:	4618      	mov	r0, r3
 80121f4:	e7ec      	b.n	80121d0 <strstr+0x6>

080121f6 <sulp>:
 80121f6:	b570      	push	{r4, r5, r6, lr}
 80121f8:	4604      	mov	r4, r0
 80121fa:	460d      	mov	r5, r1
 80121fc:	4616      	mov	r6, r2
 80121fe:	ec45 4b10 	vmov	d0, r4, r5
 8012202:	f002 fb5f 	bl	80148c4 <__ulp>
 8012206:	b17e      	cbz	r6, 8012228 <sulp+0x32>
 8012208:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801220c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012210:	2b00      	cmp	r3, #0
 8012212:	dd09      	ble.n	8012228 <sulp+0x32>
 8012214:	051b      	lsls	r3, r3, #20
 8012216:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801221a:	2000      	movs	r0, #0
 801221c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8012220:	ec41 0b17 	vmov	d7, r0, r1
 8012224:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012228:	bd70      	pop	{r4, r5, r6, pc}
 801222a:	0000      	movs	r0, r0
 801222c:	0000      	movs	r0, r0
	...

08012230 <_strtod_l>:
 8012230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012234:	ed2d 8b0e 	vpush	{d8-d14}
 8012238:	b097      	sub	sp, #92	; 0x5c
 801223a:	461f      	mov	r7, r3
 801223c:	2300      	movs	r3, #0
 801223e:	9312      	str	r3, [sp, #72]	; 0x48
 8012240:	4ba1      	ldr	r3, [pc, #644]	; (80124c8 <_strtod_l+0x298>)
 8012242:	920d      	str	r2, [sp, #52]	; 0x34
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	9307      	str	r3, [sp, #28]
 8012248:	4604      	mov	r4, r0
 801224a:	4618      	mov	r0, r3
 801224c:	468b      	mov	fp, r1
 801224e:	f7ee f84f 	bl	80002f0 <strlen>
 8012252:	f04f 0800 	mov.w	r8, #0
 8012256:	4605      	mov	r5, r0
 8012258:	f04f 0900 	mov.w	r9, #0
 801225c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8012260:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012262:	7813      	ldrb	r3, [r2, #0]
 8012264:	2b2b      	cmp	r3, #43	; 0x2b
 8012266:	d04d      	beq.n	8012304 <_strtod_l+0xd4>
 8012268:	d83a      	bhi.n	80122e0 <_strtod_l+0xb0>
 801226a:	2b0d      	cmp	r3, #13
 801226c:	d833      	bhi.n	80122d6 <_strtod_l+0xa6>
 801226e:	2b08      	cmp	r3, #8
 8012270:	d833      	bhi.n	80122da <_strtod_l+0xaa>
 8012272:	2b00      	cmp	r3, #0
 8012274:	d03d      	beq.n	80122f2 <_strtod_l+0xc2>
 8012276:	2300      	movs	r3, #0
 8012278:	9308      	str	r3, [sp, #32]
 801227a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801227c:	7833      	ldrb	r3, [r6, #0]
 801227e:	2b30      	cmp	r3, #48	; 0x30
 8012280:	f040 80b0 	bne.w	80123e4 <_strtod_l+0x1b4>
 8012284:	7873      	ldrb	r3, [r6, #1]
 8012286:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801228a:	2b58      	cmp	r3, #88	; 0x58
 801228c:	d167      	bne.n	801235e <_strtod_l+0x12e>
 801228e:	9b08      	ldr	r3, [sp, #32]
 8012290:	9301      	str	r3, [sp, #4]
 8012292:	ab12      	add	r3, sp, #72	; 0x48
 8012294:	9702      	str	r7, [sp, #8]
 8012296:	9300      	str	r3, [sp, #0]
 8012298:	4a8c      	ldr	r2, [pc, #560]	; (80124cc <_strtod_l+0x29c>)
 801229a:	ab13      	add	r3, sp, #76	; 0x4c
 801229c:	a911      	add	r1, sp, #68	; 0x44
 801229e:	4620      	mov	r0, r4
 80122a0:	f001 fc78 	bl	8013b94 <__gethex>
 80122a4:	f010 0507 	ands.w	r5, r0, #7
 80122a8:	4607      	mov	r7, r0
 80122aa:	d005      	beq.n	80122b8 <_strtod_l+0x88>
 80122ac:	2d06      	cmp	r5, #6
 80122ae:	d12b      	bne.n	8012308 <_strtod_l+0xd8>
 80122b0:	3601      	adds	r6, #1
 80122b2:	2300      	movs	r3, #0
 80122b4:	9611      	str	r6, [sp, #68]	; 0x44
 80122b6:	9308      	str	r3, [sp, #32]
 80122b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	f040 854e 	bne.w	8012d5c <_strtod_l+0xb2c>
 80122c0:	9b08      	ldr	r3, [sp, #32]
 80122c2:	b1e3      	cbz	r3, 80122fe <_strtod_l+0xce>
 80122c4:	ec49 8b17 	vmov	d7, r8, r9
 80122c8:	eeb1 0b47 	vneg.f64	d0, d7
 80122cc:	b017      	add	sp, #92	; 0x5c
 80122ce:	ecbd 8b0e 	vpop	{d8-d14}
 80122d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122d6:	2b20      	cmp	r3, #32
 80122d8:	d1cd      	bne.n	8012276 <_strtod_l+0x46>
 80122da:	3201      	adds	r2, #1
 80122dc:	9211      	str	r2, [sp, #68]	; 0x44
 80122de:	e7bf      	b.n	8012260 <_strtod_l+0x30>
 80122e0:	2b2d      	cmp	r3, #45	; 0x2d
 80122e2:	d1c8      	bne.n	8012276 <_strtod_l+0x46>
 80122e4:	2301      	movs	r3, #1
 80122e6:	9308      	str	r3, [sp, #32]
 80122e8:	1c53      	adds	r3, r2, #1
 80122ea:	9311      	str	r3, [sp, #68]	; 0x44
 80122ec:	7853      	ldrb	r3, [r2, #1]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d1c3      	bne.n	801227a <_strtod_l+0x4a>
 80122f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122f4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	f040 852d 	bne.w	8012d58 <_strtod_l+0xb28>
 80122fe:	ec49 8b10 	vmov	d0, r8, r9
 8012302:	e7e3      	b.n	80122cc <_strtod_l+0x9c>
 8012304:	2300      	movs	r3, #0
 8012306:	e7ee      	b.n	80122e6 <_strtod_l+0xb6>
 8012308:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801230a:	b13a      	cbz	r2, 801231c <_strtod_l+0xec>
 801230c:	2135      	movs	r1, #53	; 0x35
 801230e:	a814      	add	r0, sp, #80	; 0x50
 8012310:	f002 fbe0 	bl	8014ad4 <__copybits>
 8012314:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012316:	4620      	mov	r0, r4
 8012318:	f001 ffa2 	bl	8014260 <_Bfree>
 801231c:	3d01      	subs	r5, #1
 801231e:	2d04      	cmp	r5, #4
 8012320:	d806      	bhi.n	8012330 <_strtod_l+0x100>
 8012322:	e8df f005 	tbb	[pc, r5]
 8012326:	030a      	.short	0x030a
 8012328:	1714      	.short	0x1714
 801232a:	0a          	.byte	0x0a
 801232b:	00          	.byte	0x00
 801232c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8012330:	073f      	lsls	r7, r7, #28
 8012332:	d5c1      	bpl.n	80122b8 <_strtod_l+0x88>
 8012334:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8012338:	e7be      	b.n	80122b8 <_strtod_l+0x88>
 801233a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801233e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012340:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012344:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012348:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801234c:	e7f0      	b.n	8012330 <_strtod_l+0x100>
 801234e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80124d0 <_strtod_l+0x2a0>
 8012352:	e7ed      	b.n	8012330 <_strtod_l+0x100>
 8012354:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8012358:	f04f 38ff 	mov.w	r8, #4294967295
 801235c:	e7e8      	b.n	8012330 <_strtod_l+0x100>
 801235e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012360:	1c5a      	adds	r2, r3, #1
 8012362:	9211      	str	r2, [sp, #68]	; 0x44
 8012364:	785b      	ldrb	r3, [r3, #1]
 8012366:	2b30      	cmp	r3, #48	; 0x30
 8012368:	d0f9      	beq.n	801235e <_strtod_l+0x12e>
 801236a:	2b00      	cmp	r3, #0
 801236c:	d0a4      	beq.n	80122b8 <_strtod_l+0x88>
 801236e:	2301      	movs	r3, #1
 8012370:	f04f 0a00 	mov.w	sl, #0
 8012374:	9304      	str	r3, [sp, #16]
 8012376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012378:	930a      	str	r3, [sp, #40]	; 0x28
 801237a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801237e:	f8cd a018 	str.w	sl, [sp, #24]
 8012382:	220a      	movs	r2, #10
 8012384:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012386:	7807      	ldrb	r7, [r0, #0]
 8012388:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801238c:	b2d9      	uxtb	r1, r3
 801238e:	2909      	cmp	r1, #9
 8012390:	d92a      	bls.n	80123e8 <_strtod_l+0x1b8>
 8012392:	9907      	ldr	r1, [sp, #28]
 8012394:	462a      	mov	r2, r5
 8012396:	f002 fe4b 	bl	8015030 <strncmp>
 801239a:	2800      	cmp	r0, #0
 801239c:	d033      	beq.n	8012406 <_strtod_l+0x1d6>
 801239e:	2000      	movs	r0, #0
 80123a0:	9b06      	ldr	r3, [sp, #24]
 80123a2:	463a      	mov	r2, r7
 80123a4:	4601      	mov	r1, r0
 80123a6:	4607      	mov	r7, r0
 80123a8:	2a65      	cmp	r2, #101	; 0x65
 80123aa:	d001      	beq.n	80123b0 <_strtod_l+0x180>
 80123ac:	2a45      	cmp	r2, #69	; 0x45
 80123ae:	d117      	bne.n	80123e0 <_strtod_l+0x1b0>
 80123b0:	b91b      	cbnz	r3, 80123ba <_strtod_l+0x18a>
 80123b2:	9b04      	ldr	r3, [sp, #16]
 80123b4:	4303      	orrs	r3, r0
 80123b6:	d09c      	beq.n	80122f2 <_strtod_l+0xc2>
 80123b8:	2300      	movs	r3, #0
 80123ba:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80123be:	f10b 0201 	add.w	r2, fp, #1
 80123c2:	9211      	str	r2, [sp, #68]	; 0x44
 80123c4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80123c8:	2a2b      	cmp	r2, #43	; 0x2b
 80123ca:	d071      	beq.n	80124b0 <_strtod_l+0x280>
 80123cc:	2a2d      	cmp	r2, #45	; 0x2d
 80123ce:	d077      	beq.n	80124c0 <_strtod_l+0x290>
 80123d0:	f04f 0e00 	mov.w	lr, #0
 80123d4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80123d8:	2d09      	cmp	r5, #9
 80123da:	d97f      	bls.n	80124dc <_strtod_l+0x2ac>
 80123dc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80123e0:	2500      	movs	r5, #0
 80123e2:	e09b      	b.n	801251c <_strtod_l+0x2ec>
 80123e4:	2300      	movs	r3, #0
 80123e6:	e7c3      	b.n	8012370 <_strtod_l+0x140>
 80123e8:	9906      	ldr	r1, [sp, #24]
 80123ea:	2908      	cmp	r1, #8
 80123ec:	bfdd      	ittte	le
 80123ee:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80123f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80123f4:	9309      	strle	r3, [sp, #36]	; 0x24
 80123f6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80123fa:	9b06      	ldr	r3, [sp, #24]
 80123fc:	3001      	adds	r0, #1
 80123fe:	3301      	adds	r3, #1
 8012400:	9306      	str	r3, [sp, #24]
 8012402:	9011      	str	r0, [sp, #68]	; 0x44
 8012404:	e7be      	b.n	8012384 <_strtod_l+0x154>
 8012406:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012408:	195a      	adds	r2, r3, r5
 801240a:	9211      	str	r2, [sp, #68]	; 0x44
 801240c:	5d5a      	ldrb	r2, [r3, r5]
 801240e:	9b06      	ldr	r3, [sp, #24]
 8012410:	b3a3      	cbz	r3, 801247c <_strtod_l+0x24c>
 8012412:	4607      	mov	r7, r0
 8012414:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012418:	2909      	cmp	r1, #9
 801241a:	d912      	bls.n	8012442 <_strtod_l+0x212>
 801241c:	2101      	movs	r1, #1
 801241e:	e7c3      	b.n	80123a8 <_strtod_l+0x178>
 8012420:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012422:	1c5a      	adds	r2, r3, #1
 8012424:	9211      	str	r2, [sp, #68]	; 0x44
 8012426:	785a      	ldrb	r2, [r3, #1]
 8012428:	3001      	adds	r0, #1
 801242a:	2a30      	cmp	r2, #48	; 0x30
 801242c:	d0f8      	beq.n	8012420 <_strtod_l+0x1f0>
 801242e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012432:	2b08      	cmp	r3, #8
 8012434:	f200 8497 	bhi.w	8012d66 <_strtod_l+0xb36>
 8012438:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801243a:	930a      	str	r3, [sp, #40]	; 0x28
 801243c:	4607      	mov	r7, r0
 801243e:	2000      	movs	r0, #0
 8012440:	4603      	mov	r3, r0
 8012442:	3a30      	subs	r2, #48	; 0x30
 8012444:	f100 0101 	add.w	r1, r0, #1
 8012448:	d012      	beq.n	8012470 <_strtod_l+0x240>
 801244a:	440f      	add	r7, r1
 801244c:	eb00 0c03 	add.w	ip, r0, r3
 8012450:	4619      	mov	r1, r3
 8012452:	250a      	movs	r5, #10
 8012454:	4561      	cmp	r1, ip
 8012456:	d113      	bne.n	8012480 <_strtod_l+0x250>
 8012458:	1819      	adds	r1, r3, r0
 801245a:	2908      	cmp	r1, #8
 801245c:	f103 0301 	add.w	r3, r3, #1
 8012460:	4403      	add	r3, r0
 8012462:	dc1c      	bgt.n	801249e <_strtod_l+0x26e>
 8012464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012466:	210a      	movs	r1, #10
 8012468:	fb01 2200 	mla	r2, r1, r0, r2
 801246c:	9209      	str	r2, [sp, #36]	; 0x24
 801246e:	2100      	movs	r1, #0
 8012470:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012472:	1c50      	adds	r0, r2, #1
 8012474:	9011      	str	r0, [sp, #68]	; 0x44
 8012476:	7852      	ldrb	r2, [r2, #1]
 8012478:	4608      	mov	r0, r1
 801247a:	e7cb      	b.n	8012414 <_strtod_l+0x1e4>
 801247c:	9806      	ldr	r0, [sp, #24]
 801247e:	e7d4      	b.n	801242a <_strtod_l+0x1fa>
 8012480:	2908      	cmp	r1, #8
 8012482:	dc04      	bgt.n	801248e <_strtod_l+0x25e>
 8012484:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012486:	436e      	muls	r6, r5
 8012488:	9609      	str	r6, [sp, #36]	; 0x24
 801248a:	3101      	adds	r1, #1
 801248c:	e7e2      	b.n	8012454 <_strtod_l+0x224>
 801248e:	f101 0e01 	add.w	lr, r1, #1
 8012492:	f1be 0f10 	cmp.w	lr, #16
 8012496:	bfd8      	it	le
 8012498:	fb05 fa0a 	mulle.w	sl, r5, sl
 801249c:	e7f5      	b.n	801248a <_strtod_l+0x25a>
 801249e:	2b10      	cmp	r3, #16
 80124a0:	bfdc      	itt	le
 80124a2:	210a      	movle	r1, #10
 80124a4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80124a8:	e7e1      	b.n	801246e <_strtod_l+0x23e>
 80124aa:	2700      	movs	r7, #0
 80124ac:	2101      	movs	r1, #1
 80124ae:	e780      	b.n	80123b2 <_strtod_l+0x182>
 80124b0:	f04f 0e00 	mov.w	lr, #0
 80124b4:	f10b 0202 	add.w	r2, fp, #2
 80124b8:	9211      	str	r2, [sp, #68]	; 0x44
 80124ba:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80124be:	e789      	b.n	80123d4 <_strtod_l+0x1a4>
 80124c0:	f04f 0e01 	mov.w	lr, #1
 80124c4:	e7f6      	b.n	80124b4 <_strtod_l+0x284>
 80124c6:	bf00      	nop
 80124c8:	08015fb0 	.word	0x08015fb0
 80124cc:	08015d64 	.word	0x08015d64
 80124d0:	7ff00000 	.word	0x7ff00000
 80124d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80124d6:	1c55      	adds	r5, r2, #1
 80124d8:	9511      	str	r5, [sp, #68]	; 0x44
 80124da:	7852      	ldrb	r2, [r2, #1]
 80124dc:	2a30      	cmp	r2, #48	; 0x30
 80124de:	d0f9      	beq.n	80124d4 <_strtod_l+0x2a4>
 80124e0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80124e4:	2d08      	cmp	r5, #8
 80124e6:	f63f af7b 	bhi.w	80123e0 <_strtod_l+0x1b0>
 80124ea:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80124ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80124f0:	9207      	str	r2, [sp, #28]
 80124f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80124f4:	1c55      	adds	r5, r2, #1
 80124f6:	9511      	str	r5, [sp, #68]	; 0x44
 80124f8:	7852      	ldrb	r2, [r2, #1]
 80124fa:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80124fe:	2e09      	cmp	r6, #9
 8012500:	d937      	bls.n	8012572 <_strtod_l+0x342>
 8012502:	9e07      	ldr	r6, [sp, #28]
 8012504:	1bad      	subs	r5, r5, r6
 8012506:	2d08      	cmp	r5, #8
 8012508:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801250c:	dc02      	bgt.n	8012514 <_strtod_l+0x2e4>
 801250e:	4565      	cmp	r5, ip
 8012510:	bfa8      	it	ge
 8012512:	4665      	movge	r5, ip
 8012514:	f1be 0f00 	cmp.w	lr, #0
 8012518:	d000      	beq.n	801251c <_strtod_l+0x2ec>
 801251a:	426d      	negs	r5, r5
 801251c:	2b00      	cmp	r3, #0
 801251e:	d14d      	bne.n	80125bc <_strtod_l+0x38c>
 8012520:	9b04      	ldr	r3, [sp, #16]
 8012522:	4303      	orrs	r3, r0
 8012524:	f47f aec8 	bne.w	80122b8 <_strtod_l+0x88>
 8012528:	2900      	cmp	r1, #0
 801252a:	f47f aee2 	bne.w	80122f2 <_strtod_l+0xc2>
 801252e:	2a69      	cmp	r2, #105	; 0x69
 8012530:	d027      	beq.n	8012582 <_strtod_l+0x352>
 8012532:	dc24      	bgt.n	801257e <_strtod_l+0x34e>
 8012534:	2a49      	cmp	r2, #73	; 0x49
 8012536:	d024      	beq.n	8012582 <_strtod_l+0x352>
 8012538:	2a4e      	cmp	r2, #78	; 0x4e
 801253a:	f47f aeda 	bne.w	80122f2 <_strtod_l+0xc2>
 801253e:	4996      	ldr	r1, [pc, #600]	; (8012798 <_strtod_l+0x568>)
 8012540:	a811      	add	r0, sp, #68	; 0x44
 8012542:	f001 fd7f 	bl	8014044 <__match>
 8012546:	2800      	cmp	r0, #0
 8012548:	f43f aed3 	beq.w	80122f2 <_strtod_l+0xc2>
 801254c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	2b28      	cmp	r3, #40	; 0x28
 8012552:	d12d      	bne.n	80125b0 <_strtod_l+0x380>
 8012554:	4991      	ldr	r1, [pc, #580]	; (801279c <_strtod_l+0x56c>)
 8012556:	aa14      	add	r2, sp, #80	; 0x50
 8012558:	a811      	add	r0, sp, #68	; 0x44
 801255a:	f001 fd87 	bl	801406c <__hexnan>
 801255e:	2805      	cmp	r0, #5
 8012560:	d126      	bne.n	80125b0 <_strtod_l+0x380>
 8012562:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012564:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012568:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801256c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8012570:	e6a2      	b.n	80122b8 <_strtod_l+0x88>
 8012572:	250a      	movs	r5, #10
 8012574:	fb05 250c 	mla	r5, r5, ip, r2
 8012578:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801257c:	e7b9      	b.n	80124f2 <_strtod_l+0x2c2>
 801257e:	2a6e      	cmp	r2, #110	; 0x6e
 8012580:	e7db      	b.n	801253a <_strtod_l+0x30a>
 8012582:	4987      	ldr	r1, [pc, #540]	; (80127a0 <_strtod_l+0x570>)
 8012584:	a811      	add	r0, sp, #68	; 0x44
 8012586:	f001 fd5d 	bl	8014044 <__match>
 801258a:	2800      	cmp	r0, #0
 801258c:	f43f aeb1 	beq.w	80122f2 <_strtod_l+0xc2>
 8012590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012592:	4984      	ldr	r1, [pc, #528]	; (80127a4 <_strtod_l+0x574>)
 8012594:	3b01      	subs	r3, #1
 8012596:	a811      	add	r0, sp, #68	; 0x44
 8012598:	9311      	str	r3, [sp, #68]	; 0x44
 801259a:	f001 fd53 	bl	8014044 <__match>
 801259e:	b910      	cbnz	r0, 80125a6 <_strtod_l+0x376>
 80125a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80125a2:	3301      	adds	r3, #1
 80125a4:	9311      	str	r3, [sp, #68]	; 0x44
 80125a6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80127b8 <_strtod_l+0x588>
 80125aa:	f04f 0800 	mov.w	r8, #0
 80125ae:	e683      	b.n	80122b8 <_strtod_l+0x88>
 80125b0:	487d      	ldr	r0, [pc, #500]	; (80127a8 <_strtod_l+0x578>)
 80125b2:	f002 fd25 	bl	8015000 <nan>
 80125b6:	ec59 8b10 	vmov	r8, r9, d0
 80125ba:	e67d      	b.n	80122b8 <_strtod_l+0x88>
 80125bc:	1bea      	subs	r2, r5, r7
 80125be:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80125c2:	9207      	str	r2, [sp, #28]
 80125c4:	9a06      	ldr	r2, [sp, #24]
 80125c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80125ca:	2a00      	cmp	r2, #0
 80125cc:	bf08      	it	eq
 80125ce:	461a      	moveq	r2, r3
 80125d0:	2b10      	cmp	r3, #16
 80125d2:	9206      	str	r2, [sp, #24]
 80125d4:	461a      	mov	r2, r3
 80125d6:	bfa8      	it	ge
 80125d8:	2210      	movge	r2, #16
 80125da:	2b09      	cmp	r3, #9
 80125dc:	ec59 8b17 	vmov	r8, r9, d7
 80125e0:	dd0c      	ble.n	80125fc <_strtod_l+0x3cc>
 80125e2:	4972      	ldr	r1, [pc, #456]	; (80127ac <_strtod_l+0x57c>)
 80125e4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80125e8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80125ec:	ee06 aa90 	vmov	s13, sl
 80125f0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80125f4:	eea7 6b05 	vfma.f64	d6, d7, d5
 80125f8:	ec59 8b16 	vmov	r8, r9, d6
 80125fc:	2b0f      	cmp	r3, #15
 80125fe:	dc36      	bgt.n	801266e <_strtod_l+0x43e>
 8012600:	9907      	ldr	r1, [sp, #28]
 8012602:	2900      	cmp	r1, #0
 8012604:	f43f ae58 	beq.w	80122b8 <_strtod_l+0x88>
 8012608:	dd23      	ble.n	8012652 <_strtod_l+0x422>
 801260a:	2916      	cmp	r1, #22
 801260c:	dc0b      	bgt.n	8012626 <_strtod_l+0x3f6>
 801260e:	4b67      	ldr	r3, [pc, #412]	; (80127ac <_strtod_l+0x57c>)
 8012610:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8012614:	ed93 7b00 	vldr	d7, [r3]
 8012618:	ec49 8b16 	vmov	d6, r8, r9
 801261c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012620:	ec59 8b17 	vmov	r8, r9, d7
 8012624:	e648      	b.n	80122b8 <_strtod_l+0x88>
 8012626:	9807      	ldr	r0, [sp, #28]
 8012628:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801262c:	4281      	cmp	r1, r0
 801262e:	db1e      	blt.n	801266e <_strtod_l+0x43e>
 8012630:	4a5e      	ldr	r2, [pc, #376]	; (80127ac <_strtod_l+0x57c>)
 8012632:	f1c3 030f 	rsb	r3, r3, #15
 8012636:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801263a:	ed91 7b00 	vldr	d7, [r1]
 801263e:	ec49 8b16 	vmov	d6, r8, r9
 8012642:	1ac3      	subs	r3, r0, r3
 8012644:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012648:	ee27 7b06 	vmul.f64	d7, d7, d6
 801264c:	ed92 6b00 	vldr	d6, [r2]
 8012650:	e7e4      	b.n	801261c <_strtod_l+0x3ec>
 8012652:	9907      	ldr	r1, [sp, #28]
 8012654:	3116      	adds	r1, #22
 8012656:	db0a      	blt.n	801266e <_strtod_l+0x43e>
 8012658:	4b54      	ldr	r3, [pc, #336]	; (80127ac <_strtod_l+0x57c>)
 801265a:	1b7d      	subs	r5, r7, r5
 801265c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012660:	ed95 7b00 	vldr	d7, [r5]
 8012664:	ec49 8b16 	vmov	d6, r8, r9
 8012668:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801266c:	e7d8      	b.n	8012620 <_strtod_l+0x3f0>
 801266e:	9907      	ldr	r1, [sp, #28]
 8012670:	1a9a      	subs	r2, r3, r2
 8012672:	440a      	add	r2, r1
 8012674:	2a00      	cmp	r2, #0
 8012676:	dd6f      	ble.n	8012758 <_strtod_l+0x528>
 8012678:	f012 000f 	ands.w	r0, r2, #15
 801267c:	d00a      	beq.n	8012694 <_strtod_l+0x464>
 801267e:	494b      	ldr	r1, [pc, #300]	; (80127ac <_strtod_l+0x57c>)
 8012680:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012684:	ed91 7b00 	vldr	d7, [r1]
 8012688:	ec49 8b16 	vmov	d6, r8, r9
 801268c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012690:	ec59 8b17 	vmov	r8, r9, d7
 8012694:	f032 020f 	bics.w	r2, r2, #15
 8012698:	d04f      	beq.n	801273a <_strtod_l+0x50a>
 801269a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801269e:	dd22      	ble.n	80126e6 <_strtod_l+0x4b6>
 80126a0:	2500      	movs	r5, #0
 80126a2:	462e      	mov	r6, r5
 80126a4:	9506      	str	r5, [sp, #24]
 80126a6:	462f      	mov	r7, r5
 80126a8:	2322      	movs	r3, #34	; 0x22
 80126aa:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80127b8 <_strtod_l+0x588>
 80126ae:	6023      	str	r3, [r4, #0]
 80126b0:	f04f 0800 	mov.w	r8, #0
 80126b4:	9b06      	ldr	r3, [sp, #24]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	f43f adfe 	beq.w	80122b8 <_strtod_l+0x88>
 80126bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80126be:	4620      	mov	r0, r4
 80126c0:	f001 fdce 	bl	8014260 <_Bfree>
 80126c4:	4639      	mov	r1, r7
 80126c6:	4620      	mov	r0, r4
 80126c8:	f001 fdca 	bl	8014260 <_Bfree>
 80126cc:	4631      	mov	r1, r6
 80126ce:	4620      	mov	r0, r4
 80126d0:	f001 fdc6 	bl	8014260 <_Bfree>
 80126d4:	9906      	ldr	r1, [sp, #24]
 80126d6:	4620      	mov	r0, r4
 80126d8:	f001 fdc2 	bl	8014260 <_Bfree>
 80126dc:	4629      	mov	r1, r5
 80126de:	4620      	mov	r0, r4
 80126e0:	f001 fdbe 	bl	8014260 <_Bfree>
 80126e4:	e5e8      	b.n	80122b8 <_strtod_l+0x88>
 80126e6:	2000      	movs	r0, #0
 80126e8:	ec49 8b17 	vmov	d7, r8, r9
 80126ec:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80127b0 <_strtod_l+0x580>
 80126f0:	1112      	asrs	r2, r2, #4
 80126f2:	4601      	mov	r1, r0
 80126f4:	2a01      	cmp	r2, #1
 80126f6:	dc23      	bgt.n	8012740 <_strtod_l+0x510>
 80126f8:	b108      	cbz	r0, 80126fe <_strtod_l+0x4ce>
 80126fa:	ec59 8b17 	vmov	r8, r9, d7
 80126fe:	4a2c      	ldr	r2, [pc, #176]	; (80127b0 <_strtod_l+0x580>)
 8012700:	482c      	ldr	r0, [pc, #176]	; (80127b4 <_strtod_l+0x584>)
 8012702:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012706:	ed92 7b00 	vldr	d7, [r2]
 801270a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801270e:	ec49 8b16 	vmov	d6, r8, r9
 8012712:	4a29      	ldr	r2, [pc, #164]	; (80127b8 <_strtod_l+0x588>)
 8012714:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012718:	ee17 1a90 	vmov	r1, s15
 801271c:	400a      	ands	r2, r1
 801271e:	4282      	cmp	r2, r0
 8012720:	ec59 8b17 	vmov	r8, r9, d7
 8012724:	d8bc      	bhi.n	80126a0 <_strtod_l+0x470>
 8012726:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801272a:	4282      	cmp	r2, r0
 801272c:	bf86      	itte	hi
 801272e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80127bc <_strtod_l+0x58c>
 8012732:	f04f 38ff 	movhi.w	r8, #4294967295
 8012736:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801273a:	2200      	movs	r2, #0
 801273c:	9204      	str	r2, [sp, #16]
 801273e:	e078      	b.n	8012832 <_strtod_l+0x602>
 8012740:	07d6      	lsls	r6, r2, #31
 8012742:	d504      	bpl.n	801274e <_strtod_l+0x51e>
 8012744:	ed9c 6b00 	vldr	d6, [ip]
 8012748:	2001      	movs	r0, #1
 801274a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801274e:	3101      	adds	r1, #1
 8012750:	1052      	asrs	r2, r2, #1
 8012752:	f10c 0c08 	add.w	ip, ip, #8
 8012756:	e7cd      	b.n	80126f4 <_strtod_l+0x4c4>
 8012758:	d0ef      	beq.n	801273a <_strtod_l+0x50a>
 801275a:	4252      	negs	r2, r2
 801275c:	f012 000f 	ands.w	r0, r2, #15
 8012760:	d00a      	beq.n	8012778 <_strtod_l+0x548>
 8012762:	4912      	ldr	r1, [pc, #72]	; (80127ac <_strtod_l+0x57c>)
 8012764:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012768:	ed91 7b00 	vldr	d7, [r1]
 801276c:	ec49 8b16 	vmov	d6, r8, r9
 8012770:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012774:	ec59 8b17 	vmov	r8, r9, d7
 8012778:	1112      	asrs	r2, r2, #4
 801277a:	d0de      	beq.n	801273a <_strtod_l+0x50a>
 801277c:	2a1f      	cmp	r2, #31
 801277e:	dd1f      	ble.n	80127c0 <_strtod_l+0x590>
 8012780:	2500      	movs	r5, #0
 8012782:	462e      	mov	r6, r5
 8012784:	9506      	str	r5, [sp, #24]
 8012786:	462f      	mov	r7, r5
 8012788:	2322      	movs	r3, #34	; 0x22
 801278a:	f04f 0800 	mov.w	r8, #0
 801278e:	f04f 0900 	mov.w	r9, #0
 8012792:	6023      	str	r3, [r4, #0]
 8012794:	e78e      	b.n	80126b4 <_strtod_l+0x484>
 8012796:	bf00      	nop
 8012798:	08015d3d 	.word	0x08015d3d
 801279c:	08015d78 	.word	0x08015d78
 80127a0:	08015d35 	.word	0x08015d35
 80127a4:	08015ebc 	.word	0x08015ebc
 80127a8:	08016168 	.word	0x08016168
 80127ac:	08016048 	.word	0x08016048
 80127b0:	08016020 	.word	0x08016020
 80127b4:	7ca00000 	.word	0x7ca00000
 80127b8:	7ff00000 	.word	0x7ff00000
 80127bc:	7fefffff 	.word	0x7fefffff
 80127c0:	f012 0110 	ands.w	r1, r2, #16
 80127c4:	bf18      	it	ne
 80127c6:	216a      	movne	r1, #106	; 0x6a
 80127c8:	9104      	str	r1, [sp, #16]
 80127ca:	ec49 8b17 	vmov	d7, r8, r9
 80127ce:	49be      	ldr	r1, [pc, #760]	; (8012ac8 <_strtod_l+0x898>)
 80127d0:	2000      	movs	r0, #0
 80127d2:	07d6      	lsls	r6, r2, #31
 80127d4:	d504      	bpl.n	80127e0 <_strtod_l+0x5b0>
 80127d6:	ed91 6b00 	vldr	d6, [r1]
 80127da:	2001      	movs	r0, #1
 80127dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80127e0:	1052      	asrs	r2, r2, #1
 80127e2:	f101 0108 	add.w	r1, r1, #8
 80127e6:	d1f4      	bne.n	80127d2 <_strtod_l+0x5a2>
 80127e8:	b108      	cbz	r0, 80127ee <_strtod_l+0x5be>
 80127ea:	ec59 8b17 	vmov	r8, r9, d7
 80127ee:	9a04      	ldr	r2, [sp, #16]
 80127f0:	b1c2      	cbz	r2, 8012824 <_strtod_l+0x5f4>
 80127f2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80127f6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80127fa:	2a00      	cmp	r2, #0
 80127fc:	4648      	mov	r0, r9
 80127fe:	dd11      	ble.n	8012824 <_strtod_l+0x5f4>
 8012800:	2a1f      	cmp	r2, #31
 8012802:	f340 812e 	ble.w	8012a62 <_strtod_l+0x832>
 8012806:	2a34      	cmp	r2, #52	; 0x34
 8012808:	bfde      	ittt	le
 801280a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801280e:	f04f 32ff 	movle.w	r2, #4294967295
 8012812:	fa02 f101 	lslle.w	r1, r2, r1
 8012816:	f04f 0800 	mov.w	r8, #0
 801281a:	bfcc      	ite	gt
 801281c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012820:	ea01 0900 	andle.w	r9, r1, r0
 8012824:	ec49 8b17 	vmov	d7, r8, r9
 8012828:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012830:	d0a6      	beq.n	8012780 <_strtod_l+0x550>
 8012832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012834:	9200      	str	r2, [sp, #0]
 8012836:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012838:	9a06      	ldr	r2, [sp, #24]
 801283a:	4620      	mov	r0, r4
 801283c:	f001 fd78 	bl	8014330 <__s2b>
 8012840:	9006      	str	r0, [sp, #24]
 8012842:	2800      	cmp	r0, #0
 8012844:	f43f af2c 	beq.w	80126a0 <_strtod_l+0x470>
 8012848:	9b07      	ldr	r3, [sp, #28]
 801284a:	1b7d      	subs	r5, r7, r5
 801284c:	2b00      	cmp	r3, #0
 801284e:	bfb4      	ite	lt
 8012850:	462b      	movlt	r3, r5
 8012852:	2300      	movge	r3, #0
 8012854:	9309      	str	r3, [sp, #36]	; 0x24
 8012856:	9b07      	ldr	r3, [sp, #28]
 8012858:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8012aa8 <_strtod_l+0x878>
 801285c:	ed9f ab94 	vldr	d10, [pc, #592]	; 8012ab0 <_strtod_l+0x880>
 8012860:	ed9f bb95 	vldr	d11, [pc, #596]	; 8012ab8 <_strtod_l+0x888>
 8012864:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012868:	2500      	movs	r5, #0
 801286a:	930c      	str	r3, [sp, #48]	; 0x30
 801286c:	462e      	mov	r6, r5
 801286e:	9b06      	ldr	r3, [sp, #24]
 8012870:	4620      	mov	r0, r4
 8012872:	6859      	ldr	r1, [r3, #4]
 8012874:	f001 fcb4 	bl	80141e0 <_Balloc>
 8012878:	4607      	mov	r7, r0
 801287a:	2800      	cmp	r0, #0
 801287c:	f43f af14 	beq.w	80126a8 <_strtod_l+0x478>
 8012880:	9b06      	ldr	r3, [sp, #24]
 8012882:	691a      	ldr	r2, [r3, #16]
 8012884:	3202      	adds	r2, #2
 8012886:	f103 010c 	add.w	r1, r3, #12
 801288a:	0092      	lsls	r2, r2, #2
 801288c:	300c      	adds	r0, #12
 801288e:	f7ff f807 	bl	80118a0 <memcpy>
 8012892:	ec49 8b10 	vmov	d0, r8, r9
 8012896:	aa14      	add	r2, sp, #80	; 0x50
 8012898:	a913      	add	r1, sp, #76	; 0x4c
 801289a:	4620      	mov	r0, r4
 801289c:	f002 f88e 	bl	80149bc <__d2b>
 80128a0:	ec49 8b18 	vmov	d8, r8, r9
 80128a4:	9012      	str	r0, [sp, #72]	; 0x48
 80128a6:	2800      	cmp	r0, #0
 80128a8:	f43f aefe 	beq.w	80126a8 <_strtod_l+0x478>
 80128ac:	2101      	movs	r1, #1
 80128ae:	4620      	mov	r0, r4
 80128b0:	f001 fdd8 	bl	8014464 <__i2b>
 80128b4:	4606      	mov	r6, r0
 80128b6:	2800      	cmp	r0, #0
 80128b8:	f43f aef6 	beq.w	80126a8 <_strtod_l+0x478>
 80128bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80128be:	9914      	ldr	r1, [sp, #80]	; 0x50
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	bfab      	itete	ge
 80128c4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80128c6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80128c8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80128cc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80128d0:	bfac      	ite	ge
 80128d2:	eb03 0b02 	addge.w	fp, r3, r2
 80128d6:	eba2 0a03 	sublt.w	sl, r2, r3
 80128da:	9a04      	ldr	r2, [sp, #16]
 80128dc:	1a9b      	subs	r3, r3, r2
 80128de:	440b      	add	r3, r1
 80128e0:	4a7a      	ldr	r2, [pc, #488]	; (8012acc <_strtod_l+0x89c>)
 80128e2:	3b01      	subs	r3, #1
 80128e4:	4293      	cmp	r3, r2
 80128e6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80128ea:	f280 80cd 	bge.w	8012a88 <_strtod_l+0x858>
 80128ee:	1ad2      	subs	r2, r2, r3
 80128f0:	2a1f      	cmp	r2, #31
 80128f2:	eba1 0102 	sub.w	r1, r1, r2
 80128f6:	f04f 0001 	mov.w	r0, #1
 80128fa:	f300 80b9 	bgt.w	8012a70 <_strtod_l+0x840>
 80128fe:	fa00 f302 	lsl.w	r3, r0, r2
 8012902:	930b      	str	r3, [sp, #44]	; 0x2c
 8012904:	2300      	movs	r3, #0
 8012906:	930a      	str	r3, [sp, #40]	; 0x28
 8012908:	eb0b 0301 	add.w	r3, fp, r1
 801290c:	9a04      	ldr	r2, [sp, #16]
 801290e:	459b      	cmp	fp, r3
 8012910:	448a      	add	sl, r1
 8012912:	4492      	add	sl, r2
 8012914:	465a      	mov	r2, fp
 8012916:	bfa8      	it	ge
 8012918:	461a      	movge	r2, r3
 801291a:	4552      	cmp	r2, sl
 801291c:	bfa8      	it	ge
 801291e:	4652      	movge	r2, sl
 8012920:	2a00      	cmp	r2, #0
 8012922:	bfc2      	ittt	gt
 8012924:	1a9b      	subgt	r3, r3, r2
 8012926:	ebaa 0a02 	subgt.w	sl, sl, r2
 801292a:	ebab 0b02 	subgt.w	fp, fp, r2
 801292e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012930:	2a00      	cmp	r2, #0
 8012932:	dd18      	ble.n	8012966 <_strtod_l+0x736>
 8012934:	4631      	mov	r1, r6
 8012936:	4620      	mov	r0, r4
 8012938:	930f      	str	r3, [sp, #60]	; 0x3c
 801293a:	f001 fe53 	bl	80145e4 <__pow5mult>
 801293e:	4606      	mov	r6, r0
 8012940:	2800      	cmp	r0, #0
 8012942:	f43f aeb1 	beq.w	80126a8 <_strtod_l+0x478>
 8012946:	4601      	mov	r1, r0
 8012948:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801294a:	4620      	mov	r0, r4
 801294c:	f001 fda0 	bl	8014490 <__multiply>
 8012950:	900e      	str	r0, [sp, #56]	; 0x38
 8012952:	2800      	cmp	r0, #0
 8012954:	f43f aea8 	beq.w	80126a8 <_strtod_l+0x478>
 8012958:	9912      	ldr	r1, [sp, #72]	; 0x48
 801295a:	4620      	mov	r0, r4
 801295c:	f001 fc80 	bl	8014260 <_Bfree>
 8012960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012964:	9212      	str	r2, [sp, #72]	; 0x48
 8012966:	2b00      	cmp	r3, #0
 8012968:	f300 8093 	bgt.w	8012a92 <_strtod_l+0x862>
 801296c:	9b07      	ldr	r3, [sp, #28]
 801296e:	2b00      	cmp	r3, #0
 8012970:	dd08      	ble.n	8012984 <_strtod_l+0x754>
 8012972:	4639      	mov	r1, r7
 8012974:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012976:	4620      	mov	r0, r4
 8012978:	f001 fe34 	bl	80145e4 <__pow5mult>
 801297c:	4607      	mov	r7, r0
 801297e:	2800      	cmp	r0, #0
 8012980:	f43f ae92 	beq.w	80126a8 <_strtod_l+0x478>
 8012984:	f1ba 0f00 	cmp.w	sl, #0
 8012988:	dd08      	ble.n	801299c <_strtod_l+0x76c>
 801298a:	4639      	mov	r1, r7
 801298c:	4652      	mov	r2, sl
 801298e:	4620      	mov	r0, r4
 8012990:	f001 fe82 	bl	8014698 <__lshift>
 8012994:	4607      	mov	r7, r0
 8012996:	2800      	cmp	r0, #0
 8012998:	f43f ae86 	beq.w	80126a8 <_strtod_l+0x478>
 801299c:	f1bb 0f00 	cmp.w	fp, #0
 80129a0:	dd08      	ble.n	80129b4 <_strtod_l+0x784>
 80129a2:	4631      	mov	r1, r6
 80129a4:	465a      	mov	r2, fp
 80129a6:	4620      	mov	r0, r4
 80129a8:	f001 fe76 	bl	8014698 <__lshift>
 80129ac:	4606      	mov	r6, r0
 80129ae:	2800      	cmp	r0, #0
 80129b0:	f43f ae7a 	beq.w	80126a8 <_strtod_l+0x478>
 80129b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80129b6:	463a      	mov	r2, r7
 80129b8:	4620      	mov	r0, r4
 80129ba:	f001 fef9 	bl	80147b0 <__mdiff>
 80129be:	4605      	mov	r5, r0
 80129c0:	2800      	cmp	r0, #0
 80129c2:	f43f ae71 	beq.w	80126a8 <_strtod_l+0x478>
 80129c6:	2300      	movs	r3, #0
 80129c8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80129cc:	60c3      	str	r3, [r0, #12]
 80129ce:	4631      	mov	r1, r6
 80129d0:	f001 fed2 	bl	8014778 <__mcmp>
 80129d4:	2800      	cmp	r0, #0
 80129d6:	da7d      	bge.n	8012ad4 <_strtod_l+0x8a4>
 80129d8:	ea5a 0308 	orrs.w	r3, sl, r8
 80129dc:	f040 80a3 	bne.w	8012b26 <_strtod_l+0x8f6>
 80129e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f040 809e 	bne.w	8012b26 <_strtod_l+0x8f6>
 80129ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80129ee:	0d1b      	lsrs	r3, r3, #20
 80129f0:	051b      	lsls	r3, r3, #20
 80129f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80129f6:	f240 8096 	bls.w	8012b26 <_strtod_l+0x8f6>
 80129fa:	696b      	ldr	r3, [r5, #20]
 80129fc:	b91b      	cbnz	r3, 8012a06 <_strtod_l+0x7d6>
 80129fe:	692b      	ldr	r3, [r5, #16]
 8012a00:	2b01      	cmp	r3, #1
 8012a02:	f340 8090 	ble.w	8012b26 <_strtod_l+0x8f6>
 8012a06:	4629      	mov	r1, r5
 8012a08:	2201      	movs	r2, #1
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	f001 fe44 	bl	8014698 <__lshift>
 8012a10:	4631      	mov	r1, r6
 8012a12:	4605      	mov	r5, r0
 8012a14:	f001 feb0 	bl	8014778 <__mcmp>
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	f340 8084 	ble.w	8012b26 <_strtod_l+0x8f6>
 8012a1e:	9904      	ldr	r1, [sp, #16]
 8012a20:	4a2b      	ldr	r2, [pc, #172]	; (8012ad0 <_strtod_l+0x8a0>)
 8012a22:	464b      	mov	r3, r9
 8012a24:	2900      	cmp	r1, #0
 8012a26:	f000 809d 	beq.w	8012b64 <_strtod_l+0x934>
 8012a2a:	ea02 0109 	and.w	r1, r2, r9
 8012a2e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012a32:	f300 8097 	bgt.w	8012b64 <_strtod_l+0x934>
 8012a36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012a3a:	f77f aea5 	ble.w	8012788 <_strtod_l+0x558>
 8012a3e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012ac0 <_strtod_l+0x890>
 8012a42:	ec49 8b16 	vmov	d6, r8, r9
 8012a46:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012a4a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012a4e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8012a52:	4313      	orrs	r3, r2
 8012a54:	bf08      	it	eq
 8012a56:	2322      	moveq	r3, #34	; 0x22
 8012a58:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012a5c:	bf08      	it	eq
 8012a5e:	6023      	streq	r3, [r4, #0]
 8012a60:	e62c      	b.n	80126bc <_strtod_l+0x48c>
 8012a62:	f04f 31ff 	mov.w	r1, #4294967295
 8012a66:	fa01 f202 	lsl.w	r2, r1, r2
 8012a6a:	ea02 0808 	and.w	r8, r2, r8
 8012a6e:	e6d9      	b.n	8012824 <_strtod_l+0x5f4>
 8012a70:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8012a74:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8012a78:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8012a7c:	33e2      	adds	r3, #226	; 0xe2
 8012a7e:	fa00 f303 	lsl.w	r3, r0, r3
 8012a82:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8012a86:	e73f      	b.n	8012908 <_strtod_l+0x6d8>
 8012a88:	2200      	movs	r2, #0
 8012a8a:	2301      	movs	r3, #1
 8012a8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012a90:	e73a      	b.n	8012908 <_strtod_l+0x6d8>
 8012a92:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012a94:	461a      	mov	r2, r3
 8012a96:	4620      	mov	r0, r4
 8012a98:	f001 fdfe 	bl	8014698 <__lshift>
 8012a9c:	9012      	str	r0, [sp, #72]	; 0x48
 8012a9e:	2800      	cmp	r0, #0
 8012aa0:	f47f af64 	bne.w	801296c <_strtod_l+0x73c>
 8012aa4:	e600      	b.n	80126a8 <_strtod_l+0x478>
 8012aa6:	bf00      	nop
 8012aa8:	94a03595 	.word	0x94a03595
 8012aac:	3fcfffff 	.word	0x3fcfffff
 8012ab0:	94a03595 	.word	0x94a03595
 8012ab4:	3fdfffff 	.word	0x3fdfffff
 8012ab8:	35afe535 	.word	0x35afe535
 8012abc:	3fe00000 	.word	0x3fe00000
 8012ac0:	00000000 	.word	0x00000000
 8012ac4:	39500000 	.word	0x39500000
 8012ac8:	08015d90 	.word	0x08015d90
 8012acc:	fffffc02 	.word	0xfffffc02
 8012ad0:	7ff00000 	.word	0x7ff00000
 8012ad4:	46cb      	mov	fp, r9
 8012ad6:	d15f      	bne.n	8012b98 <_strtod_l+0x968>
 8012ad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012adc:	f1ba 0f00 	cmp.w	sl, #0
 8012ae0:	d02a      	beq.n	8012b38 <_strtod_l+0x908>
 8012ae2:	4aa7      	ldr	r2, [pc, #668]	; (8012d80 <_strtod_l+0xb50>)
 8012ae4:	4293      	cmp	r3, r2
 8012ae6:	d12b      	bne.n	8012b40 <_strtod_l+0x910>
 8012ae8:	9b04      	ldr	r3, [sp, #16]
 8012aea:	4642      	mov	r2, r8
 8012aec:	b1fb      	cbz	r3, 8012b2e <_strtod_l+0x8fe>
 8012aee:	4ba5      	ldr	r3, [pc, #660]	; (8012d84 <_strtod_l+0xb54>)
 8012af0:	ea09 0303 	and.w	r3, r9, r3
 8012af4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012af8:	f04f 31ff 	mov.w	r1, #4294967295
 8012afc:	d81a      	bhi.n	8012b34 <_strtod_l+0x904>
 8012afe:	0d1b      	lsrs	r3, r3, #20
 8012b00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012b04:	fa01 f303 	lsl.w	r3, r1, r3
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	d119      	bne.n	8012b40 <_strtod_l+0x910>
 8012b0c:	4b9e      	ldr	r3, [pc, #632]	; (8012d88 <_strtod_l+0xb58>)
 8012b0e:	459b      	cmp	fp, r3
 8012b10:	d102      	bne.n	8012b18 <_strtod_l+0x8e8>
 8012b12:	3201      	adds	r2, #1
 8012b14:	f43f adc8 	beq.w	80126a8 <_strtod_l+0x478>
 8012b18:	4b9a      	ldr	r3, [pc, #616]	; (8012d84 <_strtod_l+0xb54>)
 8012b1a:	ea0b 0303 	and.w	r3, fp, r3
 8012b1e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8012b22:	f04f 0800 	mov.w	r8, #0
 8012b26:	9b04      	ldr	r3, [sp, #16]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d188      	bne.n	8012a3e <_strtod_l+0x80e>
 8012b2c:	e5c6      	b.n	80126bc <_strtod_l+0x48c>
 8012b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8012b32:	e7e9      	b.n	8012b08 <_strtod_l+0x8d8>
 8012b34:	460b      	mov	r3, r1
 8012b36:	e7e7      	b.n	8012b08 <_strtod_l+0x8d8>
 8012b38:	ea53 0308 	orrs.w	r3, r3, r8
 8012b3c:	f43f af6f 	beq.w	8012a1e <_strtod_l+0x7ee>
 8012b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b42:	b1cb      	cbz	r3, 8012b78 <_strtod_l+0x948>
 8012b44:	ea13 0f0b 	tst.w	r3, fp
 8012b48:	d0ed      	beq.n	8012b26 <_strtod_l+0x8f6>
 8012b4a:	9a04      	ldr	r2, [sp, #16]
 8012b4c:	4640      	mov	r0, r8
 8012b4e:	4649      	mov	r1, r9
 8012b50:	f1ba 0f00 	cmp.w	sl, #0
 8012b54:	d014      	beq.n	8012b80 <_strtod_l+0x950>
 8012b56:	f7ff fb4e 	bl	80121f6 <sulp>
 8012b5a:	ee38 7b00 	vadd.f64	d7, d8, d0
 8012b5e:	ec59 8b17 	vmov	r8, r9, d7
 8012b62:	e7e0      	b.n	8012b26 <_strtod_l+0x8f6>
 8012b64:	4013      	ands	r3, r2
 8012b66:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012b6a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012b6e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8012b72:	f04f 38ff 	mov.w	r8, #4294967295
 8012b76:	e7d6      	b.n	8012b26 <_strtod_l+0x8f6>
 8012b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b7a:	ea13 0f08 	tst.w	r3, r8
 8012b7e:	e7e3      	b.n	8012b48 <_strtod_l+0x918>
 8012b80:	f7ff fb39 	bl	80121f6 <sulp>
 8012b84:	ee38 0b40 	vsub.f64	d0, d8, d0
 8012b88:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b90:	ec59 8b10 	vmov	r8, r9, d0
 8012b94:	d1c7      	bne.n	8012b26 <_strtod_l+0x8f6>
 8012b96:	e5f7      	b.n	8012788 <_strtod_l+0x558>
 8012b98:	4631      	mov	r1, r6
 8012b9a:	4628      	mov	r0, r5
 8012b9c:	f001 ff6a 	bl	8014a74 <__ratio>
 8012ba0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8012ba4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bac:	d865      	bhi.n	8012c7a <_strtod_l+0xa4a>
 8012bae:	f1ba 0f00 	cmp.w	sl, #0
 8012bb2:	d042      	beq.n	8012c3a <_strtod_l+0xa0a>
 8012bb4:	4b75      	ldr	r3, [pc, #468]	; (8012d8c <_strtod_l+0xb5c>)
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8012bbc:	4871      	ldr	r0, [pc, #452]	; (8012d84 <_strtod_l+0xb54>)
 8012bbe:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8012d98 <_strtod_l+0xb68>
 8012bc2:	ea0b 0100 	and.w	r1, fp, r0
 8012bc6:	4561      	cmp	r1, ip
 8012bc8:	f040 808e 	bne.w	8012ce8 <_strtod_l+0xab8>
 8012bcc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8012bd0:	ec49 8b10 	vmov	d0, r8, r9
 8012bd4:	ec43 2b1c 	vmov	d12, r2, r3
 8012bd8:	910a      	str	r1, [sp, #40]	; 0x28
 8012bda:	f001 fe73 	bl	80148c4 <__ulp>
 8012bde:	ec49 8b1e 	vmov	d14, r8, r9
 8012be2:	4868      	ldr	r0, [pc, #416]	; (8012d84 <_strtod_l+0xb54>)
 8012be4:	eeac eb00 	vfma.f64	d14, d12, d0
 8012be8:	ee1e 3a90 	vmov	r3, s29
 8012bec:	4a68      	ldr	r2, [pc, #416]	; (8012d90 <_strtod_l+0xb60>)
 8012bee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012bf0:	4018      	ands	r0, r3
 8012bf2:	4290      	cmp	r0, r2
 8012bf4:	ec59 8b1e 	vmov	r8, r9, d14
 8012bf8:	d94e      	bls.n	8012c98 <_strtod_l+0xa68>
 8012bfa:	ee18 3a90 	vmov	r3, s17
 8012bfe:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012c02:	4293      	cmp	r3, r2
 8012c04:	d104      	bne.n	8012c10 <_strtod_l+0x9e0>
 8012c06:	ee18 3a10 	vmov	r3, s16
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	f43f ad4c 	beq.w	80126a8 <_strtod_l+0x478>
 8012c10:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8012d88 <_strtod_l+0xb58>
 8012c14:	f04f 38ff 	mov.w	r8, #4294967295
 8012c18:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	f001 fb20 	bl	8014260 <_Bfree>
 8012c20:	4639      	mov	r1, r7
 8012c22:	4620      	mov	r0, r4
 8012c24:	f001 fb1c 	bl	8014260 <_Bfree>
 8012c28:	4631      	mov	r1, r6
 8012c2a:	4620      	mov	r0, r4
 8012c2c:	f001 fb18 	bl	8014260 <_Bfree>
 8012c30:	4629      	mov	r1, r5
 8012c32:	4620      	mov	r0, r4
 8012c34:	f001 fb14 	bl	8014260 <_Bfree>
 8012c38:	e619      	b.n	801286e <_strtod_l+0x63e>
 8012c3a:	f1b8 0f00 	cmp.w	r8, #0
 8012c3e:	d112      	bne.n	8012c66 <_strtod_l+0xa36>
 8012c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012c44:	b9b3      	cbnz	r3, 8012c74 <_strtod_l+0xa44>
 8012c46:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012c4a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c52:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8012c56:	bf58      	it	pl
 8012c58:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8012c5c:	eeb1 7b4d 	vneg.f64	d7, d13
 8012c60:	ec53 2b17 	vmov	r2, r3, d7
 8012c64:	e7aa      	b.n	8012bbc <_strtod_l+0x98c>
 8012c66:	f1b8 0f01 	cmp.w	r8, #1
 8012c6a:	d103      	bne.n	8012c74 <_strtod_l+0xa44>
 8012c6c:	f1b9 0f00 	cmp.w	r9, #0
 8012c70:	f43f ad8a 	beq.w	8012788 <_strtod_l+0x558>
 8012c74:	4b47      	ldr	r3, [pc, #284]	; (8012d94 <_strtod_l+0xb64>)
 8012c76:	2200      	movs	r2, #0
 8012c78:	e79e      	b.n	8012bb8 <_strtod_l+0x988>
 8012c7a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8012c7e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8012c82:	f1ba 0f00 	cmp.w	sl, #0
 8012c86:	d104      	bne.n	8012c92 <_strtod_l+0xa62>
 8012c88:	eeb1 7b4d 	vneg.f64	d7, d13
 8012c8c:	ec53 2b17 	vmov	r2, r3, d7
 8012c90:	e794      	b.n	8012bbc <_strtod_l+0x98c>
 8012c92:	eeb0 7b4d 	vmov.f64	d7, d13
 8012c96:	e7f9      	b.n	8012c8c <_strtod_l+0xa5c>
 8012c98:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8012c9c:	9b04      	ldr	r3, [sp, #16]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d1ba      	bne.n	8012c18 <_strtod_l+0x9e8>
 8012ca2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012ca6:	0d1b      	lsrs	r3, r3, #20
 8012ca8:	051b      	lsls	r3, r3, #20
 8012caa:	4299      	cmp	r1, r3
 8012cac:	d1b4      	bne.n	8012c18 <_strtod_l+0x9e8>
 8012cae:	ec51 0b1d 	vmov	r0, r1, d13
 8012cb2:	f7ed fd49 	bl	8000748 <__aeabi_d2lz>
 8012cb6:	f7ed fd01 	bl	80006bc <__aeabi_l2d>
 8012cba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012cbe:	ec41 0b17 	vmov	d7, r0, r1
 8012cc2:	ea43 0308 	orr.w	r3, r3, r8
 8012cc6:	ea53 030a 	orrs.w	r3, r3, sl
 8012cca:	ee3d db47 	vsub.f64	d13, d13, d7
 8012cce:	d03c      	beq.n	8012d4a <_strtod_l+0xb1a>
 8012cd0:	eeb4 dbca 	vcmpe.f64	d13, d10
 8012cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cd8:	f53f acf0 	bmi.w	80126bc <_strtod_l+0x48c>
 8012cdc:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8012ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce4:	dd98      	ble.n	8012c18 <_strtod_l+0x9e8>
 8012ce6:	e4e9      	b.n	80126bc <_strtod_l+0x48c>
 8012ce8:	9804      	ldr	r0, [sp, #16]
 8012cea:	b1f0      	cbz	r0, 8012d2a <_strtod_l+0xafa>
 8012cec:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8012cf0:	d81b      	bhi.n	8012d2a <_strtod_l+0xafa>
 8012cf2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8012d78 <_strtod_l+0xb48>
 8012cf6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8012cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cfe:	d811      	bhi.n	8012d24 <_strtod_l+0xaf4>
 8012d00:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8012d04:	ee1d 3a10 	vmov	r3, s26
 8012d08:	2b01      	cmp	r3, #1
 8012d0a:	bf38      	it	cc
 8012d0c:	2301      	movcc	r3, #1
 8012d0e:	ee0d 3a10 	vmov	s26, r3
 8012d12:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8012d16:	f1ba 0f00 	cmp.w	sl, #0
 8012d1a:	d113      	bne.n	8012d44 <_strtod_l+0xb14>
 8012d1c:	eeb1 7b4d 	vneg.f64	d7, d13
 8012d20:	ec53 2b17 	vmov	r2, r3, d7
 8012d24:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8012d28:	1a43      	subs	r3, r0, r1
 8012d2a:	eeb0 0b48 	vmov.f64	d0, d8
 8012d2e:	ec43 2b1c 	vmov	d12, r2, r3
 8012d32:	910a      	str	r1, [sp, #40]	; 0x28
 8012d34:	f001 fdc6 	bl	80148c4 <__ulp>
 8012d38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012d3a:	eeac 8b00 	vfma.f64	d8, d12, d0
 8012d3e:	ec59 8b18 	vmov	r8, r9, d8
 8012d42:	e7ab      	b.n	8012c9c <_strtod_l+0xa6c>
 8012d44:	eeb0 7b4d 	vmov.f64	d7, d13
 8012d48:	e7ea      	b.n	8012d20 <_strtod_l+0xaf0>
 8012d4a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8012d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d52:	f57f af61 	bpl.w	8012c18 <_strtod_l+0x9e8>
 8012d56:	e4b1      	b.n	80126bc <_strtod_l+0x48c>
 8012d58:	2300      	movs	r3, #0
 8012d5a:	9308      	str	r3, [sp, #32]
 8012d5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012d5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012d60:	6013      	str	r3, [r2, #0]
 8012d62:	f7ff baad 	b.w	80122c0 <_strtod_l+0x90>
 8012d66:	2a65      	cmp	r2, #101	; 0x65
 8012d68:	f43f ab9f 	beq.w	80124aa <_strtod_l+0x27a>
 8012d6c:	2a45      	cmp	r2, #69	; 0x45
 8012d6e:	f43f ab9c 	beq.w	80124aa <_strtod_l+0x27a>
 8012d72:	2101      	movs	r1, #1
 8012d74:	f7ff bbd4 	b.w	8012520 <_strtod_l+0x2f0>
 8012d78:	ffc00000 	.word	0xffc00000
 8012d7c:	41dfffff 	.word	0x41dfffff
 8012d80:	000fffff 	.word	0x000fffff
 8012d84:	7ff00000 	.word	0x7ff00000
 8012d88:	7fefffff 	.word	0x7fefffff
 8012d8c:	3ff00000 	.word	0x3ff00000
 8012d90:	7c9fffff 	.word	0x7c9fffff
 8012d94:	bff00000 	.word	0xbff00000
 8012d98:	7fe00000 	.word	0x7fe00000

08012d9c <strtod>:
 8012d9c:	460a      	mov	r2, r1
 8012d9e:	4601      	mov	r1, r0
 8012da0:	4802      	ldr	r0, [pc, #8]	; (8012dac <strtod+0x10>)
 8012da2:	4b03      	ldr	r3, [pc, #12]	; (8012db0 <strtod+0x14>)
 8012da4:	6800      	ldr	r0, [r0, #0]
 8012da6:	f7ff ba43 	b.w	8012230 <_strtod_l>
 8012daa:	bf00      	nop
 8012dac:	240007a8 	.word	0x240007a8
 8012db0:	24000810 	.word	0x24000810

08012db4 <_strtol_l.constprop.0>:
 8012db4:	2b01      	cmp	r3, #1
 8012db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dba:	d001      	beq.n	8012dc0 <_strtol_l.constprop.0+0xc>
 8012dbc:	2b24      	cmp	r3, #36	; 0x24
 8012dbe:	d906      	bls.n	8012dce <_strtol_l.constprop.0+0x1a>
 8012dc0:	f7fe fd44 	bl	801184c <__errno>
 8012dc4:	2316      	movs	r3, #22
 8012dc6:	6003      	str	r3, [r0, #0]
 8012dc8:	2000      	movs	r0, #0
 8012dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012eb4 <_strtol_l.constprop.0+0x100>
 8012dd2:	460d      	mov	r5, r1
 8012dd4:	462e      	mov	r6, r5
 8012dd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012dda:	f814 700c 	ldrb.w	r7, [r4, ip]
 8012dde:	f017 0708 	ands.w	r7, r7, #8
 8012de2:	d1f7      	bne.n	8012dd4 <_strtol_l.constprop.0+0x20>
 8012de4:	2c2d      	cmp	r4, #45	; 0x2d
 8012de6:	d132      	bne.n	8012e4e <_strtol_l.constprop.0+0x9a>
 8012de8:	782c      	ldrb	r4, [r5, #0]
 8012dea:	2701      	movs	r7, #1
 8012dec:	1cb5      	adds	r5, r6, #2
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d05b      	beq.n	8012eaa <_strtol_l.constprop.0+0xf6>
 8012df2:	2b10      	cmp	r3, #16
 8012df4:	d109      	bne.n	8012e0a <_strtol_l.constprop.0+0x56>
 8012df6:	2c30      	cmp	r4, #48	; 0x30
 8012df8:	d107      	bne.n	8012e0a <_strtol_l.constprop.0+0x56>
 8012dfa:	782c      	ldrb	r4, [r5, #0]
 8012dfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012e00:	2c58      	cmp	r4, #88	; 0x58
 8012e02:	d14d      	bne.n	8012ea0 <_strtol_l.constprop.0+0xec>
 8012e04:	786c      	ldrb	r4, [r5, #1]
 8012e06:	2310      	movs	r3, #16
 8012e08:	3502      	adds	r5, #2
 8012e0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012e0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8012e12:	f04f 0c00 	mov.w	ip, #0
 8012e16:	fbb8 f9f3 	udiv	r9, r8, r3
 8012e1a:	4666      	mov	r6, ip
 8012e1c:	fb03 8a19 	mls	sl, r3, r9, r8
 8012e20:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012e24:	f1be 0f09 	cmp.w	lr, #9
 8012e28:	d816      	bhi.n	8012e58 <_strtol_l.constprop.0+0xa4>
 8012e2a:	4674      	mov	r4, lr
 8012e2c:	42a3      	cmp	r3, r4
 8012e2e:	dd24      	ble.n	8012e7a <_strtol_l.constprop.0+0xc6>
 8012e30:	f1bc 0f00 	cmp.w	ip, #0
 8012e34:	db1e      	blt.n	8012e74 <_strtol_l.constprop.0+0xc0>
 8012e36:	45b1      	cmp	r9, r6
 8012e38:	d31c      	bcc.n	8012e74 <_strtol_l.constprop.0+0xc0>
 8012e3a:	d101      	bne.n	8012e40 <_strtol_l.constprop.0+0x8c>
 8012e3c:	45a2      	cmp	sl, r4
 8012e3e:	db19      	blt.n	8012e74 <_strtol_l.constprop.0+0xc0>
 8012e40:	fb06 4603 	mla	r6, r6, r3, r4
 8012e44:	f04f 0c01 	mov.w	ip, #1
 8012e48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e4c:	e7e8      	b.n	8012e20 <_strtol_l.constprop.0+0x6c>
 8012e4e:	2c2b      	cmp	r4, #43	; 0x2b
 8012e50:	bf04      	itt	eq
 8012e52:	782c      	ldrbeq	r4, [r5, #0]
 8012e54:	1cb5      	addeq	r5, r6, #2
 8012e56:	e7ca      	b.n	8012dee <_strtol_l.constprop.0+0x3a>
 8012e58:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012e5c:	f1be 0f19 	cmp.w	lr, #25
 8012e60:	d801      	bhi.n	8012e66 <_strtol_l.constprop.0+0xb2>
 8012e62:	3c37      	subs	r4, #55	; 0x37
 8012e64:	e7e2      	b.n	8012e2c <_strtol_l.constprop.0+0x78>
 8012e66:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8012e6a:	f1be 0f19 	cmp.w	lr, #25
 8012e6e:	d804      	bhi.n	8012e7a <_strtol_l.constprop.0+0xc6>
 8012e70:	3c57      	subs	r4, #87	; 0x57
 8012e72:	e7db      	b.n	8012e2c <_strtol_l.constprop.0+0x78>
 8012e74:	f04f 3cff 	mov.w	ip, #4294967295
 8012e78:	e7e6      	b.n	8012e48 <_strtol_l.constprop.0+0x94>
 8012e7a:	f1bc 0f00 	cmp.w	ip, #0
 8012e7e:	da05      	bge.n	8012e8c <_strtol_l.constprop.0+0xd8>
 8012e80:	2322      	movs	r3, #34	; 0x22
 8012e82:	6003      	str	r3, [r0, #0]
 8012e84:	4646      	mov	r6, r8
 8012e86:	b942      	cbnz	r2, 8012e9a <_strtol_l.constprop.0+0xe6>
 8012e88:	4630      	mov	r0, r6
 8012e8a:	e79e      	b.n	8012dca <_strtol_l.constprop.0+0x16>
 8012e8c:	b107      	cbz	r7, 8012e90 <_strtol_l.constprop.0+0xdc>
 8012e8e:	4276      	negs	r6, r6
 8012e90:	2a00      	cmp	r2, #0
 8012e92:	d0f9      	beq.n	8012e88 <_strtol_l.constprop.0+0xd4>
 8012e94:	f1bc 0f00 	cmp.w	ip, #0
 8012e98:	d000      	beq.n	8012e9c <_strtol_l.constprop.0+0xe8>
 8012e9a:	1e69      	subs	r1, r5, #1
 8012e9c:	6011      	str	r1, [r2, #0]
 8012e9e:	e7f3      	b.n	8012e88 <_strtol_l.constprop.0+0xd4>
 8012ea0:	2430      	movs	r4, #48	; 0x30
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d1b1      	bne.n	8012e0a <_strtol_l.constprop.0+0x56>
 8012ea6:	2308      	movs	r3, #8
 8012ea8:	e7af      	b.n	8012e0a <_strtol_l.constprop.0+0x56>
 8012eaa:	2c30      	cmp	r4, #48	; 0x30
 8012eac:	d0a5      	beq.n	8012dfa <_strtol_l.constprop.0+0x46>
 8012eae:	230a      	movs	r3, #10
 8012eb0:	e7ab      	b.n	8012e0a <_strtol_l.constprop.0+0x56>
 8012eb2:	bf00      	nop
 8012eb4:	08015db9 	.word	0x08015db9

08012eb8 <strtol>:
 8012eb8:	4613      	mov	r3, r2
 8012eba:	460a      	mov	r2, r1
 8012ebc:	4601      	mov	r1, r0
 8012ebe:	4802      	ldr	r0, [pc, #8]	; (8012ec8 <strtol+0x10>)
 8012ec0:	6800      	ldr	r0, [r0, #0]
 8012ec2:	f7ff bf77 	b.w	8012db4 <_strtol_l.constprop.0>
 8012ec6:	bf00      	nop
 8012ec8:	240007a8 	.word	0x240007a8

08012ecc <quorem>:
 8012ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ed0:	6903      	ldr	r3, [r0, #16]
 8012ed2:	690c      	ldr	r4, [r1, #16]
 8012ed4:	42a3      	cmp	r3, r4
 8012ed6:	4607      	mov	r7, r0
 8012ed8:	f2c0 8081 	blt.w	8012fde <quorem+0x112>
 8012edc:	3c01      	subs	r4, #1
 8012ede:	f101 0814 	add.w	r8, r1, #20
 8012ee2:	f100 0514 	add.w	r5, r0, #20
 8012ee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012eea:	9301      	str	r3, [sp, #4]
 8012eec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012ef0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ef4:	3301      	adds	r3, #1
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012efc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012f00:	fbb2 f6f3 	udiv	r6, r2, r3
 8012f04:	d331      	bcc.n	8012f6a <quorem+0x9e>
 8012f06:	f04f 0e00 	mov.w	lr, #0
 8012f0a:	4640      	mov	r0, r8
 8012f0c:	46ac      	mov	ip, r5
 8012f0e:	46f2      	mov	sl, lr
 8012f10:	f850 2b04 	ldr.w	r2, [r0], #4
 8012f14:	b293      	uxth	r3, r2
 8012f16:	fb06 e303 	mla	r3, r6, r3, lr
 8012f1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012f1e:	b29b      	uxth	r3, r3
 8012f20:	ebaa 0303 	sub.w	r3, sl, r3
 8012f24:	f8dc a000 	ldr.w	sl, [ip]
 8012f28:	0c12      	lsrs	r2, r2, #16
 8012f2a:	fa13 f38a 	uxtah	r3, r3, sl
 8012f2e:	fb06 e202 	mla	r2, r6, r2, lr
 8012f32:	9300      	str	r3, [sp, #0]
 8012f34:	9b00      	ldr	r3, [sp, #0]
 8012f36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012f3a:	b292      	uxth	r2, r2
 8012f3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012f40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012f44:	f8bd 3000 	ldrh.w	r3, [sp]
 8012f48:	4581      	cmp	r9, r0
 8012f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012f4e:	f84c 3b04 	str.w	r3, [ip], #4
 8012f52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012f56:	d2db      	bcs.n	8012f10 <quorem+0x44>
 8012f58:	f855 300b 	ldr.w	r3, [r5, fp]
 8012f5c:	b92b      	cbnz	r3, 8012f6a <quorem+0x9e>
 8012f5e:	9b01      	ldr	r3, [sp, #4]
 8012f60:	3b04      	subs	r3, #4
 8012f62:	429d      	cmp	r5, r3
 8012f64:	461a      	mov	r2, r3
 8012f66:	d32e      	bcc.n	8012fc6 <quorem+0xfa>
 8012f68:	613c      	str	r4, [r7, #16]
 8012f6a:	4638      	mov	r0, r7
 8012f6c:	f001 fc04 	bl	8014778 <__mcmp>
 8012f70:	2800      	cmp	r0, #0
 8012f72:	db24      	blt.n	8012fbe <quorem+0xf2>
 8012f74:	3601      	adds	r6, #1
 8012f76:	4628      	mov	r0, r5
 8012f78:	f04f 0c00 	mov.w	ip, #0
 8012f7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012f80:	f8d0 e000 	ldr.w	lr, [r0]
 8012f84:	b293      	uxth	r3, r2
 8012f86:	ebac 0303 	sub.w	r3, ip, r3
 8012f8a:	0c12      	lsrs	r2, r2, #16
 8012f8c:	fa13 f38e 	uxtah	r3, r3, lr
 8012f90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012f94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012f98:	b29b      	uxth	r3, r3
 8012f9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012f9e:	45c1      	cmp	r9, r8
 8012fa0:	f840 3b04 	str.w	r3, [r0], #4
 8012fa4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012fa8:	d2e8      	bcs.n	8012f7c <quorem+0xb0>
 8012faa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012fae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012fb2:	b922      	cbnz	r2, 8012fbe <quorem+0xf2>
 8012fb4:	3b04      	subs	r3, #4
 8012fb6:	429d      	cmp	r5, r3
 8012fb8:	461a      	mov	r2, r3
 8012fba:	d30a      	bcc.n	8012fd2 <quorem+0x106>
 8012fbc:	613c      	str	r4, [r7, #16]
 8012fbe:	4630      	mov	r0, r6
 8012fc0:	b003      	add	sp, #12
 8012fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fc6:	6812      	ldr	r2, [r2, #0]
 8012fc8:	3b04      	subs	r3, #4
 8012fca:	2a00      	cmp	r2, #0
 8012fcc:	d1cc      	bne.n	8012f68 <quorem+0x9c>
 8012fce:	3c01      	subs	r4, #1
 8012fd0:	e7c7      	b.n	8012f62 <quorem+0x96>
 8012fd2:	6812      	ldr	r2, [r2, #0]
 8012fd4:	3b04      	subs	r3, #4
 8012fd6:	2a00      	cmp	r2, #0
 8012fd8:	d1f0      	bne.n	8012fbc <quorem+0xf0>
 8012fda:	3c01      	subs	r4, #1
 8012fdc:	e7eb      	b.n	8012fb6 <quorem+0xea>
 8012fde:	2000      	movs	r0, #0
 8012fe0:	e7ee      	b.n	8012fc0 <quorem+0xf4>
 8012fe2:	0000      	movs	r0, r0
 8012fe4:	0000      	movs	r0, r0
	...

08012fe8 <_dtoa_r>:
 8012fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fec:	ed2d 8b02 	vpush	{d8}
 8012ff0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012ff2:	b091      	sub	sp, #68	; 0x44
 8012ff4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012ff8:	ec59 8b10 	vmov	r8, r9, d0
 8012ffc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8012ffe:	9106      	str	r1, [sp, #24]
 8013000:	4606      	mov	r6, r0
 8013002:	9208      	str	r2, [sp, #32]
 8013004:	930c      	str	r3, [sp, #48]	; 0x30
 8013006:	b975      	cbnz	r5, 8013026 <_dtoa_r+0x3e>
 8013008:	2010      	movs	r0, #16
 801300a:	f001 f8cf 	bl	80141ac <malloc>
 801300e:	4602      	mov	r2, r0
 8013010:	6270      	str	r0, [r6, #36]	; 0x24
 8013012:	b920      	cbnz	r0, 801301e <_dtoa_r+0x36>
 8013014:	4baa      	ldr	r3, [pc, #680]	; (80132c0 <_dtoa_r+0x2d8>)
 8013016:	21ea      	movs	r1, #234	; 0xea
 8013018:	48aa      	ldr	r0, [pc, #680]	; (80132c4 <_dtoa_r+0x2dc>)
 801301a:	f002 f82b 	bl	8015074 <__assert_func>
 801301e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013022:	6005      	str	r5, [r0, #0]
 8013024:	60c5      	str	r5, [r0, #12]
 8013026:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013028:	6819      	ldr	r1, [r3, #0]
 801302a:	b151      	cbz	r1, 8013042 <_dtoa_r+0x5a>
 801302c:	685a      	ldr	r2, [r3, #4]
 801302e:	604a      	str	r2, [r1, #4]
 8013030:	2301      	movs	r3, #1
 8013032:	4093      	lsls	r3, r2
 8013034:	608b      	str	r3, [r1, #8]
 8013036:	4630      	mov	r0, r6
 8013038:	f001 f912 	bl	8014260 <_Bfree>
 801303c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801303e:	2200      	movs	r2, #0
 8013040:	601a      	str	r2, [r3, #0]
 8013042:	f1b9 0300 	subs.w	r3, r9, #0
 8013046:	bfbb      	ittet	lt
 8013048:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801304c:	9303      	strlt	r3, [sp, #12]
 801304e:	2300      	movge	r3, #0
 8013050:	2201      	movlt	r2, #1
 8013052:	bfac      	ite	ge
 8013054:	6023      	strge	r3, [r4, #0]
 8013056:	6022      	strlt	r2, [r4, #0]
 8013058:	4b9b      	ldr	r3, [pc, #620]	; (80132c8 <_dtoa_r+0x2e0>)
 801305a:	9c03      	ldr	r4, [sp, #12]
 801305c:	43a3      	bics	r3, r4
 801305e:	d11c      	bne.n	801309a <_dtoa_r+0xb2>
 8013060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013062:	f242 730f 	movw	r3, #9999	; 0x270f
 8013066:	6013      	str	r3, [r2, #0]
 8013068:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801306c:	ea53 0308 	orrs.w	r3, r3, r8
 8013070:	f000 84fd 	beq.w	8013a6e <_dtoa_r+0xa86>
 8013074:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013076:	b963      	cbnz	r3, 8013092 <_dtoa_r+0xaa>
 8013078:	4b94      	ldr	r3, [pc, #592]	; (80132cc <_dtoa_r+0x2e4>)
 801307a:	e01f      	b.n	80130bc <_dtoa_r+0xd4>
 801307c:	4b94      	ldr	r3, [pc, #592]	; (80132d0 <_dtoa_r+0x2e8>)
 801307e:	9301      	str	r3, [sp, #4]
 8013080:	3308      	adds	r3, #8
 8013082:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013084:	6013      	str	r3, [r2, #0]
 8013086:	9801      	ldr	r0, [sp, #4]
 8013088:	b011      	add	sp, #68	; 0x44
 801308a:	ecbd 8b02 	vpop	{d8}
 801308e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013092:	4b8e      	ldr	r3, [pc, #568]	; (80132cc <_dtoa_r+0x2e4>)
 8013094:	9301      	str	r3, [sp, #4]
 8013096:	3303      	adds	r3, #3
 8013098:	e7f3      	b.n	8013082 <_dtoa_r+0x9a>
 801309a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801309e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80130a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130a6:	d10b      	bne.n	80130c0 <_dtoa_r+0xd8>
 80130a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80130aa:	2301      	movs	r3, #1
 80130ac:	6013      	str	r3, [r2, #0]
 80130ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	f000 84d9 	beq.w	8013a68 <_dtoa_r+0xa80>
 80130b6:	4887      	ldr	r0, [pc, #540]	; (80132d4 <_dtoa_r+0x2ec>)
 80130b8:	6018      	str	r0, [r3, #0]
 80130ba:	1e43      	subs	r3, r0, #1
 80130bc:	9301      	str	r3, [sp, #4]
 80130be:	e7e2      	b.n	8013086 <_dtoa_r+0x9e>
 80130c0:	a90f      	add	r1, sp, #60	; 0x3c
 80130c2:	aa0e      	add	r2, sp, #56	; 0x38
 80130c4:	4630      	mov	r0, r6
 80130c6:	eeb0 0b48 	vmov.f64	d0, d8
 80130ca:	f001 fc77 	bl	80149bc <__d2b>
 80130ce:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80130d2:	4605      	mov	r5, r0
 80130d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80130d6:	2900      	cmp	r1, #0
 80130d8:	d046      	beq.n	8013168 <_dtoa_r+0x180>
 80130da:	ee18 4a90 	vmov	r4, s17
 80130de:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80130e2:	ec53 2b18 	vmov	r2, r3, d8
 80130e6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80130ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80130ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80130f2:	2400      	movs	r4, #0
 80130f4:	ec43 2b16 	vmov	d6, r2, r3
 80130f8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80130fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80132a8 <_dtoa_r+0x2c0>
 8013100:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013104:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80132b0 <_dtoa_r+0x2c8>
 8013108:	eea7 6b05 	vfma.f64	d6, d7, d5
 801310c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80132b8 <_dtoa_r+0x2d0>
 8013110:	ee07 1a90 	vmov	s15, r1
 8013114:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013118:	eeb0 7b46 	vmov.f64	d7, d6
 801311c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013120:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013124:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801312c:	ee16 ba90 	vmov	fp, s13
 8013130:	940a      	str	r4, [sp, #40]	; 0x28
 8013132:	d508      	bpl.n	8013146 <_dtoa_r+0x15e>
 8013134:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013138:	eeb4 6b47 	vcmp.f64	d6, d7
 801313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013140:	bf18      	it	ne
 8013142:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8013146:	f1bb 0f16 	cmp.w	fp, #22
 801314a:	d82f      	bhi.n	80131ac <_dtoa_r+0x1c4>
 801314c:	4b62      	ldr	r3, [pc, #392]	; (80132d8 <_dtoa_r+0x2f0>)
 801314e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013152:	ed93 7b00 	vldr	d7, [r3]
 8013156:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801315a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801315e:	d501      	bpl.n	8013164 <_dtoa_r+0x17c>
 8013160:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013164:	2300      	movs	r3, #0
 8013166:	e022      	b.n	80131ae <_dtoa_r+0x1c6>
 8013168:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801316a:	4401      	add	r1, r0
 801316c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8013170:	2b20      	cmp	r3, #32
 8013172:	bfc1      	itttt	gt
 8013174:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013178:	fa04 f303 	lslgt.w	r3, r4, r3
 801317c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8013180:	fa28 f804 	lsrgt.w	r8, r8, r4
 8013184:	bfd6      	itet	le
 8013186:	f1c3 0320 	rsble	r3, r3, #32
 801318a:	ea43 0808 	orrgt.w	r8, r3, r8
 801318e:	fa08 f803 	lslle.w	r8, r8, r3
 8013192:	ee07 8a90 	vmov	s15, r8
 8013196:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801319a:	3901      	subs	r1, #1
 801319c:	ee17 4a90 	vmov	r4, s15
 80131a0:	ec53 2b17 	vmov	r2, r3, d7
 80131a4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80131a8:	2401      	movs	r4, #1
 80131aa:	e7a3      	b.n	80130f4 <_dtoa_r+0x10c>
 80131ac:	2301      	movs	r3, #1
 80131ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80131b0:	1a43      	subs	r3, r0, r1
 80131b2:	1e5a      	subs	r2, r3, #1
 80131b4:	bf45      	ittet	mi
 80131b6:	f1c3 0301 	rsbmi	r3, r3, #1
 80131ba:	9304      	strmi	r3, [sp, #16]
 80131bc:	2300      	movpl	r3, #0
 80131be:	2300      	movmi	r3, #0
 80131c0:	9205      	str	r2, [sp, #20]
 80131c2:	bf54      	ite	pl
 80131c4:	9304      	strpl	r3, [sp, #16]
 80131c6:	9305      	strmi	r3, [sp, #20]
 80131c8:	f1bb 0f00 	cmp.w	fp, #0
 80131cc:	db18      	blt.n	8013200 <_dtoa_r+0x218>
 80131ce:	9b05      	ldr	r3, [sp, #20]
 80131d0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80131d4:	445b      	add	r3, fp
 80131d6:	9305      	str	r3, [sp, #20]
 80131d8:	2300      	movs	r3, #0
 80131da:	9a06      	ldr	r2, [sp, #24]
 80131dc:	2a09      	cmp	r2, #9
 80131de:	d849      	bhi.n	8013274 <_dtoa_r+0x28c>
 80131e0:	2a05      	cmp	r2, #5
 80131e2:	bfc4      	itt	gt
 80131e4:	3a04      	subgt	r2, #4
 80131e6:	9206      	strgt	r2, [sp, #24]
 80131e8:	9a06      	ldr	r2, [sp, #24]
 80131ea:	f1a2 0202 	sub.w	r2, r2, #2
 80131ee:	bfcc      	ite	gt
 80131f0:	2400      	movgt	r4, #0
 80131f2:	2401      	movle	r4, #1
 80131f4:	2a03      	cmp	r2, #3
 80131f6:	d848      	bhi.n	801328a <_dtoa_r+0x2a2>
 80131f8:	e8df f002 	tbb	[pc, r2]
 80131fc:	3a2c2e0b 	.word	0x3a2c2e0b
 8013200:	9b04      	ldr	r3, [sp, #16]
 8013202:	2200      	movs	r2, #0
 8013204:	eba3 030b 	sub.w	r3, r3, fp
 8013208:	9304      	str	r3, [sp, #16]
 801320a:	9209      	str	r2, [sp, #36]	; 0x24
 801320c:	f1cb 0300 	rsb	r3, fp, #0
 8013210:	e7e3      	b.n	80131da <_dtoa_r+0x1f2>
 8013212:	2200      	movs	r2, #0
 8013214:	9207      	str	r2, [sp, #28]
 8013216:	9a08      	ldr	r2, [sp, #32]
 8013218:	2a00      	cmp	r2, #0
 801321a:	dc39      	bgt.n	8013290 <_dtoa_r+0x2a8>
 801321c:	f04f 0a01 	mov.w	sl, #1
 8013220:	46d1      	mov	r9, sl
 8013222:	4652      	mov	r2, sl
 8013224:	f8cd a020 	str.w	sl, [sp, #32]
 8013228:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801322a:	2100      	movs	r1, #0
 801322c:	6079      	str	r1, [r7, #4]
 801322e:	2004      	movs	r0, #4
 8013230:	f100 0c14 	add.w	ip, r0, #20
 8013234:	4594      	cmp	ip, r2
 8013236:	6879      	ldr	r1, [r7, #4]
 8013238:	d92f      	bls.n	801329a <_dtoa_r+0x2b2>
 801323a:	4630      	mov	r0, r6
 801323c:	930d      	str	r3, [sp, #52]	; 0x34
 801323e:	f000 ffcf 	bl	80141e0 <_Balloc>
 8013242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013244:	9001      	str	r0, [sp, #4]
 8013246:	4602      	mov	r2, r0
 8013248:	2800      	cmp	r0, #0
 801324a:	d149      	bne.n	80132e0 <_dtoa_r+0x2f8>
 801324c:	4b23      	ldr	r3, [pc, #140]	; (80132dc <_dtoa_r+0x2f4>)
 801324e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013252:	e6e1      	b.n	8013018 <_dtoa_r+0x30>
 8013254:	2201      	movs	r2, #1
 8013256:	e7dd      	b.n	8013214 <_dtoa_r+0x22c>
 8013258:	2200      	movs	r2, #0
 801325a:	9207      	str	r2, [sp, #28]
 801325c:	9a08      	ldr	r2, [sp, #32]
 801325e:	eb0b 0a02 	add.w	sl, fp, r2
 8013262:	f10a 0901 	add.w	r9, sl, #1
 8013266:	464a      	mov	r2, r9
 8013268:	2a01      	cmp	r2, #1
 801326a:	bfb8      	it	lt
 801326c:	2201      	movlt	r2, #1
 801326e:	e7db      	b.n	8013228 <_dtoa_r+0x240>
 8013270:	2201      	movs	r2, #1
 8013272:	e7f2      	b.n	801325a <_dtoa_r+0x272>
 8013274:	2401      	movs	r4, #1
 8013276:	2200      	movs	r2, #0
 8013278:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801327c:	f04f 3aff 	mov.w	sl, #4294967295
 8013280:	2100      	movs	r1, #0
 8013282:	46d1      	mov	r9, sl
 8013284:	2212      	movs	r2, #18
 8013286:	9108      	str	r1, [sp, #32]
 8013288:	e7ce      	b.n	8013228 <_dtoa_r+0x240>
 801328a:	2201      	movs	r2, #1
 801328c:	9207      	str	r2, [sp, #28]
 801328e:	e7f5      	b.n	801327c <_dtoa_r+0x294>
 8013290:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013294:	46d1      	mov	r9, sl
 8013296:	4652      	mov	r2, sl
 8013298:	e7c6      	b.n	8013228 <_dtoa_r+0x240>
 801329a:	3101      	adds	r1, #1
 801329c:	6079      	str	r1, [r7, #4]
 801329e:	0040      	lsls	r0, r0, #1
 80132a0:	e7c6      	b.n	8013230 <_dtoa_r+0x248>
 80132a2:	bf00      	nop
 80132a4:	f3af 8000 	nop.w
 80132a8:	636f4361 	.word	0x636f4361
 80132ac:	3fd287a7 	.word	0x3fd287a7
 80132b0:	8b60c8b3 	.word	0x8b60c8b3
 80132b4:	3fc68a28 	.word	0x3fc68a28
 80132b8:	509f79fb 	.word	0x509f79fb
 80132bc:	3fd34413 	.word	0x3fd34413
 80132c0:	08015ec6 	.word	0x08015ec6
 80132c4:	08015edd 	.word	0x08015edd
 80132c8:	7ff00000 	.word	0x7ff00000
 80132cc:	08015ec2 	.word	0x08015ec2
 80132d0:	08015eb9 	.word	0x08015eb9
 80132d4:	08015d41 	.word	0x08015d41
 80132d8:	08016048 	.word	0x08016048
 80132dc:	08015f38 	.word	0x08015f38
 80132e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80132e2:	9901      	ldr	r1, [sp, #4]
 80132e4:	6011      	str	r1, [r2, #0]
 80132e6:	f1b9 0f0e 	cmp.w	r9, #14
 80132ea:	d86c      	bhi.n	80133c6 <_dtoa_r+0x3de>
 80132ec:	2c00      	cmp	r4, #0
 80132ee:	d06a      	beq.n	80133c6 <_dtoa_r+0x3de>
 80132f0:	f1bb 0f00 	cmp.w	fp, #0
 80132f4:	f340 80a0 	ble.w	8013438 <_dtoa_r+0x450>
 80132f8:	49c1      	ldr	r1, [pc, #772]	; (8013600 <_dtoa_r+0x618>)
 80132fa:	f00b 020f 	and.w	r2, fp, #15
 80132fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013302:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013306:	ed92 7b00 	vldr	d7, [r2]
 801330a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801330e:	f000 8087 	beq.w	8013420 <_dtoa_r+0x438>
 8013312:	4abc      	ldr	r2, [pc, #752]	; (8013604 <_dtoa_r+0x61c>)
 8013314:	ed92 6b08 	vldr	d6, [r2, #32]
 8013318:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801331c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013320:	f001 010f 	and.w	r1, r1, #15
 8013324:	2203      	movs	r2, #3
 8013326:	48b7      	ldr	r0, [pc, #732]	; (8013604 <_dtoa_r+0x61c>)
 8013328:	2900      	cmp	r1, #0
 801332a:	d17b      	bne.n	8013424 <_dtoa_r+0x43c>
 801332c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013330:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013334:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013338:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801333a:	2900      	cmp	r1, #0
 801333c:	f000 80a2 	beq.w	8013484 <_dtoa_r+0x49c>
 8013340:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013344:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013348:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013350:	f140 8098 	bpl.w	8013484 <_dtoa_r+0x49c>
 8013354:	f1b9 0f00 	cmp.w	r9, #0
 8013358:	f000 8094 	beq.w	8013484 <_dtoa_r+0x49c>
 801335c:	f1ba 0f00 	cmp.w	sl, #0
 8013360:	dd2f      	ble.n	80133c2 <_dtoa_r+0x3da>
 8013362:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8013366:	ee27 7b06 	vmul.f64	d7, d7, d6
 801336a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801336e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013372:	3201      	adds	r2, #1
 8013374:	4650      	mov	r0, sl
 8013376:	ed9d 6b02 	vldr	d6, [sp, #8]
 801337a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801337e:	ee07 2a90 	vmov	s15, r2
 8013382:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013386:	eea7 5b06 	vfma.f64	d5, d7, d6
 801338a:	ee15 4a90 	vmov	r4, s11
 801338e:	ec52 1b15 	vmov	r1, r2, d5
 8013392:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8013396:	2800      	cmp	r0, #0
 8013398:	d177      	bne.n	801348a <_dtoa_r+0x4a2>
 801339a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801339e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80133a2:	ec42 1b17 	vmov	d7, r1, r2
 80133a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80133aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ae:	f300 8263 	bgt.w	8013878 <_dtoa_r+0x890>
 80133b2:	eeb1 7b47 	vneg.f64	d7, d7
 80133b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80133ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133be:	f100 8258 	bmi.w	8013872 <_dtoa_r+0x88a>
 80133c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80133c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80133c8:	2a00      	cmp	r2, #0
 80133ca:	f2c0 811d 	blt.w	8013608 <_dtoa_r+0x620>
 80133ce:	f1bb 0f0e 	cmp.w	fp, #14
 80133d2:	f300 8119 	bgt.w	8013608 <_dtoa_r+0x620>
 80133d6:	4b8a      	ldr	r3, [pc, #552]	; (8013600 <_dtoa_r+0x618>)
 80133d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80133dc:	ed93 6b00 	vldr	d6, [r3]
 80133e0:	9b08      	ldr	r3, [sp, #32]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	f280 80b7 	bge.w	8013556 <_dtoa_r+0x56e>
 80133e8:	f1b9 0f00 	cmp.w	r9, #0
 80133ec:	f300 80b3 	bgt.w	8013556 <_dtoa_r+0x56e>
 80133f0:	f040 823f 	bne.w	8013872 <_dtoa_r+0x88a>
 80133f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80133f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80133fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013400:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013408:	464c      	mov	r4, r9
 801340a:	464f      	mov	r7, r9
 801340c:	f280 8215 	bge.w	801383a <_dtoa_r+0x852>
 8013410:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013414:	2331      	movs	r3, #49	; 0x31
 8013416:	f808 3b01 	strb.w	r3, [r8], #1
 801341a:	f10b 0b01 	add.w	fp, fp, #1
 801341e:	e211      	b.n	8013844 <_dtoa_r+0x85c>
 8013420:	2202      	movs	r2, #2
 8013422:	e780      	b.n	8013326 <_dtoa_r+0x33e>
 8013424:	07cc      	lsls	r4, r1, #31
 8013426:	d504      	bpl.n	8013432 <_dtoa_r+0x44a>
 8013428:	ed90 6b00 	vldr	d6, [r0]
 801342c:	3201      	adds	r2, #1
 801342e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013432:	1049      	asrs	r1, r1, #1
 8013434:	3008      	adds	r0, #8
 8013436:	e777      	b.n	8013328 <_dtoa_r+0x340>
 8013438:	d022      	beq.n	8013480 <_dtoa_r+0x498>
 801343a:	f1cb 0100 	rsb	r1, fp, #0
 801343e:	4a70      	ldr	r2, [pc, #448]	; (8013600 <_dtoa_r+0x618>)
 8013440:	f001 000f 	and.w	r0, r1, #15
 8013444:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013448:	ed92 7b00 	vldr	d7, [r2]
 801344c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013450:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013454:	486b      	ldr	r0, [pc, #428]	; (8013604 <_dtoa_r+0x61c>)
 8013456:	1109      	asrs	r1, r1, #4
 8013458:	2400      	movs	r4, #0
 801345a:	2202      	movs	r2, #2
 801345c:	b929      	cbnz	r1, 801346a <_dtoa_r+0x482>
 801345e:	2c00      	cmp	r4, #0
 8013460:	f43f af6a 	beq.w	8013338 <_dtoa_r+0x350>
 8013464:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013468:	e766      	b.n	8013338 <_dtoa_r+0x350>
 801346a:	07cf      	lsls	r7, r1, #31
 801346c:	d505      	bpl.n	801347a <_dtoa_r+0x492>
 801346e:	ed90 6b00 	vldr	d6, [r0]
 8013472:	3201      	adds	r2, #1
 8013474:	2401      	movs	r4, #1
 8013476:	ee27 7b06 	vmul.f64	d7, d7, d6
 801347a:	1049      	asrs	r1, r1, #1
 801347c:	3008      	adds	r0, #8
 801347e:	e7ed      	b.n	801345c <_dtoa_r+0x474>
 8013480:	2202      	movs	r2, #2
 8013482:	e759      	b.n	8013338 <_dtoa_r+0x350>
 8013484:	465f      	mov	r7, fp
 8013486:	4648      	mov	r0, r9
 8013488:	e775      	b.n	8013376 <_dtoa_r+0x38e>
 801348a:	ec42 1b17 	vmov	d7, r1, r2
 801348e:	4a5c      	ldr	r2, [pc, #368]	; (8013600 <_dtoa_r+0x618>)
 8013490:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013494:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013498:	9a01      	ldr	r2, [sp, #4]
 801349a:	1814      	adds	r4, r2, r0
 801349c:	9a07      	ldr	r2, [sp, #28]
 801349e:	b352      	cbz	r2, 80134f6 <_dtoa_r+0x50e>
 80134a0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80134a4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80134a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80134ac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80134b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80134b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80134b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80134bc:	ee14 2a90 	vmov	r2, s9
 80134c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80134c4:	3230      	adds	r2, #48	; 0x30
 80134c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80134ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80134ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134d2:	f808 2b01 	strb.w	r2, [r8], #1
 80134d6:	d439      	bmi.n	801354c <_dtoa_r+0x564>
 80134d8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80134dc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80134e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134e4:	d472      	bmi.n	80135cc <_dtoa_r+0x5e4>
 80134e6:	45a0      	cmp	r8, r4
 80134e8:	f43f af6b 	beq.w	80133c2 <_dtoa_r+0x3da>
 80134ec:	ee27 7b03 	vmul.f64	d7, d7, d3
 80134f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80134f4:	e7e0      	b.n	80134b8 <_dtoa_r+0x4d0>
 80134f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80134fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80134fe:	4621      	mov	r1, r4
 8013500:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013504:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013508:	ee14 2a90 	vmov	r2, s9
 801350c:	3230      	adds	r2, #48	; 0x30
 801350e:	f808 2b01 	strb.w	r2, [r8], #1
 8013512:	45a0      	cmp	r8, r4
 8013514:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013518:	ee36 6b45 	vsub.f64	d6, d6, d5
 801351c:	d118      	bne.n	8013550 <_dtoa_r+0x568>
 801351e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013522:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013526:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801352e:	dc4d      	bgt.n	80135cc <_dtoa_r+0x5e4>
 8013530:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013534:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801353c:	f57f af41 	bpl.w	80133c2 <_dtoa_r+0x3da>
 8013540:	4688      	mov	r8, r1
 8013542:	3901      	subs	r1, #1
 8013544:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013548:	2b30      	cmp	r3, #48	; 0x30
 801354a:	d0f9      	beq.n	8013540 <_dtoa_r+0x558>
 801354c:	46bb      	mov	fp, r7
 801354e:	e02a      	b.n	80135a6 <_dtoa_r+0x5be>
 8013550:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013554:	e7d6      	b.n	8013504 <_dtoa_r+0x51c>
 8013556:	ed9d 7b02 	vldr	d7, [sp, #8]
 801355a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801355e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013562:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013566:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801356a:	ee15 3a10 	vmov	r3, s10
 801356e:	3330      	adds	r3, #48	; 0x30
 8013570:	f808 3b01 	strb.w	r3, [r8], #1
 8013574:	9b01      	ldr	r3, [sp, #4]
 8013576:	eba8 0303 	sub.w	r3, r8, r3
 801357a:	4599      	cmp	r9, r3
 801357c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013580:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013584:	d133      	bne.n	80135ee <_dtoa_r+0x606>
 8013586:	ee37 7b07 	vadd.f64	d7, d7, d7
 801358a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801358e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013592:	dc1a      	bgt.n	80135ca <_dtoa_r+0x5e2>
 8013594:	eeb4 7b46 	vcmp.f64	d7, d6
 8013598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801359c:	d103      	bne.n	80135a6 <_dtoa_r+0x5be>
 801359e:	ee15 3a10 	vmov	r3, s10
 80135a2:	07d9      	lsls	r1, r3, #31
 80135a4:	d411      	bmi.n	80135ca <_dtoa_r+0x5e2>
 80135a6:	4629      	mov	r1, r5
 80135a8:	4630      	mov	r0, r6
 80135aa:	f000 fe59 	bl	8014260 <_Bfree>
 80135ae:	2300      	movs	r3, #0
 80135b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80135b2:	f888 3000 	strb.w	r3, [r8]
 80135b6:	f10b 0301 	add.w	r3, fp, #1
 80135ba:	6013      	str	r3, [r2, #0]
 80135bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80135be:	2b00      	cmp	r3, #0
 80135c0:	f43f ad61 	beq.w	8013086 <_dtoa_r+0x9e>
 80135c4:	f8c3 8000 	str.w	r8, [r3]
 80135c8:	e55d      	b.n	8013086 <_dtoa_r+0x9e>
 80135ca:	465f      	mov	r7, fp
 80135cc:	4643      	mov	r3, r8
 80135ce:	4698      	mov	r8, r3
 80135d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80135d4:	2a39      	cmp	r2, #57	; 0x39
 80135d6:	d106      	bne.n	80135e6 <_dtoa_r+0x5fe>
 80135d8:	9a01      	ldr	r2, [sp, #4]
 80135da:	429a      	cmp	r2, r3
 80135dc:	d1f7      	bne.n	80135ce <_dtoa_r+0x5e6>
 80135de:	9901      	ldr	r1, [sp, #4]
 80135e0:	2230      	movs	r2, #48	; 0x30
 80135e2:	3701      	adds	r7, #1
 80135e4:	700a      	strb	r2, [r1, #0]
 80135e6:	781a      	ldrb	r2, [r3, #0]
 80135e8:	3201      	adds	r2, #1
 80135ea:	701a      	strb	r2, [r3, #0]
 80135ec:	e7ae      	b.n	801354c <_dtoa_r+0x564>
 80135ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 80135f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80135f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135fa:	d1b2      	bne.n	8013562 <_dtoa_r+0x57a>
 80135fc:	e7d3      	b.n	80135a6 <_dtoa_r+0x5be>
 80135fe:	bf00      	nop
 8013600:	08016048 	.word	0x08016048
 8013604:	08016020 	.word	0x08016020
 8013608:	9907      	ldr	r1, [sp, #28]
 801360a:	2900      	cmp	r1, #0
 801360c:	f000 80d0 	beq.w	80137b0 <_dtoa_r+0x7c8>
 8013610:	9906      	ldr	r1, [sp, #24]
 8013612:	2901      	cmp	r1, #1
 8013614:	f300 80b4 	bgt.w	8013780 <_dtoa_r+0x798>
 8013618:	990a      	ldr	r1, [sp, #40]	; 0x28
 801361a:	2900      	cmp	r1, #0
 801361c:	f000 80ac 	beq.w	8013778 <_dtoa_r+0x790>
 8013620:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013624:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013628:	461c      	mov	r4, r3
 801362a:	930a      	str	r3, [sp, #40]	; 0x28
 801362c:	9b04      	ldr	r3, [sp, #16]
 801362e:	4413      	add	r3, r2
 8013630:	9304      	str	r3, [sp, #16]
 8013632:	9b05      	ldr	r3, [sp, #20]
 8013634:	2101      	movs	r1, #1
 8013636:	4413      	add	r3, r2
 8013638:	4630      	mov	r0, r6
 801363a:	9305      	str	r3, [sp, #20]
 801363c:	f000 ff12 	bl	8014464 <__i2b>
 8013640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013642:	4607      	mov	r7, r0
 8013644:	f1b8 0f00 	cmp.w	r8, #0
 8013648:	dd0d      	ble.n	8013666 <_dtoa_r+0x67e>
 801364a:	9a05      	ldr	r2, [sp, #20]
 801364c:	2a00      	cmp	r2, #0
 801364e:	dd0a      	ble.n	8013666 <_dtoa_r+0x67e>
 8013650:	4542      	cmp	r2, r8
 8013652:	9904      	ldr	r1, [sp, #16]
 8013654:	bfa8      	it	ge
 8013656:	4642      	movge	r2, r8
 8013658:	1a89      	subs	r1, r1, r2
 801365a:	9104      	str	r1, [sp, #16]
 801365c:	9905      	ldr	r1, [sp, #20]
 801365e:	eba8 0802 	sub.w	r8, r8, r2
 8013662:	1a8a      	subs	r2, r1, r2
 8013664:	9205      	str	r2, [sp, #20]
 8013666:	b303      	cbz	r3, 80136aa <_dtoa_r+0x6c2>
 8013668:	9a07      	ldr	r2, [sp, #28]
 801366a:	2a00      	cmp	r2, #0
 801366c:	f000 80a5 	beq.w	80137ba <_dtoa_r+0x7d2>
 8013670:	2c00      	cmp	r4, #0
 8013672:	dd13      	ble.n	801369c <_dtoa_r+0x6b4>
 8013674:	4639      	mov	r1, r7
 8013676:	4622      	mov	r2, r4
 8013678:	4630      	mov	r0, r6
 801367a:	930d      	str	r3, [sp, #52]	; 0x34
 801367c:	f000 ffb2 	bl	80145e4 <__pow5mult>
 8013680:	462a      	mov	r2, r5
 8013682:	4601      	mov	r1, r0
 8013684:	4607      	mov	r7, r0
 8013686:	4630      	mov	r0, r6
 8013688:	f000 ff02 	bl	8014490 <__multiply>
 801368c:	4629      	mov	r1, r5
 801368e:	900a      	str	r0, [sp, #40]	; 0x28
 8013690:	4630      	mov	r0, r6
 8013692:	f000 fde5 	bl	8014260 <_Bfree>
 8013696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801369a:	4615      	mov	r5, r2
 801369c:	1b1a      	subs	r2, r3, r4
 801369e:	d004      	beq.n	80136aa <_dtoa_r+0x6c2>
 80136a0:	4629      	mov	r1, r5
 80136a2:	4630      	mov	r0, r6
 80136a4:	f000 ff9e 	bl	80145e4 <__pow5mult>
 80136a8:	4605      	mov	r5, r0
 80136aa:	2101      	movs	r1, #1
 80136ac:	4630      	mov	r0, r6
 80136ae:	f000 fed9 	bl	8014464 <__i2b>
 80136b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	4604      	mov	r4, r0
 80136b8:	f340 8081 	ble.w	80137be <_dtoa_r+0x7d6>
 80136bc:	461a      	mov	r2, r3
 80136be:	4601      	mov	r1, r0
 80136c0:	4630      	mov	r0, r6
 80136c2:	f000 ff8f 	bl	80145e4 <__pow5mult>
 80136c6:	9b06      	ldr	r3, [sp, #24]
 80136c8:	2b01      	cmp	r3, #1
 80136ca:	4604      	mov	r4, r0
 80136cc:	dd7a      	ble.n	80137c4 <_dtoa_r+0x7dc>
 80136ce:	2300      	movs	r3, #0
 80136d0:	930a      	str	r3, [sp, #40]	; 0x28
 80136d2:	6922      	ldr	r2, [r4, #16]
 80136d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80136d8:	6910      	ldr	r0, [r2, #16]
 80136da:	f000 fe73 	bl	80143c4 <__hi0bits>
 80136de:	f1c0 0020 	rsb	r0, r0, #32
 80136e2:	9b05      	ldr	r3, [sp, #20]
 80136e4:	4418      	add	r0, r3
 80136e6:	f010 001f 	ands.w	r0, r0, #31
 80136ea:	f000 808c 	beq.w	8013806 <_dtoa_r+0x81e>
 80136ee:	f1c0 0220 	rsb	r2, r0, #32
 80136f2:	2a04      	cmp	r2, #4
 80136f4:	f340 8085 	ble.w	8013802 <_dtoa_r+0x81a>
 80136f8:	f1c0 001c 	rsb	r0, r0, #28
 80136fc:	9b04      	ldr	r3, [sp, #16]
 80136fe:	4403      	add	r3, r0
 8013700:	9304      	str	r3, [sp, #16]
 8013702:	9b05      	ldr	r3, [sp, #20]
 8013704:	4403      	add	r3, r0
 8013706:	4480      	add	r8, r0
 8013708:	9305      	str	r3, [sp, #20]
 801370a:	9b04      	ldr	r3, [sp, #16]
 801370c:	2b00      	cmp	r3, #0
 801370e:	dd05      	ble.n	801371c <_dtoa_r+0x734>
 8013710:	4629      	mov	r1, r5
 8013712:	461a      	mov	r2, r3
 8013714:	4630      	mov	r0, r6
 8013716:	f000 ffbf 	bl	8014698 <__lshift>
 801371a:	4605      	mov	r5, r0
 801371c:	9b05      	ldr	r3, [sp, #20]
 801371e:	2b00      	cmp	r3, #0
 8013720:	dd05      	ble.n	801372e <_dtoa_r+0x746>
 8013722:	4621      	mov	r1, r4
 8013724:	461a      	mov	r2, r3
 8013726:	4630      	mov	r0, r6
 8013728:	f000 ffb6 	bl	8014698 <__lshift>
 801372c:	4604      	mov	r4, r0
 801372e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013730:	2b00      	cmp	r3, #0
 8013732:	d06a      	beq.n	801380a <_dtoa_r+0x822>
 8013734:	4621      	mov	r1, r4
 8013736:	4628      	mov	r0, r5
 8013738:	f001 f81e 	bl	8014778 <__mcmp>
 801373c:	2800      	cmp	r0, #0
 801373e:	da64      	bge.n	801380a <_dtoa_r+0x822>
 8013740:	2300      	movs	r3, #0
 8013742:	4629      	mov	r1, r5
 8013744:	220a      	movs	r2, #10
 8013746:	4630      	mov	r0, r6
 8013748:	f000 fdac 	bl	80142a4 <__multadd>
 801374c:	9b07      	ldr	r3, [sp, #28]
 801374e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013752:	4605      	mov	r5, r0
 8013754:	2b00      	cmp	r3, #0
 8013756:	f000 8191 	beq.w	8013a7c <_dtoa_r+0xa94>
 801375a:	4639      	mov	r1, r7
 801375c:	2300      	movs	r3, #0
 801375e:	220a      	movs	r2, #10
 8013760:	4630      	mov	r0, r6
 8013762:	f000 fd9f 	bl	80142a4 <__multadd>
 8013766:	f1ba 0f00 	cmp.w	sl, #0
 801376a:	4607      	mov	r7, r0
 801376c:	f300 808d 	bgt.w	801388a <_dtoa_r+0x8a2>
 8013770:	9b06      	ldr	r3, [sp, #24]
 8013772:	2b02      	cmp	r3, #2
 8013774:	dc50      	bgt.n	8013818 <_dtoa_r+0x830>
 8013776:	e088      	b.n	801388a <_dtoa_r+0x8a2>
 8013778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801377a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801377e:	e751      	b.n	8013624 <_dtoa_r+0x63c>
 8013780:	f109 34ff 	add.w	r4, r9, #4294967295
 8013784:	42a3      	cmp	r3, r4
 8013786:	bfbf      	itttt	lt
 8013788:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801378a:	1ae3      	sublt	r3, r4, r3
 801378c:	18d2      	addlt	r2, r2, r3
 801378e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8013790:	bfb6      	itet	lt
 8013792:	4623      	movlt	r3, r4
 8013794:	1b1c      	subge	r4, r3, r4
 8013796:	2400      	movlt	r4, #0
 8013798:	f1b9 0f00 	cmp.w	r9, #0
 801379c:	bfb5      	itete	lt
 801379e:	9a04      	ldrlt	r2, [sp, #16]
 80137a0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80137a4:	eba2 0809 	sublt.w	r8, r2, r9
 80137a8:	464a      	movge	r2, r9
 80137aa:	bfb8      	it	lt
 80137ac:	2200      	movlt	r2, #0
 80137ae:	e73c      	b.n	801362a <_dtoa_r+0x642>
 80137b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80137b4:	9f07      	ldr	r7, [sp, #28]
 80137b6:	461c      	mov	r4, r3
 80137b8:	e744      	b.n	8013644 <_dtoa_r+0x65c>
 80137ba:	461a      	mov	r2, r3
 80137bc:	e770      	b.n	80136a0 <_dtoa_r+0x6b8>
 80137be:	9b06      	ldr	r3, [sp, #24]
 80137c0:	2b01      	cmp	r3, #1
 80137c2:	dc18      	bgt.n	80137f6 <_dtoa_r+0x80e>
 80137c4:	9b02      	ldr	r3, [sp, #8]
 80137c6:	b9b3      	cbnz	r3, 80137f6 <_dtoa_r+0x80e>
 80137c8:	9b03      	ldr	r3, [sp, #12]
 80137ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80137ce:	b9a2      	cbnz	r2, 80137fa <_dtoa_r+0x812>
 80137d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80137d4:	0d12      	lsrs	r2, r2, #20
 80137d6:	0512      	lsls	r2, r2, #20
 80137d8:	b18a      	cbz	r2, 80137fe <_dtoa_r+0x816>
 80137da:	9b04      	ldr	r3, [sp, #16]
 80137dc:	3301      	adds	r3, #1
 80137de:	9304      	str	r3, [sp, #16]
 80137e0:	9b05      	ldr	r3, [sp, #20]
 80137e2:	3301      	adds	r3, #1
 80137e4:	9305      	str	r3, [sp, #20]
 80137e6:	2301      	movs	r3, #1
 80137e8:	930a      	str	r3, [sp, #40]	; 0x28
 80137ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	f47f af70 	bne.w	80136d2 <_dtoa_r+0x6ea>
 80137f2:	2001      	movs	r0, #1
 80137f4:	e775      	b.n	80136e2 <_dtoa_r+0x6fa>
 80137f6:	2300      	movs	r3, #0
 80137f8:	e7f6      	b.n	80137e8 <_dtoa_r+0x800>
 80137fa:	9b02      	ldr	r3, [sp, #8]
 80137fc:	e7f4      	b.n	80137e8 <_dtoa_r+0x800>
 80137fe:	920a      	str	r2, [sp, #40]	; 0x28
 8013800:	e7f3      	b.n	80137ea <_dtoa_r+0x802>
 8013802:	d082      	beq.n	801370a <_dtoa_r+0x722>
 8013804:	4610      	mov	r0, r2
 8013806:	301c      	adds	r0, #28
 8013808:	e778      	b.n	80136fc <_dtoa_r+0x714>
 801380a:	f1b9 0f00 	cmp.w	r9, #0
 801380e:	dc37      	bgt.n	8013880 <_dtoa_r+0x898>
 8013810:	9b06      	ldr	r3, [sp, #24]
 8013812:	2b02      	cmp	r3, #2
 8013814:	dd34      	ble.n	8013880 <_dtoa_r+0x898>
 8013816:	46ca      	mov	sl, r9
 8013818:	f1ba 0f00 	cmp.w	sl, #0
 801381c:	d10d      	bne.n	801383a <_dtoa_r+0x852>
 801381e:	4621      	mov	r1, r4
 8013820:	4653      	mov	r3, sl
 8013822:	2205      	movs	r2, #5
 8013824:	4630      	mov	r0, r6
 8013826:	f000 fd3d 	bl	80142a4 <__multadd>
 801382a:	4601      	mov	r1, r0
 801382c:	4604      	mov	r4, r0
 801382e:	4628      	mov	r0, r5
 8013830:	f000 ffa2 	bl	8014778 <__mcmp>
 8013834:	2800      	cmp	r0, #0
 8013836:	f73f adeb 	bgt.w	8013410 <_dtoa_r+0x428>
 801383a:	9b08      	ldr	r3, [sp, #32]
 801383c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013840:	ea6f 0b03 	mvn.w	fp, r3
 8013844:	f04f 0900 	mov.w	r9, #0
 8013848:	4621      	mov	r1, r4
 801384a:	4630      	mov	r0, r6
 801384c:	f000 fd08 	bl	8014260 <_Bfree>
 8013850:	2f00      	cmp	r7, #0
 8013852:	f43f aea8 	beq.w	80135a6 <_dtoa_r+0x5be>
 8013856:	f1b9 0f00 	cmp.w	r9, #0
 801385a:	d005      	beq.n	8013868 <_dtoa_r+0x880>
 801385c:	45b9      	cmp	r9, r7
 801385e:	d003      	beq.n	8013868 <_dtoa_r+0x880>
 8013860:	4649      	mov	r1, r9
 8013862:	4630      	mov	r0, r6
 8013864:	f000 fcfc 	bl	8014260 <_Bfree>
 8013868:	4639      	mov	r1, r7
 801386a:	4630      	mov	r0, r6
 801386c:	f000 fcf8 	bl	8014260 <_Bfree>
 8013870:	e699      	b.n	80135a6 <_dtoa_r+0x5be>
 8013872:	2400      	movs	r4, #0
 8013874:	4627      	mov	r7, r4
 8013876:	e7e0      	b.n	801383a <_dtoa_r+0x852>
 8013878:	46bb      	mov	fp, r7
 801387a:	4604      	mov	r4, r0
 801387c:	4607      	mov	r7, r0
 801387e:	e5c7      	b.n	8013410 <_dtoa_r+0x428>
 8013880:	9b07      	ldr	r3, [sp, #28]
 8013882:	46ca      	mov	sl, r9
 8013884:	2b00      	cmp	r3, #0
 8013886:	f000 8100 	beq.w	8013a8a <_dtoa_r+0xaa2>
 801388a:	f1b8 0f00 	cmp.w	r8, #0
 801388e:	dd05      	ble.n	801389c <_dtoa_r+0x8b4>
 8013890:	4639      	mov	r1, r7
 8013892:	4642      	mov	r2, r8
 8013894:	4630      	mov	r0, r6
 8013896:	f000 feff 	bl	8014698 <__lshift>
 801389a:	4607      	mov	r7, r0
 801389c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d05d      	beq.n	801395e <_dtoa_r+0x976>
 80138a2:	6879      	ldr	r1, [r7, #4]
 80138a4:	4630      	mov	r0, r6
 80138a6:	f000 fc9b 	bl	80141e0 <_Balloc>
 80138aa:	4680      	mov	r8, r0
 80138ac:	b928      	cbnz	r0, 80138ba <_dtoa_r+0x8d2>
 80138ae:	4b82      	ldr	r3, [pc, #520]	; (8013ab8 <_dtoa_r+0xad0>)
 80138b0:	4602      	mov	r2, r0
 80138b2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80138b6:	f7ff bbaf 	b.w	8013018 <_dtoa_r+0x30>
 80138ba:	693a      	ldr	r2, [r7, #16]
 80138bc:	3202      	adds	r2, #2
 80138be:	0092      	lsls	r2, r2, #2
 80138c0:	f107 010c 	add.w	r1, r7, #12
 80138c4:	300c      	adds	r0, #12
 80138c6:	f7fd ffeb 	bl	80118a0 <memcpy>
 80138ca:	2201      	movs	r2, #1
 80138cc:	4641      	mov	r1, r8
 80138ce:	4630      	mov	r0, r6
 80138d0:	f000 fee2 	bl	8014698 <__lshift>
 80138d4:	9b01      	ldr	r3, [sp, #4]
 80138d6:	3301      	adds	r3, #1
 80138d8:	9304      	str	r3, [sp, #16]
 80138da:	9b01      	ldr	r3, [sp, #4]
 80138dc:	4453      	add	r3, sl
 80138de:	9308      	str	r3, [sp, #32]
 80138e0:	9b02      	ldr	r3, [sp, #8]
 80138e2:	f003 0301 	and.w	r3, r3, #1
 80138e6:	46b9      	mov	r9, r7
 80138e8:	9307      	str	r3, [sp, #28]
 80138ea:	4607      	mov	r7, r0
 80138ec:	9b04      	ldr	r3, [sp, #16]
 80138ee:	4621      	mov	r1, r4
 80138f0:	3b01      	subs	r3, #1
 80138f2:	4628      	mov	r0, r5
 80138f4:	9302      	str	r3, [sp, #8]
 80138f6:	f7ff fae9 	bl	8012ecc <quorem>
 80138fa:	4603      	mov	r3, r0
 80138fc:	3330      	adds	r3, #48	; 0x30
 80138fe:	9005      	str	r0, [sp, #20]
 8013900:	4649      	mov	r1, r9
 8013902:	4628      	mov	r0, r5
 8013904:	9309      	str	r3, [sp, #36]	; 0x24
 8013906:	f000 ff37 	bl	8014778 <__mcmp>
 801390a:	463a      	mov	r2, r7
 801390c:	4682      	mov	sl, r0
 801390e:	4621      	mov	r1, r4
 8013910:	4630      	mov	r0, r6
 8013912:	f000 ff4d 	bl	80147b0 <__mdiff>
 8013916:	68c2      	ldr	r2, [r0, #12]
 8013918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801391a:	4680      	mov	r8, r0
 801391c:	bb0a      	cbnz	r2, 8013962 <_dtoa_r+0x97a>
 801391e:	4601      	mov	r1, r0
 8013920:	4628      	mov	r0, r5
 8013922:	f000 ff29 	bl	8014778 <__mcmp>
 8013926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013928:	4602      	mov	r2, r0
 801392a:	4641      	mov	r1, r8
 801392c:	4630      	mov	r0, r6
 801392e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8013932:	f000 fc95 	bl	8014260 <_Bfree>
 8013936:	9b06      	ldr	r3, [sp, #24]
 8013938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801393a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801393e:	ea43 0102 	orr.w	r1, r3, r2
 8013942:	9b07      	ldr	r3, [sp, #28]
 8013944:	430b      	orrs	r3, r1
 8013946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013948:	d10d      	bne.n	8013966 <_dtoa_r+0x97e>
 801394a:	2b39      	cmp	r3, #57	; 0x39
 801394c:	d029      	beq.n	80139a2 <_dtoa_r+0x9ba>
 801394e:	f1ba 0f00 	cmp.w	sl, #0
 8013952:	dd01      	ble.n	8013958 <_dtoa_r+0x970>
 8013954:	9b05      	ldr	r3, [sp, #20]
 8013956:	3331      	adds	r3, #49	; 0x31
 8013958:	9a02      	ldr	r2, [sp, #8]
 801395a:	7013      	strb	r3, [r2, #0]
 801395c:	e774      	b.n	8013848 <_dtoa_r+0x860>
 801395e:	4638      	mov	r0, r7
 8013960:	e7b8      	b.n	80138d4 <_dtoa_r+0x8ec>
 8013962:	2201      	movs	r2, #1
 8013964:	e7e1      	b.n	801392a <_dtoa_r+0x942>
 8013966:	f1ba 0f00 	cmp.w	sl, #0
 801396a:	db06      	blt.n	801397a <_dtoa_r+0x992>
 801396c:	9906      	ldr	r1, [sp, #24]
 801396e:	ea41 0a0a 	orr.w	sl, r1, sl
 8013972:	9907      	ldr	r1, [sp, #28]
 8013974:	ea5a 0101 	orrs.w	r1, sl, r1
 8013978:	d120      	bne.n	80139bc <_dtoa_r+0x9d4>
 801397a:	2a00      	cmp	r2, #0
 801397c:	ddec      	ble.n	8013958 <_dtoa_r+0x970>
 801397e:	4629      	mov	r1, r5
 8013980:	2201      	movs	r2, #1
 8013982:	4630      	mov	r0, r6
 8013984:	9304      	str	r3, [sp, #16]
 8013986:	f000 fe87 	bl	8014698 <__lshift>
 801398a:	4621      	mov	r1, r4
 801398c:	4605      	mov	r5, r0
 801398e:	f000 fef3 	bl	8014778 <__mcmp>
 8013992:	2800      	cmp	r0, #0
 8013994:	9b04      	ldr	r3, [sp, #16]
 8013996:	dc02      	bgt.n	801399e <_dtoa_r+0x9b6>
 8013998:	d1de      	bne.n	8013958 <_dtoa_r+0x970>
 801399a:	07da      	lsls	r2, r3, #31
 801399c:	d5dc      	bpl.n	8013958 <_dtoa_r+0x970>
 801399e:	2b39      	cmp	r3, #57	; 0x39
 80139a0:	d1d8      	bne.n	8013954 <_dtoa_r+0x96c>
 80139a2:	9a02      	ldr	r2, [sp, #8]
 80139a4:	2339      	movs	r3, #57	; 0x39
 80139a6:	7013      	strb	r3, [r2, #0]
 80139a8:	4643      	mov	r3, r8
 80139aa:	4698      	mov	r8, r3
 80139ac:	3b01      	subs	r3, #1
 80139ae:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80139b2:	2a39      	cmp	r2, #57	; 0x39
 80139b4:	d051      	beq.n	8013a5a <_dtoa_r+0xa72>
 80139b6:	3201      	adds	r2, #1
 80139b8:	701a      	strb	r2, [r3, #0]
 80139ba:	e745      	b.n	8013848 <_dtoa_r+0x860>
 80139bc:	2a00      	cmp	r2, #0
 80139be:	dd03      	ble.n	80139c8 <_dtoa_r+0x9e0>
 80139c0:	2b39      	cmp	r3, #57	; 0x39
 80139c2:	d0ee      	beq.n	80139a2 <_dtoa_r+0x9ba>
 80139c4:	3301      	adds	r3, #1
 80139c6:	e7c7      	b.n	8013958 <_dtoa_r+0x970>
 80139c8:	9a04      	ldr	r2, [sp, #16]
 80139ca:	9908      	ldr	r1, [sp, #32]
 80139cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80139d0:	428a      	cmp	r2, r1
 80139d2:	d02b      	beq.n	8013a2c <_dtoa_r+0xa44>
 80139d4:	4629      	mov	r1, r5
 80139d6:	2300      	movs	r3, #0
 80139d8:	220a      	movs	r2, #10
 80139da:	4630      	mov	r0, r6
 80139dc:	f000 fc62 	bl	80142a4 <__multadd>
 80139e0:	45b9      	cmp	r9, r7
 80139e2:	4605      	mov	r5, r0
 80139e4:	f04f 0300 	mov.w	r3, #0
 80139e8:	f04f 020a 	mov.w	r2, #10
 80139ec:	4649      	mov	r1, r9
 80139ee:	4630      	mov	r0, r6
 80139f0:	d107      	bne.n	8013a02 <_dtoa_r+0xa1a>
 80139f2:	f000 fc57 	bl	80142a4 <__multadd>
 80139f6:	4681      	mov	r9, r0
 80139f8:	4607      	mov	r7, r0
 80139fa:	9b04      	ldr	r3, [sp, #16]
 80139fc:	3301      	adds	r3, #1
 80139fe:	9304      	str	r3, [sp, #16]
 8013a00:	e774      	b.n	80138ec <_dtoa_r+0x904>
 8013a02:	f000 fc4f 	bl	80142a4 <__multadd>
 8013a06:	4639      	mov	r1, r7
 8013a08:	4681      	mov	r9, r0
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	220a      	movs	r2, #10
 8013a0e:	4630      	mov	r0, r6
 8013a10:	f000 fc48 	bl	80142a4 <__multadd>
 8013a14:	4607      	mov	r7, r0
 8013a16:	e7f0      	b.n	80139fa <_dtoa_r+0xa12>
 8013a18:	f1ba 0f00 	cmp.w	sl, #0
 8013a1c:	9a01      	ldr	r2, [sp, #4]
 8013a1e:	bfcc      	ite	gt
 8013a20:	46d0      	movgt	r8, sl
 8013a22:	f04f 0801 	movle.w	r8, #1
 8013a26:	4490      	add	r8, r2
 8013a28:	f04f 0900 	mov.w	r9, #0
 8013a2c:	4629      	mov	r1, r5
 8013a2e:	2201      	movs	r2, #1
 8013a30:	4630      	mov	r0, r6
 8013a32:	9302      	str	r3, [sp, #8]
 8013a34:	f000 fe30 	bl	8014698 <__lshift>
 8013a38:	4621      	mov	r1, r4
 8013a3a:	4605      	mov	r5, r0
 8013a3c:	f000 fe9c 	bl	8014778 <__mcmp>
 8013a40:	2800      	cmp	r0, #0
 8013a42:	dcb1      	bgt.n	80139a8 <_dtoa_r+0x9c0>
 8013a44:	d102      	bne.n	8013a4c <_dtoa_r+0xa64>
 8013a46:	9b02      	ldr	r3, [sp, #8]
 8013a48:	07db      	lsls	r3, r3, #31
 8013a4a:	d4ad      	bmi.n	80139a8 <_dtoa_r+0x9c0>
 8013a4c:	4643      	mov	r3, r8
 8013a4e:	4698      	mov	r8, r3
 8013a50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013a54:	2a30      	cmp	r2, #48	; 0x30
 8013a56:	d0fa      	beq.n	8013a4e <_dtoa_r+0xa66>
 8013a58:	e6f6      	b.n	8013848 <_dtoa_r+0x860>
 8013a5a:	9a01      	ldr	r2, [sp, #4]
 8013a5c:	429a      	cmp	r2, r3
 8013a5e:	d1a4      	bne.n	80139aa <_dtoa_r+0x9c2>
 8013a60:	f10b 0b01 	add.w	fp, fp, #1
 8013a64:	2331      	movs	r3, #49	; 0x31
 8013a66:	e778      	b.n	801395a <_dtoa_r+0x972>
 8013a68:	4b14      	ldr	r3, [pc, #80]	; (8013abc <_dtoa_r+0xad4>)
 8013a6a:	f7ff bb27 	b.w	80130bc <_dtoa_r+0xd4>
 8013a6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	f47f ab03 	bne.w	801307c <_dtoa_r+0x94>
 8013a76:	4b12      	ldr	r3, [pc, #72]	; (8013ac0 <_dtoa_r+0xad8>)
 8013a78:	f7ff bb20 	b.w	80130bc <_dtoa_r+0xd4>
 8013a7c:	f1ba 0f00 	cmp.w	sl, #0
 8013a80:	dc03      	bgt.n	8013a8a <_dtoa_r+0xaa2>
 8013a82:	9b06      	ldr	r3, [sp, #24]
 8013a84:	2b02      	cmp	r3, #2
 8013a86:	f73f aec7 	bgt.w	8013818 <_dtoa_r+0x830>
 8013a8a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013a8e:	4621      	mov	r1, r4
 8013a90:	4628      	mov	r0, r5
 8013a92:	f7ff fa1b 	bl	8012ecc <quorem>
 8013a96:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013a9a:	f808 3b01 	strb.w	r3, [r8], #1
 8013a9e:	9a01      	ldr	r2, [sp, #4]
 8013aa0:	eba8 0202 	sub.w	r2, r8, r2
 8013aa4:	4592      	cmp	sl, r2
 8013aa6:	ddb7      	ble.n	8013a18 <_dtoa_r+0xa30>
 8013aa8:	4629      	mov	r1, r5
 8013aaa:	2300      	movs	r3, #0
 8013aac:	220a      	movs	r2, #10
 8013aae:	4630      	mov	r0, r6
 8013ab0:	f000 fbf8 	bl	80142a4 <__multadd>
 8013ab4:	4605      	mov	r5, r0
 8013ab6:	e7ea      	b.n	8013a8e <_dtoa_r+0xaa6>
 8013ab8:	08015f38 	.word	0x08015f38
 8013abc:	08015d40 	.word	0x08015d40
 8013ac0:	08015eb9 	.word	0x08015eb9

08013ac4 <rshift>:
 8013ac4:	6903      	ldr	r3, [r0, #16]
 8013ac6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013aca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ace:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013ad2:	f100 0414 	add.w	r4, r0, #20
 8013ad6:	dd45      	ble.n	8013b64 <rshift+0xa0>
 8013ad8:	f011 011f 	ands.w	r1, r1, #31
 8013adc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013ae0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013ae4:	d10c      	bne.n	8013b00 <rshift+0x3c>
 8013ae6:	f100 0710 	add.w	r7, r0, #16
 8013aea:	4629      	mov	r1, r5
 8013aec:	42b1      	cmp	r1, r6
 8013aee:	d334      	bcc.n	8013b5a <rshift+0x96>
 8013af0:	1a9b      	subs	r3, r3, r2
 8013af2:	009b      	lsls	r3, r3, #2
 8013af4:	1eea      	subs	r2, r5, #3
 8013af6:	4296      	cmp	r6, r2
 8013af8:	bf38      	it	cc
 8013afa:	2300      	movcc	r3, #0
 8013afc:	4423      	add	r3, r4
 8013afe:	e015      	b.n	8013b2c <rshift+0x68>
 8013b00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013b04:	f1c1 0820 	rsb	r8, r1, #32
 8013b08:	40cf      	lsrs	r7, r1
 8013b0a:	f105 0e04 	add.w	lr, r5, #4
 8013b0e:	46a1      	mov	r9, r4
 8013b10:	4576      	cmp	r6, lr
 8013b12:	46f4      	mov	ip, lr
 8013b14:	d815      	bhi.n	8013b42 <rshift+0x7e>
 8013b16:	1a9a      	subs	r2, r3, r2
 8013b18:	0092      	lsls	r2, r2, #2
 8013b1a:	3a04      	subs	r2, #4
 8013b1c:	3501      	adds	r5, #1
 8013b1e:	42ae      	cmp	r6, r5
 8013b20:	bf38      	it	cc
 8013b22:	2200      	movcc	r2, #0
 8013b24:	18a3      	adds	r3, r4, r2
 8013b26:	50a7      	str	r7, [r4, r2]
 8013b28:	b107      	cbz	r7, 8013b2c <rshift+0x68>
 8013b2a:	3304      	adds	r3, #4
 8013b2c:	1b1a      	subs	r2, r3, r4
 8013b2e:	42a3      	cmp	r3, r4
 8013b30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013b34:	bf08      	it	eq
 8013b36:	2300      	moveq	r3, #0
 8013b38:	6102      	str	r2, [r0, #16]
 8013b3a:	bf08      	it	eq
 8013b3c:	6143      	streq	r3, [r0, #20]
 8013b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b42:	f8dc c000 	ldr.w	ip, [ip]
 8013b46:	fa0c fc08 	lsl.w	ip, ip, r8
 8013b4a:	ea4c 0707 	orr.w	r7, ip, r7
 8013b4e:	f849 7b04 	str.w	r7, [r9], #4
 8013b52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013b56:	40cf      	lsrs	r7, r1
 8013b58:	e7da      	b.n	8013b10 <rshift+0x4c>
 8013b5a:	f851 cb04 	ldr.w	ip, [r1], #4
 8013b5e:	f847 cf04 	str.w	ip, [r7, #4]!
 8013b62:	e7c3      	b.n	8013aec <rshift+0x28>
 8013b64:	4623      	mov	r3, r4
 8013b66:	e7e1      	b.n	8013b2c <rshift+0x68>

08013b68 <__hexdig_fun>:
 8013b68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013b6c:	2b09      	cmp	r3, #9
 8013b6e:	d802      	bhi.n	8013b76 <__hexdig_fun+0xe>
 8013b70:	3820      	subs	r0, #32
 8013b72:	b2c0      	uxtb	r0, r0
 8013b74:	4770      	bx	lr
 8013b76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013b7a:	2b05      	cmp	r3, #5
 8013b7c:	d801      	bhi.n	8013b82 <__hexdig_fun+0x1a>
 8013b7e:	3847      	subs	r0, #71	; 0x47
 8013b80:	e7f7      	b.n	8013b72 <__hexdig_fun+0xa>
 8013b82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013b86:	2b05      	cmp	r3, #5
 8013b88:	d801      	bhi.n	8013b8e <__hexdig_fun+0x26>
 8013b8a:	3827      	subs	r0, #39	; 0x27
 8013b8c:	e7f1      	b.n	8013b72 <__hexdig_fun+0xa>
 8013b8e:	2000      	movs	r0, #0
 8013b90:	4770      	bx	lr
	...

08013b94 <__gethex>:
 8013b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b98:	ed2d 8b02 	vpush	{d8}
 8013b9c:	b089      	sub	sp, #36	; 0x24
 8013b9e:	ee08 0a10 	vmov	s16, r0
 8013ba2:	9304      	str	r3, [sp, #16]
 8013ba4:	4bb4      	ldr	r3, [pc, #720]	; (8013e78 <__gethex+0x2e4>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	9301      	str	r3, [sp, #4]
 8013baa:	4618      	mov	r0, r3
 8013bac:	468b      	mov	fp, r1
 8013bae:	4690      	mov	r8, r2
 8013bb0:	f7ec fb9e 	bl	80002f0 <strlen>
 8013bb4:	9b01      	ldr	r3, [sp, #4]
 8013bb6:	f8db 2000 	ldr.w	r2, [fp]
 8013bba:	4403      	add	r3, r0
 8013bbc:	4682      	mov	sl, r0
 8013bbe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013bc2:	9305      	str	r3, [sp, #20]
 8013bc4:	1c93      	adds	r3, r2, #2
 8013bc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013bca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013bce:	32fe      	adds	r2, #254	; 0xfe
 8013bd0:	18d1      	adds	r1, r2, r3
 8013bd2:	461f      	mov	r7, r3
 8013bd4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013bd8:	9100      	str	r1, [sp, #0]
 8013bda:	2830      	cmp	r0, #48	; 0x30
 8013bdc:	d0f8      	beq.n	8013bd0 <__gethex+0x3c>
 8013bde:	f7ff ffc3 	bl	8013b68 <__hexdig_fun>
 8013be2:	4604      	mov	r4, r0
 8013be4:	2800      	cmp	r0, #0
 8013be6:	d13a      	bne.n	8013c5e <__gethex+0xca>
 8013be8:	9901      	ldr	r1, [sp, #4]
 8013bea:	4652      	mov	r2, sl
 8013bec:	4638      	mov	r0, r7
 8013bee:	f001 fa1f 	bl	8015030 <strncmp>
 8013bf2:	4605      	mov	r5, r0
 8013bf4:	2800      	cmp	r0, #0
 8013bf6:	d168      	bne.n	8013cca <__gethex+0x136>
 8013bf8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013bfc:	eb07 060a 	add.w	r6, r7, sl
 8013c00:	f7ff ffb2 	bl	8013b68 <__hexdig_fun>
 8013c04:	2800      	cmp	r0, #0
 8013c06:	d062      	beq.n	8013cce <__gethex+0x13a>
 8013c08:	4633      	mov	r3, r6
 8013c0a:	7818      	ldrb	r0, [r3, #0]
 8013c0c:	2830      	cmp	r0, #48	; 0x30
 8013c0e:	461f      	mov	r7, r3
 8013c10:	f103 0301 	add.w	r3, r3, #1
 8013c14:	d0f9      	beq.n	8013c0a <__gethex+0x76>
 8013c16:	f7ff ffa7 	bl	8013b68 <__hexdig_fun>
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	fab0 f480 	clz	r4, r0
 8013c20:	0964      	lsrs	r4, r4, #5
 8013c22:	4635      	mov	r5, r6
 8013c24:	9300      	str	r3, [sp, #0]
 8013c26:	463a      	mov	r2, r7
 8013c28:	4616      	mov	r6, r2
 8013c2a:	3201      	adds	r2, #1
 8013c2c:	7830      	ldrb	r0, [r6, #0]
 8013c2e:	f7ff ff9b 	bl	8013b68 <__hexdig_fun>
 8013c32:	2800      	cmp	r0, #0
 8013c34:	d1f8      	bne.n	8013c28 <__gethex+0x94>
 8013c36:	9901      	ldr	r1, [sp, #4]
 8013c38:	4652      	mov	r2, sl
 8013c3a:	4630      	mov	r0, r6
 8013c3c:	f001 f9f8 	bl	8015030 <strncmp>
 8013c40:	b980      	cbnz	r0, 8013c64 <__gethex+0xd0>
 8013c42:	b94d      	cbnz	r5, 8013c58 <__gethex+0xc4>
 8013c44:	eb06 050a 	add.w	r5, r6, sl
 8013c48:	462a      	mov	r2, r5
 8013c4a:	4616      	mov	r6, r2
 8013c4c:	3201      	adds	r2, #1
 8013c4e:	7830      	ldrb	r0, [r6, #0]
 8013c50:	f7ff ff8a 	bl	8013b68 <__hexdig_fun>
 8013c54:	2800      	cmp	r0, #0
 8013c56:	d1f8      	bne.n	8013c4a <__gethex+0xb6>
 8013c58:	1bad      	subs	r5, r5, r6
 8013c5a:	00ad      	lsls	r5, r5, #2
 8013c5c:	e004      	b.n	8013c68 <__gethex+0xd4>
 8013c5e:	2400      	movs	r4, #0
 8013c60:	4625      	mov	r5, r4
 8013c62:	e7e0      	b.n	8013c26 <__gethex+0x92>
 8013c64:	2d00      	cmp	r5, #0
 8013c66:	d1f7      	bne.n	8013c58 <__gethex+0xc4>
 8013c68:	7833      	ldrb	r3, [r6, #0]
 8013c6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013c6e:	2b50      	cmp	r3, #80	; 0x50
 8013c70:	d13b      	bne.n	8013cea <__gethex+0x156>
 8013c72:	7873      	ldrb	r3, [r6, #1]
 8013c74:	2b2b      	cmp	r3, #43	; 0x2b
 8013c76:	d02c      	beq.n	8013cd2 <__gethex+0x13e>
 8013c78:	2b2d      	cmp	r3, #45	; 0x2d
 8013c7a:	d02e      	beq.n	8013cda <__gethex+0x146>
 8013c7c:	1c71      	adds	r1, r6, #1
 8013c7e:	f04f 0900 	mov.w	r9, #0
 8013c82:	7808      	ldrb	r0, [r1, #0]
 8013c84:	f7ff ff70 	bl	8013b68 <__hexdig_fun>
 8013c88:	1e43      	subs	r3, r0, #1
 8013c8a:	b2db      	uxtb	r3, r3
 8013c8c:	2b18      	cmp	r3, #24
 8013c8e:	d82c      	bhi.n	8013cea <__gethex+0x156>
 8013c90:	f1a0 0210 	sub.w	r2, r0, #16
 8013c94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013c98:	f7ff ff66 	bl	8013b68 <__hexdig_fun>
 8013c9c:	1e43      	subs	r3, r0, #1
 8013c9e:	b2db      	uxtb	r3, r3
 8013ca0:	2b18      	cmp	r3, #24
 8013ca2:	d91d      	bls.n	8013ce0 <__gethex+0x14c>
 8013ca4:	f1b9 0f00 	cmp.w	r9, #0
 8013ca8:	d000      	beq.n	8013cac <__gethex+0x118>
 8013caa:	4252      	negs	r2, r2
 8013cac:	4415      	add	r5, r2
 8013cae:	f8cb 1000 	str.w	r1, [fp]
 8013cb2:	b1e4      	cbz	r4, 8013cee <__gethex+0x15a>
 8013cb4:	9b00      	ldr	r3, [sp, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	bf14      	ite	ne
 8013cba:	2700      	movne	r7, #0
 8013cbc:	2706      	moveq	r7, #6
 8013cbe:	4638      	mov	r0, r7
 8013cc0:	b009      	add	sp, #36	; 0x24
 8013cc2:	ecbd 8b02 	vpop	{d8}
 8013cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cca:	463e      	mov	r6, r7
 8013ccc:	4625      	mov	r5, r4
 8013cce:	2401      	movs	r4, #1
 8013cd0:	e7ca      	b.n	8013c68 <__gethex+0xd4>
 8013cd2:	f04f 0900 	mov.w	r9, #0
 8013cd6:	1cb1      	adds	r1, r6, #2
 8013cd8:	e7d3      	b.n	8013c82 <__gethex+0xee>
 8013cda:	f04f 0901 	mov.w	r9, #1
 8013cde:	e7fa      	b.n	8013cd6 <__gethex+0x142>
 8013ce0:	230a      	movs	r3, #10
 8013ce2:	fb03 0202 	mla	r2, r3, r2, r0
 8013ce6:	3a10      	subs	r2, #16
 8013ce8:	e7d4      	b.n	8013c94 <__gethex+0x100>
 8013cea:	4631      	mov	r1, r6
 8013cec:	e7df      	b.n	8013cae <__gethex+0x11a>
 8013cee:	1bf3      	subs	r3, r6, r7
 8013cf0:	3b01      	subs	r3, #1
 8013cf2:	4621      	mov	r1, r4
 8013cf4:	2b07      	cmp	r3, #7
 8013cf6:	dc0b      	bgt.n	8013d10 <__gethex+0x17c>
 8013cf8:	ee18 0a10 	vmov	r0, s16
 8013cfc:	f000 fa70 	bl	80141e0 <_Balloc>
 8013d00:	4604      	mov	r4, r0
 8013d02:	b940      	cbnz	r0, 8013d16 <__gethex+0x182>
 8013d04:	4b5d      	ldr	r3, [pc, #372]	; (8013e7c <__gethex+0x2e8>)
 8013d06:	4602      	mov	r2, r0
 8013d08:	21de      	movs	r1, #222	; 0xde
 8013d0a:	485d      	ldr	r0, [pc, #372]	; (8013e80 <__gethex+0x2ec>)
 8013d0c:	f001 f9b2 	bl	8015074 <__assert_func>
 8013d10:	3101      	adds	r1, #1
 8013d12:	105b      	asrs	r3, r3, #1
 8013d14:	e7ee      	b.n	8013cf4 <__gethex+0x160>
 8013d16:	f100 0914 	add.w	r9, r0, #20
 8013d1a:	f04f 0b00 	mov.w	fp, #0
 8013d1e:	f1ca 0301 	rsb	r3, sl, #1
 8013d22:	f8cd 9008 	str.w	r9, [sp, #8]
 8013d26:	f8cd b000 	str.w	fp, [sp]
 8013d2a:	9306      	str	r3, [sp, #24]
 8013d2c:	42b7      	cmp	r7, r6
 8013d2e:	d340      	bcc.n	8013db2 <__gethex+0x21e>
 8013d30:	9802      	ldr	r0, [sp, #8]
 8013d32:	9b00      	ldr	r3, [sp, #0]
 8013d34:	f840 3b04 	str.w	r3, [r0], #4
 8013d38:	eba0 0009 	sub.w	r0, r0, r9
 8013d3c:	1080      	asrs	r0, r0, #2
 8013d3e:	0146      	lsls	r6, r0, #5
 8013d40:	6120      	str	r0, [r4, #16]
 8013d42:	4618      	mov	r0, r3
 8013d44:	f000 fb3e 	bl	80143c4 <__hi0bits>
 8013d48:	1a30      	subs	r0, r6, r0
 8013d4a:	f8d8 6000 	ldr.w	r6, [r8]
 8013d4e:	42b0      	cmp	r0, r6
 8013d50:	dd63      	ble.n	8013e1a <__gethex+0x286>
 8013d52:	1b87      	subs	r7, r0, r6
 8013d54:	4639      	mov	r1, r7
 8013d56:	4620      	mov	r0, r4
 8013d58:	f000 fedf 	bl	8014b1a <__any_on>
 8013d5c:	4682      	mov	sl, r0
 8013d5e:	b1a8      	cbz	r0, 8013d8c <__gethex+0x1f8>
 8013d60:	1e7b      	subs	r3, r7, #1
 8013d62:	1159      	asrs	r1, r3, #5
 8013d64:	f003 021f 	and.w	r2, r3, #31
 8013d68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013d6c:	f04f 0a01 	mov.w	sl, #1
 8013d70:	fa0a f202 	lsl.w	r2, sl, r2
 8013d74:	420a      	tst	r2, r1
 8013d76:	d009      	beq.n	8013d8c <__gethex+0x1f8>
 8013d78:	4553      	cmp	r3, sl
 8013d7a:	dd05      	ble.n	8013d88 <__gethex+0x1f4>
 8013d7c:	1eb9      	subs	r1, r7, #2
 8013d7e:	4620      	mov	r0, r4
 8013d80:	f000 fecb 	bl	8014b1a <__any_on>
 8013d84:	2800      	cmp	r0, #0
 8013d86:	d145      	bne.n	8013e14 <__gethex+0x280>
 8013d88:	f04f 0a02 	mov.w	sl, #2
 8013d8c:	4639      	mov	r1, r7
 8013d8e:	4620      	mov	r0, r4
 8013d90:	f7ff fe98 	bl	8013ac4 <rshift>
 8013d94:	443d      	add	r5, r7
 8013d96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013d9a:	42ab      	cmp	r3, r5
 8013d9c:	da4c      	bge.n	8013e38 <__gethex+0x2a4>
 8013d9e:	ee18 0a10 	vmov	r0, s16
 8013da2:	4621      	mov	r1, r4
 8013da4:	f000 fa5c 	bl	8014260 <_Bfree>
 8013da8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013daa:	2300      	movs	r3, #0
 8013dac:	6013      	str	r3, [r2, #0]
 8013dae:	27a3      	movs	r7, #163	; 0xa3
 8013db0:	e785      	b.n	8013cbe <__gethex+0x12a>
 8013db2:	1e73      	subs	r3, r6, #1
 8013db4:	9a05      	ldr	r2, [sp, #20]
 8013db6:	9303      	str	r3, [sp, #12]
 8013db8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013dbc:	4293      	cmp	r3, r2
 8013dbe:	d019      	beq.n	8013df4 <__gethex+0x260>
 8013dc0:	f1bb 0f20 	cmp.w	fp, #32
 8013dc4:	d107      	bne.n	8013dd6 <__gethex+0x242>
 8013dc6:	9b02      	ldr	r3, [sp, #8]
 8013dc8:	9a00      	ldr	r2, [sp, #0]
 8013dca:	f843 2b04 	str.w	r2, [r3], #4
 8013dce:	9302      	str	r3, [sp, #8]
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	9300      	str	r3, [sp, #0]
 8013dd4:	469b      	mov	fp, r3
 8013dd6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013dda:	f7ff fec5 	bl	8013b68 <__hexdig_fun>
 8013dde:	9b00      	ldr	r3, [sp, #0]
 8013de0:	f000 000f 	and.w	r0, r0, #15
 8013de4:	fa00 f00b 	lsl.w	r0, r0, fp
 8013de8:	4303      	orrs	r3, r0
 8013dea:	9300      	str	r3, [sp, #0]
 8013dec:	f10b 0b04 	add.w	fp, fp, #4
 8013df0:	9b03      	ldr	r3, [sp, #12]
 8013df2:	e00d      	b.n	8013e10 <__gethex+0x27c>
 8013df4:	9b03      	ldr	r3, [sp, #12]
 8013df6:	9a06      	ldr	r2, [sp, #24]
 8013df8:	4413      	add	r3, r2
 8013dfa:	42bb      	cmp	r3, r7
 8013dfc:	d3e0      	bcc.n	8013dc0 <__gethex+0x22c>
 8013dfe:	4618      	mov	r0, r3
 8013e00:	9901      	ldr	r1, [sp, #4]
 8013e02:	9307      	str	r3, [sp, #28]
 8013e04:	4652      	mov	r2, sl
 8013e06:	f001 f913 	bl	8015030 <strncmp>
 8013e0a:	9b07      	ldr	r3, [sp, #28]
 8013e0c:	2800      	cmp	r0, #0
 8013e0e:	d1d7      	bne.n	8013dc0 <__gethex+0x22c>
 8013e10:	461e      	mov	r6, r3
 8013e12:	e78b      	b.n	8013d2c <__gethex+0x198>
 8013e14:	f04f 0a03 	mov.w	sl, #3
 8013e18:	e7b8      	b.n	8013d8c <__gethex+0x1f8>
 8013e1a:	da0a      	bge.n	8013e32 <__gethex+0x29e>
 8013e1c:	1a37      	subs	r7, r6, r0
 8013e1e:	4621      	mov	r1, r4
 8013e20:	ee18 0a10 	vmov	r0, s16
 8013e24:	463a      	mov	r2, r7
 8013e26:	f000 fc37 	bl	8014698 <__lshift>
 8013e2a:	1bed      	subs	r5, r5, r7
 8013e2c:	4604      	mov	r4, r0
 8013e2e:	f100 0914 	add.w	r9, r0, #20
 8013e32:	f04f 0a00 	mov.w	sl, #0
 8013e36:	e7ae      	b.n	8013d96 <__gethex+0x202>
 8013e38:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013e3c:	42a8      	cmp	r0, r5
 8013e3e:	dd72      	ble.n	8013f26 <__gethex+0x392>
 8013e40:	1b45      	subs	r5, r0, r5
 8013e42:	42ae      	cmp	r6, r5
 8013e44:	dc36      	bgt.n	8013eb4 <__gethex+0x320>
 8013e46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013e4a:	2b02      	cmp	r3, #2
 8013e4c:	d02a      	beq.n	8013ea4 <__gethex+0x310>
 8013e4e:	2b03      	cmp	r3, #3
 8013e50:	d02c      	beq.n	8013eac <__gethex+0x318>
 8013e52:	2b01      	cmp	r3, #1
 8013e54:	d11c      	bne.n	8013e90 <__gethex+0x2fc>
 8013e56:	42ae      	cmp	r6, r5
 8013e58:	d11a      	bne.n	8013e90 <__gethex+0x2fc>
 8013e5a:	2e01      	cmp	r6, #1
 8013e5c:	d112      	bne.n	8013e84 <__gethex+0x2f0>
 8013e5e:	9a04      	ldr	r2, [sp, #16]
 8013e60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013e64:	6013      	str	r3, [r2, #0]
 8013e66:	2301      	movs	r3, #1
 8013e68:	6123      	str	r3, [r4, #16]
 8013e6a:	f8c9 3000 	str.w	r3, [r9]
 8013e6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013e70:	2762      	movs	r7, #98	; 0x62
 8013e72:	601c      	str	r4, [r3, #0]
 8013e74:	e723      	b.n	8013cbe <__gethex+0x12a>
 8013e76:	bf00      	nop
 8013e78:	08015fb0 	.word	0x08015fb0
 8013e7c:	08015f38 	.word	0x08015f38
 8013e80:	08015f49 	.word	0x08015f49
 8013e84:	1e71      	subs	r1, r6, #1
 8013e86:	4620      	mov	r0, r4
 8013e88:	f000 fe47 	bl	8014b1a <__any_on>
 8013e8c:	2800      	cmp	r0, #0
 8013e8e:	d1e6      	bne.n	8013e5e <__gethex+0x2ca>
 8013e90:	ee18 0a10 	vmov	r0, s16
 8013e94:	4621      	mov	r1, r4
 8013e96:	f000 f9e3 	bl	8014260 <_Bfree>
 8013e9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	6013      	str	r3, [r2, #0]
 8013ea0:	2750      	movs	r7, #80	; 0x50
 8013ea2:	e70c      	b.n	8013cbe <__gethex+0x12a>
 8013ea4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d1f2      	bne.n	8013e90 <__gethex+0x2fc>
 8013eaa:	e7d8      	b.n	8013e5e <__gethex+0x2ca>
 8013eac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d1d5      	bne.n	8013e5e <__gethex+0x2ca>
 8013eb2:	e7ed      	b.n	8013e90 <__gethex+0x2fc>
 8013eb4:	1e6f      	subs	r7, r5, #1
 8013eb6:	f1ba 0f00 	cmp.w	sl, #0
 8013eba:	d131      	bne.n	8013f20 <__gethex+0x38c>
 8013ebc:	b127      	cbz	r7, 8013ec8 <__gethex+0x334>
 8013ebe:	4639      	mov	r1, r7
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	f000 fe2a 	bl	8014b1a <__any_on>
 8013ec6:	4682      	mov	sl, r0
 8013ec8:	117b      	asrs	r3, r7, #5
 8013eca:	2101      	movs	r1, #1
 8013ecc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013ed0:	f007 071f 	and.w	r7, r7, #31
 8013ed4:	fa01 f707 	lsl.w	r7, r1, r7
 8013ed8:	421f      	tst	r7, r3
 8013eda:	4629      	mov	r1, r5
 8013edc:	4620      	mov	r0, r4
 8013ede:	bf18      	it	ne
 8013ee0:	f04a 0a02 	orrne.w	sl, sl, #2
 8013ee4:	1b76      	subs	r6, r6, r5
 8013ee6:	f7ff fded 	bl	8013ac4 <rshift>
 8013eea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013eee:	2702      	movs	r7, #2
 8013ef0:	f1ba 0f00 	cmp.w	sl, #0
 8013ef4:	d048      	beq.n	8013f88 <__gethex+0x3f4>
 8013ef6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013efa:	2b02      	cmp	r3, #2
 8013efc:	d015      	beq.n	8013f2a <__gethex+0x396>
 8013efe:	2b03      	cmp	r3, #3
 8013f00:	d017      	beq.n	8013f32 <__gethex+0x39e>
 8013f02:	2b01      	cmp	r3, #1
 8013f04:	d109      	bne.n	8013f1a <__gethex+0x386>
 8013f06:	f01a 0f02 	tst.w	sl, #2
 8013f0a:	d006      	beq.n	8013f1a <__gethex+0x386>
 8013f0c:	f8d9 0000 	ldr.w	r0, [r9]
 8013f10:	ea4a 0a00 	orr.w	sl, sl, r0
 8013f14:	f01a 0f01 	tst.w	sl, #1
 8013f18:	d10e      	bne.n	8013f38 <__gethex+0x3a4>
 8013f1a:	f047 0710 	orr.w	r7, r7, #16
 8013f1e:	e033      	b.n	8013f88 <__gethex+0x3f4>
 8013f20:	f04f 0a01 	mov.w	sl, #1
 8013f24:	e7d0      	b.n	8013ec8 <__gethex+0x334>
 8013f26:	2701      	movs	r7, #1
 8013f28:	e7e2      	b.n	8013ef0 <__gethex+0x35c>
 8013f2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f2c:	f1c3 0301 	rsb	r3, r3, #1
 8013f30:	9315      	str	r3, [sp, #84]	; 0x54
 8013f32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d0f0      	beq.n	8013f1a <__gethex+0x386>
 8013f38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013f3c:	f104 0314 	add.w	r3, r4, #20
 8013f40:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013f44:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013f48:	f04f 0c00 	mov.w	ip, #0
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f52:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013f56:	d01c      	beq.n	8013f92 <__gethex+0x3fe>
 8013f58:	3201      	adds	r2, #1
 8013f5a:	6002      	str	r2, [r0, #0]
 8013f5c:	2f02      	cmp	r7, #2
 8013f5e:	f104 0314 	add.w	r3, r4, #20
 8013f62:	d13f      	bne.n	8013fe4 <__gethex+0x450>
 8013f64:	f8d8 2000 	ldr.w	r2, [r8]
 8013f68:	3a01      	subs	r2, #1
 8013f6a:	42b2      	cmp	r2, r6
 8013f6c:	d10a      	bne.n	8013f84 <__gethex+0x3f0>
 8013f6e:	1171      	asrs	r1, r6, #5
 8013f70:	2201      	movs	r2, #1
 8013f72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013f76:	f006 061f 	and.w	r6, r6, #31
 8013f7a:	fa02 f606 	lsl.w	r6, r2, r6
 8013f7e:	421e      	tst	r6, r3
 8013f80:	bf18      	it	ne
 8013f82:	4617      	movne	r7, r2
 8013f84:	f047 0720 	orr.w	r7, r7, #32
 8013f88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013f8a:	601c      	str	r4, [r3, #0]
 8013f8c:	9b04      	ldr	r3, [sp, #16]
 8013f8e:	601d      	str	r5, [r3, #0]
 8013f90:	e695      	b.n	8013cbe <__gethex+0x12a>
 8013f92:	4299      	cmp	r1, r3
 8013f94:	f843 cc04 	str.w	ip, [r3, #-4]
 8013f98:	d8d8      	bhi.n	8013f4c <__gethex+0x3b8>
 8013f9a:	68a3      	ldr	r3, [r4, #8]
 8013f9c:	459b      	cmp	fp, r3
 8013f9e:	db19      	blt.n	8013fd4 <__gethex+0x440>
 8013fa0:	6861      	ldr	r1, [r4, #4]
 8013fa2:	ee18 0a10 	vmov	r0, s16
 8013fa6:	3101      	adds	r1, #1
 8013fa8:	f000 f91a 	bl	80141e0 <_Balloc>
 8013fac:	4681      	mov	r9, r0
 8013fae:	b918      	cbnz	r0, 8013fb8 <__gethex+0x424>
 8013fb0:	4b1a      	ldr	r3, [pc, #104]	; (801401c <__gethex+0x488>)
 8013fb2:	4602      	mov	r2, r0
 8013fb4:	2184      	movs	r1, #132	; 0x84
 8013fb6:	e6a8      	b.n	8013d0a <__gethex+0x176>
 8013fb8:	6922      	ldr	r2, [r4, #16]
 8013fba:	3202      	adds	r2, #2
 8013fbc:	f104 010c 	add.w	r1, r4, #12
 8013fc0:	0092      	lsls	r2, r2, #2
 8013fc2:	300c      	adds	r0, #12
 8013fc4:	f7fd fc6c 	bl	80118a0 <memcpy>
 8013fc8:	4621      	mov	r1, r4
 8013fca:	ee18 0a10 	vmov	r0, s16
 8013fce:	f000 f947 	bl	8014260 <_Bfree>
 8013fd2:	464c      	mov	r4, r9
 8013fd4:	6923      	ldr	r3, [r4, #16]
 8013fd6:	1c5a      	adds	r2, r3, #1
 8013fd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013fdc:	6122      	str	r2, [r4, #16]
 8013fde:	2201      	movs	r2, #1
 8013fe0:	615a      	str	r2, [r3, #20]
 8013fe2:	e7bb      	b.n	8013f5c <__gethex+0x3c8>
 8013fe4:	6922      	ldr	r2, [r4, #16]
 8013fe6:	455a      	cmp	r2, fp
 8013fe8:	dd0b      	ble.n	8014002 <__gethex+0x46e>
 8013fea:	2101      	movs	r1, #1
 8013fec:	4620      	mov	r0, r4
 8013fee:	f7ff fd69 	bl	8013ac4 <rshift>
 8013ff2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013ff6:	3501      	adds	r5, #1
 8013ff8:	42ab      	cmp	r3, r5
 8013ffa:	f6ff aed0 	blt.w	8013d9e <__gethex+0x20a>
 8013ffe:	2701      	movs	r7, #1
 8014000:	e7c0      	b.n	8013f84 <__gethex+0x3f0>
 8014002:	f016 061f 	ands.w	r6, r6, #31
 8014006:	d0fa      	beq.n	8013ffe <__gethex+0x46a>
 8014008:	4453      	add	r3, sl
 801400a:	f1c6 0620 	rsb	r6, r6, #32
 801400e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014012:	f000 f9d7 	bl	80143c4 <__hi0bits>
 8014016:	42b0      	cmp	r0, r6
 8014018:	dbe7      	blt.n	8013fea <__gethex+0x456>
 801401a:	e7f0      	b.n	8013ffe <__gethex+0x46a>
 801401c:	08015f38 	.word	0x08015f38

08014020 <L_shift>:
 8014020:	f1c2 0208 	rsb	r2, r2, #8
 8014024:	0092      	lsls	r2, r2, #2
 8014026:	b570      	push	{r4, r5, r6, lr}
 8014028:	f1c2 0620 	rsb	r6, r2, #32
 801402c:	6843      	ldr	r3, [r0, #4]
 801402e:	6804      	ldr	r4, [r0, #0]
 8014030:	fa03 f506 	lsl.w	r5, r3, r6
 8014034:	432c      	orrs	r4, r5
 8014036:	40d3      	lsrs	r3, r2
 8014038:	6004      	str	r4, [r0, #0]
 801403a:	f840 3f04 	str.w	r3, [r0, #4]!
 801403e:	4288      	cmp	r0, r1
 8014040:	d3f4      	bcc.n	801402c <L_shift+0xc>
 8014042:	bd70      	pop	{r4, r5, r6, pc}

08014044 <__match>:
 8014044:	b530      	push	{r4, r5, lr}
 8014046:	6803      	ldr	r3, [r0, #0]
 8014048:	3301      	adds	r3, #1
 801404a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801404e:	b914      	cbnz	r4, 8014056 <__match+0x12>
 8014050:	6003      	str	r3, [r0, #0]
 8014052:	2001      	movs	r0, #1
 8014054:	bd30      	pop	{r4, r5, pc}
 8014056:	f813 2b01 	ldrb.w	r2, [r3], #1
 801405a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801405e:	2d19      	cmp	r5, #25
 8014060:	bf98      	it	ls
 8014062:	3220      	addls	r2, #32
 8014064:	42a2      	cmp	r2, r4
 8014066:	d0f0      	beq.n	801404a <__match+0x6>
 8014068:	2000      	movs	r0, #0
 801406a:	e7f3      	b.n	8014054 <__match+0x10>

0801406c <__hexnan>:
 801406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014070:	680b      	ldr	r3, [r1, #0]
 8014072:	115e      	asrs	r6, r3, #5
 8014074:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014078:	f013 031f 	ands.w	r3, r3, #31
 801407c:	b087      	sub	sp, #28
 801407e:	bf18      	it	ne
 8014080:	3604      	addne	r6, #4
 8014082:	2500      	movs	r5, #0
 8014084:	1f37      	subs	r7, r6, #4
 8014086:	4690      	mov	r8, r2
 8014088:	6802      	ldr	r2, [r0, #0]
 801408a:	9301      	str	r3, [sp, #4]
 801408c:	4682      	mov	sl, r0
 801408e:	f846 5c04 	str.w	r5, [r6, #-4]
 8014092:	46b9      	mov	r9, r7
 8014094:	463c      	mov	r4, r7
 8014096:	9502      	str	r5, [sp, #8]
 8014098:	46ab      	mov	fp, r5
 801409a:	7851      	ldrb	r1, [r2, #1]
 801409c:	1c53      	adds	r3, r2, #1
 801409e:	9303      	str	r3, [sp, #12]
 80140a0:	b341      	cbz	r1, 80140f4 <__hexnan+0x88>
 80140a2:	4608      	mov	r0, r1
 80140a4:	9205      	str	r2, [sp, #20]
 80140a6:	9104      	str	r1, [sp, #16]
 80140a8:	f7ff fd5e 	bl	8013b68 <__hexdig_fun>
 80140ac:	2800      	cmp	r0, #0
 80140ae:	d14f      	bne.n	8014150 <__hexnan+0xe4>
 80140b0:	9904      	ldr	r1, [sp, #16]
 80140b2:	9a05      	ldr	r2, [sp, #20]
 80140b4:	2920      	cmp	r1, #32
 80140b6:	d818      	bhi.n	80140ea <__hexnan+0x7e>
 80140b8:	9b02      	ldr	r3, [sp, #8]
 80140ba:	459b      	cmp	fp, r3
 80140bc:	dd13      	ble.n	80140e6 <__hexnan+0x7a>
 80140be:	454c      	cmp	r4, r9
 80140c0:	d206      	bcs.n	80140d0 <__hexnan+0x64>
 80140c2:	2d07      	cmp	r5, #7
 80140c4:	dc04      	bgt.n	80140d0 <__hexnan+0x64>
 80140c6:	462a      	mov	r2, r5
 80140c8:	4649      	mov	r1, r9
 80140ca:	4620      	mov	r0, r4
 80140cc:	f7ff ffa8 	bl	8014020 <L_shift>
 80140d0:	4544      	cmp	r4, r8
 80140d2:	d950      	bls.n	8014176 <__hexnan+0x10a>
 80140d4:	2300      	movs	r3, #0
 80140d6:	f1a4 0904 	sub.w	r9, r4, #4
 80140da:	f844 3c04 	str.w	r3, [r4, #-4]
 80140de:	f8cd b008 	str.w	fp, [sp, #8]
 80140e2:	464c      	mov	r4, r9
 80140e4:	461d      	mov	r5, r3
 80140e6:	9a03      	ldr	r2, [sp, #12]
 80140e8:	e7d7      	b.n	801409a <__hexnan+0x2e>
 80140ea:	2929      	cmp	r1, #41	; 0x29
 80140ec:	d156      	bne.n	801419c <__hexnan+0x130>
 80140ee:	3202      	adds	r2, #2
 80140f0:	f8ca 2000 	str.w	r2, [sl]
 80140f4:	f1bb 0f00 	cmp.w	fp, #0
 80140f8:	d050      	beq.n	801419c <__hexnan+0x130>
 80140fa:	454c      	cmp	r4, r9
 80140fc:	d206      	bcs.n	801410c <__hexnan+0xa0>
 80140fe:	2d07      	cmp	r5, #7
 8014100:	dc04      	bgt.n	801410c <__hexnan+0xa0>
 8014102:	462a      	mov	r2, r5
 8014104:	4649      	mov	r1, r9
 8014106:	4620      	mov	r0, r4
 8014108:	f7ff ff8a 	bl	8014020 <L_shift>
 801410c:	4544      	cmp	r4, r8
 801410e:	d934      	bls.n	801417a <__hexnan+0x10e>
 8014110:	f1a8 0204 	sub.w	r2, r8, #4
 8014114:	4623      	mov	r3, r4
 8014116:	f853 1b04 	ldr.w	r1, [r3], #4
 801411a:	f842 1f04 	str.w	r1, [r2, #4]!
 801411e:	429f      	cmp	r7, r3
 8014120:	d2f9      	bcs.n	8014116 <__hexnan+0xaa>
 8014122:	1b3b      	subs	r3, r7, r4
 8014124:	f023 0303 	bic.w	r3, r3, #3
 8014128:	3304      	adds	r3, #4
 801412a:	3401      	adds	r4, #1
 801412c:	3e03      	subs	r6, #3
 801412e:	42b4      	cmp	r4, r6
 8014130:	bf88      	it	hi
 8014132:	2304      	movhi	r3, #4
 8014134:	4443      	add	r3, r8
 8014136:	2200      	movs	r2, #0
 8014138:	f843 2b04 	str.w	r2, [r3], #4
 801413c:	429f      	cmp	r7, r3
 801413e:	d2fb      	bcs.n	8014138 <__hexnan+0xcc>
 8014140:	683b      	ldr	r3, [r7, #0]
 8014142:	b91b      	cbnz	r3, 801414c <__hexnan+0xe0>
 8014144:	4547      	cmp	r7, r8
 8014146:	d127      	bne.n	8014198 <__hexnan+0x12c>
 8014148:	2301      	movs	r3, #1
 801414a:	603b      	str	r3, [r7, #0]
 801414c:	2005      	movs	r0, #5
 801414e:	e026      	b.n	801419e <__hexnan+0x132>
 8014150:	3501      	adds	r5, #1
 8014152:	2d08      	cmp	r5, #8
 8014154:	f10b 0b01 	add.w	fp, fp, #1
 8014158:	dd06      	ble.n	8014168 <__hexnan+0xfc>
 801415a:	4544      	cmp	r4, r8
 801415c:	d9c3      	bls.n	80140e6 <__hexnan+0x7a>
 801415e:	2300      	movs	r3, #0
 8014160:	f844 3c04 	str.w	r3, [r4, #-4]
 8014164:	2501      	movs	r5, #1
 8014166:	3c04      	subs	r4, #4
 8014168:	6822      	ldr	r2, [r4, #0]
 801416a:	f000 000f 	and.w	r0, r0, #15
 801416e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014172:	6022      	str	r2, [r4, #0]
 8014174:	e7b7      	b.n	80140e6 <__hexnan+0x7a>
 8014176:	2508      	movs	r5, #8
 8014178:	e7b5      	b.n	80140e6 <__hexnan+0x7a>
 801417a:	9b01      	ldr	r3, [sp, #4]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d0df      	beq.n	8014140 <__hexnan+0xd4>
 8014180:	f04f 32ff 	mov.w	r2, #4294967295
 8014184:	f1c3 0320 	rsb	r3, r3, #32
 8014188:	fa22 f303 	lsr.w	r3, r2, r3
 801418c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014190:	401a      	ands	r2, r3
 8014192:	f846 2c04 	str.w	r2, [r6, #-4]
 8014196:	e7d3      	b.n	8014140 <__hexnan+0xd4>
 8014198:	3f04      	subs	r7, #4
 801419a:	e7d1      	b.n	8014140 <__hexnan+0xd4>
 801419c:	2004      	movs	r0, #4
 801419e:	b007      	add	sp, #28
 80141a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080141a4 <_localeconv_r>:
 80141a4:	4800      	ldr	r0, [pc, #0]	; (80141a8 <_localeconv_r+0x4>)
 80141a6:	4770      	bx	lr
 80141a8:	24000900 	.word	0x24000900

080141ac <malloc>:
 80141ac:	4b02      	ldr	r3, [pc, #8]	; (80141b8 <malloc+0xc>)
 80141ae:	4601      	mov	r1, r0
 80141b0:	6818      	ldr	r0, [r3, #0]
 80141b2:	f000 bd55 	b.w	8014c60 <_malloc_r>
 80141b6:	bf00      	nop
 80141b8:	240007a8 	.word	0x240007a8

080141bc <__ascii_mbtowc>:
 80141bc:	b082      	sub	sp, #8
 80141be:	b901      	cbnz	r1, 80141c2 <__ascii_mbtowc+0x6>
 80141c0:	a901      	add	r1, sp, #4
 80141c2:	b142      	cbz	r2, 80141d6 <__ascii_mbtowc+0x1a>
 80141c4:	b14b      	cbz	r3, 80141da <__ascii_mbtowc+0x1e>
 80141c6:	7813      	ldrb	r3, [r2, #0]
 80141c8:	600b      	str	r3, [r1, #0]
 80141ca:	7812      	ldrb	r2, [r2, #0]
 80141cc:	1e10      	subs	r0, r2, #0
 80141ce:	bf18      	it	ne
 80141d0:	2001      	movne	r0, #1
 80141d2:	b002      	add	sp, #8
 80141d4:	4770      	bx	lr
 80141d6:	4610      	mov	r0, r2
 80141d8:	e7fb      	b.n	80141d2 <__ascii_mbtowc+0x16>
 80141da:	f06f 0001 	mvn.w	r0, #1
 80141de:	e7f8      	b.n	80141d2 <__ascii_mbtowc+0x16>

080141e0 <_Balloc>:
 80141e0:	b570      	push	{r4, r5, r6, lr}
 80141e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80141e4:	4604      	mov	r4, r0
 80141e6:	460d      	mov	r5, r1
 80141e8:	b976      	cbnz	r6, 8014208 <_Balloc+0x28>
 80141ea:	2010      	movs	r0, #16
 80141ec:	f7ff ffde 	bl	80141ac <malloc>
 80141f0:	4602      	mov	r2, r0
 80141f2:	6260      	str	r0, [r4, #36]	; 0x24
 80141f4:	b920      	cbnz	r0, 8014200 <_Balloc+0x20>
 80141f6:	4b18      	ldr	r3, [pc, #96]	; (8014258 <_Balloc+0x78>)
 80141f8:	4818      	ldr	r0, [pc, #96]	; (801425c <_Balloc+0x7c>)
 80141fa:	2166      	movs	r1, #102	; 0x66
 80141fc:	f000 ff3a 	bl	8015074 <__assert_func>
 8014200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014204:	6006      	str	r6, [r0, #0]
 8014206:	60c6      	str	r6, [r0, #12]
 8014208:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801420a:	68f3      	ldr	r3, [r6, #12]
 801420c:	b183      	cbz	r3, 8014230 <_Balloc+0x50>
 801420e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014210:	68db      	ldr	r3, [r3, #12]
 8014212:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014216:	b9b8      	cbnz	r0, 8014248 <_Balloc+0x68>
 8014218:	2101      	movs	r1, #1
 801421a:	fa01 f605 	lsl.w	r6, r1, r5
 801421e:	1d72      	adds	r2, r6, #5
 8014220:	0092      	lsls	r2, r2, #2
 8014222:	4620      	mov	r0, r4
 8014224:	f000 fc9a 	bl	8014b5c <_calloc_r>
 8014228:	b160      	cbz	r0, 8014244 <_Balloc+0x64>
 801422a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801422e:	e00e      	b.n	801424e <_Balloc+0x6e>
 8014230:	2221      	movs	r2, #33	; 0x21
 8014232:	2104      	movs	r1, #4
 8014234:	4620      	mov	r0, r4
 8014236:	f000 fc91 	bl	8014b5c <_calloc_r>
 801423a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801423c:	60f0      	str	r0, [r6, #12]
 801423e:	68db      	ldr	r3, [r3, #12]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d1e4      	bne.n	801420e <_Balloc+0x2e>
 8014244:	2000      	movs	r0, #0
 8014246:	bd70      	pop	{r4, r5, r6, pc}
 8014248:	6802      	ldr	r2, [r0, #0]
 801424a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801424e:	2300      	movs	r3, #0
 8014250:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014254:	e7f7      	b.n	8014246 <_Balloc+0x66>
 8014256:	bf00      	nop
 8014258:	08015ec6 	.word	0x08015ec6
 801425c:	08015fc4 	.word	0x08015fc4

08014260 <_Bfree>:
 8014260:	b570      	push	{r4, r5, r6, lr}
 8014262:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014264:	4605      	mov	r5, r0
 8014266:	460c      	mov	r4, r1
 8014268:	b976      	cbnz	r6, 8014288 <_Bfree+0x28>
 801426a:	2010      	movs	r0, #16
 801426c:	f7ff ff9e 	bl	80141ac <malloc>
 8014270:	4602      	mov	r2, r0
 8014272:	6268      	str	r0, [r5, #36]	; 0x24
 8014274:	b920      	cbnz	r0, 8014280 <_Bfree+0x20>
 8014276:	4b09      	ldr	r3, [pc, #36]	; (801429c <_Bfree+0x3c>)
 8014278:	4809      	ldr	r0, [pc, #36]	; (80142a0 <_Bfree+0x40>)
 801427a:	218a      	movs	r1, #138	; 0x8a
 801427c:	f000 fefa 	bl	8015074 <__assert_func>
 8014280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014284:	6006      	str	r6, [r0, #0]
 8014286:	60c6      	str	r6, [r0, #12]
 8014288:	b13c      	cbz	r4, 801429a <_Bfree+0x3a>
 801428a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801428c:	6862      	ldr	r2, [r4, #4]
 801428e:	68db      	ldr	r3, [r3, #12]
 8014290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014294:	6021      	str	r1, [r4, #0]
 8014296:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801429a:	bd70      	pop	{r4, r5, r6, pc}
 801429c:	08015ec6 	.word	0x08015ec6
 80142a0:	08015fc4 	.word	0x08015fc4

080142a4 <__multadd>:
 80142a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142a8:	690d      	ldr	r5, [r1, #16]
 80142aa:	4607      	mov	r7, r0
 80142ac:	460c      	mov	r4, r1
 80142ae:	461e      	mov	r6, r3
 80142b0:	f101 0c14 	add.w	ip, r1, #20
 80142b4:	2000      	movs	r0, #0
 80142b6:	f8dc 3000 	ldr.w	r3, [ip]
 80142ba:	b299      	uxth	r1, r3
 80142bc:	fb02 6101 	mla	r1, r2, r1, r6
 80142c0:	0c1e      	lsrs	r6, r3, #16
 80142c2:	0c0b      	lsrs	r3, r1, #16
 80142c4:	fb02 3306 	mla	r3, r2, r6, r3
 80142c8:	b289      	uxth	r1, r1
 80142ca:	3001      	adds	r0, #1
 80142cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80142d0:	4285      	cmp	r5, r0
 80142d2:	f84c 1b04 	str.w	r1, [ip], #4
 80142d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80142da:	dcec      	bgt.n	80142b6 <__multadd+0x12>
 80142dc:	b30e      	cbz	r6, 8014322 <__multadd+0x7e>
 80142de:	68a3      	ldr	r3, [r4, #8]
 80142e0:	42ab      	cmp	r3, r5
 80142e2:	dc19      	bgt.n	8014318 <__multadd+0x74>
 80142e4:	6861      	ldr	r1, [r4, #4]
 80142e6:	4638      	mov	r0, r7
 80142e8:	3101      	adds	r1, #1
 80142ea:	f7ff ff79 	bl	80141e0 <_Balloc>
 80142ee:	4680      	mov	r8, r0
 80142f0:	b928      	cbnz	r0, 80142fe <__multadd+0x5a>
 80142f2:	4602      	mov	r2, r0
 80142f4:	4b0c      	ldr	r3, [pc, #48]	; (8014328 <__multadd+0x84>)
 80142f6:	480d      	ldr	r0, [pc, #52]	; (801432c <__multadd+0x88>)
 80142f8:	21b5      	movs	r1, #181	; 0xb5
 80142fa:	f000 febb 	bl	8015074 <__assert_func>
 80142fe:	6922      	ldr	r2, [r4, #16]
 8014300:	3202      	adds	r2, #2
 8014302:	f104 010c 	add.w	r1, r4, #12
 8014306:	0092      	lsls	r2, r2, #2
 8014308:	300c      	adds	r0, #12
 801430a:	f7fd fac9 	bl	80118a0 <memcpy>
 801430e:	4621      	mov	r1, r4
 8014310:	4638      	mov	r0, r7
 8014312:	f7ff ffa5 	bl	8014260 <_Bfree>
 8014316:	4644      	mov	r4, r8
 8014318:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801431c:	3501      	adds	r5, #1
 801431e:	615e      	str	r6, [r3, #20]
 8014320:	6125      	str	r5, [r4, #16]
 8014322:	4620      	mov	r0, r4
 8014324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014328:	08015f38 	.word	0x08015f38
 801432c:	08015fc4 	.word	0x08015fc4

08014330 <__s2b>:
 8014330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014334:	460c      	mov	r4, r1
 8014336:	4615      	mov	r5, r2
 8014338:	461f      	mov	r7, r3
 801433a:	2209      	movs	r2, #9
 801433c:	3308      	adds	r3, #8
 801433e:	4606      	mov	r6, r0
 8014340:	fb93 f3f2 	sdiv	r3, r3, r2
 8014344:	2100      	movs	r1, #0
 8014346:	2201      	movs	r2, #1
 8014348:	429a      	cmp	r2, r3
 801434a:	db09      	blt.n	8014360 <__s2b+0x30>
 801434c:	4630      	mov	r0, r6
 801434e:	f7ff ff47 	bl	80141e0 <_Balloc>
 8014352:	b940      	cbnz	r0, 8014366 <__s2b+0x36>
 8014354:	4602      	mov	r2, r0
 8014356:	4b19      	ldr	r3, [pc, #100]	; (80143bc <__s2b+0x8c>)
 8014358:	4819      	ldr	r0, [pc, #100]	; (80143c0 <__s2b+0x90>)
 801435a:	21ce      	movs	r1, #206	; 0xce
 801435c:	f000 fe8a 	bl	8015074 <__assert_func>
 8014360:	0052      	lsls	r2, r2, #1
 8014362:	3101      	adds	r1, #1
 8014364:	e7f0      	b.n	8014348 <__s2b+0x18>
 8014366:	9b08      	ldr	r3, [sp, #32]
 8014368:	6143      	str	r3, [r0, #20]
 801436a:	2d09      	cmp	r5, #9
 801436c:	f04f 0301 	mov.w	r3, #1
 8014370:	6103      	str	r3, [r0, #16]
 8014372:	dd16      	ble.n	80143a2 <__s2b+0x72>
 8014374:	f104 0909 	add.w	r9, r4, #9
 8014378:	46c8      	mov	r8, r9
 801437a:	442c      	add	r4, r5
 801437c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014380:	4601      	mov	r1, r0
 8014382:	3b30      	subs	r3, #48	; 0x30
 8014384:	220a      	movs	r2, #10
 8014386:	4630      	mov	r0, r6
 8014388:	f7ff ff8c 	bl	80142a4 <__multadd>
 801438c:	45a0      	cmp	r8, r4
 801438e:	d1f5      	bne.n	801437c <__s2b+0x4c>
 8014390:	f1a5 0408 	sub.w	r4, r5, #8
 8014394:	444c      	add	r4, r9
 8014396:	1b2d      	subs	r5, r5, r4
 8014398:	1963      	adds	r3, r4, r5
 801439a:	42bb      	cmp	r3, r7
 801439c:	db04      	blt.n	80143a8 <__s2b+0x78>
 801439e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143a2:	340a      	adds	r4, #10
 80143a4:	2509      	movs	r5, #9
 80143a6:	e7f6      	b.n	8014396 <__s2b+0x66>
 80143a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80143ac:	4601      	mov	r1, r0
 80143ae:	3b30      	subs	r3, #48	; 0x30
 80143b0:	220a      	movs	r2, #10
 80143b2:	4630      	mov	r0, r6
 80143b4:	f7ff ff76 	bl	80142a4 <__multadd>
 80143b8:	e7ee      	b.n	8014398 <__s2b+0x68>
 80143ba:	bf00      	nop
 80143bc:	08015f38 	.word	0x08015f38
 80143c0:	08015fc4 	.word	0x08015fc4

080143c4 <__hi0bits>:
 80143c4:	0c03      	lsrs	r3, r0, #16
 80143c6:	041b      	lsls	r3, r3, #16
 80143c8:	b9d3      	cbnz	r3, 8014400 <__hi0bits+0x3c>
 80143ca:	0400      	lsls	r0, r0, #16
 80143cc:	2310      	movs	r3, #16
 80143ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80143d2:	bf04      	itt	eq
 80143d4:	0200      	lsleq	r0, r0, #8
 80143d6:	3308      	addeq	r3, #8
 80143d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80143dc:	bf04      	itt	eq
 80143de:	0100      	lsleq	r0, r0, #4
 80143e0:	3304      	addeq	r3, #4
 80143e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80143e6:	bf04      	itt	eq
 80143e8:	0080      	lsleq	r0, r0, #2
 80143ea:	3302      	addeq	r3, #2
 80143ec:	2800      	cmp	r0, #0
 80143ee:	db05      	blt.n	80143fc <__hi0bits+0x38>
 80143f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80143f4:	f103 0301 	add.w	r3, r3, #1
 80143f8:	bf08      	it	eq
 80143fa:	2320      	moveq	r3, #32
 80143fc:	4618      	mov	r0, r3
 80143fe:	4770      	bx	lr
 8014400:	2300      	movs	r3, #0
 8014402:	e7e4      	b.n	80143ce <__hi0bits+0xa>

08014404 <__lo0bits>:
 8014404:	6803      	ldr	r3, [r0, #0]
 8014406:	f013 0207 	ands.w	r2, r3, #7
 801440a:	4601      	mov	r1, r0
 801440c:	d00b      	beq.n	8014426 <__lo0bits+0x22>
 801440e:	07da      	lsls	r2, r3, #31
 8014410:	d423      	bmi.n	801445a <__lo0bits+0x56>
 8014412:	0798      	lsls	r0, r3, #30
 8014414:	bf49      	itett	mi
 8014416:	085b      	lsrmi	r3, r3, #1
 8014418:	089b      	lsrpl	r3, r3, #2
 801441a:	2001      	movmi	r0, #1
 801441c:	600b      	strmi	r3, [r1, #0]
 801441e:	bf5c      	itt	pl
 8014420:	600b      	strpl	r3, [r1, #0]
 8014422:	2002      	movpl	r0, #2
 8014424:	4770      	bx	lr
 8014426:	b298      	uxth	r0, r3
 8014428:	b9a8      	cbnz	r0, 8014456 <__lo0bits+0x52>
 801442a:	0c1b      	lsrs	r3, r3, #16
 801442c:	2010      	movs	r0, #16
 801442e:	b2da      	uxtb	r2, r3
 8014430:	b90a      	cbnz	r2, 8014436 <__lo0bits+0x32>
 8014432:	3008      	adds	r0, #8
 8014434:	0a1b      	lsrs	r3, r3, #8
 8014436:	071a      	lsls	r2, r3, #28
 8014438:	bf04      	itt	eq
 801443a:	091b      	lsreq	r3, r3, #4
 801443c:	3004      	addeq	r0, #4
 801443e:	079a      	lsls	r2, r3, #30
 8014440:	bf04      	itt	eq
 8014442:	089b      	lsreq	r3, r3, #2
 8014444:	3002      	addeq	r0, #2
 8014446:	07da      	lsls	r2, r3, #31
 8014448:	d403      	bmi.n	8014452 <__lo0bits+0x4e>
 801444a:	085b      	lsrs	r3, r3, #1
 801444c:	f100 0001 	add.w	r0, r0, #1
 8014450:	d005      	beq.n	801445e <__lo0bits+0x5a>
 8014452:	600b      	str	r3, [r1, #0]
 8014454:	4770      	bx	lr
 8014456:	4610      	mov	r0, r2
 8014458:	e7e9      	b.n	801442e <__lo0bits+0x2a>
 801445a:	2000      	movs	r0, #0
 801445c:	4770      	bx	lr
 801445e:	2020      	movs	r0, #32
 8014460:	4770      	bx	lr
	...

08014464 <__i2b>:
 8014464:	b510      	push	{r4, lr}
 8014466:	460c      	mov	r4, r1
 8014468:	2101      	movs	r1, #1
 801446a:	f7ff feb9 	bl	80141e0 <_Balloc>
 801446e:	4602      	mov	r2, r0
 8014470:	b928      	cbnz	r0, 801447e <__i2b+0x1a>
 8014472:	4b05      	ldr	r3, [pc, #20]	; (8014488 <__i2b+0x24>)
 8014474:	4805      	ldr	r0, [pc, #20]	; (801448c <__i2b+0x28>)
 8014476:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801447a:	f000 fdfb 	bl	8015074 <__assert_func>
 801447e:	2301      	movs	r3, #1
 8014480:	6144      	str	r4, [r0, #20]
 8014482:	6103      	str	r3, [r0, #16]
 8014484:	bd10      	pop	{r4, pc}
 8014486:	bf00      	nop
 8014488:	08015f38 	.word	0x08015f38
 801448c:	08015fc4 	.word	0x08015fc4

08014490 <__multiply>:
 8014490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014494:	4691      	mov	r9, r2
 8014496:	690a      	ldr	r2, [r1, #16]
 8014498:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801449c:	429a      	cmp	r2, r3
 801449e:	bfb8      	it	lt
 80144a0:	460b      	movlt	r3, r1
 80144a2:	460c      	mov	r4, r1
 80144a4:	bfbc      	itt	lt
 80144a6:	464c      	movlt	r4, r9
 80144a8:	4699      	movlt	r9, r3
 80144aa:	6927      	ldr	r7, [r4, #16]
 80144ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80144b0:	68a3      	ldr	r3, [r4, #8]
 80144b2:	6861      	ldr	r1, [r4, #4]
 80144b4:	eb07 060a 	add.w	r6, r7, sl
 80144b8:	42b3      	cmp	r3, r6
 80144ba:	b085      	sub	sp, #20
 80144bc:	bfb8      	it	lt
 80144be:	3101      	addlt	r1, #1
 80144c0:	f7ff fe8e 	bl	80141e0 <_Balloc>
 80144c4:	b930      	cbnz	r0, 80144d4 <__multiply+0x44>
 80144c6:	4602      	mov	r2, r0
 80144c8:	4b44      	ldr	r3, [pc, #272]	; (80145dc <__multiply+0x14c>)
 80144ca:	4845      	ldr	r0, [pc, #276]	; (80145e0 <__multiply+0x150>)
 80144cc:	f240 115d 	movw	r1, #349	; 0x15d
 80144d0:	f000 fdd0 	bl	8015074 <__assert_func>
 80144d4:	f100 0514 	add.w	r5, r0, #20
 80144d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80144dc:	462b      	mov	r3, r5
 80144de:	2200      	movs	r2, #0
 80144e0:	4543      	cmp	r3, r8
 80144e2:	d321      	bcc.n	8014528 <__multiply+0x98>
 80144e4:	f104 0314 	add.w	r3, r4, #20
 80144e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80144ec:	f109 0314 	add.w	r3, r9, #20
 80144f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80144f4:	9202      	str	r2, [sp, #8]
 80144f6:	1b3a      	subs	r2, r7, r4
 80144f8:	3a15      	subs	r2, #21
 80144fa:	f022 0203 	bic.w	r2, r2, #3
 80144fe:	3204      	adds	r2, #4
 8014500:	f104 0115 	add.w	r1, r4, #21
 8014504:	428f      	cmp	r7, r1
 8014506:	bf38      	it	cc
 8014508:	2204      	movcc	r2, #4
 801450a:	9201      	str	r2, [sp, #4]
 801450c:	9a02      	ldr	r2, [sp, #8]
 801450e:	9303      	str	r3, [sp, #12]
 8014510:	429a      	cmp	r2, r3
 8014512:	d80c      	bhi.n	801452e <__multiply+0x9e>
 8014514:	2e00      	cmp	r6, #0
 8014516:	dd03      	ble.n	8014520 <__multiply+0x90>
 8014518:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801451c:	2b00      	cmp	r3, #0
 801451e:	d05a      	beq.n	80145d6 <__multiply+0x146>
 8014520:	6106      	str	r6, [r0, #16]
 8014522:	b005      	add	sp, #20
 8014524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014528:	f843 2b04 	str.w	r2, [r3], #4
 801452c:	e7d8      	b.n	80144e0 <__multiply+0x50>
 801452e:	f8b3 a000 	ldrh.w	sl, [r3]
 8014532:	f1ba 0f00 	cmp.w	sl, #0
 8014536:	d024      	beq.n	8014582 <__multiply+0xf2>
 8014538:	f104 0e14 	add.w	lr, r4, #20
 801453c:	46a9      	mov	r9, r5
 801453e:	f04f 0c00 	mov.w	ip, #0
 8014542:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014546:	f8d9 1000 	ldr.w	r1, [r9]
 801454a:	fa1f fb82 	uxth.w	fp, r2
 801454e:	b289      	uxth	r1, r1
 8014550:	fb0a 110b 	mla	r1, sl, fp, r1
 8014554:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014558:	f8d9 2000 	ldr.w	r2, [r9]
 801455c:	4461      	add	r1, ip
 801455e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014562:	fb0a c20b 	mla	r2, sl, fp, ip
 8014566:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801456a:	b289      	uxth	r1, r1
 801456c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014570:	4577      	cmp	r7, lr
 8014572:	f849 1b04 	str.w	r1, [r9], #4
 8014576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801457a:	d8e2      	bhi.n	8014542 <__multiply+0xb2>
 801457c:	9a01      	ldr	r2, [sp, #4]
 801457e:	f845 c002 	str.w	ip, [r5, r2]
 8014582:	9a03      	ldr	r2, [sp, #12]
 8014584:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014588:	3304      	adds	r3, #4
 801458a:	f1b9 0f00 	cmp.w	r9, #0
 801458e:	d020      	beq.n	80145d2 <__multiply+0x142>
 8014590:	6829      	ldr	r1, [r5, #0]
 8014592:	f104 0c14 	add.w	ip, r4, #20
 8014596:	46ae      	mov	lr, r5
 8014598:	f04f 0a00 	mov.w	sl, #0
 801459c:	f8bc b000 	ldrh.w	fp, [ip]
 80145a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80145a4:	fb09 220b 	mla	r2, r9, fp, r2
 80145a8:	4492      	add	sl, r2
 80145aa:	b289      	uxth	r1, r1
 80145ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80145b0:	f84e 1b04 	str.w	r1, [lr], #4
 80145b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80145b8:	f8be 1000 	ldrh.w	r1, [lr]
 80145bc:	0c12      	lsrs	r2, r2, #16
 80145be:	fb09 1102 	mla	r1, r9, r2, r1
 80145c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80145c6:	4567      	cmp	r7, ip
 80145c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80145cc:	d8e6      	bhi.n	801459c <__multiply+0x10c>
 80145ce:	9a01      	ldr	r2, [sp, #4]
 80145d0:	50a9      	str	r1, [r5, r2]
 80145d2:	3504      	adds	r5, #4
 80145d4:	e79a      	b.n	801450c <__multiply+0x7c>
 80145d6:	3e01      	subs	r6, #1
 80145d8:	e79c      	b.n	8014514 <__multiply+0x84>
 80145da:	bf00      	nop
 80145dc:	08015f38 	.word	0x08015f38
 80145e0:	08015fc4 	.word	0x08015fc4

080145e4 <__pow5mult>:
 80145e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145e8:	4615      	mov	r5, r2
 80145ea:	f012 0203 	ands.w	r2, r2, #3
 80145ee:	4606      	mov	r6, r0
 80145f0:	460f      	mov	r7, r1
 80145f2:	d007      	beq.n	8014604 <__pow5mult+0x20>
 80145f4:	4c25      	ldr	r4, [pc, #148]	; (801468c <__pow5mult+0xa8>)
 80145f6:	3a01      	subs	r2, #1
 80145f8:	2300      	movs	r3, #0
 80145fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80145fe:	f7ff fe51 	bl	80142a4 <__multadd>
 8014602:	4607      	mov	r7, r0
 8014604:	10ad      	asrs	r5, r5, #2
 8014606:	d03d      	beq.n	8014684 <__pow5mult+0xa0>
 8014608:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801460a:	b97c      	cbnz	r4, 801462c <__pow5mult+0x48>
 801460c:	2010      	movs	r0, #16
 801460e:	f7ff fdcd 	bl	80141ac <malloc>
 8014612:	4602      	mov	r2, r0
 8014614:	6270      	str	r0, [r6, #36]	; 0x24
 8014616:	b928      	cbnz	r0, 8014624 <__pow5mult+0x40>
 8014618:	4b1d      	ldr	r3, [pc, #116]	; (8014690 <__pow5mult+0xac>)
 801461a:	481e      	ldr	r0, [pc, #120]	; (8014694 <__pow5mult+0xb0>)
 801461c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014620:	f000 fd28 	bl	8015074 <__assert_func>
 8014624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014628:	6004      	str	r4, [r0, #0]
 801462a:	60c4      	str	r4, [r0, #12]
 801462c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014634:	b94c      	cbnz	r4, 801464a <__pow5mult+0x66>
 8014636:	f240 2171 	movw	r1, #625	; 0x271
 801463a:	4630      	mov	r0, r6
 801463c:	f7ff ff12 	bl	8014464 <__i2b>
 8014640:	2300      	movs	r3, #0
 8014642:	f8c8 0008 	str.w	r0, [r8, #8]
 8014646:	4604      	mov	r4, r0
 8014648:	6003      	str	r3, [r0, #0]
 801464a:	f04f 0900 	mov.w	r9, #0
 801464e:	07eb      	lsls	r3, r5, #31
 8014650:	d50a      	bpl.n	8014668 <__pow5mult+0x84>
 8014652:	4639      	mov	r1, r7
 8014654:	4622      	mov	r2, r4
 8014656:	4630      	mov	r0, r6
 8014658:	f7ff ff1a 	bl	8014490 <__multiply>
 801465c:	4639      	mov	r1, r7
 801465e:	4680      	mov	r8, r0
 8014660:	4630      	mov	r0, r6
 8014662:	f7ff fdfd 	bl	8014260 <_Bfree>
 8014666:	4647      	mov	r7, r8
 8014668:	106d      	asrs	r5, r5, #1
 801466a:	d00b      	beq.n	8014684 <__pow5mult+0xa0>
 801466c:	6820      	ldr	r0, [r4, #0]
 801466e:	b938      	cbnz	r0, 8014680 <__pow5mult+0x9c>
 8014670:	4622      	mov	r2, r4
 8014672:	4621      	mov	r1, r4
 8014674:	4630      	mov	r0, r6
 8014676:	f7ff ff0b 	bl	8014490 <__multiply>
 801467a:	6020      	str	r0, [r4, #0]
 801467c:	f8c0 9000 	str.w	r9, [r0]
 8014680:	4604      	mov	r4, r0
 8014682:	e7e4      	b.n	801464e <__pow5mult+0x6a>
 8014684:	4638      	mov	r0, r7
 8014686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801468a:	bf00      	nop
 801468c:	08016110 	.word	0x08016110
 8014690:	08015ec6 	.word	0x08015ec6
 8014694:	08015fc4 	.word	0x08015fc4

08014698 <__lshift>:
 8014698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801469c:	460c      	mov	r4, r1
 801469e:	6849      	ldr	r1, [r1, #4]
 80146a0:	6923      	ldr	r3, [r4, #16]
 80146a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80146a6:	68a3      	ldr	r3, [r4, #8]
 80146a8:	4607      	mov	r7, r0
 80146aa:	4691      	mov	r9, r2
 80146ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80146b0:	f108 0601 	add.w	r6, r8, #1
 80146b4:	42b3      	cmp	r3, r6
 80146b6:	db0b      	blt.n	80146d0 <__lshift+0x38>
 80146b8:	4638      	mov	r0, r7
 80146ba:	f7ff fd91 	bl	80141e0 <_Balloc>
 80146be:	4605      	mov	r5, r0
 80146c0:	b948      	cbnz	r0, 80146d6 <__lshift+0x3e>
 80146c2:	4602      	mov	r2, r0
 80146c4:	4b2a      	ldr	r3, [pc, #168]	; (8014770 <__lshift+0xd8>)
 80146c6:	482b      	ldr	r0, [pc, #172]	; (8014774 <__lshift+0xdc>)
 80146c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80146cc:	f000 fcd2 	bl	8015074 <__assert_func>
 80146d0:	3101      	adds	r1, #1
 80146d2:	005b      	lsls	r3, r3, #1
 80146d4:	e7ee      	b.n	80146b4 <__lshift+0x1c>
 80146d6:	2300      	movs	r3, #0
 80146d8:	f100 0114 	add.w	r1, r0, #20
 80146dc:	f100 0210 	add.w	r2, r0, #16
 80146e0:	4618      	mov	r0, r3
 80146e2:	4553      	cmp	r3, sl
 80146e4:	db37      	blt.n	8014756 <__lshift+0xbe>
 80146e6:	6920      	ldr	r0, [r4, #16]
 80146e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80146ec:	f104 0314 	add.w	r3, r4, #20
 80146f0:	f019 091f 	ands.w	r9, r9, #31
 80146f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80146f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80146fc:	d02f      	beq.n	801475e <__lshift+0xc6>
 80146fe:	f1c9 0e20 	rsb	lr, r9, #32
 8014702:	468a      	mov	sl, r1
 8014704:	f04f 0c00 	mov.w	ip, #0
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	fa02 f209 	lsl.w	r2, r2, r9
 801470e:	ea42 020c 	orr.w	r2, r2, ip
 8014712:	f84a 2b04 	str.w	r2, [sl], #4
 8014716:	f853 2b04 	ldr.w	r2, [r3], #4
 801471a:	4298      	cmp	r0, r3
 801471c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014720:	d8f2      	bhi.n	8014708 <__lshift+0x70>
 8014722:	1b03      	subs	r3, r0, r4
 8014724:	3b15      	subs	r3, #21
 8014726:	f023 0303 	bic.w	r3, r3, #3
 801472a:	3304      	adds	r3, #4
 801472c:	f104 0215 	add.w	r2, r4, #21
 8014730:	4290      	cmp	r0, r2
 8014732:	bf38      	it	cc
 8014734:	2304      	movcc	r3, #4
 8014736:	f841 c003 	str.w	ip, [r1, r3]
 801473a:	f1bc 0f00 	cmp.w	ip, #0
 801473e:	d001      	beq.n	8014744 <__lshift+0xac>
 8014740:	f108 0602 	add.w	r6, r8, #2
 8014744:	3e01      	subs	r6, #1
 8014746:	4638      	mov	r0, r7
 8014748:	612e      	str	r6, [r5, #16]
 801474a:	4621      	mov	r1, r4
 801474c:	f7ff fd88 	bl	8014260 <_Bfree>
 8014750:	4628      	mov	r0, r5
 8014752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014756:	f842 0f04 	str.w	r0, [r2, #4]!
 801475a:	3301      	adds	r3, #1
 801475c:	e7c1      	b.n	80146e2 <__lshift+0x4a>
 801475e:	3904      	subs	r1, #4
 8014760:	f853 2b04 	ldr.w	r2, [r3], #4
 8014764:	f841 2f04 	str.w	r2, [r1, #4]!
 8014768:	4298      	cmp	r0, r3
 801476a:	d8f9      	bhi.n	8014760 <__lshift+0xc8>
 801476c:	e7ea      	b.n	8014744 <__lshift+0xac>
 801476e:	bf00      	nop
 8014770:	08015f38 	.word	0x08015f38
 8014774:	08015fc4 	.word	0x08015fc4

08014778 <__mcmp>:
 8014778:	b530      	push	{r4, r5, lr}
 801477a:	6902      	ldr	r2, [r0, #16]
 801477c:	690c      	ldr	r4, [r1, #16]
 801477e:	1b12      	subs	r2, r2, r4
 8014780:	d10e      	bne.n	80147a0 <__mcmp+0x28>
 8014782:	f100 0314 	add.w	r3, r0, #20
 8014786:	3114      	adds	r1, #20
 8014788:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801478c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014790:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014794:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014798:	42a5      	cmp	r5, r4
 801479a:	d003      	beq.n	80147a4 <__mcmp+0x2c>
 801479c:	d305      	bcc.n	80147aa <__mcmp+0x32>
 801479e:	2201      	movs	r2, #1
 80147a0:	4610      	mov	r0, r2
 80147a2:	bd30      	pop	{r4, r5, pc}
 80147a4:	4283      	cmp	r3, r0
 80147a6:	d3f3      	bcc.n	8014790 <__mcmp+0x18>
 80147a8:	e7fa      	b.n	80147a0 <__mcmp+0x28>
 80147aa:	f04f 32ff 	mov.w	r2, #4294967295
 80147ae:	e7f7      	b.n	80147a0 <__mcmp+0x28>

080147b0 <__mdiff>:
 80147b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147b4:	460c      	mov	r4, r1
 80147b6:	4606      	mov	r6, r0
 80147b8:	4611      	mov	r1, r2
 80147ba:	4620      	mov	r0, r4
 80147bc:	4690      	mov	r8, r2
 80147be:	f7ff ffdb 	bl	8014778 <__mcmp>
 80147c2:	1e05      	subs	r5, r0, #0
 80147c4:	d110      	bne.n	80147e8 <__mdiff+0x38>
 80147c6:	4629      	mov	r1, r5
 80147c8:	4630      	mov	r0, r6
 80147ca:	f7ff fd09 	bl	80141e0 <_Balloc>
 80147ce:	b930      	cbnz	r0, 80147de <__mdiff+0x2e>
 80147d0:	4b3a      	ldr	r3, [pc, #232]	; (80148bc <__mdiff+0x10c>)
 80147d2:	4602      	mov	r2, r0
 80147d4:	f240 2132 	movw	r1, #562	; 0x232
 80147d8:	4839      	ldr	r0, [pc, #228]	; (80148c0 <__mdiff+0x110>)
 80147da:	f000 fc4b 	bl	8015074 <__assert_func>
 80147de:	2301      	movs	r3, #1
 80147e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80147e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147e8:	bfa4      	itt	ge
 80147ea:	4643      	movge	r3, r8
 80147ec:	46a0      	movge	r8, r4
 80147ee:	4630      	mov	r0, r6
 80147f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80147f4:	bfa6      	itte	ge
 80147f6:	461c      	movge	r4, r3
 80147f8:	2500      	movge	r5, #0
 80147fa:	2501      	movlt	r5, #1
 80147fc:	f7ff fcf0 	bl	80141e0 <_Balloc>
 8014800:	b920      	cbnz	r0, 801480c <__mdiff+0x5c>
 8014802:	4b2e      	ldr	r3, [pc, #184]	; (80148bc <__mdiff+0x10c>)
 8014804:	4602      	mov	r2, r0
 8014806:	f44f 7110 	mov.w	r1, #576	; 0x240
 801480a:	e7e5      	b.n	80147d8 <__mdiff+0x28>
 801480c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014810:	6926      	ldr	r6, [r4, #16]
 8014812:	60c5      	str	r5, [r0, #12]
 8014814:	f104 0914 	add.w	r9, r4, #20
 8014818:	f108 0514 	add.w	r5, r8, #20
 801481c:	f100 0e14 	add.w	lr, r0, #20
 8014820:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014824:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014828:	f108 0210 	add.w	r2, r8, #16
 801482c:	46f2      	mov	sl, lr
 801482e:	2100      	movs	r1, #0
 8014830:	f859 3b04 	ldr.w	r3, [r9], #4
 8014834:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014838:	fa1f f883 	uxth.w	r8, r3
 801483c:	fa11 f18b 	uxtah	r1, r1, fp
 8014840:	0c1b      	lsrs	r3, r3, #16
 8014842:	eba1 0808 	sub.w	r8, r1, r8
 8014846:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801484a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801484e:	fa1f f888 	uxth.w	r8, r8
 8014852:	1419      	asrs	r1, r3, #16
 8014854:	454e      	cmp	r6, r9
 8014856:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801485a:	f84a 3b04 	str.w	r3, [sl], #4
 801485e:	d8e7      	bhi.n	8014830 <__mdiff+0x80>
 8014860:	1b33      	subs	r3, r6, r4
 8014862:	3b15      	subs	r3, #21
 8014864:	f023 0303 	bic.w	r3, r3, #3
 8014868:	3304      	adds	r3, #4
 801486a:	3415      	adds	r4, #21
 801486c:	42a6      	cmp	r6, r4
 801486e:	bf38      	it	cc
 8014870:	2304      	movcc	r3, #4
 8014872:	441d      	add	r5, r3
 8014874:	4473      	add	r3, lr
 8014876:	469e      	mov	lr, r3
 8014878:	462e      	mov	r6, r5
 801487a:	4566      	cmp	r6, ip
 801487c:	d30e      	bcc.n	801489c <__mdiff+0xec>
 801487e:	f10c 0203 	add.w	r2, ip, #3
 8014882:	1b52      	subs	r2, r2, r5
 8014884:	f022 0203 	bic.w	r2, r2, #3
 8014888:	3d03      	subs	r5, #3
 801488a:	45ac      	cmp	ip, r5
 801488c:	bf38      	it	cc
 801488e:	2200      	movcc	r2, #0
 8014890:	441a      	add	r2, r3
 8014892:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014896:	b17b      	cbz	r3, 80148b8 <__mdiff+0x108>
 8014898:	6107      	str	r7, [r0, #16]
 801489a:	e7a3      	b.n	80147e4 <__mdiff+0x34>
 801489c:	f856 8b04 	ldr.w	r8, [r6], #4
 80148a0:	fa11 f288 	uxtah	r2, r1, r8
 80148a4:	1414      	asrs	r4, r2, #16
 80148a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80148aa:	b292      	uxth	r2, r2
 80148ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80148b0:	f84e 2b04 	str.w	r2, [lr], #4
 80148b4:	1421      	asrs	r1, r4, #16
 80148b6:	e7e0      	b.n	801487a <__mdiff+0xca>
 80148b8:	3f01      	subs	r7, #1
 80148ba:	e7ea      	b.n	8014892 <__mdiff+0xe2>
 80148bc:	08015f38 	.word	0x08015f38
 80148c0:	08015fc4 	.word	0x08015fc4

080148c4 <__ulp>:
 80148c4:	b082      	sub	sp, #8
 80148c6:	ed8d 0b00 	vstr	d0, [sp]
 80148ca:	9b01      	ldr	r3, [sp, #4]
 80148cc:	4912      	ldr	r1, [pc, #72]	; (8014918 <__ulp+0x54>)
 80148ce:	4019      	ands	r1, r3
 80148d0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80148d4:	2900      	cmp	r1, #0
 80148d6:	dd05      	ble.n	80148e4 <__ulp+0x20>
 80148d8:	2200      	movs	r2, #0
 80148da:	460b      	mov	r3, r1
 80148dc:	ec43 2b10 	vmov	d0, r2, r3
 80148e0:	b002      	add	sp, #8
 80148e2:	4770      	bx	lr
 80148e4:	4249      	negs	r1, r1
 80148e6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80148ea:	ea4f 5021 	mov.w	r0, r1, asr #20
 80148ee:	f04f 0200 	mov.w	r2, #0
 80148f2:	f04f 0300 	mov.w	r3, #0
 80148f6:	da04      	bge.n	8014902 <__ulp+0x3e>
 80148f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80148fc:	fa41 f300 	asr.w	r3, r1, r0
 8014900:	e7ec      	b.n	80148dc <__ulp+0x18>
 8014902:	f1a0 0114 	sub.w	r1, r0, #20
 8014906:	291e      	cmp	r1, #30
 8014908:	bfda      	itte	le
 801490a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801490e:	fa20 f101 	lsrle.w	r1, r0, r1
 8014912:	2101      	movgt	r1, #1
 8014914:	460a      	mov	r2, r1
 8014916:	e7e1      	b.n	80148dc <__ulp+0x18>
 8014918:	7ff00000 	.word	0x7ff00000

0801491c <__b2d>:
 801491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801491e:	6905      	ldr	r5, [r0, #16]
 8014920:	f100 0714 	add.w	r7, r0, #20
 8014924:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014928:	1f2e      	subs	r6, r5, #4
 801492a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801492e:	4620      	mov	r0, r4
 8014930:	f7ff fd48 	bl	80143c4 <__hi0bits>
 8014934:	f1c0 0320 	rsb	r3, r0, #32
 8014938:	280a      	cmp	r0, #10
 801493a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80149b8 <__b2d+0x9c>
 801493e:	600b      	str	r3, [r1, #0]
 8014940:	dc14      	bgt.n	801496c <__b2d+0x50>
 8014942:	f1c0 0e0b 	rsb	lr, r0, #11
 8014946:	fa24 f10e 	lsr.w	r1, r4, lr
 801494a:	42b7      	cmp	r7, r6
 801494c:	ea41 030c 	orr.w	r3, r1, ip
 8014950:	bf34      	ite	cc
 8014952:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014956:	2100      	movcs	r1, #0
 8014958:	3015      	adds	r0, #21
 801495a:	fa04 f000 	lsl.w	r0, r4, r0
 801495e:	fa21 f10e 	lsr.w	r1, r1, lr
 8014962:	ea40 0201 	orr.w	r2, r0, r1
 8014966:	ec43 2b10 	vmov	d0, r2, r3
 801496a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801496c:	42b7      	cmp	r7, r6
 801496e:	bf3a      	itte	cc
 8014970:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014974:	f1a5 0608 	subcc.w	r6, r5, #8
 8014978:	2100      	movcs	r1, #0
 801497a:	380b      	subs	r0, #11
 801497c:	d017      	beq.n	80149ae <__b2d+0x92>
 801497e:	f1c0 0c20 	rsb	ip, r0, #32
 8014982:	fa04 f500 	lsl.w	r5, r4, r0
 8014986:	42be      	cmp	r6, r7
 8014988:	fa21 f40c 	lsr.w	r4, r1, ip
 801498c:	ea45 0504 	orr.w	r5, r5, r4
 8014990:	bf8c      	ite	hi
 8014992:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014996:	2400      	movls	r4, #0
 8014998:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801499c:	fa01 f000 	lsl.w	r0, r1, r0
 80149a0:	fa24 f40c 	lsr.w	r4, r4, ip
 80149a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80149a8:	ea40 0204 	orr.w	r2, r0, r4
 80149ac:	e7db      	b.n	8014966 <__b2d+0x4a>
 80149ae:	ea44 030c 	orr.w	r3, r4, ip
 80149b2:	460a      	mov	r2, r1
 80149b4:	e7d7      	b.n	8014966 <__b2d+0x4a>
 80149b6:	bf00      	nop
 80149b8:	3ff00000 	.word	0x3ff00000

080149bc <__d2b>:
 80149bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80149c0:	4689      	mov	r9, r1
 80149c2:	2101      	movs	r1, #1
 80149c4:	ec57 6b10 	vmov	r6, r7, d0
 80149c8:	4690      	mov	r8, r2
 80149ca:	f7ff fc09 	bl	80141e0 <_Balloc>
 80149ce:	4604      	mov	r4, r0
 80149d0:	b930      	cbnz	r0, 80149e0 <__d2b+0x24>
 80149d2:	4602      	mov	r2, r0
 80149d4:	4b25      	ldr	r3, [pc, #148]	; (8014a6c <__d2b+0xb0>)
 80149d6:	4826      	ldr	r0, [pc, #152]	; (8014a70 <__d2b+0xb4>)
 80149d8:	f240 310a 	movw	r1, #778	; 0x30a
 80149dc:	f000 fb4a 	bl	8015074 <__assert_func>
 80149e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80149e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80149e8:	bb35      	cbnz	r5, 8014a38 <__d2b+0x7c>
 80149ea:	2e00      	cmp	r6, #0
 80149ec:	9301      	str	r3, [sp, #4]
 80149ee:	d028      	beq.n	8014a42 <__d2b+0x86>
 80149f0:	4668      	mov	r0, sp
 80149f2:	9600      	str	r6, [sp, #0]
 80149f4:	f7ff fd06 	bl	8014404 <__lo0bits>
 80149f8:	9900      	ldr	r1, [sp, #0]
 80149fa:	b300      	cbz	r0, 8014a3e <__d2b+0x82>
 80149fc:	9a01      	ldr	r2, [sp, #4]
 80149fe:	f1c0 0320 	rsb	r3, r0, #32
 8014a02:	fa02 f303 	lsl.w	r3, r2, r3
 8014a06:	430b      	orrs	r3, r1
 8014a08:	40c2      	lsrs	r2, r0
 8014a0a:	6163      	str	r3, [r4, #20]
 8014a0c:	9201      	str	r2, [sp, #4]
 8014a0e:	9b01      	ldr	r3, [sp, #4]
 8014a10:	61a3      	str	r3, [r4, #24]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	bf14      	ite	ne
 8014a16:	2202      	movne	r2, #2
 8014a18:	2201      	moveq	r2, #1
 8014a1a:	6122      	str	r2, [r4, #16]
 8014a1c:	b1d5      	cbz	r5, 8014a54 <__d2b+0x98>
 8014a1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014a22:	4405      	add	r5, r0
 8014a24:	f8c9 5000 	str.w	r5, [r9]
 8014a28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014a2c:	f8c8 0000 	str.w	r0, [r8]
 8014a30:	4620      	mov	r0, r4
 8014a32:	b003      	add	sp, #12
 8014a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014a3c:	e7d5      	b.n	80149ea <__d2b+0x2e>
 8014a3e:	6161      	str	r1, [r4, #20]
 8014a40:	e7e5      	b.n	8014a0e <__d2b+0x52>
 8014a42:	a801      	add	r0, sp, #4
 8014a44:	f7ff fcde 	bl	8014404 <__lo0bits>
 8014a48:	9b01      	ldr	r3, [sp, #4]
 8014a4a:	6163      	str	r3, [r4, #20]
 8014a4c:	2201      	movs	r2, #1
 8014a4e:	6122      	str	r2, [r4, #16]
 8014a50:	3020      	adds	r0, #32
 8014a52:	e7e3      	b.n	8014a1c <__d2b+0x60>
 8014a54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014a58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014a5c:	f8c9 0000 	str.w	r0, [r9]
 8014a60:	6918      	ldr	r0, [r3, #16]
 8014a62:	f7ff fcaf 	bl	80143c4 <__hi0bits>
 8014a66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014a6a:	e7df      	b.n	8014a2c <__d2b+0x70>
 8014a6c:	08015f38 	.word	0x08015f38
 8014a70:	08015fc4 	.word	0x08015fc4

08014a74 <__ratio>:
 8014a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a78:	4688      	mov	r8, r1
 8014a7a:	4669      	mov	r1, sp
 8014a7c:	4681      	mov	r9, r0
 8014a7e:	f7ff ff4d 	bl	801491c <__b2d>
 8014a82:	a901      	add	r1, sp, #4
 8014a84:	4640      	mov	r0, r8
 8014a86:	ec55 4b10 	vmov	r4, r5, d0
 8014a8a:	ee10 aa10 	vmov	sl, s0
 8014a8e:	f7ff ff45 	bl	801491c <__b2d>
 8014a92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014a96:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014a9a:	1a59      	subs	r1, r3, r1
 8014a9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014aa0:	1ad3      	subs	r3, r2, r3
 8014aa2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8014aa6:	ec57 6b10 	vmov	r6, r7, d0
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	bfd6      	itet	le
 8014aae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014ab2:	462a      	movgt	r2, r5
 8014ab4:	463a      	movle	r2, r7
 8014ab6:	46ab      	mov	fp, r5
 8014ab8:	bfd6      	itet	le
 8014aba:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8014abe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8014ac2:	ee00 3a90 	vmovle	s1, r3
 8014ac6:	ec4b ab17 	vmov	d7, sl, fp
 8014aca:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8014ace:	b003      	add	sp, #12
 8014ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014ad4 <__copybits>:
 8014ad4:	3901      	subs	r1, #1
 8014ad6:	b570      	push	{r4, r5, r6, lr}
 8014ad8:	1149      	asrs	r1, r1, #5
 8014ada:	6914      	ldr	r4, [r2, #16]
 8014adc:	3101      	adds	r1, #1
 8014ade:	f102 0314 	add.w	r3, r2, #20
 8014ae2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014ae6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014aea:	1f05      	subs	r5, r0, #4
 8014aec:	42a3      	cmp	r3, r4
 8014aee:	d30c      	bcc.n	8014b0a <__copybits+0x36>
 8014af0:	1aa3      	subs	r3, r4, r2
 8014af2:	3b11      	subs	r3, #17
 8014af4:	f023 0303 	bic.w	r3, r3, #3
 8014af8:	3211      	adds	r2, #17
 8014afa:	42a2      	cmp	r2, r4
 8014afc:	bf88      	it	hi
 8014afe:	2300      	movhi	r3, #0
 8014b00:	4418      	add	r0, r3
 8014b02:	2300      	movs	r3, #0
 8014b04:	4288      	cmp	r0, r1
 8014b06:	d305      	bcc.n	8014b14 <__copybits+0x40>
 8014b08:	bd70      	pop	{r4, r5, r6, pc}
 8014b0a:	f853 6b04 	ldr.w	r6, [r3], #4
 8014b0e:	f845 6f04 	str.w	r6, [r5, #4]!
 8014b12:	e7eb      	b.n	8014aec <__copybits+0x18>
 8014b14:	f840 3b04 	str.w	r3, [r0], #4
 8014b18:	e7f4      	b.n	8014b04 <__copybits+0x30>

08014b1a <__any_on>:
 8014b1a:	f100 0214 	add.w	r2, r0, #20
 8014b1e:	6900      	ldr	r0, [r0, #16]
 8014b20:	114b      	asrs	r3, r1, #5
 8014b22:	4298      	cmp	r0, r3
 8014b24:	b510      	push	{r4, lr}
 8014b26:	db11      	blt.n	8014b4c <__any_on+0x32>
 8014b28:	dd0a      	ble.n	8014b40 <__any_on+0x26>
 8014b2a:	f011 011f 	ands.w	r1, r1, #31
 8014b2e:	d007      	beq.n	8014b40 <__any_on+0x26>
 8014b30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014b34:	fa24 f001 	lsr.w	r0, r4, r1
 8014b38:	fa00 f101 	lsl.w	r1, r0, r1
 8014b3c:	428c      	cmp	r4, r1
 8014b3e:	d10b      	bne.n	8014b58 <__any_on+0x3e>
 8014b40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014b44:	4293      	cmp	r3, r2
 8014b46:	d803      	bhi.n	8014b50 <__any_on+0x36>
 8014b48:	2000      	movs	r0, #0
 8014b4a:	bd10      	pop	{r4, pc}
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	e7f7      	b.n	8014b40 <__any_on+0x26>
 8014b50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014b54:	2900      	cmp	r1, #0
 8014b56:	d0f5      	beq.n	8014b44 <__any_on+0x2a>
 8014b58:	2001      	movs	r0, #1
 8014b5a:	e7f6      	b.n	8014b4a <__any_on+0x30>

08014b5c <_calloc_r>:
 8014b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b5e:	fba1 2402 	umull	r2, r4, r1, r2
 8014b62:	b94c      	cbnz	r4, 8014b78 <_calloc_r+0x1c>
 8014b64:	4611      	mov	r1, r2
 8014b66:	9201      	str	r2, [sp, #4]
 8014b68:	f000 f87a 	bl	8014c60 <_malloc_r>
 8014b6c:	9a01      	ldr	r2, [sp, #4]
 8014b6e:	4605      	mov	r5, r0
 8014b70:	b930      	cbnz	r0, 8014b80 <_calloc_r+0x24>
 8014b72:	4628      	mov	r0, r5
 8014b74:	b003      	add	sp, #12
 8014b76:	bd30      	pop	{r4, r5, pc}
 8014b78:	220c      	movs	r2, #12
 8014b7a:	6002      	str	r2, [r0, #0]
 8014b7c:	2500      	movs	r5, #0
 8014b7e:	e7f8      	b.n	8014b72 <_calloc_r+0x16>
 8014b80:	4621      	mov	r1, r4
 8014b82:	f7fc fe9b 	bl	80118bc <memset>
 8014b86:	e7f4      	b.n	8014b72 <_calloc_r+0x16>

08014b88 <_free_r>:
 8014b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b8a:	2900      	cmp	r1, #0
 8014b8c:	d044      	beq.n	8014c18 <_free_r+0x90>
 8014b8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b92:	9001      	str	r0, [sp, #4]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	f1a1 0404 	sub.w	r4, r1, #4
 8014b9a:	bfb8      	it	lt
 8014b9c:	18e4      	addlt	r4, r4, r3
 8014b9e:	f000 fab3 	bl	8015108 <__malloc_lock>
 8014ba2:	4a1e      	ldr	r2, [pc, #120]	; (8014c1c <_free_r+0x94>)
 8014ba4:	9801      	ldr	r0, [sp, #4]
 8014ba6:	6813      	ldr	r3, [r2, #0]
 8014ba8:	b933      	cbnz	r3, 8014bb8 <_free_r+0x30>
 8014baa:	6063      	str	r3, [r4, #4]
 8014bac:	6014      	str	r4, [r2, #0]
 8014bae:	b003      	add	sp, #12
 8014bb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014bb4:	f000 baae 	b.w	8015114 <__malloc_unlock>
 8014bb8:	42a3      	cmp	r3, r4
 8014bba:	d908      	bls.n	8014bce <_free_r+0x46>
 8014bbc:	6825      	ldr	r5, [r4, #0]
 8014bbe:	1961      	adds	r1, r4, r5
 8014bc0:	428b      	cmp	r3, r1
 8014bc2:	bf01      	itttt	eq
 8014bc4:	6819      	ldreq	r1, [r3, #0]
 8014bc6:	685b      	ldreq	r3, [r3, #4]
 8014bc8:	1949      	addeq	r1, r1, r5
 8014bca:	6021      	streq	r1, [r4, #0]
 8014bcc:	e7ed      	b.n	8014baa <_free_r+0x22>
 8014bce:	461a      	mov	r2, r3
 8014bd0:	685b      	ldr	r3, [r3, #4]
 8014bd2:	b10b      	cbz	r3, 8014bd8 <_free_r+0x50>
 8014bd4:	42a3      	cmp	r3, r4
 8014bd6:	d9fa      	bls.n	8014bce <_free_r+0x46>
 8014bd8:	6811      	ldr	r1, [r2, #0]
 8014bda:	1855      	adds	r5, r2, r1
 8014bdc:	42a5      	cmp	r5, r4
 8014bde:	d10b      	bne.n	8014bf8 <_free_r+0x70>
 8014be0:	6824      	ldr	r4, [r4, #0]
 8014be2:	4421      	add	r1, r4
 8014be4:	1854      	adds	r4, r2, r1
 8014be6:	42a3      	cmp	r3, r4
 8014be8:	6011      	str	r1, [r2, #0]
 8014bea:	d1e0      	bne.n	8014bae <_free_r+0x26>
 8014bec:	681c      	ldr	r4, [r3, #0]
 8014bee:	685b      	ldr	r3, [r3, #4]
 8014bf0:	6053      	str	r3, [r2, #4]
 8014bf2:	4421      	add	r1, r4
 8014bf4:	6011      	str	r1, [r2, #0]
 8014bf6:	e7da      	b.n	8014bae <_free_r+0x26>
 8014bf8:	d902      	bls.n	8014c00 <_free_r+0x78>
 8014bfa:	230c      	movs	r3, #12
 8014bfc:	6003      	str	r3, [r0, #0]
 8014bfe:	e7d6      	b.n	8014bae <_free_r+0x26>
 8014c00:	6825      	ldr	r5, [r4, #0]
 8014c02:	1961      	adds	r1, r4, r5
 8014c04:	428b      	cmp	r3, r1
 8014c06:	bf04      	itt	eq
 8014c08:	6819      	ldreq	r1, [r3, #0]
 8014c0a:	685b      	ldreq	r3, [r3, #4]
 8014c0c:	6063      	str	r3, [r4, #4]
 8014c0e:	bf04      	itt	eq
 8014c10:	1949      	addeq	r1, r1, r5
 8014c12:	6021      	streq	r1, [r4, #0]
 8014c14:	6054      	str	r4, [r2, #4]
 8014c16:	e7ca      	b.n	8014bae <_free_r+0x26>
 8014c18:	b003      	add	sp, #12
 8014c1a:	bd30      	pop	{r4, r5, pc}
 8014c1c:	24006018 	.word	0x24006018

08014c20 <sbrk_aligned>:
 8014c20:	b570      	push	{r4, r5, r6, lr}
 8014c22:	4e0e      	ldr	r6, [pc, #56]	; (8014c5c <sbrk_aligned+0x3c>)
 8014c24:	460c      	mov	r4, r1
 8014c26:	6831      	ldr	r1, [r6, #0]
 8014c28:	4605      	mov	r5, r0
 8014c2a:	b911      	cbnz	r1, 8014c32 <sbrk_aligned+0x12>
 8014c2c:	f000 f9f0 	bl	8015010 <_sbrk_r>
 8014c30:	6030      	str	r0, [r6, #0]
 8014c32:	4621      	mov	r1, r4
 8014c34:	4628      	mov	r0, r5
 8014c36:	f000 f9eb 	bl	8015010 <_sbrk_r>
 8014c3a:	1c43      	adds	r3, r0, #1
 8014c3c:	d00a      	beq.n	8014c54 <sbrk_aligned+0x34>
 8014c3e:	1cc4      	adds	r4, r0, #3
 8014c40:	f024 0403 	bic.w	r4, r4, #3
 8014c44:	42a0      	cmp	r0, r4
 8014c46:	d007      	beq.n	8014c58 <sbrk_aligned+0x38>
 8014c48:	1a21      	subs	r1, r4, r0
 8014c4a:	4628      	mov	r0, r5
 8014c4c:	f000 f9e0 	bl	8015010 <_sbrk_r>
 8014c50:	3001      	adds	r0, #1
 8014c52:	d101      	bne.n	8014c58 <sbrk_aligned+0x38>
 8014c54:	f04f 34ff 	mov.w	r4, #4294967295
 8014c58:	4620      	mov	r0, r4
 8014c5a:	bd70      	pop	{r4, r5, r6, pc}
 8014c5c:	2400601c 	.word	0x2400601c

08014c60 <_malloc_r>:
 8014c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c64:	1ccd      	adds	r5, r1, #3
 8014c66:	f025 0503 	bic.w	r5, r5, #3
 8014c6a:	3508      	adds	r5, #8
 8014c6c:	2d0c      	cmp	r5, #12
 8014c6e:	bf38      	it	cc
 8014c70:	250c      	movcc	r5, #12
 8014c72:	2d00      	cmp	r5, #0
 8014c74:	4607      	mov	r7, r0
 8014c76:	db01      	blt.n	8014c7c <_malloc_r+0x1c>
 8014c78:	42a9      	cmp	r1, r5
 8014c7a:	d905      	bls.n	8014c88 <_malloc_r+0x28>
 8014c7c:	230c      	movs	r3, #12
 8014c7e:	603b      	str	r3, [r7, #0]
 8014c80:	2600      	movs	r6, #0
 8014c82:	4630      	mov	r0, r6
 8014c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c88:	4e2e      	ldr	r6, [pc, #184]	; (8014d44 <_malloc_r+0xe4>)
 8014c8a:	f000 fa3d 	bl	8015108 <__malloc_lock>
 8014c8e:	6833      	ldr	r3, [r6, #0]
 8014c90:	461c      	mov	r4, r3
 8014c92:	bb34      	cbnz	r4, 8014ce2 <_malloc_r+0x82>
 8014c94:	4629      	mov	r1, r5
 8014c96:	4638      	mov	r0, r7
 8014c98:	f7ff ffc2 	bl	8014c20 <sbrk_aligned>
 8014c9c:	1c43      	adds	r3, r0, #1
 8014c9e:	4604      	mov	r4, r0
 8014ca0:	d14d      	bne.n	8014d3e <_malloc_r+0xde>
 8014ca2:	6834      	ldr	r4, [r6, #0]
 8014ca4:	4626      	mov	r6, r4
 8014ca6:	2e00      	cmp	r6, #0
 8014ca8:	d140      	bne.n	8014d2c <_malloc_r+0xcc>
 8014caa:	6823      	ldr	r3, [r4, #0]
 8014cac:	4631      	mov	r1, r6
 8014cae:	4638      	mov	r0, r7
 8014cb0:	eb04 0803 	add.w	r8, r4, r3
 8014cb4:	f000 f9ac 	bl	8015010 <_sbrk_r>
 8014cb8:	4580      	cmp	r8, r0
 8014cba:	d13a      	bne.n	8014d32 <_malloc_r+0xd2>
 8014cbc:	6821      	ldr	r1, [r4, #0]
 8014cbe:	3503      	adds	r5, #3
 8014cc0:	1a6d      	subs	r5, r5, r1
 8014cc2:	f025 0503 	bic.w	r5, r5, #3
 8014cc6:	3508      	adds	r5, #8
 8014cc8:	2d0c      	cmp	r5, #12
 8014cca:	bf38      	it	cc
 8014ccc:	250c      	movcc	r5, #12
 8014cce:	4629      	mov	r1, r5
 8014cd0:	4638      	mov	r0, r7
 8014cd2:	f7ff ffa5 	bl	8014c20 <sbrk_aligned>
 8014cd6:	3001      	adds	r0, #1
 8014cd8:	d02b      	beq.n	8014d32 <_malloc_r+0xd2>
 8014cda:	6823      	ldr	r3, [r4, #0]
 8014cdc:	442b      	add	r3, r5
 8014cde:	6023      	str	r3, [r4, #0]
 8014ce0:	e00e      	b.n	8014d00 <_malloc_r+0xa0>
 8014ce2:	6822      	ldr	r2, [r4, #0]
 8014ce4:	1b52      	subs	r2, r2, r5
 8014ce6:	d41e      	bmi.n	8014d26 <_malloc_r+0xc6>
 8014ce8:	2a0b      	cmp	r2, #11
 8014cea:	d916      	bls.n	8014d1a <_malloc_r+0xba>
 8014cec:	1961      	adds	r1, r4, r5
 8014cee:	42a3      	cmp	r3, r4
 8014cf0:	6025      	str	r5, [r4, #0]
 8014cf2:	bf18      	it	ne
 8014cf4:	6059      	strne	r1, [r3, #4]
 8014cf6:	6863      	ldr	r3, [r4, #4]
 8014cf8:	bf08      	it	eq
 8014cfa:	6031      	streq	r1, [r6, #0]
 8014cfc:	5162      	str	r2, [r4, r5]
 8014cfe:	604b      	str	r3, [r1, #4]
 8014d00:	4638      	mov	r0, r7
 8014d02:	f104 060b 	add.w	r6, r4, #11
 8014d06:	f000 fa05 	bl	8015114 <__malloc_unlock>
 8014d0a:	f026 0607 	bic.w	r6, r6, #7
 8014d0e:	1d23      	adds	r3, r4, #4
 8014d10:	1af2      	subs	r2, r6, r3
 8014d12:	d0b6      	beq.n	8014c82 <_malloc_r+0x22>
 8014d14:	1b9b      	subs	r3, r3, r6
 8014d16:	50a3      	str	r3, [r4, r2]
 8014d18:	e7b3      	b.n	8014c82 <_malloc_r+0x22>
 8014d1a:	6862      	ldr	r2, [r4, #4]
 8014d1c:	42a3      	cmp	r3, r4
 8014d1e:	bf0c      	ite	eq
 8014d20:	6032      	streq	r2, [r6, #0]
 8014d22:	605a      	strne	r2, [r3, #4]
 8014d24:	e7ec      	b.n	8014d00 <_malloc_r+0xa0>
 8014d26:	4623      	mov	r3, r4
 8014d28:	6864      	ldr	r4, [r4, #4]
 8014d2a:	e7b2      	b.n	8014c92 <_malloc_r+0x32>
 8014d2c:	4634      	mov	r4, r6
 8014d2e:	6876      	ldr	r6, [r6, #4]
 8014d30:	e7b9      	b.n	8014ca6 <_malloc_r+0x46>
 8014d32:	230c      	movs	r3, #12
 8014d34:	603b      	str	r3, [r7, #0]
 8014d36:	4638      	mov	r0, r7
 8014d38:	f000 f9ec 	bl	8015114 <__malloc_unlock>
 8014d3c:	e7a1      	b.n	8014c82 <_malloc_r+0x22>
 8014d3e:	6025      	str	r5, [r4, #0]
 8014d40:	e7de      	b.n	8014d00 <_malloc_r+0xa0>
 8014d42:	bf00      	nop
 8014d44:	24006018 	.word	0x24006018

08014d48 <__ssputs_r>:
 8014d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d4c:	688e      	ldr	r6, [r1, #8]
 8014d4e:	429e      	cmp	r6, r3
 8014d50:	4682      	mov	sl, r0
 8014d52:	460c      	mov	r4, r1
 8014d54:	4690      	mov	r8, r2
 8014d56:	461f      	mov	r7, r3
 8014d58:	d838      	bhi.n	8014dcc <__ssputs_r+0x84>
 8014d5a:	898a      	ldrh	r2, [r1, #12]
 8014d5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014d60:	d032      	beq.n	8014dc8 <__ssputs_r+0x80>
 8014d62:	6825      	ldr	r5, [r4, #0]
 8014d64:	6909      	ldr	r1, [r1, #16]
 8014d66:	eba5 0901 	sub.w	r9, r5, r1
 8014d6a:	6965      	ldr	r5, [r4, #20]
 8014d6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014d70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014d74:	3301      	adds	r3, #1
 8014d76:	444b      	add	r3, r9
 8014d78:	106d      	asrs	r5, r5, #1
 8014d7a:	429d      	cmp	r5, r3
 8014d7c:	bf38      	it	cc
 8014d7e:	461d      	movcc	r5, r3
 8014d80:	0553      	lsls	r3, r2, #21
 8014d82:	d531      	bpl.n	8014de8 <__ssputs_r+0xa0>
 8014d84:	4629      	mov	r1, r5
 8014d86:	f7ff ff6b 	bl	8014c60 <_malloc_r>
 8014d8a:	4606      	mov	r6, r0
 8014d8c:	b950      	cbnz	r0, 8014da4 <__ssputs_r+0x5c>
 8014d8e:	230c      	movs	r3, #12
 8014d90:	f8ca 3000 	str.w	r3, [sl]
 8014d94:	89a3      	ldrh	r3, [r4, #12]
 8014d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d9a:	81a3      	strh	r3, [r4, #12]
 8014d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8014da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014da4:	6921      	ldr	r1, [r4, #16]
 8014da6:	464a      	mov	r2, r9
 8014da8:	f7fc fd7a 	bl	80118a0 <memcpy>
 8014dac:	89a3      	ldrh	r3, [r4, #12]
 8014dae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014db6:	81a3      	strh	r3, [r4, #12]
 8014db8:	6126      	str	r6, [r4, #16]
 8014dba:	6165      	str	r5, [r4, #20]
 8014dbc:	444e      	add	r6, r9
 8014dbe:	eba5 0509 	sub.w	r5, r5, r9
 8014dc2:	6026      	str	r6, [r4, #0]
 8014dc4:	60a5      	str	r5, [r4, #8]
 8014dc6:	463e      	mov	r6, r7
 8014dc8:	42be      	cmp	r6, r7
 8014dca:	d900      	bls.n	8014dce <__ssputs_r+0x86>
 8014dcc:	463e      	mov	r6, r7
 8014dce:	6820      	ldr	r0, [r4, #0]
 8014dd0:	4632      	mov	r2, r6
 8014dd2:	4641      	mov	r1, r8
 8014dd4:	f000 f97e 	bl	80150d4 <memmove>
 8014dd8:	68a3      	ldr	r3, [r4, #8]
 8014dda:	1b9b      	subs	r3, r3, r6
 8014ddc:	60a3      	str	r3, [r4, #8]
 8014dde:	6823      	ldr	r3, [r4, #0]
 8014de0:	4433      	add	r3, r6
 8014de2:	6023      	str	r3, [r4, #0]
 8014de4:	2000      	movs	r0, #0
 8014de6:	e7db      	b.n	8014da0 <__ssputs_r+0x58>
 8014de8:	462a      	mov	r2, r5
 8014dea:	f000 f999 	bl	8015120 <_realloc_r>
 8014dee:	4606      	mov	r6, r0
 8014df0:	2800      	cmp	r0, #0
 8014df2:	d1e1      	bne.n	8014db8 <__ssputs_r+0x70>
 8014df4:	6921      	ldr	r1, [r4, #16]
 8014df6:	4650      	mov	r0, sl
 8014df8:	f7ff fec6 	bl	8014b88 <_free_r>
 8014dfc:	e7c7      	b.n	8014d8e <__ssputs_r+0x46>
	...

08014e00 <_svfiprintf_r>:
 8014e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e04:	4698      	mov	r8, r3
 8014e06:	898b      	ldrh	r3, [r1, #12]
 8014e08:	061b      	lsls	r3, r3, #24
 8014e0a:	b09d      	sub	sp, #116	; 0x74
 8014e0c:	4607      	mov	r7, r0
 8014e0e:	460d      	mov	r5, r1
 8014e10:	4614      	mov	r4, r2
 8014e12:	d50e      	bpl.n	8014e32 <_svfiprintf_r+0x32>
 8014e14:	690b      	ldr	r3, [r1, #16]
 8014e16:	b963      	cbnz	r3, 8014e32 <_svfiprintf_r+0x32>
 8014e18:	2140      	movs	r1, #64	; 0x40
 8014e1a:	f7ff ff21 	bl	8014c60 <_malloc_r>
 8014e1e:	6028      	str	r0, [r5, #0]
 8014e20:	6128      	str	r0, [r5, #16]
 8014e22:	b920      	cbnz	r0, 8014e2e <_svfiprintf_r+0x2e>
 8014e24:	230c      	movs	r3, #12
 8014e26:	603b      	str	r3, [r7, #0]
 8014e28:	f04f 30ff 	mov.w	r0, #4294967295
 8014e2c:	e0d1      	b.n	8014fd2 <_svfiprintf_r+0x1d2>
 8014e2e:	2340      	movs	r3, #64	; 0x40
 8014e30:	616b      	str	r3, [r5, #20]
 8014e32:	2300      	movs	r3, #0
 8014e34:	9309      	str	r3, [sp, #36]	; 0x24
 8014e36:	2320      	movs	r3, #32
 8014e38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e40:	2330      	movs	r3, #48	; 0x30
 8014e42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014fec <_svfiprintf_r+0x1ec>
 8014e46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e4a:	f04f 0901 	mov.w	r9, #1
 8014e4e:	4623      	mov	r3, r4
 8014e50:	469a      	mov	sl, r3
 8014e52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e56:	b10a      	cbz	r2, 8014e5c <_svfiprintf_r+0x5c>
 8014e58:	2a25      	cmp	r2, #37	; 0x25
 8014e5a:	d1f9      	bne.n	8014e50 <_svfiprintf_r+0x50>
 8014e5c:	ebba 0b04 	subs.w	fp, sl, r4
 8014e60:	d00b      	beq.n	8014e7a <_svfiprintf_r+0x7a>
 8014e62:	465b      	mov	r3, fp
 8014e64:	4622      	mov	r2, r4
 8014e66:	4629      	mov	r1, r5
 8014e68:	4638      	mov	r0, r7
 8014e6a:	f7ff ff6d 	bl	8014d48 <__ssputs_r>
 8014e6e:	3001      	adds	r0, #1
 8014e70:	f000 80aa 	beq.w	8014fc8 <_svfiprintf_r+0x1c8>
 8014e74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e76:	445a      	add	r2, fp
 8014e78:	9209      	str	r2, [sp, #36]	; 0x24
 8014e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	f000 80a2 	beq.w	8014fc8 <_svfiprintf_r+0x1c8>
 8014e84:	2300      	movs	r3, #0
 8014e86:	f04f 32ff 	mov.w	r2, #4294967295
 8014e8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e8e:	f10a 0a01 	add.w	sl, sl, #1
 8014e92:	9304      	str	r3, [sp, #16]
 8014e94:	9307      	str	r3, [sp, #28]
 8014e96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e9a:	931a      	str	r3, [sp, #104]	; 0x68
 8014e9c:	4654      	mov	r4, sl
 8014e9e:	2205      	movs	r2, #5
 8014ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ea4:	4851      	ldr	r0, [pc, #324]	; (8014fec <_svfiprintf_r+0x1ec>)
 8014ea6:	f7eb fa2b 	bl	8000300 <memchr>
 8014eaa:	9a04      	ldr	r2, [sp, #16]
 8014eac:	b9d8      	cbnz	r0, 8014ee6 <_svfiprintf_r+0xe6>
 8014eae:	06d0      	lsls	r0, r2, #27
 8014eb0:	bf44      	itt	mi
 8014eb2:	2320      	movmi	r3, #32
 8014eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014eb8:	0711      	lsls	r1, r2, #28
 8014eba:	bf44      	itt	mi
 8014ebc:	232b      	movmi	r3, #43	; 0x2b
 8014ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8014ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8014ec8:	d015      	beq.n	8014ef6 <_svfiprintf_r+0xf6>
 8014eca:	9a07      	ldr	r2, [sp, #28]
 8014ecc:	4654      	mov	r4, sl
 8014ece:	2000      	movs	r0, #0
 8014ed0:	f04f 0c0a 	mov.w	ip, #10
 8014ed4:	4621      	mov	r1, r4
 8014ed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014eda:	3b30      	subs	r3, #48	; 0x30
 8014edc:	2b09      	cmp	r3, #9
 8014ede:	d94e      	bls.n	8014f7e <_svfiprintf_r+0x17e>
 8014ee0:	b1b0      	cbz	r0, 8014f10 <_svfiprintf_r+0x110>
 8014ee2:	9207      	str	r2, [sp, #28]
 8014ee4:	e014      	b.n	8014f10 <_svfiprintf_r+0x110>
 8014ee6:	eba0 0308 	sub.w	r3, r0, r8
 8014eea:	fa09 f303 	lsl.w	r3, r9, r3
 8014eee:	4313      	orrs	r3, r2
 8014ef0:	9304      	str	r3, [sp, #16]
 8014ef2:	46a2      	mov	sl, r4
 8014ef4:	e7d2      	b.n	8014e9c <_svfiprintf_r+0x9c>
 8014ef6:	9b03      	ldr	r3, [sp, #12]
 8014ef8:	1d19      	adds	r1, r3, #4
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	9103      	str	r1, [sp, #12]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	bfbb      	ittet	lt
 8014f02:	425b      	neglt	r3, r3
 8014f04:	f042 0202 	orrlt.w	r2, r2, #2
 8014f08:	9307      	strge	r3, [sp, #28]
 8014f0a:	9307      	strlt	r3, [sp, #28]
 8014f0c:	bfb8      	it	lt
 8014f0e:	9204      	strlt	r2, [sp, #16]
 8014f10:	7823      	ldrb	r3, [r4, #0]
 8014f12:	2b2e      	cmp	r3, #46	; 0x2e
 8014f14:	d10c      	bne.n	8014f30 <_svfiprintf_r+0x130>
 8014f16:	7863      	ldrb	r3, [r4, #1]
 8014f18:	2b2a      	cmp	r3, #42	; 0x2a
 8014f1a:	d135      	bne.n	8014f88 <_svfiprintf_r+0x188>
 8014f1c:	9b03      	ldr	r3, [sp, #12]
 8014f1e:	1d1a      	adds	r2, r3, #4
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	9203      	str	r2, [sp, #12]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	bfb8      	it	lt
 8014f28:	f04f 33ff 	movlt.w	r3, #4294967295
 8014f2c:	3402      	adds	r4, #2
 8014f2e:	9305      	str	r3, [sp, #20]
 8014f30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014ffc <_svfiprintf_r+0x1fc>
 8014f34:	7821      	ldrb	r1, [r4, #0]
 8014f36:	2203      	movs	r2, #3
 8014f38:	4650      	mov	r0, sl
 8014f3a:	f7eb f9e1 	bl	8000300 <memchr>
 8014f3e:	b140      	cbz	r0, 8014f52 <_svfiprintf_r+0x152>
 8014f40:	2340      	movs	r3, #64	; 0x40
 8014f42:	eba0 000a 	sub.w	r0, r0, sl
 8014f46:	fa03 f000 	lsl.w	r0, r3, r0
 8014f4a:	9b04      	ldr	r3, [sp, #16]
 8014f4c:	4303      	orrs	r3, r0
 8014f4e:	3401      	adds	r4, #1
 8014f50:	9304      	str	r3, [sp, #16]
 8014f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f56:	4826      	ldr	r0, [pc, #152]	; (8014ff0 <_svfiprintf_r+0x1f0>)
 8014f58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f5c:	2206      	movs	r2, #6
 8014f5e:	f7eb f9cf 	bl	8000300 <memchr>
 8014f62:	2800      	cmp	r0, #0
 8014f64:	d038      	beq.n	8014fd8 <_svfiprintf_r+0x1d8>
 8014f66:	4b23      	ldr	r3, [pc, #140]	; (8014ff4 <_svfiprintf_r+0x1f4>)
 8014f68:	bb1b      	cbnz	r3, 8014fb2 <_svfiprintf_r+0x1b2>
 8014f6a:	9b03      	ldr	r3, [sp, #12]
 8014f6c:	3307      	adds	r3, #7
 8014f6e:	f023 0307 	bic.w	r3, r3, #7
 8014f72:	3308      	adds	r3, #8
 8014f74:	9303      	str	r3, [sp, #12]
 8014f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f78:	4433      	add	r3, r6
 8014f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8014f7c:	e767      	b.n	8014e4e <_svfiprintf_r+0x4e>
 8014f7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f82:	460c      	mov	r4, r1
 8014f84:	2001      	movs	r0, #1
 8014f86:	e7a5      	b.n	8014ed4 <_svfiprintf_r+0xd4>
 8014f88:	2300      	movs	r3, #0
 8014f8a:	3401      	adds	r4, #1
 8014f8c:	9305      	str	r3, [sp, #20]
 8014f8e:	4619      	mov	r1, r3
 8014f90:	f04f 0c0a 	mov.w	ip, #10
 8014f94:	4620      	mov	r0, r4
 8014f96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f9a:	3a30      	subs	r2, #48	; 0x30
 8014f9c:	2a09      	cmp	r2, #9
 8014f9e:	d903      	bls.n	8014fa8 <_svfiprintf_r+0x1a8>
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d0c5      	beq.n	8014f30 <_svfiprintf_r+0x130>
 8014fa4:	9105      	str	r1, [sp, #20]
 8014fa6:	e7c3      	b.n	8014f30 <_svfiprintf_r+0x130>
 8014fa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8014fac:	4604      	mov	r4, r0
 8014fae:	2301      	movs	r3, #1
 8014fb0:	e7f0      	b.n	8014f94 <_svfiprintf_r+0x194>
 8014fb2:	ab03      	add	r3, sp, #12
 8014fb4:	9300      	str	r3, [sp, #0]
 8014fb6:	462a      	mov	r2, r5
 8014fb8:	4b0f      	ldr	r3, [pc, #60]	; (8014ff8 <_svfiprintf_r+0x1f8>)
 8014fba:	a904      	add	r1, sp, #16
 8014fbc:	4638      	mov	r0, r7
 8014fbe:	f7fc fd17 	bl	80119f0 <_printf_float>
 8014fc2:	1c42      	adds	r2, r0, #1
 8014fc4:	4606      	mov	r6, r0
 8014fc6:	d1d6      	bne.n	8014f76 <_svfiprintf_r+0x176>
 8014fc8:	89ab      	ldrh	r3, [r5, #12]
 8014fca:	065b      	lsls	r3, r3, #25
 8014fcc:	f53f af2c 	bmi.w	8014e28 <_svfiprintf_r+0x28>
 8014fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fd2:	b01d      	add	sp, #116	; 0x74
 8014fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd8:	ab03      	add	r3, sp, #12
 8014fda:	9300      	str	r3, [sp, #0]
 8014fdc:	462a      	mov	r2, r5
 8014fde:	4b06      	ldr	r3, [pc, #24]	; (8014ff8 <_svfiprintf_r+0x1f8>)
 8014fe0:	a904      	add	r1, sp, #16
 8014fe2:	4638      	mov	r0, r7
 8014fe4:	f7fc ff90 	bl	8011f08 <_printf_i>
 8014fe8:	e7eb      	b.n	8014fc2 <_svfiprintf_r+0x1c2>
 8014fea:	bf00      	nop
 8014fec:	0801611c 	.word	0x0801611c
 8014ff0:	08016126 	.word	0x08016126
 8014ff4:	080119f1 	.word	0x080119f1
 8014ff8:	08014d49 	.word	0x08014d49
 8014ffc:	08016122 	.word	0x08016122

08015000 <nan>:
 8015000:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015008 <nan+0x8>
 8015004:	4770      	bx	lr
 8015006:	bf00      	nop
 8015008:	00000000 	.word	0x00000000
 801500c:	7ff80000 	.word	0x7ff80000

08015010 <_sbrk_r>:
 8015010:	b538      	push	{r3, r4, r5, lr}
 8015012:	4d06      	ldr	r5, [pc, #24]	; (801502c <_sbrk_r+0x1c>)
 8015014:	2300      	movs	r3, #0
 8015016:	4604      	mov	r4, r0
 8015018:	4608      	mov	r0, r1
 801501a:	602b      	str	r3, [r5, #0]
 801501c:	f7ee faa6 	bl	800356c <_sbrk>
 8015020:	1c43      	adds	r3, r0, #1
 8015022:	d102      	bne.n	801502a <_sbrk_r+0x1a>
 8015024:	682b      	ldr	r3, [r5, #0]
 8015026:	b103      	cbz	r3, 801502a <_sbrk_r+0x1a>
 8015028:	6023      	str	r3, [r4, #0]
 801502a:	bd38      	pop	{r3, r4, r5, pc}
 801502c:	24006020 	.word	0x24006020

08015030 <strncmp>:
 8015030:	b510      	push	{r4, lr}
 8015032:	b17a      	cbz	r2, 8015054 <strncmp+0x24>
 8015034:	4603      	mov	r3, r0
 8015036:	3901      	subs	r1, #1
 8015038:	1884      	adds	r4, r0, r2
 801503a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801503e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015042:	4290      	cmp	r0, r2
 8015044:	d101      	bne.n	801504a <strncmp+0x1a>
 8015046:	42a3      	cmp	r3, r4
 8015048:	d101      	bne.n	801504e <strncmp+0x1e>
 801504a:	1a80      	subs	r0, r0, r2
 801504c:	bd10      	pop	{r4, pc}
 801504e:	2800      	cmp	r0, #0
 8015050:	d1f3      	bne.n	801503a <strncmp+0xa>
 8015052:	e7fa      	b.n	801504a <strncmp+0x1a>
 8015054:	4610      	mov	r0, r2
 8015056:	e7f9      	b.n	801504c <strncmp+0x1c>

08015058 <__ascii_wctomb>:
 8015058:	b149      	cbz	r1, 801506e <__ascii_wctomb+0x16>
 801505a:	2aff      	cmp	r2, #255	; 0xff
 801505c:	bf85      	ittet	hi
 801505e:	238a      	movhi	r3, #138	; 0x8a
 8015060:	6003      	strhi	r3, [r0, #0]
 8015062:	700a      	strbls	r2, [r1, #0]
 8015064:	f04f 30ff 	movhi.w	r0, #4294967295
 8015068:	bf98      	it	ls
 801506a:	2001      	movls	r0, #1
 801506c:	4770      	bx	lr
 801506e:	4608      	mov	r0, r1
 8015070:	4770      	bx	lr
	...

08015074 <__assert_func>:
 8015074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015076:	4614      	mov	r4, r2
 8015078:	461a      	mov	r2, r3
 801507a:	4b09      	ldr	r3, [pc, #36]	; (80150a0 <__assert_func+0x2c>)
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	4605      	mov	r5, r0
 8015080:	68d8      	ldr	r0, [r3, #12]
 8015082:	b14c      	cbz	r4, 8015098 <__assert_func+0x24>
 8015084:	4b07      	ldr	r3, [pc, #28]	; (80150a4 <__assert_func+0x30>)
 8015086:	9100      	str	r1, [sp, #0]
 8015088:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801508c:	4906      	ldr	r1, [pc, #24]	; (80150a8 <__assert_func+0x34>)
 801508e:	462b      	mov	r3, r5
 8015090:	f000 f80e 	bl	80150b0 <fiprintf>
 8015094:	f000 fa8c 	bl	80155b0 <abort>
 8015098:	4b04      	ldr	r3, [pc, #16]	; (80150ac <__assert_func+0x38>)
 801509a:	461c      	mov	r4, r3
 801509c:	e7f3      	b.n	8015086 <__assert_func+0x12>
 801509e:	bf00      	nop
 80150a0:	240007a8 	.word	0x240007a8
 80150a4:	0801612d 	.word	0x0801612d
 80150a8:	0801613a 	.word	0x0801613a
 80150ac:	08016168 	.word	0x08016168

080150b0 <fiprintf>:
 80150b0:	b40e      	push	{r1, r2, r3}
 80150b2:	b503      	push	{r0, r1, lr}
 80150b4:	4601      	mov	r1, r0
 80150b6:	ab03      	add	r3, sp, #12
 80150b8:	4805      	ldr	r0, [pc, #20]	; (80150d0 <fiprintf+0x20>)
 80150ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80150be:	6800      	ldr	r0, [r0, #0]
 80150c0:	9301      	str	r3, [sp, #4]
 80150c2:	f000 f885 	bl	80151d0 <_vfiprintf_r>
 80150c6:	b002      	add	sp, #8
 80150c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80150cc:	b003      	add	sp, #12
 80150ce:	4770      	bx	lr
 80150d0:	240007a8 	.word	0x240007a8

080150d4 <memmove>:
 80150d4:	4288      	cmp	r0, r1
 80150d6:	b510      	push	{r4, lr}
 80150d8:	eb01 0402 	add.w	r4, r1, r2
 80150dc:	d902      	bls.n	80150e4 <memmove+0x10>
 80150de:	4284      	cmp	r4, r0
 80150e0:	4623      	mov	r3, r4
 80150e2:	d807      	bhi.n	80150f4 <memmove+0x20>
 80150e4:	1e43      	subs	r3, r0, #1
 80150e6:	42a1      	cmp	r1, r4
 80150e8:	d008      	beq.n	80150fc <memmove+0x28>
 80150ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80150f2:	e7f8      	b.n	80150e6 <memmove+0x12>
 80150f4:	4402      	add	r2, r0
 80150f6:	4601      	mov	r1, r0
 80150f8:	428a      	cmp	r2, r1
 80150fa:	d100      	bne.n	80150fe <memmove+0x2a>
 80150fc:	bd10      	pop	{r4, pc}
 80150fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015106:	e7f7      	b.n	80150f8 <memmove+0x24>

08015108 <__malloc_lock>:
 8015108:	4801      	ldr	r0, [pc, #4]	; (8015110 <__malloc_lock+0x8>)
 801510a:	f000 bc11 	b.w	8015930 <__retarget_lock_acquire_recursive>
 801510e:	bf00      	nop
 8015110:	24006024 	.word	0x24006024

08015114 <__malloc_unlock>:
 8015114:	4801      	ldr	r0, [pc, #4]	; (801511c <__malloc_unlock+0x8>)
 8015116:	f000 bc0c 	b.w	8015932 <__retarget_lock_release_recursive>
 801511a:	bf00      	nop
 801511c:	24006024 	.word	0x24006024

08015120 <_realloc_r>:
 8015120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015124:	4680      	mov	r8, r0
 8015126:	4614      	mov	r4, r2
 8015128:	460e      	mov	r6, r1
 801512a:	b921      	cbnz	r1, 8015136 <_realloc_r+0x16>
 801512c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015130:	4611      	mov	r1, r2
 8015132:	f7ff bd95 	b.w	8014c60 <_malloc_r>
 8015136:	b92a      	cbnz	r2, 8015144 <_realloc_r+0x24>
 8015138:	f7ff fd26 	bl	8014b88 <_free_r>
 801513c:	4625      	mov	r5, r4
 801513e:	4628      	mov	r0, r5
 8015140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015144:	f000 fc5c 	bl	8015a00 <_malloc_usable_size_r>
 8015148:	4284      	cmp	r4, r0
 801514a:	4607      	mov	r7, r0
 801514c:	d802      	bhi.n	8015154 <_realloc_r+0x34>
 801514e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015152:	d812      	bhi.n	801517a <_realloc_r+0x5a>
 8015154:	4621      	mov	r1, r4
 8015156:	4640      	mov	r0, r8
 8015158:	f7ff fd82 	bl	8014c60 <_malloc_r>
 801515c:	4605      	mov	r5, r0
 801515e:	2800      	cmp	r0, #0
 8015160:	d0ed      	beq.n	801513e <_realloc_r+0x1e>
 8015162:	42bc      	cmp	r4, r7
 8015164:	4622      	mov	r2, r4
 8015166:	4631      	mov	r1, r6
 8015168:	bf28      	it	cs
 801516a:	463a      	movcs	r2, r7
 801516c:	f7fc fb98 	bl	80118a0 <memcpy>
 8015170:	4631      	mov	r1, r6
 8015172:	4640      	mov	r0, r8
 8015174:	f7ff fd08 	bl	8014b88 <_free_r>
 8015178:	e7e1      	b.n	801513e <_realloc_r+0x1e>
 801517a:	4635      	mov	r5, r6
 801517c:	e7df      	b.n	801513e <_realloc_r+0x1e>

0801517e <__sfputc_r>:
 801517e:	6893      	ldr	r3, [r2, #8]
 8015180:	3b01      	subs	r3, #1
 8015182:	2b00      	cmp	r3, #0
 8015184:	b410      	push	{r4}
 8015186:	6093      	str	r3, [r2, #8]
 8015188:	da08      	bge.n	801519c <__sfputc_r+0x1e>
 801518a:	6994      	ldr	r4, [r2, #24]
 801518c:	42a3      	cmp	r3, r4
 801518e:	db01      	blt.n	8015194 <__sfputc_r+0x16>
 8015190:	290a      	cmp	r1, #10
 8015192:	d103      	bne.n	801519c <__sfputc_r+0x1e>
 8015194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015198:	f000 b94a 	b.w	8015430 <__swbuf_r>
 801519c:	6813      	ldr	r3, [r2, #0]
 801519e:	1c58      	adds	r0, r3, #1
 80151a0:	6010      	str	r0, [r2, #0]
 80151a2:	7019      	strb	r1, [r3, #0]
 80151a4:	4608      	mov	r0, r1
 80151a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151aa:	4770      	bx	lr

080151ac <__sfputs_r>:
 80151ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151ae:	4606      	mov	r6, r0
 80151b0:	460f      	mov	r7, r1
 80151b2:	4614      	mov	r4, r2
 80151b4:	18d5      	adds	r5, r2, r3
 80151b6:	42ac      	cmp	r4, r5
 80151b8:	d101      	bne.n	80151be <__sfputs_r+0x12>
 80151ba:	2000      	movs	r0, #0
 80151bc:	e007      	b.n	80151ce <__sfputs_r+0x22>
 80151be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151c2:	463a      	mov	r2, r7
 80151c4:	4630      	mov	r0, r6
 80151c6:	f7ff ffda 	bl	801517e <__sfputc_r>
 80151ca:	1c43      	adds	r3, r0, #1
 80151cc:	d1f3      	bne.n	80151b6 <__sfputs_r+0xa>
 80151ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080151d0 <_vfiprintf_r>:
 80151d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151d4:	460d      	mov	r5, r1
 80151d6:	b09d      	sub	sp, #116	; 0x74
 80151d8:	4614      	mov	r4, r2
 80151da:	4698      	mov	r8, r3
 80151dc:	4606      	mov	r6, r0
 80151de:	b118      	cbz	r0, 80151e8 <_vfiprintf_r+0x18>
 80151e0:	6983      	ldr	r3, [r0, #24]
 80151e2:	b90b      	cbnz	r3, 80151e8 <_vfiprintf_r+0x18>
 80151e4:	f000 fb06 	bl	80157f4 <__sinit>
 80151e8:	4b89      	ldr	r3, [pc, #548]	; (8015410 <_vfiprintf_r+0x240>)
 80151ea:	429d      	cmp	r5, r3
 80151ec:	d11b      	bne.n	8015226 <_vfiprintf_r+0x56>
 80151ee:	6875      	ldr	r5, [r6, #4]
 80151f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80151f2:	07d9      	lsls	r1, r3, #31
 80151f4:	d405      	bmi.n	8015202 <_vfiprintf_r+0x32>
 80151f6:	89ab      	ldrh	r3, [r5, #12]
 80151f8:	059a      	lsls	r2, r3, #22
 80151fa:	d402      	bmi.n	8015202 <_vfiprintf_r+0x32>
 80151fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80151fe:	f000 fb97 	bl	8015930 <__retarget_lock_acquire_recursive>
 8015202:	89ab      	ldrh	r3, [r5, #12]
 8015204:	071b      	lsls	r3, r3, #28
 8015206:	d501      	bpl.n	801520c <_vfiprintf_r+0x3c>
 8015208:	692b      	ldr	r3, [r5, #16]
 801520a:	b9eb      	cbnz	r3, 8015248 <_vfiprintf_r+0x78>
 801520c:	4629      	mov	r1, r5
 801520e:	4630      	mov	r0, r6
 8015210:	f000 f960 	bl	80154d4 <__swsetup_r>
 8015214:	b1c0      	cbz	r0, 8015248 <_vfiprintf_r+0x78>
 8015216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015218:	07dc      	lsls	r4, r3, #31
 801521a:	d50e      	bpl.n	801523a <_vfiprintf_r+0x6a>
 801521c:	f04f 30ff 	mov.w	r0, #4294967295
 8015220:	b01d      	add	sp, #116	; 0x74
 8015222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015226:	4b7b      	ldr	r3, [pc, #492]	; (8015414 <_vfiprintf_r+0x244>)
 8015228:	429d      	cmp	r5, r3
 801522a:	d101      	bne.n	8015230 <_vfiprintf_r+0x60>
 801522c:	68b5      	ldr	r5, [r6, #8]
 801522e:	e7df      	b.n	80151f0 <_vfiprintf_r+0x20>
 8015230:	4b79      	ldr	r3, [pc, #484]	; (8015418 <_vfiprintf_r+0x248>)
 8015232:	429d      	cmp	r5, r3
 8015234:	bf08      	it	eq
 8015236:	68f5      	ldreq	r5, [r6, #12]
 8015238:	e7da      	b.n	80151f0 <_vfiprintf_r+0x20>
 801523a:	89ab      	ldrh	r3, [r5, #12]
 801523c:	0598      	lsls	r0, r3, #22
 801523e:	d4ed      	bmi.n	801521c <_vfiprintf_r+0x4c>
 8015240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015242:	f000 fb76 	bl	8015932 <__retarget_lock_release_recursive>
 8015246:	e7e9      	b.n	801521c <_vfiprintf_r+0x4c>
 8015248:	2300      	movs	r3, #0
 801524a:	9309      	str	r3, [sp, #36]	; 0x24
 801524c:	2320      	movs	r3, #32
 801524e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015252:	f8cd 800c 	str.w	r8, [sp, #12]
 8015256:	2330      	movs	r3, #48	; 0x30
 8015258:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801541c <_vfiprintf_r+0x24c>
 801525c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015260:	f04f 0901 	mov.w	r9, #1
 8015264:	4623      	mov	r3, r4
 8015266:	469a      	mov	sl, r3
 8015268:	f813 2b01 	ldrb.w	r2, [r3], #1
 801526c:	b10a      	cbz	r2, 8015272 <_vfiprintf_r+0xa2>
 801526e:	2a25      	cmp	r2, #37	; 0x25
 8015270:	d1f9      	bne.n	8015266 <_vfiprintf_r+0x96>
 8015272:	ebba 0b04 	subs.w	fp, sl, r4
 8015276:	d00b      	beq.n	8015290 <_vfiprintf_r+0xc0>
 8015278:	465b      	mov	r3, fp
 801527a:	4622      	mov	r2, r4
 801527c:	4629      	mov	r1, r5
 801527e:	4630      	mov	r0, r6
 8015280:	f7ff ff94 	bl	80151ac <__sfputs_r>
 8015284:	3001      	adds	r0, #1
 8015286:	f000 80aa 	beq.w	80153de <_vfiprintf_r+0x20e>
 801528a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801528c:	445a      	add	r2, fp
 801528e:	9209      	str	r2, [sp, #36]	; 0x24
 8015290:	f89a 3000 	ldrb.w	r3, [sl]
 8015294:	2b00      	cmp	r3, #0
 8015296:	f000 80a2 	beq.w	80153de <_vfiprintf_r+0x20e>
 801529a:	2300      	movs	r3, #0
 801529c:	f04f 32ff 	mov.w	r2, #4294967295
 80152a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152a4:	f10a 0a01 	add.w	sl, sl, #1
 80152a8:	9304      	str	r3, [sp, #16]
 80152aa:	9307      	str	r3, [sp, #28]
 80152ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80152b0:	931a      	str	r3, [sp, #104]	; 0x68
 80152b2:	4654      	mov	r4, sl
 80152b4:	2205      	movs	r2, #5
 80152b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152ba:	4858      	ldr	r0, [pc, #352]	; (801541c <_vfiprintf_r+0x24c>)
 80152bc:	f7eb f820 	bl	8000300 <memchr>
 80152c0:	9a04      	ldr	r2, [sp, #16]
 80152c2:	b9d8      	cbnz	r0, 80152fc <_vfiprintf_r+0x12c>
 80152c4:	06d1      	lsls	r1, r2, #27
 80152c6:	bf44      	itt	mi
 80152c8:	2320      	movmi	r3, #32
 80152ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80152ce:	0713      	lsls	r3, r2, #28
 80152d0:	bf44      	itt	mi
 80152d2:	232b      	movmi	r3, #43	; 0x2b
 80152d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80152d8:	f89a 3000 	ldrb.w	r3, [sl]
 80152dc:	2b2a      	cmp	r3, #42	; 0x2a
 80152de:	d015      	beq.n	801530c <_vfiprintf_r+0x13c>
 80152e0:	9a07      	ldr	r2, [sp, #28]
 80152e2:	4654      	mov	r4, sl
 80152e4:	2000      	movs	r0, #0
 80152e6:	f04f 0c0a 	mov.w	ip, #10
 80152ea:	4621      	mov	r1, r4
 80152ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80152f0:	3b30      	subs	r3, #48	; 0x30
 80152f2:	2b09      	cmp	r3, #9
 80152f4:	d94e      	bls.n	8015394 <_vfiprintf_r+0x1c4>
 80152f6:	b1b0      	cbz	r0, 8015326 <_vfiprintf_r+0x156>
 80152f8:	9207      	str	r2, [sp, #28]
 80152fa:	e014      	b.n	8015326 <_vfiprintf_r+0x156>
 80152fc:	eba0 0308 	sub.w	r3, r0, r8
 8015300:	fa09 f303 	lsl.w	r3, r9, r3
 8015304:	4313      	orrs	r3, r2
 8015306:	9304      	str	r3, [sp, #16]
 8015308:	46a2      	mov	sl, r4
 801530a:	e7d2      	b.n	80152b2 <_vfiprintf_r+0xe2>
 801530c:	9b03      	ldr	r3, [sp, #12]
 801530e:	1d19      	adds	r1, r3, #4
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	9103      	str	r1, [sp, #12]
 8015314:	2b00      	cmp	r3, #0
 8015316:	bfbb      	ittet	lt
 8015318:	425b      	neglt	r3, r3
 801531a:	f042 0202 	orrlt.w	r2, r2, #2
 801531e:	9307      	strge	r3, [sp, #28]
 8015320:	9307      	strlt	r3, [sp, #28]
 8015322:	bfb8      	it	lt
 8015324:	9204      	strlt	r2, [sp, #16]
 8015326:	7823      	ldrb	r3, [r4, #0]
 8015328:	2b2e      	cmp	r3, #46	; 0x2e
 801532a:	d10c      	bne.n	8015346 <_vfiprintf_r+0x176>
 801532c:	7863      	ldrb	r3, [r4, #1]
 801532e:	2b2a      	cmp	r3, #42	; 0x2a
 8015330:	d135      	bne.n	801539e <_vfiprintf_r+0x1ce>
 8015332:	9b03      	ldr	r3, [sp, #12]
 8015334:	1d1a      	adds	r2, r3, #4
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	9203      	str	r2, [sp, #12]
 801533a:	2b00      	cmp	r3, #0
 801533c:	bfb8      	it	lt
 801533e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015342:	3402      	adds	r4, #2
 8015344:	9305      	str	r3, [sp, #20]
 8015346:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801542c <_vfiprintf_r+0x25c>
 801534a:	7821      	ldrb	r1, [r4, #0]
 801534c:	2203      	movs	r2, #3
 801534e:	4650      	mov	r0, sl
 8015350:	f7ea ffd6 	bl	8000300 <memchr>
 8015354:	b140      	cbz	r0, 8015368 <_vfiprintf_r+0x198>
 8015356:	2340      	movs	r3, #64	; 0x40
 8015358:	eba0 000a 	sub.w	r0, r0, sl
 801535c:	fa03 f000 	lsl.w	r0, r3, r0
 8015360:	9b04      	ldr	r3, [sp, #16]
 8015362:	4303      	orrs	r3, r0
 8015364:	3401      	adds	r4, #1
 8015366:	9304      	str	r3, [sp, #16]
 8015368:	f814 1b01 	ldrb.w	r1, [r4], #1
 801536c:	482c      	ldr	r0, [pc, #176]	; (8015420 <_vfiprintf_r+0x250>)
 801536e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015372:	2206      	movs	r2, #6
 8015374:	f7ea ffc4 	bl	8000300 <memchr>
 8015378:	2800      	cmp	r0, #0
 801537a:	d03f      	beq.n	80153fc <_vfiprintf_r+0x22c>
 801537c:	4b29      	ldr	r3, [pc, #164]	; (8015424 <_vfiprintf_r+0x254>)
 801537e:	bb1b      	cbnz	r3, 80153c8 <_vfiprintf_r+0x1f8>
 8015380:	9b03      	ldr	r3, [sp, #12]
 8015382:	3307      	adds	r3, #7
 8015384:	f023 0307 	bic.w	r3, r3, #7
 8015388:	3308      	adds	r3, #8
 801538a:	9303      	str	r3, [sp, #12]
 801538c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801538e:	443b      	add	r3, r7
 8015390:	9309      	str	r3, [sp, #36]	; 0x24
 8015392:	e767      	b.n	8015264 <_vfiprintf_r+0x94>
 8015394:	fb0c 3202 	mla	r2, ip, r2, r3
 8015398:	460c      	mov	r4, r1
 801539a:	2001      	movs	r0, #1
 801539c:	e7a5      	b.n	80152ea <_vfiprintf_r+0x11a>
 801539e:	2300      	movs	r3, #0
 80153a0:	3401      	adds	r4, #1
 80153a2:	9305      	str	r3, [sp, #20]
 80153a4:	4619      	mov	r1, r3
 80153a6:	f04f 0c0a 	mov.w	ip, #10
 80153aa:	4620      	mov	r0, r4
 80153ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153b0:	3a30      	subs	r2, #48	; 0x30
 80153b2:	2a09      	cmp	r2, #9
 80153b4:	d903      	bls.n	80153be <_vfiprintf_r+0x1ee>
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d0c5      	beq.n	8015346 <_vfiprintf_r+0x176>
 80153ba:	9105      	str	r1, [sp, #20]
 80153bc:	e7c3      	b.n	8015346 <_vfiprintf_r+0x176>
 80153be:	fb0c 2101 	mla	r1, ip, r1, r2
 80153c2:	4604      	mov	r4, r0
 80153c4:	2301      	movs	r3, #1
 80153c6:	e7f0      	b.n	80153aa <_vfiprintf_r+0x1da>
 80153c8:	ab03      	add	r3, sp, #12
 80153ca:	9300      	str	r3, [sp, #0]
 80153cc:	462a      	mov	r2, r5
 80153ce:	4b16      	ldr	r3, [pc, #88]	; (8015428 <_vfiprintf_r+0x258>)
 80153d0:	a904      	add	r1, sp, #16
 80153d2:	4630      	mov	r0, r6
 80153d4:	f7fc fb0c 	bl	80119f0 <_printf_float>
 80153d8:	4607      	mov	r7, r0
 80153da:	1c78      	adds	r0, r7, #1
 80153dc:	d1d6      	bne.n	801538c <_vfiprintf_r+0x1bc>
 80153de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80153e0:	07d9      	lsls	r1, r3, #31
 80153e2:	d405      	bmi.n	80153f0 <_vfiprintf_r+0x220>
 80153e4:	89ab      	ldrh	r3, [r5, #12]
 80153e6:	059a      	lsls	r2, r3, #22
 80153e8:	d402      	bmi.n	80153f0 <_vfiprintf_r+0x220>
 80153ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80153ec:	f000 faa1 	bl	8015932 <__retarget_lock_release_recursive>
 80153f0:	89ab      	ldrh	r3, [r5, #12]
 80153f2:	065b      	lsls	r3, r3, #25
 80153f4:	f53f af12 	bmi.w	801521c <_vfiprintf_r+0x4c>
 80153f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80153fa:	e711      	b.n	8015220 <_vfiprintf_r+0x50>
 80153fc:	ab03      	add	r3, sp, #12
 80153fe:	9300      	str	r3, [sp, #0]
 8015400:	462a      	mov	r2, r5
 8015402:	4b09      	ldr	r3, [pc, #36]	; (8015428 <_vfiprintf_r+0x258>)
 8015404:	a904      	add	r1, sp, #16
 8015406:	4630      	mov	r0, r6
 8015408:	f7fc fd7e 	bl	8011f08 <_printf_i>
 801540c:	e7e4      	b.n	80153d8 <_vfiprintf_r+0x208>
 801540e:	bf00      	nop
 8015410:	0801618c 	.word	0x0801618c
 8015414:	080161ac 	.word	0x080161ac
 8015418:	0801616c 	.word	0x0801616c
 801541c:	0801611c 	.word	0x0801611c
 8015420:	08016126 	.word	0x08016126
 8015424:	080119f1 	.word	0x080119f1
 8015428:	080151ad 	.word	0x080151ad
 801542c:	08016122 	.word	0x08016122

08015430 <__swbuf_r>:
 8015430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015432:	460e      	mov	r6, r1
 8015434:	4614      	mov	r4, r2
 8015436:	4605      	mov	r5, r0
 8015438:	b118      	cbz	r0, 8015442 <__swbuf_r+0x12>
 801543a:	6983      	ldr	r3, [r0, #24]
 801543c:	b90b      	cbnz	r3, 8015442 <__swbuf_r+0x12>
 801543e:	f000 f9d9 	bl	80157f4 <__sinit>
 8015442:	4b21      	ldr	r3, [pc, #132]	; (80154c8 <__swbuf_r+0x98>)
 8015444:	429c      	cmp	r4, r3
 8015446:	d12b      	bne.n	80154a0 <__swbuf_r+0x70>
 8015448:	686c      	ldr	r4, [r5, #4]
 801544a:	69a3      	ldr	r3, [r4, #24]
 801544c:	60a3      	str	r3, [r4, #8]
 801544e:	89a3      	ldrh	r3, [r4, #12]
 8015450:	071a      	lsls	r2, r3, #28
 8015452:	d52f      	bpl.n	80154b4 <__swbuf_r+0x84>
 8015454:	6923      	ldr	r3, [r4, #16]
 8015456:	b36b      	cbz	r3, 80154b4 <__swbuf_r+0x84>
 8015458:	6923      	ldr	r3, [r4, #16]
 801545a:	6820      	ldr	r0, [r4, #0]
 801545c:	1ac0      	subs	r0, r0, r3
 801545e:	6963      	ldr	r3, [r4, #20]
 8015460:	b2f6      	uxtb	r6, r6
 8015462:	4283      	cmp	r3, r0
 8015464:	4637      	mov	r7, r6
 8015466:	dc04      	bgt.n	8015472 <__swbuf_r+0x42>
 8015468:	4621      	mov	r1, r4
 801546a:	4628      	mov	r0, r5
 801546c:	f000 f92e 	bl	80156cc <_fflush_r>
 8015470:	bb30      	cbnz	r0, 80154c0 <__swbuf_r+0x90>
 8015472:	68a3      	ldr	r3, [r4, #8]
 8015474:	3b01      	subs	r3, #1
 8015476:	60a3      	str	r3, [r4, #8]
 8015478:	6823      	ldr	r3, [r4, #0]
 801547a:	1c5a      	adds	r2, r3, #1
 801547c:	6022      	str	r2, [r4, #0]
 801547e:	701e      	strb	r6, [r3, #0]
 8015480:	6963      	ldr	r3, [r4, #20]
 8015482:	3001      	adds	r0, #1
 8015484:	4283      	cmp	r3, r0
 8015486:	d004      	beq.n	8015492 <__swbuf_r+0x62>
 8015488:	89a3      	ldrh	r3, [r4, #12]
 801548a:	07db      	lsls	r3, r3, #31
 801548c:	d506      	bpl.n	801549c <__swbuf_r+0x6c>
 801548e:	2e0a      	cmp	r6, #10
 8015490:	d104      	bne.n	801549c <__swbuf_r+0x6c>
 8015492:	4621      	mov	r1, r4
 8015494:	4628      	mov	r0, r5
 8015496:	f000 f919 	bl	80156cc <_fflush_r>
 801549a:	b988      	cbnz	r0, 80154c0 <__swbuf_r+0x90>
 801549c:	4638      	mov	r0, r7
 801549e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154a0:	4b0a      	ldr	r3, [pc, #40]	; (80154cc <__swbuf_r+0x9c>)
 80154a2:	429c      	cmp	r4, r3
 80154a4:	d101      	bne.n	80154aa <__swbuf_r+0x7a>
 80154a6:	68ac      	ldr	r4, [r5, #8]
 80154a8:	e7cf      	b.n	801544a <__swbuf_r+0x1a>
 80154aa:	4b09      	ldr	r3, [pc, #36]	; (80154d0 <__swbuf_r+0xa0>)
 80154ac:	429c      	cmp	r4, r3
 80154ae:	bf08      	it	eq
 80154b0:	68ec      	ldreq	r4, [r5, #12]
 80154b2:	e7ca      	b.n	801544a <__swbuf_r+0x1a>
 80154b4:	4621      	mov	r1, r4
 80154b6:	4628      	mov	r0, r5
 80154b8:	f000 f80c 	bl	80154d4 <__swsetup_r>
 80154bc:	2800      	cmp	r0, #0
 80154be:	d0cb      	beq.n	8015458 <__swbuf_r+0x28>
 80154c0:	f04f 37ff 	mov.w	r7, #4294967295
 80154c4:	e7ea      	b.n	801549c <__swbuf_r+0x6c>
 80154c6:	bf00      	nop
 80154c8:	0801618c 	.word	0x0801618c
 80154cc:	080161ac 	.word	0x080161ac
 80154d0:	0801616c 	.word	0x0801616c

080154d4 <__swsetup_r>:
 80154d4:	4b32      	ldr	r3, [pc, #200]	; (80155a0 <__swsetup_r+0xcc>)
 80154d6:	b570      	push	{r4, r5, r6, lr}
 80154d8:	681d      	ldr	r5, [r3, #0]
 80154da:	4606      	mov	r6, r0
 80154dc:	460c      	mov	r4, r1
 80154de:	b125      	cbz	r5, 80154ea <__swsetup_r+0x16>
 80154e0:	69ab      	ldr	r3, [r5, #24]
 80154e2:	b913      	cbnz	r3, 80154ea <__swsetup_r+0x16>
 80154e4:	4628      	mov	r0, r5
 80154e6:	f000 f985 	bl	80157f4 <__sinit>
 80154ea:	4b2e      	ldr	r3, [pc, #184]	; (80155a4 <__swsetup_r+0xd0>)
 80154ec:	429c      	cmp	r4, r3
 80154ee:	d10f      	bne.n	8015510 <__swsetup_r+0x3c>
 80154f0:	686c      	ldr	r4, [r5, #4]
 80154f2:	89a3      	ldrh	r3, [r4, #12]
 80154f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80154f8:	0719      	lsls	r1, r3, #28
 80154fa:	d42c      	bmi.n	8015556 <__swsetup_r+0x82>
 80154fc:	06dd      	lsls	r5, r3, #27
 80154fe:	d411      	bmi.n	8015524 <__swsetup_r+0x50>
 8015500:	2309      	movs	r3, #9
 8015502:	6033      	str	r3, [r6, #0]
 8015504:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015508:	81a3      	strh	r3, [r4, #12]
 801550a:	f04f 30ff 	mov.w	r0, #4294967295
 801550e:	e03e      	b.n	801558e <__swsetup_r+0xba>
 8015510:	4b25      	ldr	r3, [pc, #148]	; (80155a8 <__swsetup_r+0xd4>)
 8015512:	429c      	cmp	r4, r3
 8015514:	d101      	bne.n	801551a <__swsetup_r+0x46>
 8015516:	68ac      	ldr	r4, [r5, #8]
 8015518:	e7eb      	b.n	80154f2 <__swsetup_r+0x1e>
 801551a:	4b24      	ldr	r3, [pc, #144]	; (80155ac <__swsetup_r+0xd8>)
 801551c:	429c      	cmp	r4, r3
 801551e:	bf08      	it	eq
 8015520:	68ec      	ldreq	r4, [r5, #12]
 8015522:	e7e6      	b.n	80154f2 <__swsetup_r+0x1e>
 8015524:	0758      	lsls	r0, r3, #29
 8015526:	d512      	bpl.n	801554e <__swsetup_r+0x7a>
 8015528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801552a:	b141      	cbz	r1, 801553e <__swsetup_r+0x6a>
 801552c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015530:	4299      	cmp	r1, r3
 8015532:	d002      	beq.n	801553a <__swsetup_r+0x66>
 8015534:	4630      	mov	r0, r6
 8015536:	f7ff fb27 	bl	8014b88 <_free_r>
 801553a:	2300      	movs	r3, #0
 801553c:	6363      	str	r3, [r4, #52]	; 0x34
 801553e:	89a3      	ldrh	r3, [r4, #12]
 8015540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015544:	81a3      	strh	r3, [r4, #12]
 8015546:	2300      	movs	r3, #0
 8015548:	6063      	str	r3, [r4, #4]
 801554a:	6923      	ldr	r3, [r4, #16]
 801554c:	6023      	str	r3, [r4, #0]
 801554e:	89a3      	ldrh	r3, [r4, #12]
 8015550:	f043 0308 	orr.w	r3, r3, #8
 8015554:	81a3      	strh	r3, [r4, #12]
 8015556:	6923      	ldr	r3, [r4, #16]
 8015558:	b94b      	cbnz	r3, 801556e <__swsetup_r+0x9a>
 801555a:	89a3      	ldrh	r3, [r4, #12]
 801555c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015564:	d003      	beq.n	801556e <__swsetup_r+0x9a>
 8015566:	4621      	mov	r1, r4
 8015568:	4630      	mov	r0, r6
 801556a:	f000 fa09 	bl	8015980 <__smakebuf_r>
 801556e:	89a0      	ldrh	r0, [r4, #12]
 8015570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015574:	f010 0301 	ands.w	r3, r0, #1
 8015578:	d00a      	beq.n	8015590 <__swsetup_r+0xbc>
 801557a:	2300      	movs	r3, #0
 801557c:	60a3      	str	r3, [r4, #8]
 801557e:	6963      	ldr	r3, [r4, #20]
 8015580:	425b      	negs	r3, r3
 8015582:	61a3      	str	r3, [r4, #24]
 8015584:	6923      	ldr	r3, [r4, #16]
 8015586:	b943      	cbnz	r3, 801559a <__swsetup_r+0xc6>
 8015588:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801558c:	d1ba      	bne.n	8015504 <__swsetup_r+0x30>
 801558e:	bd70      	pop	{r4, r5, r6, pc}
 8015590:	0781      	lsls	r1, r0, #30
 8015592:	bf58      	it	pl
 8015594:	6963      	ldrpl	r3, [r4, #20]
 8015596:	60a3      	str	r3, [r4, #8]
 8015598:	e7f4      	b.n	8015584 <__swsetup_r+0xb0>
 801559a:	2000      	movs	r0, #0
 801559c:	e7f7      	b.n	801558e <__swsetup_r+0xba>
 801559e:	bf00      	nop
 80155a0:	240007a8 	.word	0x240007a8
 80155a4:	0801618c 	.word	0x0801618c
 80155a8:	080161ac 	.word	0x080161ac
 80155ac:	0801616c 	.word	0x0801616c

080155b0 <abort>:
 80155b0:	b508      	push	{r3, lr}
 80155b2:	2006      	movs	r0, #6
 80155b4:	f000 fa54 	bl	8015a60 <raise>
 80155b8:	2001      	movs	r0, #1
 80155ba:	f7ed ff5f 	bl	800347c <_exit>
	...

080155c0 <__sflush_r>:
 80155c0:	898a      	ldrh	r2, [r1, #12]
 80155c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155c6:	4605      	mov	r5, r0
 80155c8:	0710      	lsls	r0, r2, #28
 80155ca:	460c      	mov	r4, r1
 80155cc:	d458      	bmi.n	8015680 <__sflush_r+0xc0>
 80155ce:	684b      	ldr	r3, [r1, #4]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	dc05      	bgt.n	80155e0 <__sflush_r+0x20>
 80155d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	dc02      	bgt.n	80155e0 <__sflush_r+0x20>
 80155da:	2000      	movs	r0, #0
 80155dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80155e2:	2e00      	cmp	r6, #0
 80155e4:	d0f9      	beq.n	80155da <__sflush_r+0x1a>
 80155e6:	2300      	movs	r3, #0
 80155e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80155ec:	682f      	ldr	r7, [r5, #0]
 80155ee:	602b      	str	r3, [r5, #0]
 80155f0:	d032      	beq.n	8015658 <__sflush_r+0x98>
 80155f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80155f4:	89a3      	ldrh	r3, [r4, #12]
 80155f6:	075a      	lsls	r2, r3, #29
 80155f8:	d505      	bpl.n	8015606 <__sflush_r+0x46>
 80155fa:	6863      	ldr	r3, [r4, #4]
 80155fc:	1ac0      	subs	r0, r0, r3
 80155fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015600:	b10b      	cbz	r3, 8015606 <__sflush_r+0x46>
 8015602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015604:	1ac0      	subs	r0, r0, r3
 8015606:	2300      	movs	r3, #0
 8015608:	4602      	mov	r2, r0
 801560a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801560c:	6a21      	ldr	r1, [r4, #32]
 801560e:	4628      	mov	r0, r5
 8015610:	47b0      	blx	r6
 8015612:	1c43      	adds	r3, r0, #1
 8015614:	89a3      	ldrh	r3, [r4, #12]
 8015616:	d106      	bne.n	8015626 <__sflush_r+0x66>
 8015618:	6829      	ldr	r1, [r5, #0]
 801561a:	291d      	cmp	r1, #29
 801561c:	d82c      	bhi.n	8015678 <__sflush_r+0xb8>
 801561e:	4a2a      	ldr	r2, [pc, #168]	; (80156c8 <__sflush_r+0x108>)
 8015620:	40ca      	lsrs	r2, r1
 8015622:	07d6      	lsls	r6, r2, #31
 8015624:	d528      	bpl.n	8015678 <__sflush_r+0xb8>
 8015626:	2200      	movs	r2, #0
 8015628:	6062      	str	r2, [r4, #4]
 801562a:	04d9      	lsls	r1, r3, #19
 801562c:	6922      	ldr	r2, [r4, #16]
 801562e:	6022      	str	r2, [r4, #0]
 8015630:	d504      	bpl.n	801563c <__sflush_r+0x7c>
 8015632:	1c42      	adds	r2, r0, #1
 8015634:	d101      	bne.n	801563a <__sflush_r+0x7a>
 8015636:	682b      	ldr	r3, [r5, #0]
 8015638:	b903      	cbnz	r3, 801563c <__sflush_r+0x7c>
 801563a:	6560      	str	r0, [r4, #84]	; 0x54
 801563c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801563e:	602f      	str	r7, [r5, #0]
 8015640:	2900      	cmp	r1, #0
 8015642:	d0ca      	beq.n	80155da <__sflush_r+0x1a>
 8015644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015648:	4299      	cmp	r1, r3
 801564a:	d002      	beq.n	8015652 <__sflush_r+0x92>
 801564c:	4628      	mov	r0, r5
 801564e:	f7ff fa9b 	bl	8014b88 <_free_r>
 8015652:	2000      	movs	r0, #0
 8015654:	6360      	str	r0, [r4, #52]	; 0x34
 8015656:	e7c1      	b.n	80155dc <__sflush_r+0x1c>
 8015658:	6a21      	ldr	r1, [r4, #32]
 801565a:	2301      	movs	r3, #1
 801565c:	4628      	mov	r0, r5
 801565e:	47b0      	blx	r6
 8015660:	1c41      	adds	r1, r0, #1
 8015662:	d1c7      	bne.n	80155f4 <__sflush_r+0x34>
 8015664:	682b      	ldr	r3, [r5, #0]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d0c4      	beq.n	80155f4 <__sflush_r+0x34>
 801566a:	2b1d      	cmp	r3, #29
 801566c:	d001      	beq.n	8015672 <__sflush_r+0xb2>
 801566e:	2b16      	cmp	r3, #22
 8015670:	d101      	bne.n	8015676 <__sflush_r+0xb6>
 8015672:	602f      	str	r7, [r5, #0]
 8015674:	e7b1      	b.n	80155da <__sflush_r+0x1a>
 8015676:	89a3      	ldrh	r3, [r4, #12]
 8015678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801567c:	81a3      	strh	r3, [r4, #12]
 801567e:	e7ad      	b.n	80155dc <__sflush_r+0x1c>
 8015680:	690f      	ldr	r7, [r1, #16]
 8015682:	2f00      	cmp	r7, #0
 8015684:	d0a9      	beq.n	80155da <__sflush_r+0x1a>
 8015686:	0793      	lsls	r3, r2, #30
 8015688:	680e      	ldr	r6, [r1, #0]
 801568a:	bf08      	it	eq
 801568c:	694b      	ldreq	r3, [r1, #20]
 801568e:	600f      	str	r7, [r1, #0]
 8015690:	bf18      	it	ne
 8015692:	2300      	movne	r3, #0
 8015694:	eba6 0807 	sub.w	r8, r6, r7
 8015698:	608b      	str	r3, [r1, #8]
 801569a:	f1b8 0f00 	cmp.w	r8, #0
 801569e:	dd9c      	ble.n	80155da <__sflush_r+0x1a>
 80156a0:	6a21      	ldr	r1, [r4, #32]
 80156a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80156a4:	4643      	mov	r3, r8
 80156a6:	463a      	mov	r2, r7
 80156a8:	4628      	mov	r0, r5
 80156aa:	47b0      	blx	r6
 80156ac:	2800      	cmp	r0, #0
 80156ae:	dc06      	bgt.n	80156be <__sflush_r+0xfe>
 80156b0:	89a3      	ldrh	r3, [r4, #12]
 80156b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156b6:	81a3      	strh	r3, [r4, #12]
 80156b8:	f04f 30ff 	mov.w	r0, #4294967295
 80156bc:	e78e      	b.n	80155dc <__sflush_r+0x1c>
 80156be:	4407      	add	r7, r0
 80156c0:	eba8 0800 	sub.w	r8, r8, r0
 80156c4:	e7e9      	b.n	801569a <__sflush_r+0xda>
 80156c6:	bf00      	nop
 80156c8:	20400001 	.word	0x20400001

080156cc <_fflush_r>:
 80156cc:	b538      	push	{r3, r4, r5, lr}
 80156ce:	690b      	ldr	r3, [r1, #16]
 80156d0:	4605      	mov	r5, r0
 80156d2:	460c      	mov	r4, r1
 80156d4:	b913      	cbnz	r3, 80156dc <_fflush_r+0x10>
 80156d6:	2500      	movs	r5, #0
 80156d8:	4628      	mov	r0, r5
 80156da:	bd38      	pop	{r3, r4, r5, pc}
 80156dc:	b118      	cbz	r0, 80156e6 <_fflush_r+0x1a>
 80156de:	6983      	ldr	r3, [r0, #24]
 80156e0:	b90b      	cbnz	r3, 80156e6 <_fflush_r+0x1a>
 80156e2:	f000 f887 	bl	80157f4 <__sinit>
 80156e6:	4b14      	ldr	r3, [pc, #80]	; (8015738 <_fflush_r+0x6c>)
 80156e8:	429c      	cmp	r4, r3
 80156ea:	d11b      	bne.n	8015724 <_fflush_r+0x58>
 80156ec:	686c      	ldr	r4, [r5, #4]
 80156ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d0ef      	beq.n	80156d6 <_fflush_r+0xa>
 80156f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80156f8:	07d0      	lsls	r0, r2, #31
 80156fa:	d404      	bmi.n	8015706 <_fflush_r+0x3a>
 80156fc:	0599      	lsls	r1, r3, #22
 80156fe:	d402      	bmi.n	8015706 <_fflush_r+0x3a>
 8015700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015702:	f000 f915 	bl	8015930 <__retarget_lock_acquire_recursive>
 8015706:	4628      	mov	r0, r5
 8015708:	4621      	mov	r1, r4
 801570a:	f7ff ff59 	bl	80155c0 <__sflush_r>
 801570e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015710:	07da      	lsls	r2, r3, #31
 8015712:	4605      	mov	r5, r0
 8015714:	d4e0      	bmi.n	80156d8 <_fflush_r+0xc>
 8015716:	89a3      	ldrh	r3, [r4, #12]
 8015718:	059b      	lsls	r3, r3, #22
 801571a:	d4dd      	bmi.n	80156d8 <_fflush_r+0xc>
 801571c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801571e:	f000 f908 	bl	8015932 <__retarget_lock_release_recursive>
 8015722:	e7d9      	b.n	80156d8 <_fflush_r+0xc>
 8015724:	4b05      	ldr	r3, [pc, #20]	; (801573c <_fflush_r+0x70>)
 8015726:	429c      	cmp	r4, r3
 8015728:	d101      	bne.n	801572e <_fflush_r+0x62>
 801572a:	68ac      	ldr	r4, [r5, #8]
 801572c:	e7df      	b.n	80156ee <_fflush_r+0x22>
 801572e:	4b04      	ldr	r3, [pc, #16]	; (8015740 <_fflush_r+0x74>)
 8015730:	429c      	cmp	r4, r3
 8015732:	bf08      	it	eq
 8015734:	68ec      	ldreq	r4, [r5, #12]
 8015736:	e7da      	b.n	80156ee <_fflush_r+0x22>
 8015738:	0801618c 	.word	0x0801618c
 801573c:	080161ac 	.word	0x080161ac
 8015740:	0801616c 	.word	0x0801616c

08015744 <std>:
 8015744:	2300      	movs	r3, #0
 8015746:	b510      	push	{r4, lr}
 8015748:	4604      	mov	r4, r0
 801574a:	e9c0 3300 	strd	r3, r3, [r0]
 801574e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015752:	6083      	str	r3, [r0, #8]
 8015754:	8181      	strh	r1, [r0, #12]
 8015756:	6643      	str	r3, [r0, #100]	; 0x64
 8015758:	81c2      	strh	r2, [r0, #14]
 801575a:	6183      	str	r3, [r0, #24]
 801575c:	4619      	mov	r1, r3
 801575e:	2208      	movs	r2, #8
 8015760:	305c      	adds	r0, #92	; 0x5c
 8015762:	f7fc f8ab 	bl	80118bc <memset>
 8015766:	4b05      	ldr	r3, [pc, #20]	; (801577c <std+0x38>)
 8015768:	6263      	str	r3, [r4, #36]	; 0x24
 801576a:	4b05      	ldr	r3, [pc, #20]	; (8015780 <std+0x3c>)
 801576c:	62a3      	str	r3, [r4, #40]	; 0x28
 801576e:	4b05      	ldr	r3, [pc, #20]	; (8015784 <std+0x40>)
 8015770:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015772:	4b05      	ldr	r3, [pc, #20]	; (8015788 <std+0x44>)
 8015774:	6224      	str	r4, [r4, #32]
 8015776:	6323      	str	r3, [r4, #48]	; 0x30
 8015778:	bd10      	pop	{r4, pc}
 801577a:	bf00      	nop
 801577c:	08015a99 	.word	0x08015a99
 8015780:	08015abb 	.word	0x08015abb
 8015784:	08015af3 	.word	0x08015af3
 8015788:	08015b17 	.word	0x08015b17

0801578c <_cleanup_r>:
 801578c:	4901      	ldr	r1, [pc, #4]	; (8015794 <_cleanup_r+0x8>)
 801578e:	f000 b8af 	b.w	80158f0 <_fwalk_reent>
 8015792:	bf00      	nop
 8015794:	080156cd 	.word	0x080156cd

08015798 <__sfmoreglue>:
 8015798:	b570      	push	{r4, r5, r6, lr}
 801579a:	2268      	movs	r2, #104	; 0x68
 801579c:	1e4d      	subs	r5, r1, #1
 801579e:	4355      	muls	r5, r2
 80157a0:	460e      	mov	r6, r1
 80157a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80157a6:	f7ff fa5b 	bl	8014c60 <_malloc_r>
 80157aa:	4604      	mov	r4, r0
 80157ac:	b140      	cbz	r0, 80157c0 <__sfmoreglue+0x28>
 80157ae:	2100      	movs	r1, #0
 80157b0:	e9c0 1600 	strd	r1, r6, [r0]
 80157b4:	300c      	adds	r0, #12
 80157b6:	60a0      	str	r0, [r4, #8]
 80157b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80157bc:	f7fc f87e 	bl	80118bc <memset>
 80157c0:	4620      	mov	r0, r4
 80157c2:	bd70      	pop	{r4, r5, r6, pc}

080157c4 <__sfp_lock_acquire>:
 80157c4:	4801      	ldr	r0, [pc, #4]	; (80157cc <__sfp_lock_acquire+0x8>)
 80157c6:	f000 b8b3 	b.w	8015930 <__retarget_lock_acquire_recursive>
 80157ca:	bf00      	nop
 80157cc:	24006025 	.word	0x24006025

080157d0 <__sfp_lock_release>:
 80157d0:	4801      	ldr	r0, [pc, #4]	; (80157d8 <__sfp_lock_release+0x8>)
 80157d2:	f000 b8ae 	b.w	8015932 <__retarget_lock_release_recursive>
 80157d6:	bf00      	nop
 80157d8:	24006025 	.word	0x24006025

080157dc <__sinit_lock_acquire>:
 80157dc:	4801      	ldr	r0, [pc, #4]	; (80157e4 <__sinit_lock_acquire+0x8>)
 80157de:	f000 b8a7 	b.w	8015930 <__retarget_lock_acquire_recursive>
 80157e2:	bf00      	nop
 80157e4:	24006026 	.word	0x24006026

080157e8 <__sinit_lock_release>:
 80157e8:	4801      	ldr	r0, [pc, #4]	; (80157f0 <__sinit_lock_release+0x8>)
 80157ea:	f000 b8a2 	b.w	8015932 <__retarget_lock_release_recursive>
 80157ee:	bf00      	nop
 80157f0:	24006026 	.word	0x24006026

080157f4 <__sinit>:
 80157f4:	b510      	push	{r4, lr}
 80157f6:	4604      	mov	r4, r0
 80157f8:	f7ff fff0 	bl	80157dc <__sinit_lock_acquire>
 80157fc:	69a3      	ldr	r3, [r4, #24]
 80157fe:	b11b      	cbz	r3, 8015808 <__sinit+0x14>
 8015800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015804:	f7ff bff0 	b.w	80157e8 <__sinit_lock_release>
 8015808:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801580c:	6523      	str	r3, [r4, #80]	; 0x50
 801580e:	4b13      	ldr	r3, [pc, #76]	; (801585c <__sinit+0x68>)
 8015810:	4a13      	ldr	r2, [pc, #76]	; (8015860 <__sinit+0x6c>)
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	62a2      	str	r2, [r4, #40]	; 0x28
 8015816:	42a3      	cmp	r3, r4
 8015818:	bf04      	itt	eq
 801581a:	2301      	moveq	r3, #1
 801581c:	61a3      	streq	r3, [r4, #24]
 801581e:	4620      	mov	r0, r4
 8015820:	f000 f820 	bl	8015864 <__sfp>
 8015824:	6060      	str	r0, [r4, #4]
 8015826:	4620      	mov	r0, r4
 8015828:	f000 f81c 	bl	8015864 <__sfp>
 801582c:	60a0      	str	r0, [r4, #8]
 801582e:	4620      	mov	r0, r4
 8015830:	f000 f818 	bl	8015864 <__sfp>
 8015834:	2200      	movs	r2, #0
 8015836:	60e0      	str	r0, [r4, #12]
 8015838:	2104      	movs	r1, #4
 801583a:	6860      	ldr	r0, [r4, #4]
 801583c:	f7ff ff82 	bl	8015744 <std>
 8015840:	68a0      	ldr	r0, [r4, #8]
 8015842:	2201      	movs	r2, #1
 8015844:	2109      	movs	r1, #9
 8015846:	f7ff ff7d 	bl	8015744 <std>
 801584a:	68e0      	ldr	r0, [r4, #12]
 801584c:	2202      	movs	r2, #2
 801584e:	2112      	movs	r1, #18
 8015850:	f7ff ff78 	bl	8015744 <std>
 8015854:	2301      	movs	r3, #1
 8015856:	61a3      	str	r3, [r4, #24]
 8015858:	e7d2      	b.n	8015800 <__sinit+0xc>
 801585a:	bf00      	nop
 801585c:	08015d2c 	.word	0x08015d2c
 8015860:	0801578d 	.word	0x0801578d

08015864 <__sfp>:
 8015864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015866:	4607      	mov	r7, r0
 8015868:	f7ff ffac 	bl	80157c4 <__sfp_lock_acquire>
 801586c:	4b1e      	ldr	r3, [pc, #120]	; (80158e8 <__sfp+0x84>)
 801586e:	681e      	ldr	r6, [r3, #0]
 8015870:	69b3      	ldr	r3, [r6, #24]
 8015872:	b913      	cbnz	r3, 801587a <__sfp+0x16>
 8015874:	4630      	mov	r0, r6
 8015876:	f7ff ffbd 	bl	80157f4 <__sinit>
 801587a:	3648      	adds	r6, #72	; 0x48
 801587c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015880:	3b01      	subs	r3, #1
 8015882:	d503      	bpl.n	801588c <__sfp+0x28>
 8015884:	6833      	ldr	r3, [r6, #0]
 8015886:	b30b      	cbz	r3, 80158cc <__sfp+0x68>
 8015888:	6836      	ldr	r6, [r6, #0]
 801588a:	e7f7      	b.n	801587c <__sfp+0x18>
 801588c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015890:	b9d5      	cbnz	r5, 80158c8 <__sfp+0x64>
 8015892:	4b16      	ldr	r3, [pc, #88]	; (80158ec <__sfp+0x88>)
 8015894:	60e3      	str	r3, [r4, #12]
 8015896:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801589a:	6665      	str	r5, [r4, #100]	; 0x64
 801589c:	f000 f847 	bl	801592e <__retarget_lock_init_recursive>
 80158a0:	f7ff ff96 	bl	80157d0 <__sfp_lock_release>
 80158a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80158a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80158ac:	6025      	str	r5, [r4, #0]
 80158ae:	61a5      	str	r5, [r4, #24]
 80158b0:	2208      	movs	r2, #8
 80158b2:	4629      	mov	r1, r5
 80158b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80158b8:	f7fc f800 	bl	80118bc <memset>
 80158bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80158c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80158c4:	4620      	mov	r0, r4
 80158c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158c8:	3468      	adds	r4, #104	; 0x68
 80158ca:	e7d9      	b.n	8015880 <__sfp+0x1c>
 80158cc:	2104      	movs	r1, #4
 80158ce:	4638      	mov	r0, r7
 80158d0:	f7ff ff62 	bl	8015798 <__sfmoreglue>
 80158d4:	4604      	mov	r4, r0
 80158d6:	6030      	str	r0, [r6, #0]
 80158d8:	2800      	cmp	r0, #0
 80158da:	d1d5      	bne.n	8015888 <__sfp+0x24>
 80158dc:	f7ff ff78 	bl	80157d0 <__sfp_lock_release>
 80158e0:	230c      	movs	r3, #12
 80158e2:	603b      	str	r3, [r7, #0]
 80158e4:	e7ee      	b.n	80158c4 <__sfp+0x60>
 80158e6:	bf00      	nop
 80158e8:	08015d2c 	.word	0x08015d2c
 80158ec:	ffff0001 	.word	0xffff0001

080158f0 <_fwalk_reent>:
 80158f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158f4:	4606      	mov	r6, r0
 80158f6:	4688      	mov	r8, r1
 80158f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80158fc:	2700      	movs	r7, #0
 80158fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015902:	f1b9 0901 	subs.w	r9, r9, #1
 8015906:	d505      	bpl.n	8015914 <_fwalk_reent+0x24>
 8015908:	6824      	ldr	r4, [r4, #0]
 801590a:	2c00      	cmp	r4, #0
 801590c:	d1f7      	bne.n	80158fe <_fwalk_reent+0xe>
 801590e:	4638      	mov	r0, r7
 8015910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015914:	89ab      	ldrh	r3, [r5, #12]
 8015916:	2b01      	cmp	r3, #1
 8015918:	d907      	bls.n	801592a <_fwalk_reent+0x3a>
 801591a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801591e:	3301      	adds	r3, #1
 8015920:	d003      	beq.n	801592a <_fwalk_reent+0x3a>
 8015922:	4629      	mov	r1, r5
 8015924:	4630      	mov	r0, r6
 8015926:	47c0      	blx	r8
 8015928:	4307      	orrs	r7, r0
 801592a:	3568      	adds	r5, #104	; 0x68
 801592c:	e7e9      	b.n	8015902 <_fwalk_reent+0x12>

0801592e <__retarget_lock_init_recursive>:
 801592e:	4770      	bx	lr

08015930 <__retarget_lock_acquire_recursive>:
 8015930:	4770      	bx	lr

08015932 <__retarget_lock_release_recursive>:
 8015932:	4770      	bx	lr

08015934 <__swhatbuf_r>:
 8015934:	b570      	push	{r4, r5, r6, lr}
 8015936:	460e      	mov	r6, r1
 8015938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801593c:	2900      	cmp	r1, #0
 801593e:	b096      	sub	sp, #88	; 0x58
 8015940:	4614      	mov	r4, r2
 8015942:	461d      	mov	r5, r3
 8015944:	da08      	bge.n	8015958 <__swhatbuf_r+0x24>
 8015946:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801594a:	2200      	movs	r2, #0
 801594c:	602a      	str	r2, [r5, #0]
 801594e:	061a      	lsls	r2, r3, #24
 8015950:	d410      	bmi.n	8015974 <__swhatbuf_r+0x40>
 8015952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015956:	e00e      	b.n	8015976 <__swhatbuf_r+0x42>
 8015958:	466a      	mov	r2, sp
 801595a:	f000 f903 	bl	8015b64 <_fstat_r>
 801595e:	2800      	cmp	r0, #0
 8015960:	dbf1      	blt.n	8015946 <__swhatbuf_r+0x12>
 8015962:	9a01      	ldr	r2, [sp, #4]
 8015964:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015968:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801596c:	425a      	negs	r2, r3
 801596e:	415a      	adcs	r2, r3
 8015970:	602a      	str	r2, [r5, #0]
 8015972:	e7ee      	b.n	8015952 <__swhatbuf_r+0x1e>
 8015974:	2340      	movs	r3, #64	; 0x40
 8015976:	2000      	movs	r0, #0
 8015978:	6023      	str	r3, [r4, #0]
 801597a:	b016      	add	sp, #88	; 0x58
 801597c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015980 <__smakebuf_r>:
 8015980:	898b      	ldrh	r3, [r1, #12]
 8015982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015984:	079d      	lsls	r5, r3, #30
 8015986:	4606      	mov	r6, r0
 8015988:	460c      	mov	r4, r1
 801598a:	d507      	bpl.n	801599c <__smakebuf_r+0x1c>
 801598c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015990:	6023      	str	r3, [r4, #0]
 8015992:	6123      	str	r3, [r4, #16]
 8015994:	2301      	movs	r3, #1
 8015996:	6163      	str	r3, [r4, #20]
 8015998:	b002      	add	sp, #8
 801599a:	bd70      	pop	{r4, r5, r6, pc}
 801599c:	ab01      	add	r3, sp, #4
 801599e:	466a      	mov	r2, sp
 80159a0:	f7ff ffc8 	bl	8015934 <__swhatbuf_r>
 80159a4:	9900      	ldr	r1, [sp, #0]
 80159a6:	4605      	mov	r5, r0
 80159a8:	4630      	mov	r0, r6
 80159aa:	f7ff f959 	bl	8014c60 <_malloc_r>
 80159ae:	b948      	cbnz	r0, 80159c4 <__smakebuf_r+0x44>
 80159b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159b4:	059a      	lsls	r2, r3, #22
 80159b6:	d4ef      	bmi.n	8015998 <__smakebuf_r+0x18>
 80159b8:	f023 0303 	bic.w	r3, r3, #3
 80159bc:	f043 0302 	orr.w	r3, r3, #2
 80159c0:	81a3      	strh	r3, [r4, #12]
 80159c2:	e7e3      	b.n	801598c <__smakebuf_r+0xc>
 80159c4:	4b0d      	ldr	r3, [pc, #52]	; (80159fc <__smakebuf_r+0x7c>)
 80159c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80159c8:	89a3      	ldrh	r3, [r4, #12]
 80159ca:	6020      	str	r0, [r4, #0]
 80159cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80159d0:	81a3      	strh	r3, [r4, #12]
 80159d2:	9b00      	ldr	r3, [sp, #0]
 80159d4:	6163      	str	r3, [r4, #20]
 80159d6:	9b01      	ldr	r3, [sp, #4]
 80159d8:	6120      	str	r0, [r4, #16]
 80159da:	b15b      	cbz	r3, 80159f4 <__smakebuf_r+0x74>
 80159dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80159e0:	4630      	mov	r0, r6
 80159e2:	f000 f8d1 	bl	8015b88 <_isatty_r>
 80159e6:	b128      	cbz	r0, 80159f4 <__smakebuf_r+0x74>
 80159e8:	89a3      	ldrh	r3, [r4, #12]
 80159ea:	f023 0303 	bic.w	r3, r3, #3
 80159ee:	f043 0301 	orr.w	r3, r3, #1
 80159f2:	81a3      	strh	r3, [r4, #12]
 80159f4:	89a0      	ldrh	r0, [r4, #12]
 80159f6:	4305      	orrs	r5, r0
 80159f8:	81a5      	strh	r5, [r4, #12]
 80159fa:	e7cd      	b.n	8015998 <__smakebuf_r+0x18>
 80159fc:	0801578d 	.word	0x0801578d

08015a00 <_malloc_usable_size_r>:
 8015a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a04:	1f18      	subs	r0, r3, #4
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	bfbc      	itt	lt
 8015a0a:	580b      	ldrlt	r3, [r1, r0]
 8015a0c:	18c0      	addlt	r0, r0, r3
 8015a0e:	4770      	bx	lr

08015a10 <_raise_r>:
 8015a10:	291f      	cmp	r1, #31
 8015a12:	b538      	push	{r3, r4, r5, lr}
 8015a14:	4604      	mov	r4, r0
 8015a16:	460d      	mov	r5, r1
 8015a18:	d904      	bls.n	8015a24 <_raise_r+0x14>
 8015a1a:	2316      	movs	r3, #22
 8015a1c:	6003      	str	r3, [r0, #0]
 8015a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8015a22:	bd38      	pop	{r3, r4, r5, pc}
 8015a24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015a26:	b112      	cbz	r2, 8015a2e <_raise_r+0x1e>
 8015a28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015a2c:	b94b      	cbnz	r3, 8015a42 <_raise_r+0x32>
 8015a2e:	4620      	mov	r0, r4
 8015a30:	f000 f830 	bl	8015a94 <_getpid_r>
 8015a34:	462a      	mov	r2, r5
 8015a36:	4601      	mov	r1, r0
 8015a38:	4620      	mov	r0, r4
 8015a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a3e:	f000 b817 	b.w	8015a70 <_kill_r>
 8015a42:	2b01      	cmp	r3, #1
 8015a44:	d00a      	beq.n	8015a5c <_raise_r+0x4c>
 8015a46:	1c59      	adds	r1, r3, #1
 8015a48:	d103      	bne.n	8015a52 <_raise_r+0x42>
 8015a4a:	2316      	movs	r3, #22
 8015a4c:	6003      	str	r3, [r0, #0]
 8015a4e:	2001      	movs	r0, #1
 8015a50:	e7e7      	b.n	8015a22 <_raise_r+0x12>
 8015a52:	2400      	movs	r4, #0
 8015a54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015a58:	4628      	mov	r0, r5
 8015a5a:	4798      	blx	r3
 8015a5c:	2000      	movs	r0, #0
 8015a5e:	e7e0      	b.n	8015a22 <_raise_r+0x12>

08015a60 <raise>:
 8015a60:	4b02      	ldr	r3, [pc, #8]	; (8015a6c <raise+0xc>)
 8015a62:	4601      	mov	r1, r0
 8015a64:	6818      	ldr	r0, [r3, #0]
 8015a66:	f7ff bfd3 	b.w	8015a10 <_raise_r>
 8015a6a:	bf00      	nop
 8015a6c:	240007a8 	.word	0x240007a8

08015a70 <_kill_r>:
 8015a70:	b538      	push	{r3, r4, r5, lr}
 8015a72:	4d07      	ldr	r5, [pc, #28]	; (8015a90 <_kill_r+0x20>)
 8015a74:	2300      	movs	r3, #0
 8015a76:	4604      	mov	r4, r0
 8015a78:	4608      	mov	r0, r1
 8015a7a:	4611      	mov	r1, r2
 8015a7c:	602b      	str	r3, [r5, #0]
 8015a7e:	f7ed fced 	bl	800345c <_kill>
 8015a82:	1c43      	adds	r3, r0, #1
 8015a84:	d102      	bne.n	8015a8c <_kill_r+0x1c>
 8015a86:	682b      	ldr	r3, [r5, #0]
 8015a88:	b103      	cbz	r3, 8015a8c <_kill_r+0x1c>
 8015a8a:	6023      	str	r3, [r4, #0]
 8015a8c:	bd38      	pop	{r3, r4, r5, pc}
 8015a8e:	bf00      	nop
 8015a90:	24006020 	.word	0x24006020

08015a94 <_getpid_r>:
 8015a94:	f7ed bcda 	b.w	800344c <_getpid>

08015a98 <__sread>:
 8015a98:	b510      	push	{r4, lr}
 8015a9a:	460c      	mov	r4, r1
 8015a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015aa0:	f000 f894 	bl	8015bcc <_read_r>
 8015aa4:	2800      	cmp	r0, #0
 8015aa6:	bfab      	itete	ge
 8015aa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8015aac:	181b      	addge	r3, r3, r0
 8015aae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015ab2:	bfac      	ite	ge
 8015ab4:	6563      	strge	r3, [r4, #84]	; 0x54
 8015ab6:	81a3      	strhlt	r3, [r4, #12]
 8015ab8:	bd10      	pop	{r4, pc}

08015aba <__swrite>:
 8015aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015abe:	461f      	mov	r7, r3
 8015ac0:	898b      	ldrh	r3, [r1, #12]
 8015ac2:	05db      	lsls	r3, r3, #23
 8015ac4:	4605      	mov	r5, r0
 8015ac6:	460c      	mov	r4, r1
 8015ac8:	4616      	mov	r6, r2
 8015aca:	d505      	bpl.n	8015ad8 <__swrite+0x1e>
 8015acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ad0:	2302      	movs	r3, #2
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	f000 f868 	bl	8015ba8 <_lseek_r>
 8015ad8:	89a3      	ldrh	r3, [r4, #12]
 8015ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015ae2:	81a3      	strh	r3, [r4, #12]
 8015ae4:	4632      	mov	r2, r6
 8015ae6:	463b      	mov	r3, r7
 8015ae8:	4628      	mov	r0, r5
 8015aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015aee:	f000 b817 	b.w	8015b20 <_write_r>

08015af2 <__sseek>:
 8015af2:	b510      	push	{r4, lr}
 8015af4:	460c      	mov	r4, r1
 8015af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015afa:	f000 f855 	bl	8015ba8 <_lseek_r>
 8015afe:	1c43      	adds	r3, r0, #1
 8015b00:	89a3      	ldrh	r3, [r4, #12]
 8015b02:	bf15      	itete	ne
 8015b04:	6560      	strne	r0, [r4, #84]	; 0x54
 8015b06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015b0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015b0e:	81a3      	strheq	r3, [r4, #12]
 8015b10:	bf18      	it	ne
 8015b12:	81a3      	strhne	r3, [r4, #12]
 8015b14:	bd10      	pop	{r4, pc}

08015b16 <__sclose>:
 8015b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b1a:	f000 b813 	b.w	8015b44 <_close_r>
	...

08015b20 <_write_r>:
 8015b20:	b538      	push	{r3, r4, r5, lr}
 8015b22:	4d07      	ldr	r5, [pc, #28]	; (8015b40 <_write_r+0x20>)
 8015b24:	4604      	mov	r4, r0
 8015b26:	4608      	mov	r0, r1
 8015b28:	4611      	mov	r1, r2
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	602a      	str	r2, [r5, #0]
 8015b2e:	461a      	mov	r2, r3
 8015b30:	f7ed fccb 	bl	80034ca <_write>
 8015b34:	1c43      	adds	r3, r0, #1
 8015b36:	d102      	bne.n	8015b3e <_write_r+0x1e>
 8015b38:	682b      	ldr	r3, [r5, #0]
 8015b3a:	b103      	cbz	r3, 8015b3e <_write_r+0x1e>
 8015b3c:	6023      	str	r3, [r4, #0]
 8015b3e:	bd38      	pop	{r3, r4, r5, pc}
 8015b40:	24006020 	.word	0x24006020

08015b44 <_close_r>:
 8015b44:	b538      	push	{r3, r4, r5, lr}
 8015b46:	4d06      	ldr	r5, [pc, #24]	; (8015b60 <_close_r+0x1c>)
 8015b48:	2300      	movs	r3, #0
 8015b4a:	4604      	mov	r4, r0
 8015b4c:	4608      	mov	r0, r1
 8015b4e:	602b      	str	r3, [r5, #0]
 8015b50:	f7ed fcd7 	bl	8003502 <_close>
 8015b54:	1c43      	adds	r3, r0, #1
 8015b56:	d102      	bne.n	8015b5e <_close_r+0x1a>
 8015b58:	682b      	ldr	r3, [r5, #0]
 8015b5a:	b103      	cbz	r3, 8015b5e <_close_r+0x1a>
 8015b5c:	6023      	str	r3, [r4, #0]
 8015b5e:	bd38      	pop	{r3, r4, r5, pc}
 8015b60:	24006020 	.word	0x24006020

08015b64 <_fstat_r>:
 8015b64:	b538      	push	{r3, r4, r5, lr}
 8015b66:	4d07      	ldr	r5, [pc, #28]	; (8015b84 <_fstat_r+0x20>)
 8015b68:	2300      	movs	r3, #0
 8015b6a:	4604      	mov	r4, r0
 8015b6c:	4608      	mov	r0, r1
 8015b6e:	4611      	mov	r1, r2
 8015b70:	602b      	str	r3, [r5, #0]
 8015b72:	f7ed fcd2 	bl	800351a <_fstat>
 8015b76:	1c43      	adds	r3, r0, #1
 8015b78:	d102      	bne.n	8015b80 <_fstat_r+0x1c>
 8015b7a:	682b      	ldr	r3, [r5, #0]
 8015b7c:	b103      	cbz	r3, 8015b80 <_fstat_r+0x1c>
 8015b7e:	6023      	str	r3, [r4, #0]
 8015b80:	bd38      	pop	{r3, r4, r5, pc}
 8015b82:	bf00      	nop
 8015b84:	24006020 	.word	0x24006020

08015b88 <_isatty_r>:
 8015b88:	b538      	push	{r3, r4, r5, lr}
 8015b8a:	4d06      	ldr	r5, [pc, #24]	; (8015ba4 <_isatty_r+0x1c>)
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	4604      	mov	r4, r0
 8015b90:	4608      	mov	r0, r1
 8015b92:	602b      	str	r3, [r5, #0]
 8015b94:	f7ed fcd1 	bl	800353a <_isatty>
 8015b98:	1c43      	adds	r3, r0, #1
 8015b9a:	d102      	bne.n	8015ba2 <_isatty_r+0x1a>
 8015b9c:	682b      	ldr	r3, [r5, #0]
 8015b9e:	b103      	cbz	r3, 8015ba2 <_isatty_r+0x1a>
 8015ba0:	6023      	str	r3, [r4, #0]
 8015ba2:	bd38      	pop	{r3, r4, r5, pc}
 8015ba4:	24006020 	.word	0x24006020

08015ba8 <_lseek_r>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	4d07      	ldr	r5, [pc, #28]	; (8015bc8 <_lseek_r+0x20>)
 8015bac:	4604      	mov	r4, r0
 8015bae:	4608      	mov	r0, r1
 8015bb0:	4611      	mov	r1, r2
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	602a      	str	r2, [r5, #0]
 8015bb6:	461a      	mov	r2, r3
 8015bb8:	f7ed fcca 	bl	8003550 <_lseek>
 8015bbc:	1c43      	adds	r3, r0, #1
 8015bbe:	d102      	bne.n	8015bc6 <_lseek_r+0x1e>
 8015bc0:	682b      	ldr	r3, [r5, #0]
 8015bc2:	b103      	cbz	r3, 8015bc6 <_lseek_r+0x1e>
 8015bc4:	6023      	str	r3, [r4, #0]
 8015bc6:	bd38      	pop	{r3, r4, r5, pc}
 8015bc8:	24006020 	.word	0x24006020

08015bcc <_read_r>:
 8015bcc:	b538      	push	{r3, r4, r5, lr}
 8015bce:	4d07      	ldr	r5, [pc, #28]	; (8015bec <_read_r+0x20>)
 8015bd0:	4604      	mov	r4, r0
 8015bd2:	4608      	mov	r0, r1
 8015bd4:	4611      	mov	r1, r2
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	602a      	str	r2, [r5, #0]
 8015bda:	461a      	mov	r2, r3
 8015bdc:	f7ed fc58 	bl	8003490 <_read>
 8015be0:	1c43      	adds	r3, r0, #1
 8015be2:	d102      	bne.n	8015bea <_read_r+0x1e>
 8015be4:	682b      	ldr	r3, [r5, #0]
 8015be6:	b103      	cbz	r3, 8015bea <_read_r+0x1e>
 8015be8:	6023      	str	r3, [r4, #0]
 8015bea:	bd38      	pop	{r3, r4, r5, pc}
 8015bec:	24006020 	.word	0x24006020

08015bf0 <_init>:
 8015bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bf2:	bf00      	nop
 8015bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015bf6:	bc08      	pop	{r3}
 8015bf8:	469e      	mov	lr, r3
 8015bfa:	4770      	bx	lr

08015bfc <_fini>:
 8015bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bfe:	bf00      	nop
 8015c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c02:	bc08      	pop	{r3}
 8015c04:	469e      	mov	lr, r3
 8015c06:	4770      	bx	lr
